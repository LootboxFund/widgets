(function (React) {
            'use strict';

            function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

            var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

            var global$2 = (typeof global$1 !== "undefined" ? global$1 :
                        typeof self !== "undefined" ? self :
                        typeof window !== "undefined" ? window : {});

            var global$1 = (typeof global$2 !== "undefined" ? global$2 :
              typeof self !== "undefined" ? self :
              typeof window !== "undefined" ? window : {});

            // shim for using process in browser
            // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

            function defaultSetTimout() {
                throw new Error('setTimeout has not been defined');
            }
            function defaultClearTimeout () {
                throw new Error('clearTimeout has not been defined');
            }
            var cachedSetTimeout = defaultSetTimout;
            var cachedClearTimeout = defaultClearTimeout;
            if (typeof global$1.setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
            }
            if (typeof global$1.clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
            }

            function runTimeout(fun) {
                if (cachedSetTimeout === setTimeout) {
                    //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                }
                // if setTimeout wasn't available but was latter defined
                if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                    cachedSetTimeout = setTimeout;
                    return setTimeout(fun, 0);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedSetTimeout(fun, 0);
                } catch(e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                        return cachedSetTimeout.call(null, fun, 0);
                    } catch(e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                        return cachedSetTimeout.call(this, fun, 0);
                    }
                }


            }
            function runClearTimeout(marker) {
                if (cachedClearTimeout === clearTimeout) {
                    //normal enviroments in sane situations
                    return clearTimeout(marker);
                }
                // if clearTimeout wasn't available but was latter defined
                if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                    cachedClearTimeout = clearTimeout;
                    return clearTimeout(marker);
                }
                try {
                    // when when somebody has screwed with setTimeout but no I.E. maddness
                    return cachedClearTimeout(marker);
                } catch (e){
                    try {
                        // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                        return cachedClearTimeout.call(null, marker);
                    } catch (e){
                        // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                        // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                        return cachedClearTimeout.call(this, marker);
                    }
                }



            }
            var queue = [];
            var draining = false;
            var currentQueue;
            var queueIndex = -1;

            function cleanUpNextTick() {
                if (!draining || !currentQueue) {
                    return;
                }
                draining = false;
                if (currentQueue.length) {
                    queue = currentQueue.concat(queue);
                } else {
                    queueIndex = -1;
                }
                if (queue.length) {
                    drainQueue();
                }
            }

            function drainQueue() {
                if (draining) {
                    return;
                }
                var timeout = runTimeout(cleanUpNextTick);
                draining = true;

                var len = queue.length;
                while(len) {
                    currentQueue = queue;
                    queue = [];
                    while (++queueIndex < len) {
                        if (currentQueue) {
                            currentQueue[queueIndex].run();
                        }
                    }
                    queueIndex = -1;
                    len = queue.length;
                }
                currentQueue = null;
                draining = false;
                runClearTimeout(timeout);
            }
            function nextTick(fun) {
                var args = new Array(arguments.length - 1);
                if (arguments.length > 1) {
                    for (var i = 1; i < arguments.length; i++) {
                        args[i - 1] = arguments[i];
                    }
                }
                queue.push(new Item(fun, args));
                if (queue.length === 1 && !draining) {
                    runTimeout(drainQueue);
                }
            }
            // v8 likes predictible objects
            function Item(fun, array) {
                this.fun = fun;
                this.array = array;
            }
            Item.prototype.run = function () {
                this.fun.apply(null, this.array);
            };
            var title$2 = 'browser';
            var platform = 'browser';
            var browser = true;
            var env = {};
            var argv = [];
            var version$q = ''; // empty string to avoid regexp issues
            var versions = {};
            var release = {};
            var config$8 = {};

            function noop$1() {}

            var on$1 = noop$1;
            var addListener = noop$1;
            var once = noop$1;
            var off = noop$1;
            var removeListener = noop$1;
            var removeAllListeners = noop$1;
            var emit = noop$1;

            function binding(name) {
                throw new Error('process.binding is not supported');
            }

            function cwd () { return '/' }
            function chdir (dir) {
                throw new Error('process.chdir is not supported');
            }function umask() { return 0; }

            // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
            var performance$1 = global$1.performance || {};
            var performanceNow =
              performance$1.now        ||
              performance$1.mozNow     ||
              performance$1.msNow      ||
              performance$1.oNow       ||
              performance$1.webkitNow  ||
              function(){ return (new Date()).getTime() };

            // generate timestamp or delta
            // see http://nodejs.org/api/process.html#process_process_hrtime
            function hrtime(previousTimestamp){
              var clocktime = performanceNow.call(performance$1)*1e-3;
              var seconds = Math.floor(clocktime);
              var nanoseconds = Math.floor((clocktime%1)*1e9);
              if (previousTimestamp) {
                seconds = seconds - previousTimestamp[0];
                nanoseconds = nanoseconds - previousTimestamp[1];
                if (nanoseconds<0) {
                  seconds--;
                  nanoseconds += 1e9;
                }
              }
              return [seconds,nanoseconds]
            }

            var startTime = new Date();
            function uptime() {
              var currentTime = new Date();
              var dif = currentTime - startTime;
              return dif / 1000;
            }

            var browser$1 = {
              nextTick: nextTick,
              title: title$2,
              browser: browser,
              env: env,
              argv: argv,
              version: version$q,
              versions: versions,
              on: on$1,
              addListener: addListener,
              once: once,
              off: off,
              removeListener: removeListener,
              removeAllListeners: removeAllListeners,
              emit: emit,
              binding: binding,
              cwd: cwd,
              chdir: chdir,
              umask: umask,
              hrtime: hrtime,
              platform: platform,
              release: release,
              config: config$8,
              uptime: uptime
            };

            var process = browser$1;

            var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

            function getAugmentedNamespace(n) {
            	if (n.__esModule) return n;
            	var a = Object.defineProperty({}, '__esModule', {value: true});
            	Object.keys(n).forEach(function (k) {
            		var d = Object.getOwnPropertyDescriptor(n, k);
            		Object.defineProperty(a, k, d.get ? d : {
            			enumerable: true,
            			get: function () {
            				return n[k];
            			}
            		});
            	});
            	return a;
            }

            var jsxRuntime = {exports: {}};

            var reactJsxRuntime_production_min = {};

            /*
            object-assign
            (c) Sindre Sorhus
            @license MIT
            */
            /* eslint-disable no-unused-vars */
            var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var propIsEnumerable = Object.prototype.propertyIsEnumerable;

            function toObject(val) {
            	if (val === null || val === undefined) {
            		throw new TypeError('Object.assign cannot be called with null or undefined');
            	}

            	return Object(val);
            }

            function shouldUseNative() {
            	try {
            		if (!Object.assign) {
            			return false;
            		}

            		// Detect buggy property enumeration order in older V8 versions.

            		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
            		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
            		test1[5] = 'de';
            		if (Object.getOwnPropertyNames(test1)[0] === '5') {
            			return false;
            		}

            		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
            		var test2 = {};
            		for (var i = 0; i < 10; i++) {
            			test2['_' + String.fromCharCode(i)] = i;
            		}
            		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
            			return test2[n];
            		});
            		if (order2.join('') !== '0123456789') {
            			return false;
            		}

            		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
            		var test3 = {};
            		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
            			test3[letter] = letter;
            		});
            		if (Object.keys(Object.assign({}, test3)).join('') !==
            				'abcdefghijklmnopqrst') {
            			return false;
            		}

            		return true;
            	} catch (err) {
            		// We don't expect any of the above to throw, but better to be safe.
            		return false;
            	}
            }

            var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
            	var from;
            	var to = toObject(target);
            	var symbols;

            	for (var s = 1; s < arguments.length; s++) {
            		from = Object(arguments[s]);

            		for (var key in from) {
            			if (hasOwnProperty.call(from, key)) {
            				to[key] = from[key];
            			}
            		}

            		if (getOwnPropertySymbols$1) {
            			symbols = getOwnPropertySymbols$1(from);
            			for (var i = 0; i < symbols.length; i++) {
            				if (propIsEnumerable.call(from, symbols[i])) {
            					to[symbols[i]] = from[symbols[i]];
            				}
            			}
            		}
            	}

            	return to;
            };

            /** @license React v17.0.2
             * react-jsx-runtime.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var f$6=React__default['default'],g$6=60103;reactJsxRuntime_production_min.Fragment=60107;if("function"===typeof Symbol&&Symbol.for){var h$7=Symbol.for;g$6=h$7("react.element");reactJsxRuntime_production_min.Fragment=h$7("react.fragment");}var m$6=f$6.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,n$6=Object.prototype.hasOwnProperty,p$7={key:!0,ref:!0,__self:!0,__source:!0};
            function q$7(c,a,k){var b,d={},e=null,l=null;void 0!==k&&(e=""+k);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(l=a.ref);for(b in a)n$6.call(a,b)&&!p$7.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:g$6,type:c,key:e,ref:l,props:d,_owner:m$6.current}}reactJsxRuntime_production_min.jsx=q$7;reactJsxRuntime_production_min.jsxs=q$7;

            {
              jsxRuntime.exports = reactJsxRuntime_production_min;
            }

            function SvgCheck(props) {
                return (jsxRuntime.exports.jsxs("svg", Object.assign({ viewBox: "0 0 20 20", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props, { children: [jsxRuntime.exports.jsx("circle", { cx: 10, cy: 10, r: 10 }, void 0), jsxRuntime.exports.jsx("path", { d: "M14 7l-5.5 5.5L6 10", stroke: "#fff", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round" }, void 0)] }), void 0));
            }

            function SvgExpando(props) {
                return (jsxRuntime.exports.jsxs("svg", Object.assign({ viewBox: "0 0 24 24", fill: "none", strokeWidth: 2, strokeLinecap: "round", xmlns: "http://www.w3.org/2000/svg" }, props, { children: [jsxRuntime.exports.jsx("path", { className: "expando_svg__left", d: "M18 15l-6-6" }, void 0), jsxRuntime.exports.jsx("path", { className: "expando_svg__right", d: "M12 9l-6 6" }, void 0)] }), void 0));
            }

            function SvgLogo(props) {
                return (jsxRuntime.exports.jsxs("svg", Object.assign({ viewBox: "0 0 14 15", xmlns: "http://www.w3.org/2000/svg" }, props, { children: [jsxRuntime.exports.jsx("path", { d: "M4.152 1.551c-.188-.029-.196-.032-.107-.045.17-.026.57.009.846.074.644.152 1.23.542 1.856 1.235l.166.184.238-.038c1.002-.16 2.02-.033 2.873.358.235.108.605.322.65.377.016.018.043.13.06.251.064.418.033.737-.096.976-.07.13-.074.171-.027.283a.274.274 0 00.246.154c.212 0 .44-.34.545-.814l.042-.189.083.094c.457.514.815 1.214.876 1.712l.016.13-.076-.118a1.462 1.462 0 00-.435-.453c-.306-.201-.63-.27-1.486-.315-.774-.04-1.212-.106-1.646-.247-.739-.24-1.111-.558-1.989-1.702-.39-.509-.63-.79-.87-1.016-.545-.515-1.08-.785-1.765-.89z" }, void 0), jsxRuntime.exports.jsx("path", { d: "M10.85 2.686c.019-.34.065-.565.159-.77a.825.825 0 01.077-.148c.005 0-.011.06-.036.133-.068.2-.08.472-.032.789.06.402.093.46.52.894.201.204.434.46.519.571l.154.2-.154-.143c-.188-.175-.62-.517-.716-.566-.064-.032-.074-.032-.113.007-.037.036-.044.09-.05.346-.007.399-.062.655-.194.91-.071.14-.082.11-.018-.047.048-.116.053-.168.053-.554 0-.775-.094-.962-.637-1.28a5.971 5.971 0 00-.504-.26 1.912 1.912 0 01-.246-.12c.015-.015.545.139.758.22.318.122.37.137.409.123.025-.01.038-.085.05-.305zM4.517 4.013c-.381-.522-.618-1.323-.566-1.922l.015-.185.087.015c.164.03.445.134.577.214.361.218.518.505.677 1.243.047.216.108.46.136.544.045.133.217.444.356.646.1.146.034.215-.188.195-.339-.03-.798-.345-1.094-.75zM10.386 7.9c-1.784-.713-2.412-1.333-2.412-2.378 0-.154.005-.28.012-.28.006 0 .075.05.153.113.362.288.767.411 1.889.574.66.096 1.03.173 1.373.286 1.09.359 1.763 1.087 1.924 2.08.046.288.02.828-.057 1.113-.06.225-.242.63-.29.646-.014.005-.027-.046-.03-.116-.018-.372-.208-.735-.526-1.007-.362-.309-.848-.555-2.036-1.03zM9.134 8.197a3.133 3.133 0 00-.086-.375l-.046-.135.085.095c.117.13.21.297.288.52.06.17.066.22.066.496 0 .271-.008.328-.064.48a1.518 1.518 0 01-.376.596c-.326.33-.745.512-1.35.588-.105.013-.411.035-.68.049-.679.035-1.126.108-1.527.248a.324.324 0 01-.115.027c-.016-.016.258-.178.483-.286.318-.153.635-.236 1.345-.353.35-.058.713-.129.805-.157.868-.264 1.315-.947 1.172-1.793z" }, void 0), jsxRuntime.exports.jsx("path", { d: "M9.952 9.641c-.237-.506-.292-.995-.162-1.451.014-.05.036-.089.05-.089.013 0 .07.03.124.067.11.073.328.196.912.512.728.395 1.144.7 1.426 1.05.247.305.4.654.474 1.078.042.24.017.82-.045 1.062-.196.764-.65 1.364-1.3 1.714-.095.051-.18.093-.19.093-.009 0 .026-.087.077-.194.219-.454.244-.895.079-1.386-.102-.301-.308-.668-.724-1.289-.484-.72-.602-.913-.721-1.167zM3.25 12.374c.663-.556 1.486-.95 2.237-1.072a3.51 3.51 0 011.161.045c.48.122.91.396 1.133.721.218.319.312.596.41 1.214.038.243.08.488.092.543.073.32.216.576.392.704.28.204.764.217 1.239.033a.618.618 0 01.155-.048c.017.017-.222.176-.39.26a1.334 1.334 0 01-.648.156c-.435 0-.796-.22-1.098-.668a5.3 5.3 0 01-.296-.588c-.318-.721-.475-.94-.844-1.181-.322-.21-.737-.247-1.049-.095-.41.2-.524.72-.23 1.05a.911.911 0 00.512.266.545.545 0 00.619-.544c0-.217-.084-.34-.295-.436-.289-.129-.598.022-.597.291 0 .115.051.187.167.24.074.033.076.035.015.023-.264-.055-.326-.372-.114-.582.256-.252.784-.141.965.204.076.145.085.433.019.607-.15.39-.582.595-1.022.483-.3-.076-.421-.158-.782-.527-.627-.642-.87-.767-1.774-.907l-.174-.027.197-.165z" }, void 0), jsxRuntime.exports.jsx("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M.308.884C2.402 3.41 3.845 4.452 4.005 4.672c.132.182.082.346-.144.474a1.381 1.381 0 01-.515.143c-.147 0-.198-.056-.198-.056-.085-.08-.133-.066-.57-.837A132.96 132.96 0 001.45 2.67c-.032-.03-.031-.03 1.067 1.923.177.407.035.556.035.614 0 .118-.033.18-.179.343-.244.27-.353.574-.432 1.203-.088.705-.336 1.203-1.024 2.056-.402.499-.468.59-.57.792-.128.253-.163.395-.177.714-.015.339.014.557.118.88.09.284.186.47.429.844.21.323.33.563.33.657 0 .074.014.074.34.001.776-.174 1.407-.48 1.762-.857.22-.233.271-.361.273-.68.001-.208-.006-.252-.063-.372-.092-.195-.26-.358-.63-.61-.486-.33-.694-.595-.75-.96-.048-.3.007-.511.275-1.07.278-.58.347-.827.394-1.41.03-.377.071-.526.18-.646.114-.124.216-.166.498-.204.459-.063.75-.18.99-.4a.853.853 0 00.31-.652l.01-.21-.117-.134C4.098 4.004.026.5 0 .5-.005.5.133.673.308.884zm.976 9.815a.37.37 0 00-.115-.489c-.15-.1-.385-.052-.385.077 0 .04.022.069.072.094.084.043.09.091.024.19-.067.099-.061.186.015.246.123.095.297.043.389-.118zM4.925 5.999c-.215.065-.424.292-.49.53-.039.145-.016.4.043.478.096.127.188.16.439.159.49-.003.916-.212.966-.474.04-.214-.147-.51-.405-.641a.965.965 0 00-.553-.052zm.574.445c.075-.107.042-.222-.087-.3-.244-.149-.615-.026-.615.204 0 .115.193.24.37.24.118 0 .28-.07.332-.144z" }, void 0)] }), void 0));
            }

            function SvgSpinner(props) {
                return (jsxRuntime.exports.jsxs("svg", Object.assign({ viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, props, { children: [jsxRuntime.exports.jsxs("mask", Object.assign({ id: "spinner_svg__a" }, { children: [jsxRuntime.exports.jsx("path", { fill: "#fff", strokeWidth: 0, d: "M0 0h24v24H0z" }, void 0), jsxRuntime.exports.jsx("path", { fill: "#000", strokeWidth: 0, d: "M0 0h12v12H0z" }, void 0), jsxRuntime.exports.jsx("circle", { cx: 2, cy: 12, r: 1, fill: "#fff", strokeWidth: 0 }, void 0), jsxRuntime.exports.jsx("circle", { cx: 12, cy: 2, r: 1, fill: "#fff", strokeWidth: 0 }, void 0)] }), void 0), jsxRuntime.exports.jsx("circle", { cx: 12, cy: 12, r: 10, mask: "url(#spinner_svg__a)" }, void 0)] }), void 0));
            }

            function _extends$g() {
              _extends$g = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];

                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }

                return target;
              };

              return _extends$g.apply(this, arguments);
            }

            function _assertThisInitialized$1(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }

              return self;
            }

            function _setPrototypeOf$2(o, p) {
              _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

              return _setPrototypeOf$2(o, p);
            }

            function _inheritsLoose$1(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;
              _setPrototypeOf$2(subClass, superClass);
            }

            function _getPrototypeOf$2(o) {
              _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
              return _getPrototypeOf$2(o);
            }

            function _isNativeFunction$1(fn) {
              return Function.toString.call(fn).indexOf("[native code]") !== -1;
            }

            function _isNativeReflectConstruct$1() {
              if (typeof Reflect === "undefined" || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if (typeof Proxy === "function") return true;

              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                return true;
              } catch (e) {
                return false;
              }
            }

            function _construct$1(Parent, args, Class) {
              if (_isNativeReflectConstruct$1()) {
                _construct$1 = Reflect.construct;
              } else {
                _construct$1 = function _construct(Parent, args, Class) {
                  var a = [null];
                  a.push.apply(a, args);
                  var Constructor = Function.bind.apply(Parent, a);
                  var instance = new Constructor();
                  if (Class) _setPrototypeOf$2(instance, Class.prototype);
                  return instance;
                };
              }

              return _construct$1.apply(null, arguments);
            }

            function _wrapNativeSuper$1(Class) {
              var _cache = typeof Map === "function" ? new Map() : undefined;

              _wrapNativeSuper$1 = function _wrapNativeSuper(Class) {
                if (Class === null || !_isNativeFunction$1(Class)) return Class;

                if (typeof Class !== "function") {
                  throw new TypeError("Super expression must either be null or a function");
                }

                if (typeof _cache !== "undefined") {
                  if (_cache.has(Class)) return _cache.get(Class);

                  _cache.set(Class, Wrapper);
                }

                function Wrapper() {
                  return _construct$1(Class, arguments, _getPrototypeOf$2(this).constructor);
                }

                Wrapper.prototype = Object.create(Class.prototype, {
                  constructor: {
                    value: Wrapper,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
                return _setPrototypeOf$2(Wrapper, Class);
              };

              return _wrapNativeSuper$1(Class);
            }

            /**
             * Create an error file out of errors.md for development and a simple web link to the full errors
             * in production mode.
             * @private
             */


            var PolishedError = /*#__PURE__*/function (_Error) {
              _inheritsLoose$1(PolishedError, _Error);

              function PolishedError(code) {
                var _this;

                {
                  _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code + " for more information.") || this;
                }

                return _assertThisInitialized$1(_this);
              }

              return PolishedError;
            }( /*#__PURE__*/_wrapNativeSuper$1(Error));

            function colorToInt(color) {
              return Math.round(color * 255);
            }

            function convertToInt(red, green, blue) {
              return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
            }

            function hslToRgb(hue, saturation, lightness, convert) {
              if (convert === void 0) {
                convert = convertToInt;
              }

              if (saturation === 0) {
                // achromatic
                return convert(lightness, lightness, lightness);
              } // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV


              var huePrime = (hue % 360 + 360) % 360 / 60;
              var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation;
              var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
              var red = 0;
              var green = 0;
              var blue = 0;

              if (huePrime >= 0 && huePrime < 1) {
                red = chroma;
                green = secondComponent;
              } else if (huePrime >= 1 && huePrime < 2) {
                red = secondComponent;
                green = chroma;
              } else if (huePrime >= 2 && huePrime < 3) {
                green = chroma;
                blue = secondComponent;
              } else if (huePrime >= 3 && huePrime < 4) {
                green = secondComponent;
                blue = chroma;
              } else if (huePrime >= 4 && huePrime < 5) {
                red = secondComponent;
                blue = chroma;
              } else if (huePrime >= 5 && huePrime < 6) {
                red = chroma;
                blue = secondComponent;
              }

              var lightnessModification = lightness - chroma / 2;
              var finalRed = red + lightnessModification;
              var finalGreen = green + lightnessModification;
              var finalBlue = blue + lightnessModification;
              return convert(finalRed, finalGreen, finalBlue);
            }

            var namedColorMap = {
              aliceblue: 'f0f8ff',
              antiquewhite: 'faebd7',
              aqua: '00ffff',
              aquamarine: '7fffd4',
              azure: 'f0ffff',
              beige: 'f5f5dc',
              bisque: 'ffe4c4',
              black: '000',
              blanchedalmond: 'ffebcd',
              blue: '0000ff',
              blueviolet: '8a2be2',
              brown: 'a52a2a',
              burlywood: 'deb887',
              cadetblue: '5f9ea0',
              chartreuse: '7fff00',
              chocolate: 'd2691e',
              coral: 'ff7f50',
              cornflowerblue: '6495ed',
              cornsilk: 'fff8dc',
              crimson: 'dc143c',
              cyan: '00ffff',
              darkblue: '00008b',
              darkcyan: '008b8b',
              darkgoldenrod: 'b8860b',
              darkgray: 'a9a9a9',
              darkgreen: '006400',
              darkgrey: 'a9a9a9',
              darkkhaki: 'bdb76b',
              darkmagenta: '8b008b',
              darkolivegreen: '556b2f',
              darkorange: 'ff8c00',
              darkorchid: '9932cc',
              darkred: '8b0000',
              darksalmon: 'e9967a',
              darkseagreen: '8fbc8f',
              darkslateblue: '483d8b',
              darkslategray: '2f4f4f',
              darkslategrey: '2f4f4f',
              darkturquoise: '00ced1',
              darkviolet: '9400d3',
              deeppink: 'ff1493',
              deepskyblue: '00bfff',
              dimgray: '696969',
              dimgrey: '696969',
              dodgerblue: '1e90ff',
              firebrick: 'b22222',
              floralwhite: 'fffaf0',
              forestgreen: '228b22',
              fuchsia: 'ff00ff',
              gainsboro: 'dcdcdc',
              ghostwhite: 'f8f8ff',
              gold: 'ffd700',
              goldenrod: 'daa520',
              gray: '808080',
              green: '008000',
              greenyellow: 'adff2f',
              grey: '808080',
              honeydew: 'f0fff0',
              hotpink: 'ff69b4',
              indianred: 'cd5c5c',
              indigo: '4b0082',
              ivory: 'fffff0',
              khaki: 'f0e68c',
              lavender: 'e6e6fa',
              lavenderblush: 'fff0f5',
              lawngreen: '7cfc00',
              lemonchiffon: 'fffacd',
              lightblue: 'add8e6',
              lightcoral: 'f08080',
              lightcyan: 'e0ffff',
              lightgoldenrodyellow: 'fafad2',
              lightgray: 'd3d3d3',
              lightgreen: '90ee90',
              lightgrey: 'd3d3d3',
              lightpink: 'ffb6c1',
              lightsalmon: 'ffa07a',
              lightseagreen: '20b2aa',
              lightskyblue: '87cefa',
              lightslategray: '789',
              lightslategrey: '789',
              lightsteelblue: 'b0c4de',
              lightyellow: 'ffffe0',
              lime: '0f0',
              limegreen: '32cd32',
              linen: 'faf0e6',
              magenta: 'f0f',
              maroon: '800000',
              mediumaquamarine: '66cdaa',
              mediumblue: '0000cd',
              mediumorchid: 'ba55d3',
              mediumpurple: '9370db',
              mediumseagreen: '3cb371',
              mediumslateblue: '7b68ee',
              mediumspringgreen: '00fa9a',
              mediumturquoise: '48d1cc',
              mediumvioletred: 'c71585',
              midnightblue: '191970',
              mintcream: 'f5fffa',
              mistyrose: 'ffe4e1',
              moccasin: 'ffe4b5',
              navajowhite: 'ffdead',
              navy: '000080',
              oldlace: 'fdf5e6',
              olive: '808000',
              olivedrab: '6b8e23',
              orange: 'ffa500',
              orangered: 'ff4500',
              orchid: 'da70d6',
              palegoldenrod: 'eee8aa',
              palegreen: '98fb98',
              paleturquoise: 'afeeee',
              palevioletred: 'db7093',
              papayawhip: 'ffefd5',
              peachpuff: 'ffdab9',
              peru: 'cd853f',
              pink: 'ffc0cb',
              plum: 'dda0dd',
              powderblue: 'b0e0e6',
              purple: '800080',
              rebeccapurple: '639',
              red: 'f00',
              rosybrown: 'bc8f8f',
              royalblue: '4169e1',
              saddlebrown: '8b4513',
              salmon: 'fa8072',
              sandybrown: 'f4a460',
              seagreen: '2e8b57',
              seashell: 'fff5ee',
              sienna: 'a0522d',
              silver: 'c0c0c0',
              skyblue: '87ceeb',
              slateblue: '6a5acd',
              slategray: '708090',
              slategrey: '708090',
              snow: 'fffafa',
              springgreen: '00ff7f',
              steelblue: '4682b4',
              tan: 'd2b48c',
              teal: '008080',
              thistle: 'd8bfd8',
              tomato: 'ff6347',
              turquoise: '40e0d0',
              violet: 'ee82ee',
              wheat: 'f5deb3',
              white: 'fff',
              whitesmoke: 'f5f5f5',
              yellow: 'ff0',
              yellowgreen: '9acd32'
            };
            /**
             * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
             * @private
             */

            function nameToHex(color) {
              if (typeof color !== 'string') return color;
              var normalizedColorName = color.toLowerCase();
              return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color;
            }

            var hexRegex = /^#[a-fA-F0-9]{6}$/;
            var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
            var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
            var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
            var rgbRegex = /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/i;
            var rgbaRegex = /^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
            var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
            var hslaRegex = /^hsla\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*(\d{1,3}[.]?[0-9]?)%\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/i;
            /**
             * Returns an RgbColor or RgbaColor object. This utility function is only useful
             * if want to extract a color component. With the color util `toColorString` you
             * can convert a RgbColor or RgbaColor object back to a string.
             *
             * @example
             * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1
             * const color1 = parseToRgb('rgb(255, 0, 0)');
             * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2
             * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');
             */

            function parseToRgb(color) {
              if (typeof color !== 'string') {
                throw new PolishedError(3);
              }

              var normalizedColor = nameToHex(color);

              if (normalizedColor.match(hexRegex)) {
                return {
                  red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
                  green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
                  blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
                };
              }

              if (normalizedColor.match(hexRgbaRegex)) {
                var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
                return {
                  red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
                  green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
                  blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
                  alpha: alpha
                };
              }

              if (normalizedColor.match(reducedHexRegex)) {
                return {
                  red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
                  green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
                  blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
                };
              }

              if (normalizedColor.match(reducedRgbaHexRegex)) {
                var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));

                return {
                  red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
                  green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
                  blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
                  alpha: _alpha
                };
              }

              var rgbMatched = rgbRegex.exec(normalizedColor);

              if (rgbMatched) {
                return {
                  red: parseInt("" + rgbMatched[1], 10),
                  green: parseInt("" + rgbMatched[2], 10),
                  blue: parseInt("" + rgbMatched[3], 10)
                };
              }

              var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));

              if (rgbaMatched) {
                return {
                  red: parseInt("" + rgbaMatched[1], 10),
                  green: parseInt("" + rgbaMatched[2], 10),
                  blue: parseInt("" + rgbaMatched[3], 10),
                  alpha: parseFloat("" + rgbaMatched[4])
                };
              }

              var hslMatched = hslRegex.exec(normalizedColor);

              if (hslMatched) {
                var hue = parseInt("" + hslMatched[1], 10);
                var saturation = parseInt("" + hslMatched[2], 10) / 100;
                var lightness = parseInt("" + hslMatched[3], 10) / 100;
                var rgbColorString = "rgb(" + hslToRgb(hue, saturation, lightness) + ")";
                var hslRgbMatched = rgbRegex.exec(rgbColorString);

                if (!hslRgbMatched) {
                  throw new PolishedError(4, normalizedColor, rgbColorString);
                }

                return {
                  red: parseInt("" + hslRgbMatched[1], 10),
                  green: parseInt("" + hslRgbMatched[2], 10),
                  blue: parseInt("" + hslRgbMatched[3], 10)
                };
              }

              var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));

              if (hslaMatched) {
                var _hue = parseInt("" + hslaMatched[1], 10);

                var _saturation = parseInt("" + hslaMatched[2], 10) / 100;

                var _lightness = parseInt("" + hslaMatched[3], 10) / 100;

                var _rgbColorString = "rgb(" + hslToRgb(_hue, _saturation, _lightness) + ")";

                var _hslRgbMatched = rgbRegex.exec(_rgbColorString);

                if (!_hslRgbMatched) {
                  throw new PolishedError(4, normalizedColor, _rgbColorString);
                }

                return {
                  red: parseInt("" + _hslRgbMatched[1], 10),
                  green: parseInt("" + _hslRgbMatched[2], 10),
                  blue: parseInt("" + _hslRgbMatched[3], 10),
                  alpha: parseFloat("" + hslaMatched[4])
                };
              }

              throw new PolishedError(5);
            }

            /**
             * Reduces hex values if possible e.g. #ff8866 to #f86
             * @private
             */
            var reduceHexValue = function reduceHexValue(value) {
              if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
                return "#" + value[1] + value[3] + value[5];
              }

              return value;
            };

            function numberToHex(value) {
              var hex = value.toString(16);
              return hex.length === 1 ? "0" + hex : hex;
            }

            /**
             * Returns a string value for the color. The returned result is the smallest possible hex notation.
             *
             * @example
             * // Styles as object usage
             * const styles = {
             *   background: rgb(255, 205, 100),
             *   background: rgb({ red: 255, green: 205, blue: 100 }),
             * }
             *
             * // styled-components usage
             * const div = styled.div`
             *   background: ${rgb(255, 205, 100)};
             *   background: ${rgb({ red: 255, green: 205, blue: 100 })};
             * `
             *
             * // CSS in JS Output
             *
             * element {
             *   background: "#ffcd64";
             *   background: "#ffcd64";
             * }
             */
            function rgb(value, green, blue) {
              if (typeof value === 'number' && typeof green === 'number' && typeof blue === 'number') {
                return reduceHexValue("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
              } else if (typeof value === 'object' && green === undefined && blue === undefined) {
                return reduceHexValue("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
              }

              throw new PolishedError(6);
            }

            /**
             * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
             *
             * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.
             *
             * @example
             * // Styles as object usage
             * const styles = {
             *   background: rgba(255, 205, 100, 0.7),
             *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),
             *   background: rgba(255, 205, 100, 1),
             *   background: rgba('#ffffff', 0.4),
             *   background: rgba('black', 0.7),
             * }
             *
             * // styled-components usage
             * const div = styled.div`
             *   background: ${rgba(255, 205, 100, 0.7)};
             *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};
             *   background: ${rgba(255, 205, 100, 1)};
             *   background: ${rgba('#ffffff', 0.4)};
             *   background: ${rgba('black', 0.7)};
             * `
             *
             * // CSS in JS Output
             *
             * element {
             *   background: "rgba(255,205,100,0.7)";
             *   background: "rgba(255,205,100,0.7)";
             *   background: "#ffcd64";
             *   background: "rgba(255,255,255,0.4)";
             *   background: "rgba(0,0,0,0.7)";
             * }
             */
            function rgba(firstValue, secondValue, thirdValue, fourthValue) {
              if (typeof firstValue === 'string' && typeof secondValue === 'number') {
                var rgbValue = parseToRgb(firstValue);
                return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
              } else if (typeof firstValue === 'number' && typeof secondValue === 'number' && typeof thirdValue === 'number' && typeof fourthValue === 'number') {
                return fourthValue >= 1 ? rgb(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
              } else if (typeof firstValue === 'object' && secondValue === undefined && thirdValue === undefined && fourthValue === undefined) {
                return firstValue.alpha >= 1 ? rgb(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
              }

              throw new PolishedError(7);
            }

            // Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js
            // eslint-disable-next-line no-unused-vars
            // eslint-disable-next-line no-unused-vars
            // eslint-disable-next-line no-redeclare
            function curried(f, length, acc) {
              return function fn() {
                // eslint-disable-next-line prefer-rest-params
                var combined = acc.concat(Array.prototype.slice.call(arguments));
                return combined.length >= length ? f.apply(this, combined) : curried(f, length, combined);
              };
            } // eslint-disable-next-line no-redeclare


            function curry(f) {
              // eslint-disable-line no-redeclare
              return curried(f, f.length, []);
            }

            function guard(lowerBoundary, upperBoundary, value) {
              return Math.max(lowerBoundary, Math.min(upperBoundary, value));
            }

            /**
             * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.
             *
             * @example
             * // Styles as object usage
             * const styles = {
             *   background: mix(0.5, '#f00', '#00f')
             *   background: mix(0.25, '#f00', '#00f')
             *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')
             * }
             *
             * // styled-components usage
             * const div = styled.div`
             *   background: ${mix(0.5, '#f00', '#00f')};
             *   background: ${mix(0.25, '#f00', '#00f')};
             *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};
             * `
             *
             * // CSS in JS Output
             *
             * element {
             *   background: "#7f007f";
             *   background: "#3f00bf";
             *   background: "rgba(63, 0, 191, 0.75)";
             * }
             */

            function mix(weight, color, otherColor) {
              if (color === 'transparent') return otherColor;
              if (otherColor === 'transparent') return color;
              if (weight === 0) return otherColor;
              var parsedColor1 = parseToRgb(color);

              var color1 = _extends$g({}, parsedColor1, {
                alpha: typeof parsedColor1.alpha === 'number' ? parsedColor1.alpha : 1
              });

              var parsedColor2 = parseToRgb(otherColor);

              var color2 = _extends$g({}, parsedColor2, {
                alpha: typeof parsedColor2.alpha === 'number' ? parsedColor2.alpha : 1
              }); // The formula is copied from the original Sass implementation:
              // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method


              var alphaDelta = color1.alpha - color2.alpha;
              var x = parseFloat(weight) * 2 - 1;
              var y = x * alphaDelta === -1 ? x : x + alphaDelta;
              var z = 1 + x * alphaDelta;
              var weight1 = (y / z + 1) / 2.0;
              var weight2 = 1 - weight1;
              var mixedColor = {
                red: Math.floor(color1.red * weight1 + color2.red * weight2),
                green: Math.floor(color1.green * weight1 + color2.green * weight2),
                blue: Math.floor(color1.blue * weight1 + color2.blue * weight2),
                alpha: color1.alpha * (parseFloat(weight) / 1.0) + color2.alpha * (1 - parseFloat(weight) / 1.0)
              };
              return rgba(mixedColor);
            } // prettier-ignore


            var curriedMix = /*#__PURE__*/curry
            /* ::<number | string, string, string, string> */
            (mix);

            /**
             * Decreases the opacity of a color. Its range for the amount is between 0 to 1.
             *
             *
             * @example
             * // Styles as object usage
             * const styles = {
             *   background: transparentize(0.1, '#fff');
             *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),
             *   background: transparentize('0.5', 'rgba(255, 0, 0, 0.8)'),
             * }
             *
             * // styled-components usage
             * const div = styled.div`
             *   background: ${transparentize(0.1, '#fff')};
             *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},
             *   background: ${transparentize('0.5', 'rgba(255, 0, 0, 0.8)')},
             * `
             *
             * // CSS in JS Output
             *
             * element {
             *   background: "rgba(255,255,255,0.9)";
             *   background: "rgba(255,255,255,0.8)";
             *   background: "rgba(255,0,0,0.3)";
             * }
             */

            function transparentize(amount, color) {
              if (color === 'transparent') return color;
              var parsedColor = parseToRgb(color);
              var alpha = typeof parsedColor.alpha === 'number' ? parsedColor.alpha : 1;

              var colorWithAlpha = _extends$g({}, parsedColor, {
                alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)
              });

              return rgba(colorWithAlpha);
            } // prettier-ignore


            var curriedTransparentize = /*#__PURE__*/curry
            /* ::<number | string, string, string> */
            (transparentize);

            var reactIs$2 = {exports: {}};

            var reactIs_production_min$2 = {};

            /** @license React v17.0.2
             * react-is.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var b$6=60103,c$5=60106,d$5=60107,e$3=60108,f$5=60114,g$5=60109,h$6=60110,k$6=60112,l$4=60113,m$5=60120,n$5=60115,p$6=60116,q$6=60121,r$8=60122,u$4=60117,v$6=60129,w$5=60131;
            if("function"===typeof Symbol&&Symbol.for){var x$5=Symbol.for;b$6=x$5("react.element");c$5=x$5("react.portal");d$5=x$5("react.fragment");e$3=x$5("react.strict_mode");f$5=x$5("react.profiler");g$5=x$5("react.provider");h$6=x$5("react.context");k$6=x$5("react.forward_ref");l$4=x$5("react.suspense");m$5=x$5("react.suspense_list");n$5=x$5("react.memo");p$6=x$5("react.lazy");q$6=x$5("react.block");r$8=x$5("react.server.block");u$4=x$5("react.fundamental");v$6=x$5("react.debug_trace_mode");w$5=x$5("react.legacy_hidden");}
            function y$5(a){if("object"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b$6:switch(a=a.type,a){case d$5:case f$5:case e$3:case l$4:case m$5:return a;default:switch(a=a&&a.$$typeof,a){case h$6:case k$6:case p$6:case n$5:case g$5:return a;default:return t}}case c$5:return t}}}var z$5=g$5,A$4=b$6,B$3=k$6,C=d$5,D$3=p$6,E$3=n$5,F$3=c$5,G$3=f$5,H$3=e$3,I$3=l$4;reactIs_production_min$2.ContextConsumer=h$6;reactIs_production_min$2.ContextProvider=z$5;reactIs_production_min$2.Element=A$4;reactIs_production_min$2.ForwardRef=B$3;reactIs_production_min$2.Fragment=C;reactIs_production_min$2.Lazy=D$3;reactIs_production_min$2.Memo=E$3;reactIs_production_min$2.Portal=F$3;reactIs_production_min$2.Profiler=G$3;reactIs_production_min$2.StrictMode=H$3;
            reactIs_production_min$2.Suspense=I$3;reactIs_production_min$2.isAsyncMode=function(){return !1};reactIs_production_min$2.isConcurrentMode=function(){return !1};reactIs_production_min$2.isContextConsumer=function(a){return y$5(a)===h$6};reactIs_production_min$2.isContextProvider=function(a){return y$5(a)===g$5};reactIs_production_min$2.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===b$6};reactIs_production_min$2.isForwardRef=function(a){return y$5(a)===k$6};reactIs_production_min$2.isFragment=function(a){return y$5(a)===d$5};reactIs_production_min$2.isLazy=function(a){return y$5(a)===p$6};reactIs_production_min$2.isMemo=function(a){return y$5(a)===n$5};
            reactIs_production_min$2.isPortal=function(a){return y$5(a)===c$5};reactIs_production_min$2.isProfiler=function(a){return y$5(a)===f$5};reactIs_production_min$2.isStrictMode=function(a){return y$5(a)===e$3};reactIs_production_min$2.isSuspense=function(a){return y$5(a)===l$4};reactIs_production_min$2.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===d$5||a===f$5||a===v$6||a===e$3||a===l$4||a===m$5||a===w$5||"object"===typeof a&&null!==a&&(a.$$typeof===p$6||a.$$typeof===n$5||a.$$typeof===g$5||a.$$typeof===h$6||a.$$typeof===k$6||a.$$typeof===u$4||a.$$typeof===q$6||a[0]===r$8)?!0:!1};
            reactIs_production_min$2.typeOf=y$5;

            {
              reactIs$2.exports = reactIs_production_min$2;
            }

            function stylis_min (W) {
              function M(d, c, e, h, a) {
                for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {
                  g = e.charCodeAt(l);
                  l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);

                  if (0 === b + n + v + m) {
                    if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {
                      switch (g) {
                        case 32:
                        case 9:
                        case 59:
                        case 13:
                        case 10:
                          break;

                        default:
                          f += e.charAt(l);
                      }

                      g = 59;
                    }

                    switch (g) {
                      case 123:
                        f = f.trim();
                        q = f.charCodeAt(0);
                        k = 1;

                        for (t = ++l; l < B;) {
                          switch (g = e.charCodeAt(l)) {
                            case 123:
                              k++;
                              break;

                            case 125:
                              k--;
                              break;

                            case 47:
                              switch (g = e.charCodeAt(l + 1)) {
                                case 42:
                                case 47:
                                  a: {
                                    for (u = l + 1; u < J; ++u) {
                                      switch (e.charCodeAt(u)) {
                                        case 47:
                                          if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {
                                            l = u + 1;
                                            break a;
                                          }

                                          break;

                                        case 10:
                                          if (47 === g) {
                                            l = u + 1;
                                            break a;
                                          }

                                      }
                                    }

                                    l = u;
                                  }

                              }

                              break;

                            case 91:
                              g++;

                            case 40:
                              g++;

                            case 34:
                            case 39:
                              for (; l++ < J && e.charCodeAt(l) !== g;) {
                              }

                          }

                          if (0 === k) break;
                          l++;
                        }

                        k = e.substring(t, l);
                        0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));

                        switch (q) {
                          case 64:
                            0 < r && (f = f.replace(N, ''));
                            g = f.charCodeAt(1);

                            switch (g) {
                              case 100:
                              case 109:
                              case 115:
                              case 45:
                                r = c;
                                break;

                              default:
                                r = O;
                            }

                            k = M(c, r, k, g, a + 1);
                            t = k.length;
                            0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));
                            if (0 < t) switch (g) {
                              case 115:
                                f = f.replace(da, ea);

                              case 100:
                              case 109:
                              case 45:
                                k = f + '{' + k + '}';
                                break;

                              case 107:
                                f = f.replace(fa, '$1 $2');
                                k = f + '{' + k + '}';
                                k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;
                                break;

                              default:
                                k = f + k, 112 === h && (k = (p += k, ''));
                            } else k = '';
                            break;

                          default:
                            k = M(c, X(c, f, I), k, h, a + 1);
                        }

                        F += k;
                        k = I = r = u = q = 0;
                        f = '';
                        g = e.charCodeAt(++l);
                        break;

                      case 125:
                      case 59:
                        f = (0 < r ? f.replace(N, '') : f).trim();
                        if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\x00\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {
                          case 0:
                            break;

                          case 64:
                            if (105 === g || 99 === g) {
                              G += f + e.charAt(l);
                              break;
                            }

                          default:
                            58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));
                        }
                        I = r = u = q = 0;
                        f = '';
                        g = e.charCodeAt(++l);
                    }
                  }

                  switch (g) {
                    case 13:
                    case 10:
                      47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\x00');
                      0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);
                      z = 1;
                      D++;
                      break;

                    case 59:
                    case 125:
                      if (0 === b + n + v + m) {
                        z++;
                        break;
                      }

                    default:
                      z++;
                      y = e.charAt(l);

                      switch (g) {
                        case 9:
                        case 32:
                          if (0 === n + m + b) switch (x) {
                            case 44:
                            case 58:
                            case 9:
                            case 32:
                              y = '';
                              break;

                            default:
                              32 !== g && (y = ' ');
                          }
                          break;

                        case 0:
                          y = '\\0';
                          break;

                        case 12:
                          y = '\\f';
                          break;

                        case 11:
                          y = '\\v';
                          break;

                        case 38:
                          0 === n + b + m && (r = I = 1, y = '\f' + y);
                          break;

                        case 108:
                          if (0 === n + b + m + E && 0 < u) switch (l - u) {
                            case 2:
                              112 === x && 58 === e.charCodeAt(l - 3) && (E = x);

                            case 8:
                              111 === K && (E = K);
                          }
                          break;

                        case 58:
                          0 === n + b + m && (u = l);
                          break;

                        case 44:
                          0 === b + v + n + m && (r = 1, y += '\r');
                          break;

                        case 34:
                        case 39:
                          0 === b && (n = n === g ? 0 : 0 === n ? g : n);
                          break;

                        case 91:
                          0 === n + b + v && m++;
                          break;

                        case 93:
                          0 === n + b + v && m--;
                          break;

                        case 41:
                          0 === n + b + m && v--;
                          break;

                        case 40:
                          if (0 === n + b + m) {
                            if (0 === q) switch (2 * x + 3 * K) {
                              case 533:
                                break;

                              default:
                                q = 1;
                            }
                            v++;
                          }

                          break;

                        case 64:
                          0 === b + v + n + m + u + k && (k = 1);
                          break;

                        case 42:
                        case 47:
                          if (!(0 < n + m + v)) switch (b) {
                            case 0:
                              switch (2 * g + 3 * e.charCodeAt(l + 1)) {
                                case 235:
                                  b = 47;
                                  break;

                                case 220:
                                  t = l, b = 42;
                              }

                              break;

                            case 42:
                              47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);
                          }
                      }

                      0 === b && (f += y);
                  }

                  K = x;
                  x = g;
                  l++;
                }

                t = p.length;

                if (0 < t) {
                  r = c;
                  if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;
                  p = r.join(',') + '{' + p + '}';

                  if (0 !== w * E) {
                    2 !== w || L(p, 2) || (E = 0);

                    switch (E) {
                      case 111:
                        p = p.replace(ha, ':-moz-$1') + p;
                        break;

                      case 112:
                        p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;
                    }

                    E = 0;
                  }
                }

                return G + p + F;
              }

              function X(d, c, e) {
                var h = c.trim().split(ia);
                c = h;
                var a = h.length,
                    m = d.length;

                switch (m) {
                  case 0:
                  case 1:
                    var b = 0;

                    for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {
                      c[b] = Z(d, c[b], e).trim();
                    }

                    break;

                  default:
                    var v = b = 0;

                    for (c = []; b < a; ++b) {
                      for (var n = 0; n < m; ++n) {
                        c[v++] = Z(d[n] + ' ', h[b], e).trim();
                      }
                    }

                }

                return c;
              }

              function Z(d, c, e) {
                var h = c.charCodeAt(0);
                33 > h && (h = (c = c.trim()).charCodeAt(0));

                switch (h) {
                  case 38:
                    return c.replace(F, '$1' + d.trim());

                  case 58:
                    return d.trim() + c.replace(F, '$1' + d.trim());

                  default:
                    if (0 < 1 * e && 0 < c.indexOf('\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());
                }

                return d + c;
              }

              function P(d, c, e, h) {
                var a = d + ';',
                    m = 2 * c + 3 * e + 4 * h;

                if (944 === m) {
                  d = a.indexOf(':', 9) + 1;
                  var b = a.substring(d, a.length - 1).trim();
                  b = a.substring(0, d).trim() + b + ';';
                  return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;
                }

                if (0 === w || 2 === w && !L(a, 1)) return a;

                switch (m) {
                  case 1015:
                    return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;

                  case 951:
                    return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;

                  case 963:
                    return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;

                  case 1009:
                    if (100 !== a.charCodeAt(4)) break;

                  case 969:
                  case 942:
                    return '-webkit-' + a + a;

                  case 978:
                    return '-webkit-' + a + '-moz-' + a + a;

                  case 1019:
                  case 983:
                    return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;

                  case 883:
                    if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;
                    if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;
                    break;

                  case 932:
                    if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {
                      case 103:
                        return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;

                      case 115:
                        return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;

                      case 98:
                        return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;
                    }
                    return '-webkit-' + a + '-ms-' + a + a;

                  case 964:
                    return '-webkit-' + a + '-ms-flex-' + a + a;

                  case 1023:
                    if (99 !== a.charCodeAt(8)) break;
                    b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');
                    return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;

                  case 1005:
                    return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;

                  case 1e3:
                    b = a.substring(13).trim();
                    c = b.indexOf('-') + 1;

                    switch (b.charCodeAt(0) + b.charCodeAt(c)) {
                      case 226:
                        b = a.replace(G, 'tb');
                        break;

                      case 232:
                        b = a.replace(G, 'tb-rl');
                        break;

                      case 220:
                        b = a.replace(G, 'lr');
                        break;

                      default:
                        return a;
                    }

                    return '-webkit-' + a + '-ms-' + b + a;

                  case 1017:
                    if (-1 === a.indexOf('sticky', 9)) break;

                  case 975:
                    c = (a = d).length - 10;
                    b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();

                    switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {
                      case 203:
                        if (111 > b.charCodeAt(8)) break;

                      case 115:
                        a = a.replace(b, '-webkit-' + b) + ';' + a;
                        break;

                      case 207:
                      case 102:
                        a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;
                    }

                    return a + ';';

                  case 938:
                    if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {
                      case 105:
                        return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;

                      case 115:
                        return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;

                      default:
                        return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;
                    }
                    break;

                  case 973:
                  case 989:
                    if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;

                  case 931:
                  case 953:
                    if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;
                    break;

                  case 962:
                    if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;
                }

                return a;
              }

              function L(d, c) {
                var e = d.indexOf(1 === c ? ':' : '{'),
                    h = d.substring(0, 3 !== c ? e : 10);
                e = d.substring(e + 1, d.length - 1);
                return R(2 !== c ? h : h.replace(na, '$1'), e, c);
              }

              function ea(d, c) {
                var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));
                return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';
              }

              function H(d, c, e, h, a, m, b, v, n, q) {
                for (var g = 0, x = c, w; g < A; ++g) {
                  switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {
                    case void 0:
                    case !1:
                    case !0:
                    case null:
                      break;

                    default:
                      x = w;
                  }
                }

                if (x !== c) return x;
              }

              function T(d) {
                switch (d) {
                  case void 0:
                  case null:
                    A = S.length = 0;
                    break;

                  default:
                    if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {
                      T(d[c]);
                    } else Y = !!d | 0;
                }

                return T;
              }

              function U(d) {
                d = d.prefix;
                void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);
                return U;
              }

              function B(d, c) {
                var e = d;
                33 > e.charCodeAt(0) && (e = e.trim());
                V = e;
                e = [V];

                if (0 < A) {
                  var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);
                  void 0 !== h && 'string' === typeof h && (c = h);
                }

                var a = M(O, e, c, 0, 0);
                0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));
                V = '';
                E = 0;
                z = D = 1;
                return a;
              }

              var ca = /^\0+/g,
                  N = /[\0\r\f]/g,
                  aa = /: */g,
                  ka = /zoo|gra/,
                  ma = /([,: ])(transform)/g,
                  ia = /,\r+?/g,
                  F = /([\t\r\n ])*\f?&/g,
                  fa = /@(k\w+)\s*(\S*)\s*/,
                  Q = /::(place)/g,
                  ha = /:(read-only)/g,
                  G = /[svh]\w+-[tblr]{2}/,
                  da = /\(\s*(.*)\s*\)/g,
                  oa = /([\s\S]*?);/g,
                  ba = /-self|flex-/g,
                  na = /[^]*?(:[rp][el]a[\w-]+)[^]*/,
                  la = /stretch|:\s*\w+\-(?:conte|avail)/,
                  ja = /([^-])(image-set\()/,
                  z = 1,
                  D = 1,
                  E = 0,
                  w = 1,
                  O = [],
                  S = [],
                  A = 0,
                  R = null,
                  Y = 0,
                  V = '';
              B.use = T;
              B.set = U;
              void 0 !== W && U(W);
              return B;
            }

            var unitlessKeys = {
              animationIterationCount: 1,
              borderImageOutset: 1,
              borderImageSlice: 1,
              borderImageWidth: 1,
              boxFlex: 1,
              boxFlexGroup: 1,
              boxOrdinalGroup: 1,
              columnCount: 1,
              columns: 1,
              flex: 1,
              flexGrow: 1,
              flexPositive: 1,
              flexShrink: 1,
              flexNegative: 1,
              flexOrder: 1,
              gridRow: 1,
              gridRowEnd: 1,
              gridRowSpan: 1,
              gridRowStart: 1,
              gridColumn: 1,
              gridColumnEnd: 1,
              gridColumnSpan: 1,
              gridColumnStart: 1,
              msGridRow: 1,
              msGridRowSpan: 1,
              msGridColumn: 1,
              msGridColumnSpan: 1,
              fontWeight: 1,
              lineHeight: 1,
              opacity: 1,
              order: 1,
              orphans: 1,
              tabSize: 1,
              widows: 1,
              zIndex: 1,
              zoom: 1,
              WebkitLineClamp: 1,
              // SVG-related properties
              fillOpacity: 1,
              floodOpacity: 1,
              stopOpacity: 1,
              strokeDasharray: 1,
              strokeDashoffset: 1,
              strokeMiterlimit: 1,
              strokeOpacity: 1,
              strokeWidth: 1
            };

            function memoize$1(fn) {
              var cache = {};
              return function (arg) {
                if (cache[arg] === undefined) cache[arg] = fn(arg);
                return cache[arg];
              };
            }

            var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

            var index = memoize$1(function (prop) {
              return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
              /* o */
              && prop.charCodeAt(1) === 110
              /* n */
              && prop.charCodeAt(2) < 91;
            }
            /* Z+1 */
            );

            var reactIs$1 = {exports: {}};

            var reactIs_production_min$1 = {};

            /** @license React v16.13.1
             * react-is.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var b$5="function"===typeof Symbol&&Symbol.for,c$4=b$5?Symbol.for("react.element"):60103,d$4=b$5?Symbol.for("react.portal"):60106,e$2=b$5?Symbol.for("react.fragment"):60107,f$4=b$5?Symbol.for("react.strict_mode"):60108,g$4=b$5?Symbol.for("react.profiler"):60114,h$5=b$5?Symbol.for("react.provider"):60109,k$5=b$5?Symbol.for("react.context"):60110,l$3=b$5?Symbol.for("react.async_mode"):60111,m$4=b$5?Symbol.for("react.concurrent_mode"):60111,n$4=b$5?Symbol.for("react.forward_ref"):60112,p$5=b$5?Symbol.for("react.suspense"):60113,q$5=b$5?
            Symbol.for("react.suspense_list"):60120,r$7=b$5?Symbol.for("react.memo"):60115,t$4=b$5?Symbol.for("react.lazy"):60116,v$5=b$5?Symbol.for("react.block"):60121,w$4=b$5?Symbol.for("react.fundamental"):60117,x$4=b$5?Symbol.for("react.responder"):60118,y$4=b$5?Symbol.for("react.scope"):60119;
            function z$4(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$4:switch(a=a.type,a){case l$3:case m$4:case e$2:case g$4:case f$4:case p$5:return a;default:switch(a=a&&a.$$typeof,a){case k$5:case n$4:case t$4:case r$7:case h$5:return a;default:return u}}case d$4:return u}}}function A$3(a){return z$4(a)===m$4}reactIs_production_min$1.AsyncMode=l$3;reactIs_production_min$1.ConcurrentMode=m$4;reactIs_production_min$1.ContextConsumer=k$5;reactIs_production_min$1.ContextProvider=h$5;reactIs_production_min$1.Element=c$4;reactIs_production_min$1.ForwardRef=n$4;reactIs_production_min$1.Fragment=e$2;reactIs_production_min$1.Lazy=t$4;reactIs_production_min$1.Memo=r$7;reactIs_production_min$1.Portal=d$4;
            reactIs_production_min$1.Profiler=g$4;reactIs_production_min$1.StrictMode=f$4;reactIs_production_min$1.Suspense=p$5;reactIs_production_min$1.isAsyncMode=function(a){return A$3(a)||z$4(a)===l$3};reactIs_production_min$1.isConcurrentMode=A$3;reactIs_production_min$1.isContextConsumer=function(a){return z$4(a)===k$5};reactIs_production_min$1.isContextProvider=function(a){return z$4(a)===h$5};reactIs_production_min$1.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$4};reactIs_production_min$1.isForwardRef=function(a){return z$4(a)===n$4};reactIs_production_min$1.isFragment=function(a){return z$4(a)===e$2};reactIs_production_min$1.isLazy=function(a){return z$4(a)===t$4};
            reactIs_production_min$1.isMemo=function(a){return z$4(a)===r$7};reactIs_production_min$1.isPortal=function(a){return z$4(a)===d$4};reactIs_production_min$1.isProfiler=function(a){return z$4(a)===g$4};reactIs_production_min$1.isStrictMode=function(a){return z$4(a)===f$4};reactIs_production_min$1.isSuspense=function(a){return z$4(a)===p$5};
            reactIs_production_min$1.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e$2||a===m$4||a===g$4||a===f$4||a===p$5||a===q$5||"object"===typeof a&&null!==a&&(a.$$typeof===t$4||a.$$typeof===r$7||a.$$typeof===h$5||a.$$typeof===k$5||a.$$typeof===n$4||a.$$typeof===w$4||a.$$typeof===x$4||a.$$typeof===y$4||a.$$typeof===v$5)};reactIs_production_min$1.typeOf=z$4;

            {
              reactIs$1.exports = reactIs_production_min$1;
            }

            var reactIs = reactIs$1.exports;

            /**
             * Copyright 2015, Yahoo! Inc.
             * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
             */
            var REACT_STATICS = {
              childContextTypes: true,
              contextType: true,
              contextTypes: true,
              defaultProps: true,
              displayName: true,
              getDefaultProps: true,
              getDerivedStateFromError: true,
              getDerivedStateFromProps: true,
              mixins: true,
              propTypes: true,
              type: true
            };
            var KNOWN_STATICS = {
              name: true,
              length: true,
              prototype: true,
              caller: true,
              callee: true,
              arguments: true,
              arity: true
            };
            var FORWARD_REF_STATICS = {
              '$$typeof': true,
              render: true,
              defaultProps: true,
              displayName: true,
              propTypes: true
            };
            var MEMO_STATICS = {
              '$$typeof': true,
              compare: true,
              defaultProps: true,
              displayName: true,
              propTypes: true,
              type: true
            };
            var TYPE_STATICS = {};
            TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
            TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

            function getStatics(component) {
              // React v16.11 and below
              if (reactIs.isMemo(component)) {
                return MEMO_STATICS;
              } // React v16.12 and above


              return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
            }

            var defineProperty = Object.defineProperty;
            var getOwnPropertyNames = Object.getOwnPropertyNames;
            var getOwnPropertySymbols = Object.getOwnPropertySymbols;
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
            var getPrototypeOf = Object.getPrototypeOf;
            var objectPrototype = Object.prototype;
            function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
              if (typeof sourceComponent !== 'string') {
                // don't hoist over string (html) components
                if (objectPrototype) {
                  var inheritedComponent = getPrototypeOf(sourceComponent);

                  if (inheritedComponent && inheritedComponent !== objectPrototype) {
                    hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
                  }
                }

                var keys = getOwnPropertyNames(sourceComponent);

                if (getOwnPropertySymbols) {
                  keys = keys.concat(getOwnPropertySymbols(sourceComponent));
                }

                var targetStatics = getStatics(targetComponent);
                var sourceStatics = getStatics(sourceComponent);

                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];

                  if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                    var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

                    try {
                      // Avoid failures from read-only properties
                      defineProperty(targetComponent, key, descriptor);
                    } catch (e) {}
                  }
                }
              }

              return targetComponent;
            }

            var hoistNonReactStatics_cjs = hoistNonReactStatics;

            function v$4(){return (v$4=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r]);}return e}).apply(this,arguments)}var g$3=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},S$2=function(t){return null!==t&&"object"==typeof t&&"[object Object]"===(t.toString?t.toString():Object.prototype.toString.call(t))&&!reactIs$2.exports.typeOf(t)},w$3=Object.freeze([]),E$2=Object.freeze({});function b$4(e){return "function"==typeof e}function _$2(e){return e.displayName||e.name||"Component"}function N$3(e){return e&&"string"==typeof e.styledComponentId}var A$2="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",I$2="undefined"!=typeof window&&"HTMLElement"in window,P$2=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY?"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY:"production"!=="production");function j$1(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var T$1=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e;}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&j$1(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var s=r;s<o;s++)this.groupSizes[s]=0;}for(var i=this.indexOfGroup(e+1),a=0,c=t.length;a<c;a++)this.tag.insertRule(i,t[a])&&(this.groupSizes[e]++,i++);},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n);}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,s=r;s<o;s++)t+=this.tag.getRule(s)+"/*!sc*/\n";return t},e}(),x$3=new Map,k$4=new Map,V$1=1,B$2=function(e){if(x$3.has(e))return x$3.get(e);for(;k$4.has(V$1);)V$1++;var t=V$1++;return x$3.set(e,t),k$4.set(t,e),t},z$3=function(e){return k$4.get(e)},M$2=function(e,t){t>=V$1&&(V$1=t+1),x$3.set(e,t),k$4.set(t,e);},G$2="style["+A$2+'][data-styled-version="5.3.3"]',L$1=new RegExp("^"+A$2+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),F$2=function(e,t,n){for(var r,o=n.split(","),s=0,i=o.length;s<i;s++)(r=o[s])&&e.registerName(t,r);},Y$1=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,s=n.length;o<s;o++){var i=n[o].trim();if(i){var a=i.match(L$1);if(a){var c=0|parseInt(a[1],10),u=a[2];0!==c&&(M$2(u,c),F$2(e,u,a[3]),e.getTag().insertRules(c,r)),r.length=0;}else r.push(i);}}},q$4=function(){return "undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},H$2=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute(A$2))return r}}(n),s=void 0!==o?o.nextSibling:null;r.setAttribute(A$2,"active"),r.setAttribute("data-styled-version","5.3.3");var i=q$4();return i&&r.setAttribute("nonce",i),n.insertBefore(r,s),r},$=function(){function e(e){var t=this.element=H$2(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}j$1(17);}(t),this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return !1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--;},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),W$2=function(){function e(e){var t=this.element=H$2(e);this.nodes=t.childNodes,this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return !1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--;},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),U$2=function(){function e(e){this.rules=[],this.length=0;}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--;},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),J=I$2,X$3={isServer:!I$2,useCSSOMInjection:!P$2},Z$2=function(){function e(e,t,n){void 0===e&&(e=E$2),void 0===t&&(t={}),this.options=v$4({},X$3,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&I$2&&J&&(J=!1,function(e){for(var t=document.querySelectorAll(G$2),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute(A$2)&&(Y$1(e,o),o.parentNode&&o.parentNode.removeChild(o));}}(this));}e.registerId=function(e){return B$2(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(v$4({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new U$2(o):r?new $(o):new W$2(o),new T$1(e)));var e,t,n,r,o;},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(B$2(e),this.names.has(e))this.names.get(e).add(t);else {var n=new Set;n.add(t),this.names.set(e,n);}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(B$2(e),n);},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear();},t.clearRules=function(e){this.getTag().clearGroup(B$2(e)),this.clearNames(e);},t.clearTag=function(){this.tag=void 0;},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var s=z$3(o);if(void 0!==s){var i=e.names.get(s),a=t.getGroup(o);if(i&&a&&i.size){var c=A$2+".g"+o+'[id="'+s+'"]',u="";void 0!==i&&i.forEach((function(e){e.length>0&&(u+=e+",");})),r+=""+a+c+'{content:"'+u+'"}/*!sc*/\n';}}}return r}(this)},e}(),K$1=/(a)(d)/gi,Q$1=function(e){return String.fromCharCode(e+(e>25?39:97))};function ee$1(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=Q$1(t%52)+n;return (Q$1(t%52)+n).replace(K$1,"$1-$2")}var te$1=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},ne$1=function(e){return te$1(5381,e)};function re$1(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(b$4(n)&&!N$3(n))return !1}return !0}var oe$1=ne$1("5.3.3"),se$1=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&re$1(e),this.componentId=t,this.baseHash=te$1(oe$1,t),this.baseStyle=n,Z$2.registerId(t);}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else {var s=Ne$1(this.rules,e,t,n).join(""),i=ee$1(te$1(this.baseHash,s)>>>0);if(!t.hasNameForId(r,i)){var a=n(s,"."+i,void 0,r);t.insertRules(r,i,a);}o.push(i),this.staticRulesId=i;}else {for(var c=this.rules.length,u=te$1(this.baseHash,n.hash),l="",d=0;d<c;d++){var h=this.rules[d];if("string"==typeof h)l+=h;else if(h){var p=Ne$1(h,e,t,n),f=Array.isArray(p)?p.join(""):p;u=te$1(u,f+d),l+=f;}}if(l){var m=ee$1(u>>>0);if(!t.hasNameForId(r,m)){var y=n(l,"."+m,void 0,r);t.insertRules(r,m,y);}o.push(m);}}return o.join(" ")},e}(),ie$1=/^\s*\/\/.*$/gm,ae$1=[":","[",".","#"];function ce$1(e){var t,n,r,o,s=void 0===e?E$2:e,i=s.options,a=void 0===i?E$2:i,c=s.plugins,u=void 0===c?w$3:c,l=new stylis_min(a),d=[],h=function(e){function t(t){if(t)try{e(t+"}");}catch(e){}}return function(n,r,o,s,i,a,c,u,l,d){switch(n){case 1:if(0===l&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===u)return r+"/*|*/";break;case 3:switch(u){case 102:case 112:return e(o[0]+r),"";default:return r+(0===d?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t);}}}((function(e){d.push(e);})),f=function(e,r,s){return 0===r&&-1!==ae$1.indexOf(s[n.length])||s.match(o)?e:"."+t};function m(e,s,i,a){void 0===a&&(a="&");var c=e.replace(ie$1,""),u=s&&i?i+" "+s+" { "+c+" }":c;return t=a,n=s,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),l(i||!s?"":s,u)}return l.use([].concat(u,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,f));},h,function(e){if(-2===e){var t=d;return d=[],t}}])),m.hash=u.length?u.reduce((function(e,t){return t.name||j$1(15),te$1(e,t.name)}),5381).toString():"",m}var ue$1=React__default['default'].createContext();ue$1.Consumer;var de$2=React__default['default'].createContext(),he$2=(de$2.Consumer,new Z$2),pe$1=ce$1();function fe$1(){return React.useContext(ue$1)||he$2}function me$1(){return React.useContext(de$2)||pe$1}var ve$1=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=pe$1);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"));},this.toString=function(){return j$1(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t;}return e.prototype.getName=function(e){return void 0===e&&(e=pe$1),this.name+e.hash},e}(),ge$1=/([A-Z])/,Se$1=/([A-Z])/g,we$1=/^ms-/,Ee$1=function(e){return "-"+e.toLowerCase()};function be$1(e){return ge$1.test(e)?e.replace(Se$1,Ee$1).replace(we$1,"-ms-"):e}var _e=function(e){return null==e||!1===e||""===e};function Ne$1(e,n,r,o){if(Array.isArray(e)){for(var s,i=[],a=0,c=e.length;a<c;a+=1)""!==(s=Ne$1(e[a],n,r,o))&&(Array.isArray(s)?i.push.apply(i,s):i.push(s));return i}if(_e(e))return "";if(N$3(e))return "."+e.styledComponentId;if(b$4(e)){if("function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!n)return e;var u=e(n);return Ne$1(u,n,r,o)}var l;return e instanceof ve$1?r?(e.inject(r,o),e.getName(o)):e:S$2(e)?function e(t,n){var r,o,s=[];for(var i in t)t.hasOwnProperty(i)&&!_e(t[i])&&(Array.isArray(t[i])&&t[i].isCss||b$4(t[i])?s.push(be$1(i)+":",t[i],";"):S$2(t[i])?s.push.apply(s,e(t[i],i)):s.push(be$1(i)+": "+(r=i,null==(o=t[i])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in unitlessKeys?String(o).trim():o+"px")+";"));return n?[n+" {"].concat(s,["}"]):s}(e):e.toString()}var Ae$1=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function Ce$1(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return b$4(e)||S$2(e)?Ae$1(Ne$1(g$3(w$3,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:Ae$1(Ne$1(g$3(e,n)))}var Re$1=function(e,t,n){return void 0===n&&(n=E$2),e.theme!==n.theme&&e.theme||t||n.theme},De$1=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,je$1=/(^-|-$)/g;function Te$1(e){return e.replace(De$1,"-").replace(je$1,"")}var xe$1=function(e){return ee$1(ne$1(e)>>>0)};function ke$1(e){return "string"==typeof e&&("production"==="production")}var Ve$1=function(e){return "function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},Be$1=function(e){return "__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function ze$1(e,t,n){var r=e[n];Ve$1(t)&&Ve$1(r)?Me$1(r,t):e[n]=t;}function Me$1(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,s=n;o<s.length;o++){var i=s[o];if(Ve$1(i))for(var a in i)Be$1(a)&&ze$1(e,i[a],a);}return e}var Ge$1=React__default['default'].createContext();Ge$1.Consumer;function Fe$1(e){var t=React.useContext(Ge$1),n=React.useMemo((function(){return function(e,t){if(!e)return j$1(14);if(b$4(e)){var n=e(t);return n}return Array.isArray(e)||"object"!=typeof e?j$1(8):t?v$4({},t,{},e):e}(e.theme,t)}),[e.theme,t]);return e.children?React__default['default'].createElement(Ge$1.Provider,{value:n},e.children):null}var Ye$1={};function qe$1(e,t,n){var o=N$3(e),i=!ke$1(e),a=t.attrs,c=void 0===a?w$3:a,d=t.componentId,h=void 0===d?function(e,t){var n="string"!=typeof e?"sc":Te$1(e);Ye$1[n]=(Ye$1[n]||0)+1;var r=n+"-"+xe$1("5.3.3"+n+Ye$1[n]);return t?t+"-"+r:r}(t.displayName,t.parentComponentId):d,p=t.displayName,f=void 0===p?function(e){return ke$1(e)?"styled."+e:"Styled("+_$2(e)+")"}(e):p,g=t.displayName&&t.componentId?Te$1(t.displayName)+"-"+t.componentId:t.componentId||h,S=o&&e.attrs?Array.prototype.concat(e.attrs,c).filter(Boolean):c,A=t.shouldForwardProp;o&&e.shouldForwardProp&&(A=t.shouldForwardProp?function(n,r,o){return e.shouldForwardProp(n,r,o)&&t.shouldForwardProp(n,r,o)}:e.shouldForwardProp);var C,I=new se$1(n,g,o?e.componentStyle:void 0),P=I.isStatic&&0===c.length,O=function(e,t){return function(e,t,n,r){var o=e.attrs,i=e.componentStyle,a=e.defaultProps,c=e.foldedComponentIds,d=e.shouldForwardProp,h=e.styledComponentId,p=e.target;var f=function(e,t,n){void 0===e&&(e=E$2);var r=v$4({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,s,i=e;for(t in b$4(i)&&(i=i(r)),i)r[t]=o[t]="className"===t?(n=o[t],s=i[t],n&&s?n+" "+s:n||s):i[t];})),[r,o]}(Re$1(t,React.useContext(Ge$1),a)||E$2,t,o),y=f[0],g=f[1],S=function(e,t,n,r){var o=fe$1(),s=me$1(),i=t?e.generateAndInjectStyles(E$2,o,s):e.generateAndInjectStyles(n,o,s);return i}(i,r,y),w=n,_=g.$as||t.$as||g.as||t.as||p,N=ke$1(_),A=g!==t?v$4({},t,{},g):t,C={};for(var I in A)"$"!==I[0]&&"as"!==I&&("forwardedAs"===I?C.as=A[I]:(d?d(I,index,_):!N||index(I))&&(C[I]=A[I]));return t.style&&g.style!==t.style&&(C.style=v$4({},t.style,{},g.style)),C.className=Array.prototype.concat(c,h,S!==h?S:null,t.className,g.className).filter(Boolean).join(" "),C.ref=w,React.createElement(_,C)}(C,e,t,P)};return O.displayName=f,(C=React__default['default'].forwardRef(O)).attrs=S,C.componentStyle=I,C.displayName=f,C.shouldForwardProp=A,C.foldedComponentIds=o?Array.prototype.concat(e.foldedComponentIds,e.styledComponentId):w$3,C.styledComponentId=g,C.target=o?e.target:e,C.withComponent=function(e){var r=t.componentId,o=function(e,t){if(null==e)return {};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(t,["componentId"]),s=r&&r+"-"+(ke$1(e)?e:Te$1(_$2(e)));return qe$1(e,v$4({},o,{attrs:S,componentId:s}),n)},Object.defineProperty(C,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(t){this._foldedDefaultProps=o?Me$1({},e.defaultProps,t):t;}}),C.toString=function(){return "."+C.styledComponentId},i&&hoistNonReactStatics_cjs(C,e,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),C}var He$1=function(e){return function e(t,r,o){if(void 0===o&&(o=E$2),!reactIs$2.exports.isValidElementType(r))return j$1(1,String(r));var s=function(){return t(r,o,Ce$1.apply(void 0,arguments))};return s.withConfig=function(n){return e(t,r,v$4({},o,{},n))},s.attrs=function(n){return e(t,r,v$4({},o,{attrs:Array.prototype.concat(o.attrs,n).filter(Boolean)}))},s}(qe$1,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){He$1[e]=He$1(e);}));function Ue$1(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=Ce$1.apply(void 0,[e].concat(n)).join(""),s=xe$1(o);return new ve$1(s,o)}var styled = He$1;

            /* eslint-disable no-restricted-imports */
            const css$2 = Ce$1;
            const keyframes = Ue$1;
            const ThemedProvider = Fe$1;

            const black = '#000000';
            const white = '#FFFFFF';
            ({
                // surface
                interactive: curriedTransparentize(1 - 0.54, black),
                outline: curriedTransparentize(1 - 0.24, black),
                // text
                primary: black,
                secondary: curriedTransparentize(1 - 0.64, black),
                onInteractive: white,
            });
            ({
                // surface
                interactive: curriedTransparentize(1 - 0.48, white),
                outline: curriedTransparentize(1 - 0.12, white),
                // text
                primary: white,
                secondary: curriedTransparentize(1 - 0.6, white),
                onInteractive: black,
            });

            var Layer;
            (function (Layer) {
                Layer[Layer["OVERLAY"] = 100] = "OVERLAY";
                Layer[Layer["DIALOG"] = 1000] = "DIALOG";
                Layer[Layer["TOOLTIP"] = 2000] = "TOOLTIP";
            })(Layer || (Layer = {}));

            var dist = {};

            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, {
                  value: value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
              } else {
                obj[key] = value;
              }

              return obj;
            }

            /*

            Based off glamor's StyleSheet, thanks Sunil ❤️

            high performance StyleSheet for css-in-js systems

            - uses multiple style tags behind the scenes for millions of rules
            - uses `insertRule` for appending in production for *much* faster performance

            // usage

            import { StyleSheet } from '@emotion/sheet'

            let styleSheet = new StyleSheet({ key: '', container: document.head })

            styleSheet.insert('#box { border: 1px solid red; }')
            - appends a css rule into the stylesheet

            styleSheet.flush()
            - empties the stylesheet of all its contents

            */
            // $FlowFixMe
            function sheetForTag(tag) {
              if (tag.sheet) {
                // $FlowFixMe
                return tag.sheet;
              } // this weirdness brought to you by firefox

              /* istanbul ignore next */


              for (var i = 0; i < document.styleSheets.length; i++) {
                if (document.styleSheets[i].ownerNode === tag) {
                  // $FlowFixMe
                  return document.styleSheets[i];
                }
              }
            }

            function createStyleElement(options) {
              var tag = document.createElement('style');
              tag.setAttribute('data-emotion', options.key);

              if (options.nonce !== undefined) {
                tag.setAttribute('nonce', options.nonce);
              }

              tag.appendChild(document.createTextNode(''));
              return tag;
            }

            var StyleSheet =
            /*#__PURE__*/
            function () {
              function StyleSheet(options) {
                this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
                this.tags = [];
                this.ctr = 0;
                this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

                this.key = options.key;
                this.container = options.container;
                this.before = null;
              }

              var _proto = StyleSheet.prototype;

              _proto.insert = function insert(rule) {
                // the max length is how many rules we have per style tag, it's 65000 in speedy mode
                // it's 1 in dev because we insert source maps that map a single rule to a location
                // and you can only have one source map per style tag
                if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
                  var _tag = createStyleElement(this);

                  var before;

                  if (this.tags.length === 0) {
                    before = this.before;
                  } else {
                    before = this.tags[this.tags.length - 1].nextSibling;
                  }

                  this.container.insertBefore(_tag, before);
                  this.tags.push(_tag);
                }

                var tag = this.tags[this.tags.length - 1];

                if (this.isSpeedy) {
                  var sheet = sheetForTag(tag);

                  try {
                    // this is a really hot path
                    // we check the second character first because having "i"
                    // as the second character will happen less often than
                    // having "@" as the first character
                    var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64; // this is the ultrafast version, works across browsers
                    // the big drawback is that the css won't be editable in devtools

                    sheet.insertRule(rule, // we need to insert @import rules before anything else
                    // otherwise there will be an error
                    // technically this means that the @import rules will
                    // _usually_(not always since there could be multiple style tags)
                    // be the first ones in prod and generally later in dev
                    // this shouldn't really matter in the real world though
                    // @import is generally only used for font faces from google fonts and etc.
                    // so while this could be technically correct then it would be slower and larger
                    // for a tiny bit of correctness that won't matter in the real world
                    isImportRule ? 0 : sheet.cssRules.length);
                  } catch (e) {
                  }
                } else {
                  tag.appendChild(document.createTextNode(rule));
                }

                this.ctr++;
              };

              _proto.flush = function flush() {
                // $FlowFixMe
                this.tags.forEach(function (tag) {
                  return tag.parentNode.removeChild(tag);
                });
                this.tags = [];
                this.ctr = 0;
              };

              return StyleSheet;
            }();

            // https://github.com/thysultan/stylis.js/tree/master/plugins/rule-sheet
            // inlined to avoid umd wrapper and peerDep warnings/installing stylis
            // since we use stylis after closure compiler
            var delimiter = '/*|*/';
            var needle = delimiter + '}';

            function toSheet(block) {
              if (block) {
                Sheet.current.insert(block + '}');
              }
            }

            var Sheet = {
              current: null
            };
            var ruleSheet = function ruleSheet(context, content, selectors, parents, line, column, length, ns, depth, at) {
              switch (context) {
                // property
                case 1:
                  {
                    switch (content.charCodeAt(0)) {
                      case 64:
                        {
                          // @import
                          Sheet.current.insert(content + ';');
                          return '';
                        }
                      // charcode for l

                      case 108:
                        {
                          // charcode for b
                          // this ignores label
                          if (content.charCodeAt(2) === 98) {
                            return '';
                          }
                        }
                    }

                    break;
                  }
                // selector

                case 2:
                  {
                    if (ns === 0) return content + delimiter;
                    break;
                  }
                // at-rule

                case 3:
                  {
                    switch (ns) {
                      // @font-face, @page
                      case 102:
                      case 112:
                        {
                          Sheet.current.insert(selectors[0] + content);
                          return '';
                        }

                      default:
                        {
                          return content + (at === 0 ? delimiter : '');
                        }
                    }
                  }

                case -2:
                  {
                    content.split(needle).forEach(toSheet);
                  }
              }
            };

            var createCache = function createCache(options) {
              if (options === undefined) options = {};
              var key = options.key || 'css';
              var stylisOptions;

              if (options.prefix !== undefined) {
                stylisOptions = {
                  prefix: options.prefix
                };
              }

              var stylis = new stylis_min(stylisOptions);

              var inserted = {}; // $FlowFixMe

              var container;

              {
                container = options.container || document.head;
                var nodes = document.querySelectorAll("style[data-emotion-" + key + "]");
                Array.prototype.forEach.call(nodes, function (node) {
                  var attrib = node.getAttribute("data-emotion-" + key); // $FlowFixMe

                  attrib.split(' ').forEach(function (id) {
                    inserted[id] = true;
                  });

                  if (node.parentNode !== container) {
                    container.appendChild(node);
                  }
                });
              }

              var _insert;

              {
                stylis.use(options.stylisPlugins)(ruleSheet);

                _insert = function insert(selector, serialized, sheet, shouldCache) {
                  var name = serialized.name;
                  Sheet.current = sheet;

                  stylis(selector, serialized.styles);

                  if (shouldCache) {
                    cache.inserted[name] = true;
                  }
                };
              }

              var cache = {
                key: key,
                sheet: new StyleSheet({
                  key: key,
                  container: container,
                  nonce: options.nonce,
                  speedy: options.speedy
                }),
                nonce: options.nonce,
                inserted: inserted,
                registered: {},
                insert: _insert
              };
              return cache;
            };

            var isBrowser = "object" !== 'undefined';
            function getRegisteredStyles(registered, registeredStyles, classNames) {
              var rawClassName = '';
              classNames.split(' ').forEach(function (className) {
                if (registered[className] !== undefined) {
                  registeredStyles.push(registered[className]);
                } else {
                  rawClassName += className + " ";
                }
              });
              return rawClassName;
            }
            var insertStyles = function insertStyles(cache, serialized, isStringTag) {
              var className = cache.key + "-" + serialized.name;

              if ( // we only need to add the styles to the registered cache if the
              // class name could be used further down
              // the tree but if it's a string tag, we know it won't
              // so we don't have to add it to registered cache.
              // this improves memory usage since we can avoid storing the whole style string
              (isStringTag === false || // we need to always store it if we're in compat mode and
              // in node since emotion-server relies on whether a style is in
              // the registered cache to know whether a style is global or not
              // also, note that this check will be dead code eliminated in the browser
              isBrowser === false ) && cache.registered[className] === undefined) {
                cache.registered[className] = serialized.styles;
              }

              if (cache.inserted[serialized.name] === undefined) {
                var current = serialized;

                do {
                  cache.insert("." + className, current, cache.sheet, true);

                  current = current.next;
                } while (current !== undefined);
              }
            };

            /* eslint-disable */
            // Inspired by https://github.com/garycourt/murmurhash-js
            // Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
            function murmur2(str) {
              // 'm' and 'r' are mixing constants generated offline.
              // They're not really 'magic', they just happen to work well.
              // const m = 0x5bd1e995;
              // const r = 24;
              // Initialize the hash
              var h = 0; // Mix 4 bytes at a time into the hash

              var k,
                  i = 0,
                  len = str.length;

              for (; len >= 4; ++i, len -= 4) {
                k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
                k =
                /* Math.imul(k, m): */
                (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
                k ^=
                /* k >>> r: */
                k >>> 24;
                h =
                /* Math.imul(k, m): */
                (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
                /* Math.imul(h, m): */
                (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
              } // Handle the last few bytes of the input array


              switch (len) {
                case 3:
                  h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

                case 2:
                  h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

                case 1:
                  h ^= str.charCodeAt(i) & 0xff;
                  h =
                  /* Math.imul(h, m): */
                  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
              } // Do a few final mixes of the hash to ensure the last few
              // bytes are well-incorporated.


              h ^= h >>> 13;
              h =
              /* Math.imul(h, m): */
              (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
              return ((h ^ h >>> 15) >>> 0).toString(36);
            }

            var hyphenateRegex = /[A-Z]|^ms/g;
            var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

            var isCustomProperty = function isCustomProperty(property) {
              return property.charCodeAt(1) === 45;
            };

            var isProcessableValue = function isProcessableValue(value) {
              return value != null && typeof value !== 'boolean';
            };

            var processStyleName = memoize$1(function (styleName) {
              return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
            });

            var processStyleValue = function processStyleValue(key, value) {
              switch (key) {
                case 'animation':
                case 'animationName':
                  {
                    if (typeof value === 'string') {
                      return value.replace(animationRegex, function (match, p1, p2) {
                        cursor = {
                          name: p1,
                          styles: p2,
                          next: cursor
                        };
                        return p1;
                      });
                    }
                  }
              }

              if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
                return value + 'px';
              }

              return value;
            };

            function handleInterpolation(mergedProps, registered, interpolation, couldBeSelectorInterpolation) {
              if (interpolation == null) {
                return '';
              }

              if (interpolation.__emotion_styles !== undefined) {

                return interpolation;
              }

              switch (typeof interpolation) {
                case 'boolean':
                  {
                    return '';
                  }

                case 'object':
                  {
                    if (interpolation.anim === 1) {
                      cursor = {
                        name: interpolation.name,
                        styles: interpolation.styles,
                        next: cursor
                      };
                      return interpolation.name;
                    }

                    if (interpolation.styles !== undefined) {
                      var next = interpolation.next;

                      if (next !== undefined) {
                        // not the most efficient thing ever but this is a pretty rare case
                        // and there will be very few iterations of this generally
                        while (next !== undefined) {
                          cursor = {
                            name: next.name,
                            styles: next.styles,
                            next: cursor
                          };
                          next = next.next;
                        }
                      }

                      var styles = interpolation.styles + ";";

                      return styles;
                    }

                    return createStringFromObject(mergedProps, registered, interpolation);
                  }

                case 'function':
                  {
                    if (mergedProps !== undefined) {
                      var previousCursor = cursor;
                      var result = interpolation(mergedProps);
                      cursor = previousCursor;
                      return handleInterpolation(mergedProps, registered, result, couldBeSelectorInterpolation);
                    }

                    break;
                  }
              } // finalize string values (regular strings and functions interpolated into css calls)


              if (registered == null) {
                return interpolation;
              }

              var cached = registered[interpolation];

              return cached !== undefined && !couldBeSelectorInterpolation ? cached : interpolation;
            }

            function createStringFromObject(mergedProps, registered, obj) {
              var string = '';

              if (Array.isArray(obj)) {
                for (var i = 0; i < obj.length; i++) {
                  string += handleInterpolation(mergedProps, registered, obj[i], false);
                }
              } else {
                for (var _key in obj) {
                  var value = obj[_key];

                  if (typeof value !== 'object') {
                    if (registered != null && registered[value] !== undefined) {
                      string += _key + "{" + registered[value] + "}";
                    } else if (isProcessableValue(value)) {
                      string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
                    }
                  } else {
                    if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
                      throw new Error('Component selectors can only be used in conjunction with babel-plugin-emotion.');
                    }

                    if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
                      for (var _i = 0; _i < value.length; _i++) {
                        if (isProcessableValue(value[_i])) {
                          string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                        }
                      }
                    } else {
                      var interpolated = handleInterpolation(mergedProps, registered, value, false);

                      switch (_key) {
                        case 'animation':
                        case 'animationName':
                          {
                            string += processStyleName(_key) + ":" + interpolated + ";";
                            break;
                          }

                        default:
                          {

                            string += _key + "{" + interpolated + "}";
                          }
                      }
                    }
                  }
                }
              }

              return string;
            }

            var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
            // keyframes are stored on the SerializedStyles object as a linked list


            var cursor;
            var serializeStyles = function serializeStyles(args, registered, mergedProps) {
              if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
                return args[0];
              }

              var stringMode = true;
              var styles = '';
              cursor = undefined;
              var strings = args[0];

              if (strings == null || strings.raw === undefined) {
                stringMode = false;
                styles += handleInterpolation(mergedProps, registered, strings, false);
              } else {

                styles += strings[0];
              } // we start at 1 since we've already handled the first arg


              for (var i = 1; i < args.length; i++) {
                styles += handleInterpolation(mergedProps, registered, args[i], styles.charCodeAt(styles.length - 1) === 46);

                if (stringMode) {

                  styles += strings[i];
                }
              }


              labelPattern.lastIndex = 0;
              var identifierName = '';
              var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

              while ((match = labelPattern.exec(styles)) !== null) {
                identifierName += '-' + // $FlowFixMe we know it's not null
                match[1];
              }

              var name = murmur2(styles) + identifierName;

              return {
                name: name,
                styles: styles,
                next: cursor
              };
            };

            var EmotionCacheContext = /*#__PURE__*/React.createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case
            // because this module is primarily intended for the browser and node
            // but it's also required in react native and similar environments sometimes
            // and we could have a special build just for that
            // but this is much easier and the native packages
            // might use a different theme context in the future anyway
            typeof HTMLElement !== 'undefined' ? createCache() : null);
            var ThemeContext$1 = /*#__PURE__*/React.createContext({});
            EmotionCacheContext.Provider;

            var withEmotionCache = function withEmotionCache(func) {
              var render = function render(props, ref) {
                return /*#__PURE__*/React.createElement(EmotionCacheContext.Consumer, null, function (cache) {
                  return func(props, cache, ref);
                });
              }; // $FlowFixMe


              return /*#__PURE__*/React.forwardRef(render);
            };

            var testOmitPropsOnStringTag = index;

            var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
              return key !== 'theme' && key !== 'innerRef';
            };

            var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
              return typeof tag === 'string' && // 96 is one less than the char code
              // for "a" so this is checking that
              // it's a lowercase character
              tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
            };

            function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

            function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

            var Noop = function Noop() {
              return null;
            };

            var createStyled = function createStyled(tag, options) {

              var identifierName;
              var shouldForwardProp;
              var targetClassName;

              if (options !== undefined) {
                identifierName = options.label;
                targetClassName = options.target;
                shouldForwardProp = tag.__emotion_forwardProp && options.shouldForwardProp ? function (propName) {
                  return tag.__emotion_forwardProp(propName) && // $FlowFixMe
                  options.shouldForwardProp(propName);
                } : options.shouldForwardProp;
              }

              var isReal = tag.__emotion_real === tag;
              var baseTag = isReal && tag.__emotion_base || tag;

              if (typeof shouldForwardProp !== 'function' && isReal) {
                shouldForwardProp = tag.__emotion_forwardProp;
              }

              var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
              var shouldUseAs = !defaultShouldForwardProp('as');
              return function () {
                var args = arguments;
                var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];

                if (identifierName !== undefined) {
                  styles.push("label:" + identifierName + ";");
                }

                if (args[0] == null || args[0].raw === undefined) {
                  styles.push.apply(styles, args);
                } else {

                  styles.push(args[0][0]);
                  var len = args.length;
                  var i = 1;

                  for (; i < len; i++) {

                    styles.push(args[i], args[0][i]);
                  }
                } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class


                var Styled = withEmotionCache(function (props, context, ref) {
                  return /*#__PURE__*/React.createElement(ThemeContext$1.Consumer, null, function (theme) {
                    var finalTag = shouldUseAs && props.as || baseTag;
                    var className = '';
                    var classInterpolations = [];
                    var mergedProps = props;

                    if (props.theme == null) {
                      mergedProps = {};

                      for (var key in props) {
                        mergedProps[key] = props[key];
                      }

                      mergedProps.theme = theme;
                    }

                    if (typeof props.className === 'string') {
                      className = getRegisteredStyles(context.registered, classInterpolations, props.className);
                    } else if (props.className != null) {
                      className = props.className + " ";
                    }

                    var serialized = serializeStyles(styles.concat(classInterpolations), context.registered, mergedProps);
                    insertStyles(context, serialized, typeof finalTag === 'string');
                    className += context.key + "-" + serialized.name;

                    if (targetClassName !== undefined) {
                      className += " " + targetClassName;
                    }

                    var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
                    var newProps = {};

                    for (var _key in props) {
                      if (shouldUseAs && _key === 'as') continue;

                      if ( // $FlowFixMe
                      finalShouldForwardProp(_key)) {
                        newProps[_key] = props[_key];
                      }
                    }

                    newProps.className = className;
                    newProps.ref = ref || props.innerRef;

                    var ele = /*#__PURE__*/React.createElement(finalTag, newProps);
                    var possiblyStyleElement = /*#__PURE__*/React.createElement(Noop, null);


                    return /*#__PURE__*/React.createElement(React.Fragment, null, possiblyStyleElement, ele);
                  });
                });
                Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
                Styled.defaultProps = tag.defaultProps;
                Styled.__emotion_real = Styled;
                Styled.__emotion_base = baseTag;
                Styled.__emotion_styles = styles;
                Styled.__emotion_forwardProp = shouldForwardProp;
                Object.defineProperty(Styled, 'toString', {
                  value: function value() {
                    if (targetClassName === undefined && "production" !== 'production') {
                      return 'NO_COMPONENT_SELECTOR';
                    } // $FlowFixMe: coerce undefined to string


                    return "." + targetClassName;
                  }
                });

                Styled.withComponent = function (nextTag, nextOptions) {
                  return createStyled(nextTag, nextOptions !== undefined ? _objectSpread({}, options || {}, {}, nextOptions) : options).apply(void 0, styles);
                };

                return Styled;
              };
            };

            var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG
            'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];

            var newStyled = createStyled.bind();
            tags.forEach(function (tagName) {
              newStyled[tagName] = newStyled(tagName);
            });

            var styled_browser_esm = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        'default': newStyled
            });

            var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(styled_browser_esm);

            var merge = function merge(a, b) {
              var result = objectAssign({}, a, b);

              for (var key in a) {
                var _assign;

                if (!a[key] || typeof b[key] !== 'object') continue;
                objectAssign(result, (_assign = {}, _assign[key] = objectAssign(a[key], b[key]), _assign));
              }

              return result;
            }; // sort object-value responsive styles

            var sort = function sort(obj) {
              var next = {};
              Object.keys(obj).sort(function (a, b) {
                return a.localeCompare(b, undefined, {
                  numeric: true,
                  sensitivity: 'base'
                });
              }).forEach(function (key) {
                next[key] = obj[key];
              });
              return next;
            };

            var defaults$4 = {
              breakpoints: [40, 52, 64].map(function (n) {
                return n + 'em';
              })
            };

            var createMediaQuery = function createMediaQuery(n) {
              return "@media screen and (min-width: " + n + ")";
            };

            var getValue = function getValue(n, scale) {
              return get$1(scale, n, n);
            };

            var get$1 = function get(obj, key, def, p, undef) {
              key = key && key.split ? key.split('.') : [key];

              for (p = 0; p < key.length; p++) {
                obj = obj ? obj[key[p]] : undef;
              }

              return obj === undef ? def : obj;
            };
            var createParser = function createParser(config) {
              var cache = {};

              var parse = function parse(props) {
                var styles = {};
                var shouldSort = false;
                var isCacheDisabled = props.theme && props.theme.disableStyledSystemCache;

                for (var key in props) {
                  if (!config[key]) continue;
                  var sx = config[key];
                  var raw = props[key];
                  var scale = get$1(props.theme, sx.scale, sx.defaults);

                  if (typeof raw === 'object') {
                    cache.breakpoints = !isCacheDisabled && cache.breakpoints || get$1(props.theme, 'breakpoints', defaults$4.breakpoints);

                    if (Array.isArray(raw)) {
                      cache.media = !isCacheDisabled && cache.media || [null].concat(cache.breakpoints.map(createMediaQuery));
                      styles = merge(styles, parseResponsiveStyle(cache.media, sx, scale, raw, props));
                      continue;
                    }

                    if (raw !== null) {
                      styles = merge(styles, parseResponsiveObject(cache.breakpoints, sx, scale, raw, props));
                      shouldSort = true;
                    }

                    continue;
                  }

                  objectAssign(styles, sx(raw, scale, props));
                } // sort object-based responsive styles


                if (shouldSort) {
                  styles = sort(styles);
                }

                return styles;
              };

              parse.config = config;
              parse.propNames = Object.keys(config);
              parse.cache = cache;
              var keys = Object.keys(config).filter(function (k) {
                return k !== 'config';
              });

              if (keys.length > 1) {
                keys.forEach(function (key) {
                  var _createParser;

                  parse[key] = createParser((_createParser = {}, _createParser[key] = config[key], _createParser));
                });
              }

              return parse;
            };

            var parseResponsiveStyle = function parseResponsiveStyle(mediaQueries, sx, scale, raw, _props) {
              var styles = {};
              raw.slice(0, mediaQueries.length).forEach(function (value, i) {
                var media = mediaQueries[i];
                var style = sx(value, scale, _props);

                if (!media) {
                  objectAssign(styles, style);
                } else {
                  var _assign2;

                  objectAssign(styles, (_assign2 = {}, _assign2[media] = objectAssign({}, styles[media], style), _assign2));
                }
              });
              return styles;
            };

            var parseResponsiveObject = function parseResponsiveObject(breakpoints, sx, scale, raw, _props) {
              var styles = {};

              for (var key in raw) {
                var breakpoint = breakpoints[key];
                var value = raw[key];
                var style = sx(value, scale, _props);

                if (!breakpoint) {
                  objectAssign(styles, style);
                } else {
                  var _assign3;

                  var media = createMediaQuery(breakpoint);
                  objectAssign(styles, (_assign3 = {}, _assign3[media] = objectAssign({}, styles[media], style), _assign3));
                }
              }

              return styles;
            };

            var createStyleFunction = function createStyleFunction(_ref) {
              var properties = _ref.properties,
                  property = _ref.property,
                  scale = _ref.scale,
                  _ref$transform = _ref.transform,
                  transform = _ref$transform === void 0 ? getValue : _ref$transform,
                  defaultScale = _ref.defaultScale;
              properties = properties || [property];

              var sx = function sx(value, scale, _props) {
                var result = {};
                var n = transform(value, scale, _props);
                if (n === null) return;
                properties.forEach(function (prop) {
                  result[prop] = n;
                });
                return result;
              };

              sx.scale = scale;
              sx.defaults = defaultScale;
              return sx;
            }; // new v5 API

            var system = function system(args) {
              if (args === void 0) {
                args = {};
              }

              var config = {};
              Object.keys(args).forEach(function (key) {
                var conf = args[key];

                if (conf === true) {
                  // shortcut definition
                  config[key] = createStyleFunction({
                    property: key,
                    scale: key
                  });
                  return;
                }

                if (typeof conf === 'function') {
                  config[key] = conf;
                  return;
                }

                config[key] = createStyleFunction(conf);
              });
              var parser = createParser(config);
              return parser;
            };
            var compose = function compose() {
              var config = {};

              for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
                parsers[_key] = arguments[_key];
              }

              parsers.forEach(function (parser) {
                if (!parser || !parser.config) return;
                objectAssign(config, parser.config);
              });
              var parser = createParser(config);
              return parser;
            };

            var isNumber$1 = function isNumber(n) {
              return typeof n === 'number' && !isNaN(n);
            };

            var getWidth = function getWidth(n, scale) {
              return get$1(scale, n, !isNumber$1(n) || n > 1 ? n : n * 100 + '%');
            };

            var config$7 = {
              width: {
                property: 'width',
                scale: 'sizes',
                transform: getWidth
              },
              height: {
                property: 'height',
                scale: 'sizes'
              },
              minWidth: {
                property: 'minWidth',
                scale: 'sizes'
              },
              minHeight: {
                property: 'minHeight',
                scale: 'sizes'
              },
              maxWidth: {
                property: 'maxWidth',
                scale: 'sizes'
              },
              maxHeight: {
                property: 'maxHeight',
                scale: 'sizes'
              },
              size: {
                properties: ['width', 'height'],
                scale: 'sizes'
              },
              overflow: true,
              overflowX: true,
              overflowY: true,
              display: true,
              verticalAlign: true
            };
            var layout = system(config$7);

            var config$6 = {
              color: {
                property: 'color',
                scale: 'colors'
              },
              backgroundColor: {
                property: 'backgroundColor',
                scale: 'colors'
              },
              opacity: true
            };
            config$6.bg = config$6.backgroundColor;
            var color = system(config$6);

            var defaults$3 = {
              fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
            };
            var config$5 = {
              fontFamily: {
                property: 'fontFamily',
                scale: 'fonts'
              },
              fontSize: {
                property: 'fontSize',
                scale: 'fontSizes',
                defaultScale: defaults$3.fontSizes
              },
              fontWeight: {
                property: 'fontWeight',
                scale: 'fontWeights'
              },
              lineHeight: {
                property: 'lineHeight',
                scale: 'lineHeights'
              },
              letterSpacing: {
                property: 'letterSpacing',
                scale: 'letterSpacings'
              },
              textAlign: true,
              fontStyle: true
            };
            var typography = system(config$5);

            var config$4 = {
              alignItems: true,
              alignContent: true,
              justifyItems: true,
              justifyContent: true,
              flexWrap: true,
              flexDirection: true,
              // item
              flex: true,
              flexGrow: true,
              flexShrink: true,
              flexBasis: true,
              justifySelf: true,
              alignSelf: true,
              order: true
            };
            var flexbox = system(config$4);

            var defaults$2 = {
              space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
            };
            var config$3 = {
              gridGap: {
                property: 'gridGap',
                scale: 'space',
                defaultScale: defaults$2.space
              },
              gridColumnGap: {
                property: 'gridColumnGap',
                scale: 'space',
                defaultScale: defaults$2.space
              },
              gridRowGap: {
                property: 'gridRowGap',
                scale: 'space',
                defaultScale: defaults$2.space
              },
              gridColumn: true,
              gridRow: true,
              gridAutoFlow: true,
              gridAutoColumns: true,
              gridAutoRows: true,
              gridTemplateColumns: true,
              gridTemplateRows: true,
              gridTemplateAreas: true,
              gridArea: true
            };
            var grid = system(config$3);

            var config$2 = {
              border: {
                property: 'border',
                scale: 'borders'
              },
              borderWidth: {
                property: 'borderWidth',
                scale: 'borderWidths'
              },
              borderStyle: {
                property: 'borderStyle',
                scale: 'borderStyles'
              },
              borderColor: {
                property: 'borderColor',
                scale: 'colors'
              },
              borderRadius: {
                property: 'borderRadius',
                scale: 'radii'
              },
              borderTop: {
                property: 'borderTop',
                scale: 'borders'
              },
              borderTopLeftRadius: {
                property: 'borderTopLeftRadius',
                scale: 'radii'
              },
              borderTopRightRadius: {
                property: 'borderTopRightRadius',
                scale: 'radii'
              },
              borderRight: {
                property: 'borderRight',
                scale: 'borders'
              },
              borderBottom: {
                property: 'borderBottom',
                scale: 'borders'
              },
              borderBottomLeftRadius: {
                property: 'borderBottomLeftRadius',
                scale: 'radii'
              },
              borderBottomRightRadius: {
                property: 'borderBottomRightRadius',
                scale: 'radii'
              },
              borderLeft: {
                property: 'borderLeft',
                scale: 'borders'
              },
              borderX: {
                properties: ['borderLeft', 'borderRight'],
                scale: 'borders'
              },
              borderY: {
                properties: ['borderTop', 'borderBottom'],
                scale: 'borders'
              }
            };
            config$2.borderTopWidth = {
              property: 'borderTopWidth',
              scale: 'borderWidths'
            };
            config$2.borderTopColor = {
              property: 'borderTopColor',
              scale: 'colors'
            };
            config$2.borderTopStyle = {
              property: 'borderTopStyle',
              scale: 'borderStyles'
            };
            config$2.borderTopLeftRadius = {
              property: 'borderTopLeftRadius',
              scale: 'radii'
            };
            config$2.borderTopRightRadius = {
              property: 'borderTopRightRadius',
              scale: 'radii'
            };
            config$2.borderBottomWidth = {
              property: 'borderBottomWidth',
              scale: 'borderWidths'
            };
            config$2.borderBottomColor = {
              property: 'borderBottomColor',
              scale: 'colors'
            };
            config$2.borderBottomStyle = {
              property: 'borderBottomStyle',
              scale: 'borderStyles'
            };
            config$2.borderBottomLeftRadius = {
              property: 'borderBottomLeftRadius',
              scale: 'radii'
            };
            config$2.borderBottomRightRadius = {
              property: 'borderBottomRightRadius',
              scale: 'radii'
            };
            config$2.borderLeftWidth = {
              property: 'borderLeftWidth',
              scale: 'borderWidths'
            };
            config$2.borderLeftColor = {
              property: 'borderLeftColor',
              scale: 'colors'
            };
            config$2.borderLeftStyle = {
              property: 'borderLeftStyle',
              scale: 'borderStyles'
            };
            config$2.borderRightWidth = {
              property: 'borderRightWidth',
              scale: 'borderWidths'
            };
            config$2.borderRightColor = {
              property: 'borderRightColor',
              scale: 'colors'
            };
            config$2.borderRightStyle = {
              property: 'borderRightStyle',
              scale: 'borderStyles'
            };
            var border = system(config$2);

            var config$1 = {
              background: true,
              backgroundImage: true,
              backgroundSize: true,
              backgroundPosition: true,
              backgroundRepeat: true
            };
            config$1.bgImage = config$1.backgroundImage;
            config$1.bgSize = config$1.backgroundSize;
            config$1.bgPosition = config$1.backgroundPosition;
            config$1.bgRepeat = config$1.backgroundRepeat;
            var background = system(config$1);

            var defaults$1 = {
              space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
            };
            var config = {
              position: true,
              zIndex: {
                property: 'zIndex',
                scale: 'zIndices'
              },
              top: {
                property: 'top',
                scale: 'space',
                defaultScale: defaults$1.space
              },
              right: {
                property: 'right',
                scale: 'space',
                defaultScale: defaults$1.space
              },
              bottom: {
                property: 'bottom',
                scale: 'space',
                defaultScale: defaults$1.space
              },
              left: {
                property: 'left',
                scale: 'space',
                defaultScale: defaults$1.space
              }
            };
            var position = system(config);

            var defaults = {
              space: [0, 4, 8, 16, 32, 64, 128, 256, 512]
            };

            var isNumber = function isNumber(n) {
              return typeof n === 'number' && !isNaN(n);
            };

            var getMargin = function getMargin(n, scale) {
              if (!isNumber(n)) {
                return get$1(scale, n, n);
              }

              var isNegative = n < 0;
              var absolute = Math.abs(n);
              var value = get$1(scale, absolute, absolute);

              if (!isNumber(value)) {
                return isNegative ? '-' + value : value;
              }

              return value * (isNegative ? -1 : 1);
            };

            var configs = {};
            configs.margin = {
              margin: {
                property: 'margin',
                scale: 'space',
                transform: getMargin,
                defaultScale: defaults.space
              },
              marginTop: {
                property: 'marginTop',
                scale: 'space',
                transform: getMargin,
                defaultScale: defaults.space
              },
              marginRight: {
                property: 'marginRight',
                scale: 'space',
                transform: getMargin,
                defaultScale: defaults.space
              },
              marginBottom: {
                property: 'marginBottom',
                scale: 'space',
                transform: getMargin,
                defaultScale: defaults.space
              },
              marginLeft: {
                property: 'marginLeft',
                scale: 'space',
                transform: getMargin,
                defaultScale: defaults.space
              },
              marginX: {
                properties: ['marginLeft', 'marginRight'],
                scale: 'space',
                transform: getMargin,
                defaultScale: defaults.space
              },
              marginY: {
                properties: ['marginTop', 'marginBottom'],
                scale: 'space',
                transform: getMargin,
                defaultScale: defaults.space
              }
            };
            configs.margin.m = configs.margin.margin;
            configs.margin.mt = configs.margin.marginTop;
            configs.margin.mr = configs.margin.marginRight;
            configs.margin.mb = configs.margin.marginBottom;
            configs.margin.ml = configs.margin.marginLeft;
            configs.margin.mx = configs.margin.marginX;
            configs.margin.my = configs.margin.marginY;
            configs.padding = {
              padding: {
                property: 'padding',
                scale: 'space',
                defaultScale: defaults.space
              },
              paddingTop: {
                property: 'paddingTop',
                scale: 'space',
                defaultScale: defaults.space
              },
              paddingRight: {
                property: 'paddingRight',
                scale: 'space',
                defaultScale: defaults.space
              },
              paddingBottom: {
                property: 'paddingBottom',
                scale: 'space',
                defaultScale: defaults.space
              },
              paddingLeft: {
                property: 'paddingLeft',
                scale: 'space',
                defaultScale: defaults.space
              },
              paddingX: {
                properties: ['paddingLeft', 'paddingRight'],
                scale: 'space',
                defaultScale: defaults.space
              },
              paddingY: {
                properties: ['paddingTop', 'paddingBottom'],
                scale: 'space',
                defaultScale: defaults.space
              }
            };
            configs.padding.p = configs.padding.padding;
            configs.padding.pt = configs.padding.paddingTop;
            configs.padding.pr = configs.padding.paddingRight;
            configs.padding.pb = configs.padding.paddingBottom;
            configs.padding.pl = configs.padding.paddingLeft;
            configs.padding.px = configs.padding.paddingX;
            configs.padding.py = configs.padding.paddingY;
            var margin = system(configs.margin);
            var padding$1 = system(configs.padding);
            var space = compose(margin, padding$1);

            var shadow = system({
              boxShadow: {
                property: 'boxShadow',
                scale: 'shadows'
              },
              textShadow: {
                property: 'textShadow',
                scale: 'shadows'
              }
            });

            function _extends$f() { _extends$f = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$f.apply(this, arguments); }

            // based on https://github.com/developit/dlv
            var get = function get(obj, key, def, p, undef) {
              key = key && key.split ? key.split('.') : [key];

              for (p = 0; p < key.length; p++) {
                obj = obj ? obj[key[p]] : undef;
              }

              return obj === undef ? def : obj;
            };
            var defaultBreakpoints = [40, 52, 64].map(function (n) {
              return n + 'em';
            });
            var defaultTheme$1 = {
              space: [0, 4, 8, 16, 32, 64, 128, 256, 512],
              fontSizes: [12, 14, 16, 20, 24, 32, 48, 64, 72]
            };
            var aliases = {
              bg: 'backgroundColor',
              m: 'margin',
              mt: 'marginTop',
              mr: 'marginRight',
              mb: 'marginBottom',
              ml: 'marginLeft',
              mx: 'marginX',
              my: 'marginY',
              p: 'padding',
              pt: 'paddingTop',
              pr: 'paddingRight',
              pb: 'paddingBottom',
              pl: 'paddingLeft',
              px: 'paddingX',
              py: 'paddingY'
            };
            var multiples = {
              marginX: ['marginLeft', 'marginRight'],
              marginY: ['marginTop', 'marginBottom'],
              paddingX: ['paddingLeft', 'paddingRight'],
              paddingY: ['paddingTop', 'paddingBottom'],
              size: ['width', 'height']
            };
            var scales = {
              color: 'colors',
              backgroundColor: 'colors',
              borderColor: 'colors',
              margin: 'space',
              marginTop: 'space',
              marginRight: 'space',
              marginBottom: 'space',
              marginLeft: 'space',
              marginX: 'space',
              marginY: 'space',
              padding: 'space',
              paddingTop: 'space',
              paddingRight: 'space',
              paddingBottom: 'space',
              paddingLeft: 'space',
              paddingX: 'space',
              paddingY: 'space',
              top: 'space',
              right: 'space',
              bottom: 'space',
              left: 'space',
              gridGap: 'space',
              gridColumnGap: 'space',
              gridRowGap: 'space',
              gap: 'space',
              columnGap: 'space',
              rowGap: 'space',
              fontFamily: 'fonts',
              fontSize: 'fontSizes',
              fontWeight: 'fontWeights',
              lineHeight: 'lineHeights',
              letterSpacing: 'letterSpacings',
              border: 'borders',
              borderTop: 'borders',
              borderRight: 'borders',
              borderBottom: 'borders',
              borderLeft: 'borders',
              borderWidth: 'borderWidths',
              borderStyle: 'borderStyles',
              borderRadius: 'radii',
              borderTopRightRadius: 'radii',
              borderTopLeftRadius: 'radii',
              borderBottomRightRadius: 'radii',
              borderBottomLeftRadius: 'radii',
              borderTopWidth: 'borderWidths',
              borderTopColor: 'colors',
              borderTopStyle: 'borderStyles',
              borderBottomWidth: 'borderWidths',
              borderBottomColor: 'colors',
              borderBottomStyle: 'borderStyles',
              borderLeftWidth: 'borderWidths',
              borderLeftColor: 'colors',
              borderLeftStyle: 'borderStyles',
              borderRightWidth: 'borderWidths',
              borderRightColor: 'colors',
              borderRightStyle: 'borderStyles',
              outlineColor: 'colors',
              boxShadow: 'shadows',
              textShadow: 'shadows',
              zIndex: 'zIndices',
              width: 'sizes',
              minWidth: 'sizes',
              maxWidth: 'sizes',
              height: 'sizes',
              minHeight: 'sizes',
              maxHeight: 'sizes',
              flexBasis: 'sizes',
              size: 'sizes',
              // svg
              fill: 'colors',
              stroke: 'colors'
            };

            var positiveOrNegative = function positiveOrNegative(scale, value) {
              if (typeof value !== 'number' || value >= 0) {
                return get(scale, value, value);
              }

              var absolute = Math.abs(value);
              var n = get(scale, absolute, absolute);
              if (typeof n === 'string') return '-' + n;
              return n * -1;
            };

            var transforms = ['margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'top', 'bottom', 'left', 'right'].reduce(function (acc, curr) {
              var _extends2;

              return _extends$f({}, acc, (_extends2 = {}, _extends2[curr] = positiveOrNegative, _extends2));
            }, {});
            var responsive = function responsive(styles) {
              return function (theme) {
                var next = {};
                var breakpoints = get(theme, 'breakpoints', defaultBreakpoints);
                var mediaQueries = [null].concat(breakpoints.map(function (n) {
                  return "@media screen and (min-width: " + n + ")";
                }));

                for (var key in styles) {
                  var value = typeof styles[key] === 'function' ? styles[key](theme) : styles[key];
                  if (value == null) continue;

                  if (!Array.isArray(value)) {
                    next[key] = value;
                    continue;
                  }

                  for (var i = 0; i < value.slice(0, mediaQueries.length).length; i++) {
                    var media = mediaQueries[i];

                    if (!media) {
                      next[key] = value[i];
                      continue;
                    }

                    next[media] = next[media] || {};
                    if (value[i] == null) continue;
                    next[media][key] = value[i];
                  }
                }

                return next;
              };
            };
            var css = function css(args) {
              return function (props) {
                if (props === void 0) {
                  props = {};
                }

                var theme = _extends$f({}, defaultTheme$1, {}, props.theme || props);

                var result = {};
                var obj = typeof args === 'function' ? args(theme) : args;
                var styles = responsive(obj)(theme);

                for (var key in styles) {
                  var x = styles[key];
                  var val = typeof x === 'function' ? x(theme) : x;

                  if (key === 'variant') {
                    var variant = css(get(theme, val))(theme);
                    result = _extends$f({}, result, {}, variant);
                    continue;
                  }

                  if (val && typeof val === 'object') {
                    result[key] = css(val)(theme);
                    continue;
                  }

                  var prop = get(aliases, key, key);
                  var scaleName = get(scales, prop);
                  var scale = get(theme, scaleName, get(theme, prop, {}));
                  var transform = get(transforms, prop, get);
                  var value = transform(scale, val, val);

                  if (multiples[prop]) {
                    var dirs = multiples[prop];

                    for (var i = 0; i < dirs.length; i++) {
                      result[dirs[i]] = value;
                    }
                  } else {
                    result[prop] = value;
                  }
                }

                return result;
              };
            };
            var css$1 = css;

            var index_esm$3 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        get: get,
                        responsive: responsive,
                        css: css,
                        'default': css$1
            });

            var variant$1 = function variant(_ref) {
              var _config;

              var scale = _ref.scale,
                  _ref$prop = _ref.prop,
                  prop = _ref$prop === void 0 ? 'variant' : _ref$prop,
                  _ref$variants = _ref.variants,
                  variants = _ref$variants === void 0 ? {} : _ref$variants,
                  key = _ref.key;
              var sx;

              if (Object.keys(variants).length) {
                sx = function sx(value, scale, props) {
                  return css$1(get$1(scale, value, null))(props.theme);
                };
              } else {
                sx = function sx(value, scale) {
                  return get$1(scale, value, null);
                };
              }

              sx.scale = scale || key;
              sx.defaults = variants;
              var config = (_config = {}, _config[prop] = sx, _config);
              var parser = createParser(config);
              return parser;
            };
            var buttonStyle = variant$1({
              key: 'buttons'
            });
            var textStyle = variant$1({
              key: 'textStyles',
              prop: 'textStyle'
            });
            var colorStyle = variant$1({
              key: 'colorStyles',
              prop: 'colors'
            });

            var width = layout.width,
                height = layout.height,
                minWidth = layout.minWidth,
                minHeight = layout.minHeight,
                maxWidth = layout.maxWidth,
                maxHeight = layout.maxHeight,
                size = layout.size,
                verticalAlign = layout.verticalAlign,
                display = layout.display,
                overflow = layout.overflow,
                overflowX = layout.overflowX,
                overflowY = layout.overflowY;
            var opacity = color.opacity;
            var fontSize = typography.fontSize,
                fontFamily = typography.fontFamily,
                fontWeight = typography.fontWeight,
                lineHeight = typography.lineHeight,
                textAlign = typography.textAlign,
                fontStyle = typography.fontStyle,
                letterSpacing = typography.letterSpacing;
            var alignItems = flexbox.alignItems,
                alignContent = flexbox.alignContent,
                justifyItems = flexbox.justifyItems,
                justifyContent = flexbox.justifyContent,
                flexWrap = flexbox.flexWrap,
                flexDirection = flexbox.flexDirection,
                flex = flexbox.flex,
                flexGrow = flexbox.flexGrow,
                flexShrink = flexbox.flexShrink,
                flexBasis = flexbox.flexBasis,
                justifySelf = flexbox.justifySelf,
                alignSelf = flexbox.alignSelf,
                order = flexbox.order;
            var gridGap = grid.gridGap,
                gridColumnGap = grid.gridColumnGap,
                gridRowGap = grid.gridRowGap,
                gridColumn = grid.gridColumn,
                gridRow = grid.gridRow,
                gridAutoFlow = grid.gridAutoFlow,
                gridAutoColumns = grid.gridAutoColumns,
                gridAutoRows = grid.gridAutoRows,
                gridTemplateColumns = grid.gridTemplateColumns,
                gridTemplateRows = grid.gridTemplateRows,
                gridTemplateAreas = grid.gridTemplateAreas,
                gridArea = grid.gridArea;
            var borderWidth = border.borderWidth,
                borderStyle = border.borderStyle,
                borderColor = border.borderColor,
                borderTop = border.borderTop,
                borderRight = border.borderRight,
                borderBottom = border.borderBottom,
                borderLeft = border.borderLeft,
                borderRadius = border.borderRadius;
            var backgroundImage = background.backgroundImage,
                backgroundSize = background.backgroundSize,
                backgroundPosition = background.backgroundPosition,
                backgroundRepeat = background.backgroundRepeat;
            var zIndex = position.zIndex,
                top = position.top,
                right = position.right,
                bottom = position.bottom,
                left = position.left;

            var style = function style(_ref) {
              var prop = _ref.prop,
                  cssProperty = _ref.cssProperty,
                  alias = _ref.alias,
                  key = _ref.key,
                  transformValue = _ref.transformValue,
                  scale = _ref.scale,
                  properties = _ref.properties;
              var config = {};
              config[prop] = createStyleFunction({
                properties: properties,
                property: cssProperty || prop,
                scale: key,
                defaultScale: scale,
                transform: transformValue
              });
              if (alias) config[alias] = config[prop];
              var parse = createParser(config);
              return parse;
            };

            var index_esm$2 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        width: width,
                        height: height,
                        minWidth: minWidth,
                        minHeight: minHeight,
                        maxWidth: maxWidth,
                        maxHeight: maxHeight,
                        size: size,
                        verticalAlign: verticalAlign,
                        display: display,
                        overflow: overflow,
                        overflowX: overflowX,
                        overflowY: overflowY,
                        opacity: opacity,
                        fontSize: fontSize,
                        fontFamily: fontFamily,
                        fontWeight: fontWeight,
                        lineHeight: lineHeight,
                        textAlign: textAlign,
                        fontStyle: fontStyle,
                        letterSpacing: letterSpacing,
                        alignItems: alignItems,
                        alignContent: alignContent,
                        justifyItems: justifyItems,
                        justifyContent: justifyContent,
                        flexWrap: flexWrap,
                        flexDirection: flexDirection,
                        flex: flex,
                        flexGrow: flexGrow,
                        flexShrink: flexShrink,
                        flexBasis: flexBasis,
                        justifySelf: justifySelf,
                        alignSelf: alignSelf,
                        order: order,
                        gridGap: gridGap,
                        gridColumnGap: gridColumnGap,
                        gridRowGap: gridRowGap,
                        gridColumn: gridColumn,
                        gridRow: gridRow,
                        gridAutoFlow: gridAutoFlow,
                        gridAutoColumns: gridAutoColumns,
                        gridAutoRows: gridAutoRows,
                        gridTemplateColumns: gridTemplateColumns,
                        gridTemplateRows: gridTemplateRows,
                        gridTemplateAreas: gridTemplateAreas,
                        gridArea: gridArea,
                        borderWidth: borderWidth,
                        borderStyle: borderStyle,
                        borderColor: borderColor,
                        borderTop: borderTop,
                        borderRight: borderRight,
                        borderBottom: borderBottom,
                        borderLeft: borderLeft,
                        borderRadius: borderRadius,
                        backgroundImage: backgroundImage,
                        backgroundSize: backgroundSize,
                        backgroundPosition: backgroundPosition,
                        backgroundRepeat: backgroundRepeat,
                        zIndex: zIndex,
                        top: top,
                        right: right,
                        bottom: bottom,
                        left: left,
                        style: style,
                        get: get$1,
                        createParser: createParser,
                        createStyleFunction: createStyleFunction,
                        compose: compose,
                        system: system,
                        margin: margin,
                        padding: padding$1,
                        space: space,
                        color: color,
                        layout: layout,
                        typography: typography,
                        flexbox: flexbox,
                        border: border,
                        background: background,
                        position: position,
                        grid: grid,
                        shadow: shadow,
                        boxShadow: shadow,
                        textShadow: shadow,
                        variant: variant$1,
                        buttonStyle: buttonStyle,
                        textStyle: textStyle,
                        colorStyle: colorStyle,
                        borders: border
            });

            var require$$2$2 = /*@__PURE__*/getAugmentedNamespace(index_esm$2);

            var require$$3$1 = /*@__PURE__*/getAugmentedNamespace(index_esm$3);

            function memoize(fn) {
              var cache = Object.create(null);
              return function (arg) {
                if (cache[arg] === undefined) cache[arg] = fn(arg);
                return cache[arg];
              };
            }

            var all = compose(space, typography, color, layout, flexbox, border, background, position, grid, shadow, buttonStyle, textStyle, colorStyle);
            var props = all.propNames;
            var createShouldForwardProp = function createShouldForwardProp(props) {
              var regex = new RegExp("^(" + props.join('|') + ")$");
              return memoize(function (prop) {
                return index(prop) && !regex.test(prop);
              });
            };
            var index_esm = createShouldForwardProp(props);

            var index_esm$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        props: props,
                        createShouldForwardProp: createShouldForwardProp,
                        'default': index_esm
            });

            var require$$4$2 = /*@__PURE__*/getAugmentedNamespace(index_esm$1);

            Object.defineProperty(dist, "__esModule", {
              value: true
            });
            dist.Flex = Box_1 = dist.Box = void 0;

            _interopRequireDefault(React__default['default']);

            var _styled = _interopRequireDefault(require$$1$1);

            var _styledSystem = require$$2$2;

            var _css = _interopRequireWildcard(require$$3$1);

            var _shouldForwardProp = _interopRequireDefault(require$$4$2);

            function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

            function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

            function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

            var sx = function sx(props) {
              return (0, _css["default"])(props.sx)(props.theme);
            };

            var base$4 = function base(props) {
              return (0, _css["default"])(props.__css)(props.theme);
            };

            var variant = function variant(_ref) {
              var theme = _ref.theme,
                  variant = _ref.variant,
                  _ref$tx = _ref.tx,
                  tx = _ref$tx === void 0 ? 'variants' : _ref$tx;
              return (0, _css["default"])((0, _css.get)(theme, tx + '.' + variant, (0, _css.get)(theme, variant)))(theme);
            };

            var Box = (0, _styled["default"])('div', {
              shouldForwardProp: _shouldForwardProp["default"]
            })({
              boxSizing: 'border-box',
              margin: 0,
              minWidth: 0
            }, base$4, variant, sx, function (props) {
              return props.css;
            }, (0, _styledSystem.compose)(_styledSystem.space, _styledSystem.layout, _styledSystem.typography, _styledSystem.color, _styledSystem.flexbox));
            var Box_1 = dist.Box = Box;
            var Flex = (0, _styled["default"])(Box)({
              display: 'flex'
            });
            dist.Flex = Flex;

            function _extends$e() { _extends$e = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$e.apply(this, arguments); }
            var Text = React.forwardRef(function (props, ref) {
              return React__default['default'].createElement(Box_1, _extends$e({
                ref: ref,
                tx: "text"
              }, props));
            });
            React.forwardRef(function (props, ref) {
              return React__default['default'].createElement(Box_1, _extends$e({
                ref: ref,
                as: "h2",
                tx: "text",
                variant: "heading"
              }, props, {
                __css: {
                  fontSize: 4,
                  fontFamily: 'heading',
                  fontWeight: 'heading',
                  lineHeight: 'heading'
                }
              }));
            });
            React.forwardRef(function (props, ref) {
              return React__default['default'].createElement(Box_1, _extends$e({
                ref: ref,
                as: "a",
                variant: "link"
              }, props));
            });
            React.forwardRef(function (props, ref) {
              return React__default['default'].createElement(Box_1, _extends$e({
                ref: ref,
                as: "button",
                tx: "buttons",
                variant: "primary"
              }, props, {
                __css: {
                  appearance: 'none',
                  display: 'inline-block',
                  textAlign: 'center',
                  lineHeight: 'inherit',
                  textDecoration: 'none',
                  fontSize: 'inherit',
                  px: 3,
                  py: 2,
                  color: 'white',
                  bg: 'primary',
                  border: 0,
                  borderRadius: 4
                }
              }));
            });
            React.forwardRef(function (props, ref) {
              return React__default['default'].createElement(Box_1, _extends$e({
                ref: ref,
                as: "img"
              }, props, {
                __css: {
                  maxWidth: '100%',
                  height: 'auto'
                }
              }));
            });
            React.forwardRef(function (props, ref) {
              return React__default['default'].createElement(Box_1, _extends$e({
                ref: ref,
                variant: "card"
              }, props));
            });

            const TextWrapper = styled(Text) `
  color: ${({ color = 'currentColor', theme }) => theme[color]};
`;
            styled(TextWrapper) `
  transition: font-size 0.25s ease-out, line-height 0.25s ease-out;
`;
            function Subhead1(props) {
                return jsxRuntime.exports.jsx(TextWrapper, Object.assign({ className: "subhead subhead-1", fontSize: 16, fontWeight: 500, lineHeight: "16px" }, props), void 0);
            }
            function Caption(props) {
                return jsxRuntime.exports.jsx(TextWrapper, Object.assign({ className: "caption", fontSize: 12, fontWeight: 400, lineHeight: "16px" }, props), void 0);
            }

            const lightTheme = {
                // surface
                accent: '#FF007A',
                container: '#F7F8FA',
                module: '#E2E3E9',
                interactive: '#CED0D9',
                outline: '#C3C5CB',
                dialog: '#FFFFFF',
                // text
                primary: '#000000',
                secondary: '#565A69',
                hint: '#888D9B',
                onInteractive: '#000000',
                // state
                active: '#2172E5',
                success: '#27AE60',
                warning: '#F3B71E',
                error: '#FD4040',
                currentColor: 'currentColor',
            };
            const defaultTheme = {
                borderRadius: 1,
                fontFamily: '"Inter", sans-serif',
                fontFamilyVariable: '"InterVariable", sans-serif',
                fontFamilyCode: 'IBM Plex Mono',
                tokenColorExtraction: true,
                ...lightTheme,
            };
            const ThemeContext = React.createContext(toComputedTheme(defaultTheme));
            function ThemeProvider({ theme, children }) {
                const contextTheme = React.useContext(ThemeContext);
                const value = React.useMemo(() => {
                    return toComputedTheme({
                        ...contextTheme,
                        ...theme,
                    });
                }, [contextTheme, theme]);
                return (jsxRuntime.exports.jsx(ThemeContext.Provider, Object.assign({ value: value }, { children: jsxRuntime.exports.jsx(ThemedProvider, Object.assign({ theme: value }, { children: children }), void 0) }), void 0));
            }
            function toComputedTheme(theme) {
                return {
                    ...theme,
                    borderRadius: clamp(Number.isFinite(theme.borderRadius) ? theme.borderRadius : theme.borderRadius ? 1 : 0),
                    onHover: (color) => color === theme.primary ? curriedTransparentize(0.4, theme.primary) : curriedMix(0.16, theme.primary, color),
                };
                function clamp(value) {
                    return Math.min(Math.max(value, 0), 1);
                }
            }

            var propTypes = {exports: {}};

            var reactIs_production_min = {};

            /** @license React v16.13.1
             * react-is.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var b$3="function"===typeof Symbol&&Symbol.for,c$3=b$3?Symbol.for("react.element"):60103,d$3=b$3?Symbol.for("react.portal"):60106,e$1=b$3?Symbol.for("react.fragment"):60107,f$3=b$3?Symbol.for("react.strict_mode"):60108,g$2=b$3?Symbol.for("react.profiler"):60114,h$4=b$3?Symbol.for("react.provider"):60109,k$3=b$3?Symbol.for("react.context"):60110,l$2=b$3?Symbol.for("react.async_mode"):60111,m$3=b$3?Symbol.for("react.concurrent_mode"):60111,n$3=b$3?Symbol.for("react.forward_ref"):60112,p$4=b$3?Symbol.for("react.suspense"):60113,q$3=b$3?
            Symbol.for("react.suspense_list"):60120,r$6=b$3?Symbol.for("react.memo"):60115,t$3=b$3?Symbol.for("react.lazy"):60116,v$3=b$3?Symbol.for("react.block"):60121,w$2=b$3?Symbol.for("react.fundamental"):60117,x$2=b$3?Symbol.for("react.responder"):60118,y$3=b$3?Symbol.for("react.scope"):60119;
            function z$2(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c$3:switch(a=a.type,a){case l$2:case m$3:case e$1:case g$2:case f$3:case p$4:return a;default:switch(a=a&&a.$$typeof,a){case k$3:case n$3:case t$3:case r$6:case h$4:return a;default:return u}}case d$3:return u}}}function A$1(a){return z$2(a)===m$3}reactIs_production_min.AsyncMode=l$2;reactIs_production_min.ConcurrentMode=m$3;reactIs_production_min.ContextConsumer=k$3;reactIs_production_min.ContextProvider=h$4;reactIs_production_min.Element=c$3;reactIs_production_min.ForwardRef=n$3;reactIs_production_min.Fragment=e$1;reactIs_production_min.Lazy=t$3;reactIs_production_min.Memo=r$6;reactIs_production_min.Portal=d$3;
            reactIs_production_min.Profiler=g$2;reactIs_production_min.StrictMode=f$3;reactIs_production_min.Suspense=p$4;reactIs_production_min.isAsyncMode=function(a){return A$1(a)||z$2(a)===l$2};reactIs_production_min.isConcurrentMode=A$1;reactIs_production_min.isContextConsumer=function(a){return z$2(a)===k$3};reactIs_production_min.isContextProvider=function(a){return z$2(a)===h$4};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c$3};reactIs_production_min.isForwardRef=function(a){return z$2(a)===n$3};reactIs_production_min.isFragment=function(a){return z$2(a)===e$1};reactIs_production_min.isLazy=function(a){return z$2(a)===t$3};
            reactIs_production_min.isMemo=function(a){return z$2(a)===r$6};reactIs_production_min.isPortal=function(a){return z$2(a)===d$3};reactIs_production_min.isProfiler=function(a){return z$2(a)===g$2};reactIs_production_min.isStrictMode=function(a){return z$2(a)===f$3};reactIs_production_min.isSuspense=function(a){return z$2(a)===p$4};
            reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e$1||a===m$3||a===g$2||a===f$3||a===p$4||a===q$3||"object"===typeof a&&null!==a&&(a.$$typeof===t$3||a.$$typeof===r$6||a.$$typeof===h$4||a.$$typeof===k$3||a.$$typeof===n$3||a.$$typeof===w$2||a.$$typeof===x$2||a.$$typeof===y$3||a.$$typeof===v$3)};reactIs_production_min.typeOf=z$2;

            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            var ReactPropTypesSecret$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

            var ReactPropTypesSecret_1 = ReactPropTypesSecret$1;

            Function.call.bind(Object.prototype.hasOwnProperty);

            /**
             * Copyright (c) 2013-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            var ReactPropTypesSecret = ReactPropTypesSecret_1;

            function emptyFunction() {}
            function emptyFunctionWithReset() {}
            emptyFunctionWithReset.resetWarningCache = emptyFunction;

            var factoryWithThrowingShims = function() {
              function shim(props, propName, componentName, location, propFullName, secret) {
                if (secret === ReactPropTypesSecret) {
                  // It is still safe when called from React.
                  return;
                }
                var err = new Error(
                  'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                  'Use PropTypes.checkPropTypes() to call them. ' +
                  'Read more at http://fb.me/use-check-prop-types'
                );
                err.name = 'Invariant Violation';
                throw err;
              }  shim.isRequired = shim;
              function getShim() {
                return shim;
              }  // Important!
              // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
              var ReactPropTypes = {
                array: shim,
                bool: shim,
                func: shim,
                number: shim,
                object: shim,
                string: shim,
                symbol: shim,

                any: shim,
                arrayOf: getShim,
                element: shim,
                elementType: shim,
                instanceOf: getShim,
                node: shim,
                objectOf: getShim,
                oneOf: getShim,
                oneOfType: getShim,
                shape: getShim,
                exact: getShim,

                checkPropTypes: emptyFunctionWithReset,
                resetWarningCache: emptyFunction
              };

              ReactPropTypes.PropTypes = ReactPropTypes;

              return ReactPropTypes;
            };

            {
              // By explicitly using `prop-types` you are opting into new production behavior.
              // http://fb.me/prop-types-in-prod
              propTypes.exports = factoryWithThrowingShims();
            }

            var PropTypes = propTypes.exports;

            function _extends$d() { _extends$d = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$d.apply(this, arguments); }

            function _objectWithoutProperties$d(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$d(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$d(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var AlertTriangle = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$d(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$d({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("path", {
                d: "M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "12",
                y1: "9",
                x2: "12",
                y2: "13"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "12",
                y1: "17",
                x2: "12.01",
                y2: "17"
              }));
            });
            AlertTriangle.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            AlertTriangle.displayName = 'AlertTriangle';
            var AlertTriangleIcon = AlertTriangle;

            function _extends$c() { _extends$c = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$c.apply(this, arguments); }

            function _objectWithoutProperties$c(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$c(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$c(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var ArrowDown = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$c(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$c({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "12",
                y1: "5",
                x2: "12",
                y2: "19"
              }), /*#__PURE__*/React__default['default'].createElement("polyline", {
                points: "19 12 12 19 5 12"
              }));
            });
            ArrowDown.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            ArrowDown.displayName = 'ArrowDown';
            var ArrowDownIcon = ArrowDown;

            function _extends$b() { _extends$b = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$b.apply(this, arguments); }

            function _objectWithoutProperties$b(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$b(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$b(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var ArrowRight = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$b(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$b({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "5",
                y1: "12",
                x2: "19",
                y2: "12"
              }), /*#__PURE__*/React__default['default'].createElement("polyline", {
                points: "12 5 19 12 12 19"
              }));
            });
            ArrowRight.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            ArrowRight.displayName = 'ArrowRight';
            var ArrowRightIcon = ArrowRight;

            function _extends$a() { _extends$a = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$a.apply(this, arguments); }

            function _objectWithoutProperties$a(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$a(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$a(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var ArrowUp = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$a(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$a({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "12",
                y1: "19",
                x2: "12",
                y2: "5"
              }), /*#__PURE__*/React__default['default'].createElement("polyline", {
                points: "5 12 12 5 19 12"
              }));
            });
            ArrowUp.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            ArrowUp.displayName = 'ArrowUp';
            var ArrowUpIcon = ArrowUp;

            function _extends$9() { _extends$9 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$9.apply(this, arguments); }

            function _objectWithoutProperties$9(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$9(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$9(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var CheckCircle = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$9(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$9({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("path", {
                d: "M22 11.08V12a10 10 0 1 1-5.93-9.14"
              }), /*#__PURE__*/React__default['default'].createElement("polyline", {
                points: "22 4 12 14.01 9 11.01"
              }));
            });
            CheckCircle.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            CheckCircle.displayName = 'CheckCircle';
            var CheckCircleIcon = CheckCircle;

            function _extends$8() { _extends$8 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$8.apply(this, arguments); }

            function _objectWithoutProperties$8(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$8(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$8(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var ChevronDown = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$8(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$8({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("polyline", {
                points: "6 9 12 15 18 9"
              }));
            });
            ChevronDown.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            ChevronDown.displayName = 'ChevronDown';
            var ChevronDownIcon = ChevronDown;

            function _extends$7() { _extends$7 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$7.apply(this, arguments); }

            function _objectWithoutProperties$7(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$7(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$7(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var Clock = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$7(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$7({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("circle", {
                cx: "12",
                cy: "12",
                r: "10"
              }), /*#__PURE__*/React__default['default'].createElement("polyline", {
                points: "12 6 12 12 16 14"
              }));
            });
            Clock.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            Clock.displayName = 'Clock';
            var ClockIcon = Clock;

            function _extends$6() { _extends$6 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$6.apply(this, arguments); }

            function _objectWithoutProperties$6(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$6(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$6(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var CreditCard$1 = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$6(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$6({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("rect", {
                x: "1",
                y: "4",
                width: "22",
                height: "16",
                rx: "2",
                ry: "2"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "1",
                y1: "10",
                x2: "23",
                y2: "10"
              }));
            });
            CreditCard$1.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            CreditCard$1.displayName = 'CreditCard';
            var CreditCardIcon = CreditCard$1;

            function _extends$5() { _extends$5 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$5.apply(this, arguments); }

            function _objectWithoutProperties$5(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$5(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$5(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var HelpCircle = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$5(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$5({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("circle", {
                cx: "12",
                cy: "12",
                r: "10"
              }), /*#__PURE__*/React__default['default'].createElement("path", {
                d: "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "12",
                y1: "17",
                x2: "12.01",
                y2: "17"
              }));
            });
            HelpCircle.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            HelpCircle.displayName = 'HelpCircle';
            var HelpCircleIcon = HelpCircle;

            function _extends$4() { _extends$4 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$4.apply(this, arguments); }

            function _objectWithoutProperties$4(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$4(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$4(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var Info = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$4(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$4({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("circle", {
                cx: "12",
                cy: "12",
                r: "10"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "12",
                y1: "16",
                x2: "12",
                y2: "12"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "12",
                y1: "8",
                x2: "12.01",
                y2: "8"
              }));
            });
            Info.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            Info.displayName = 'Info';
            var InfoIcon = Info;

            function _extends$3() { _extends$3 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$3.apply(this, arguments); }

            function _objectWithoutProperties$3(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$3(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$3(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var Settings = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$3(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$3({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("circle", {
                cx: "12",
                cy: "12",
                r: "3"
              }), /*#__PURE__*/React__default['default'].createElement("path", {
                d: "M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"
              }));
            });
            Settings.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            Settings.displayName = 'Settings';
            var SettingsIcon = Settings;

            function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }

            function _objectWithoutProperties$2(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var Trash2 = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$2(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$2({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("polyline", {
                points: "3 6 5 6 21 6"
              }), /*#__PURE__*/React__default['default'].createElement("path", {
                d: "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "10",
                y1: "11",
                x2: "10",
                y2: "17"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "14",
                y1: "11",
                x2: "14",
                y2: "17"
              }));
            });
            Trash2.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            Trash2.displayName = 'Trash2';
            var Trash2Icon = Trash2;

            function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

            function _objectWithoutProperties$1(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$1(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

            function _objectWithoutPropertiesLoose$1(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
            var X$2 = React.forwardRef(function (_ref, ref) {
              var _ref$color = _ref.color,
                  color = _ref$color === void 0 ? 'currentColor' : _ref$color,
                  _ref$size = _ref.size,
                  size = _ref$size === void 0 ? 24 : _ref$size,
                  rest = _objectWithoutProperties$1(_ref, ["color", "size"]);

              return /*#__PURE__*/React__default['default'].createElement("svg", _extends$1({
                ref: ref,
                xmlns: "http://www.w3.org/2000/svg",
                width: size,
                height: size,
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: color,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round"
              }, rest), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "18",
                y1: "6",
                x2: "6",
                y2: "18"
              }), /*#__PURE__*/React__default['default'].createElement("line", {
                x1: "6",
                y1: "6",
                x2: "18",
                y2: "18"
              }));
            });
            X$2.propTypes = {
              color: PropTypes.string,
              size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])
            };
            X$2.displayName = 'X';
            var XIcon = X$2;

            function icon(Icon) {
                return styled(Icon) `
    clip-path: stroke-box;
    height: 1em;
    stroke: ${({ color = 'currentColor', theme }) => theme[color]};
    width: 1em;
  `;
            }
            const largeIconCss = css$2 `
  display: flex;

  svg {
    align-self: center;
    height: ${({ iconSize }) => iconSize}em;
    width: ${({ iconSize }) => iconSize}em;
  }
`;
            styled.div `
  height: 1em;
  ${largeIconCss}
`;
            icon(AlertTriangleIcon);
            icon(ArrowDownIcon);
            icon(ArrowRightIcon);
            icon(ArrowUpIcon);
            icon(CheckCircleIcon);
            icon(ChevronDownIcon);
            icon(ClockIcon);
            const CreditCard = icon(CreditCardIcon);
            icon(HelpCircleIcon);
            icon(InfoIcon);
            icon(SettingsIcon);
            icon(Trash2Icon);
            icon(XIcon);
            styled(icon(SvgCheck)) `
  circle {
    fill: ${({ theme }) => theme.active};
    stroke: none;
  }
`;
            styled(icon(SvgExpando)) `
  path {
    transition: transform 0.25s ease-in-out;
    will-change: transform;

    &:first-child {
      transform: ${({ open }) => open && 'translateX(-25%)'};
    }

    &:last-child {
      transform: ${({ open }) => open && 'translateX(25%)'};
    }
  }
`;
            const Logo = styled(icon(SvgLogo)) `
  fill: ${({ theme }) => theme.secondary};
  stroke: none;
`;
            const rotate = keyframes `
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
            styled(icon(SvgSpinner)) `
  animation: 2s ${rotate} linear infinite;
  stroke: ${({ color = 'active', theme }) => theme[color]};
  stroke-linecap: round;
  stroke-width: 2;
`;

            const Row = styled.div `
  align-items: ${({ align }) => align ?? 'center'};
  color: ${({ color, theme }) => color && theme[color]};
  display: ${({ flex }) => (flex ? 'flex' : 'grid')};
  flex-flow: wrap;
  flex-grow: ${({ grow }) => grow && 1};
  gap: ${({ gap }) => gap && `${gap}em`};
  grid-auto-flow: column;
  grid-template-columns: ${({ grow, children }) => (grow ? `repeat(${React.Children.count(children)}, 1fr)` : '')};
  justify-content: ${({ justify }) => justify ?? 'space-between'};
  padding: ${({ pad }) => pad && `0 ${pad}em`};
`;

            const UniswapA = styled.a `
  cursor: pointer;

  ${Logo} {
    fill: ${({ theme }) => theme.secondary};
    height: 1.5em;
    transition: transform 0.25s ease;
    width: 1.5em;
    will-change: transform;

    :hover {
      fill: ${({ theme }) => theme.onHover(theme.secondary)};
      transform: rotate(-5deg);
    }
  }
`;
            const HeaderRow = styled(Row) `
  height: 1.75em;
  margin: 0 0.75em 0.75em;
  padding-top: 0.5em;
  ${largeIconCss}
`;
            function Header({ title, logo, children }) {
                return (jsxRuntime.exports.jsxs(HeaderRow, Object.assign({ iconSize: 1.2 }, { children: [jsxRuntime.exports.jsxs(Row, Object.assign({ gap: 0.5 }, { children: [logo && (jsxRuntime.exports.jsx(UniswapA, Object.assign({ href: `https://app.uniswap.org/` }, { children: jsxRuntime.exports.jsx(Logo, {}, void 0) }), void 0)), title && jsxRuntime.exports.jsx(Subhead1, { children: title }, void 0)] }), void 0), jsxRuntime.exports.jsx(Row, Object.assign({ gap: 1 }, { children: children }), void 0)] }), void 0));
            }

            const SUSPENSE_PROMISE = Symbol();
            const isSuspensePromise = (promise) => !!promise[SUSPENSE_PROMISE];
            const isSuspensePromiseAlreadyCancelled = (suspensePromise) => !suspensePromise[SUSPENSE_PROMISE].c;
            const cancelSuspensePromise = (suspensePromise) => {
              var _a, _b;
              (_b = (_a = suspensePromise[SUSPENSE_PROMISE]).c) == null ? void 0 : _b.call(_a);
            };
            const isEqualSuspensePromise = (oldSuspensePromise, newSuspensePromise) => {
              const oldOriginalPromise = oldSuspensePromise[SUSPENSE_PROMISE].o;
              const newOriginalPromise = newSuspensePromise[SUSPENSE_PROMISE].o;
              return oldOriginalPromise === newOriginalPromise || oldSuspensePromise === newOriginalPromise || isSuspensePromise(oldOriginalPromise) && isEqualSuspensePromise(oldOriginalPromise, newSuspensePromise);
            };
            const createSuspensePromise = (promise) => {
              const objectToAttach = {
                o: promise,
                c: null
              };
              const suspensePromise = new Promise((resolve) => {
                objectToAttach.c = () => {
                  objectToAttach.c = null;
                  resolve();
                };
                promise.then(objectToAttach.c, objectToAttach.c);
              });
              suspensePromise[SUSPENSE_PROMISE] = objectToAttach;
              return suspensePromise;
            };

            var __defProp$1 = Object.defineProperty;
            var __defProps$1 = Object.defineProperties;
            var __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;
            var __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;
            var __hasOwnProp$1 = Object.prototype.hasOwnProperty;
            var __propIsEnum$1 = Object.prototype.propertyIsEnumerable;
            var __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
            var __spreadValues$1 = (a, b) => {
              for (var prop in b || (b = {}))
                if (__hasOwnProp$1.call(b, prop))
                  __defNormalProp$1(a, prop, b[prop]);
              if (__getOwnPropSymbols$1)
                for (var prop of __getOwnPropSymbols$1(b)) {
                  if (__propIsEnum$1.call(b, prop))
                    __defNormalProp$1(a, prop, b[prop]);
                }
              return a;
            };
            var __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));
            const hasInitialValue = (atom) => "init" in atom;
            const READ_ATOM = "r";
            const WRITE_ATOM = "w";
            const COMMIT_ATOM = "c";
            const SUBSCRIBE_ATOM = "s";
            const RESTORE_ATOMS = "h";
            const DEV_SUBSCRIBE_STATE = "n";
            const DEV_GET_MOUNTED_ATOMS = "l";
            const DEV_GET_ATOM_STATE = "a";
            const DEV_GET_MOUNTED = "m";
            const createStore$3 = (initialValues) => {
              const committedAtomStateMap = /* @__PURE__ */ new WeakMap();
              const mountedMap = /* @__PURE__ */ new WeakMap();
              const pendingMap = /* @__PURE__ */ new Map();
              let stateListeners;
              let mountedAtoms;
              if (typeof process === "object" && "production" !== "production") {
                stateListeners = /* @__PURE__ */ new Set();
                mountedAtoms = /* @__PURE__ */ new Set();
              }
              if (initialValues) {
                for (const [atom, value] of initialValues) {
                  const atomState = { v: value, r: 0, d: /* @__PURE__ */ new Map() };
                  if (typeof process === "object" && "production" !== "production") {
                    Object.freeze(atomState);
                    if (!hasInitialValue(atom)) {
                      console.warn("Found initial value for derived atom which can cause unexpected behavior", atom);
                    }
                  }
                  committedAtomStateMap.set(atom, atomState);
                }
              }
              const suspensePromiseCacheMap = /* @__PURE__ */ new WeakMap();
              const addSuspensePromiseToCache = (version, atom, suspensePromise) => {
                let cache = suspensePromiseCacheMap.get(atom);
                if (!cache) {
                  cache = /* @__PURE__ */ new Map();
                  suspensePromiseCacheMap.set(atom, cache);
                }
                suspensePromise.then(() => {
                  if (cache.get(version) === suspensePromise) {
                    cache.delete(version);
                    if (!cache.size) {
                      suspensePromiseCacheMap.delete(atom);
                    }
                  }
                });
                cache.set(version, suspensePromise);
              };
              const cancelAllSuspensePromiseInCache = (atom) => {
                const versionSet = /* @__PURE__ */ new Set();
                const cache = suspensePromiseCacheMap.get(atom);
                if (cache) {
                  suspensePromiseCacheMap.delete(atom);
                  cache.forEach((suspensePromise, version) => {
                    cancelSuspensePromise(suspensePromise);
                    versionSet.add(version);
                  });
                }
                return versionSet;
              };
              const versionedAtomStateMapMap = /* @__PURE__ */ new WeakMap();
              const getVersionedAtomStateMap = (version) => {
                let versionedAtomStateMap = versionedAtomStateMapMap.get(version);
                if (!versionedAtomStateMap) {
                  versionedAtomStateMap = /* @__PURE__ */ new Map();
                  versionedAtomStateMapMap.set(version, versionedAtomStateMap);
                }
                return versionedAtomStateMap;
              };
              const getAtomState = (version, atom) => {
                if (version) {
                  const versionedAtomStateMap = getVersionedAtomStateMap(version);
                  let atomState = versionedAtomStateMap.get(atom);
                  if (!atomState) {
                    atomState = getAtomState(version.p, atom);
                    if (atomState) {
                      if ("p" in atomState) {
                        atomState.p.then(() => versionedAtomStateMap.delete(atom));
                      }
                      versionedAtomStateMap.set(atom, atomState);
                    }
                  }
                  return atomState;
                }
                return committedAtomStateMap.get(atom);
              };
              const setAtomState = (version, atom, atomState) => {
                if (typeof process === "object" && "production" !== "production") {
                  Object.freeze(atomState);
                }
                if (version) {
                  const versionedAtomStateMap = getVersionedAtomStateMap(version);
                  versionedAtomStateMap.set(atom, atomState);
                } else {
                  const prevAtomState = committedAtomStateMap.get(atom);
                  committedAtomStateMap.set(atom, atomState);
                  if (!pendingMap.has(atom)) {
                    pendingMap.set(atom, prevAtomState);
                  }
                }
              };
              const createReadDependencies = (version, prevReadDependencies = /* @__PURE__ */ new Map(), dependencies) => {
                if (!dependencies) {
                  return prevReadDependencies;
                }
                const readDependencies = /* @__PURE__ */ new Map();
                let changed = false;
                dependencies.forEach((atom) => {
                  var _a;
                  const revision = ((_a = getAtomState(version, atom)) == null ? void 0 : _a.r) || 0;
                  readDependencies.set(atom, revision);
                  if (prevReadDependencies.get(atom) !== revision) {
                    changed = true;
                  }
                });
                if (prevReadDependencies.size === readDependencies.size && !changed) {
                  return prevReadDependencies;
                }
                return readDependencies;
              };
              const setAtomValue = (version, atom, value, dependencies, suspensePromise) => {
                const atomState = getAtomState(version, atom);
                if (atomState) {
                  if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
                    return atomState;
                  }
                  if ("p" in atomState) {
                    cancelSuspensePromise(atomState.p);
                  }
                }
                const nextAtomState = {
                  v: value,
                  r: (atomState == null ? void 0 : atomState.r) || 0,
                  d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
                };
                if (!atomState || !("v" in atomState) || !Object.is(atomState.v, value)) {
                  ++nextAtomState.r;
                  if (nextAtomState.d.has(atom)) {
                    nextAtomState.d = new Map(nextAtomState.d).set(atom, nextAtomState.r);
                  }
                } else if (nextAtomState.d !== atomState.d && (nextAtomState.d.size !== atomState.d.size || !Array.from(nextAtomState.d.keys()).every((a) => atomState.d.has(a)))) {
                  Promise.resolve().then(() => {
                    flushPending(version);
                  });
                }
                setAtomState(version, atom, nextAtomState);
                return nextAtomState;
              };
              const setAtomReadError = (version, atom, error, dependencies, suspensePromise) => {
                const atomState = getAtomState(version, atom);
                if (atomState) {
                  if (suspensePromise && (!("p" in atomState) || !isEqualSuspensePromise(atomState.p, suspensePromise))) {
                    return atomState;
                  }
                  if ("p" in atomState) {
                    cancelSuspensePromise(atomState.p);
                  }
                }
                const nextAtomState = {
                  e: error,
                  r: (atomState == null ? void 0 : atomState.r) || 0,
                  d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
                };
                setAtomState(version, atom, nextAtomState);
                return nextAtomState;
              };
              const setAtomSuspensePromise = (version, atom, suspensePromise, dependencies) => {
                const atomState = getAtomState(version, atom);
                if (atomState && "p" in atomState) {
                  if (isEqualSuspensePromise(atomState.p, suspensePromise)) {
                    return atomState;
                  }
                  cancelSuspensePromise(atomState.p);
                }
                addSuspensePromiseToCache(version, atom, suspensePromise);
                const nextAtomState = {
                  p: suspensePromise,
                  r: (atomState == null ? void 0 : atomState.r) || 0,
                  d: createReadDependencies(version, atomState == null ? void 0 : atomState.d, dependencies)
                };
                setAtomState(version, atom, nextAtomState);
                return nextAtomState;
              };
              const setAtomPromiseOrValue = (version, atom, promiseOrValue, dependencies) => {
                if (promiseOrValue instanceof Promise) {
                  const suspensePromise = createSuspensePromise(promiseOrValue.then((value) => {
                    setAtomValue(version, atom, value, dependencies, suspensePromise);
                    flushPending(version);
                  }).catch((e) => {
                    if (e instanceof Promise) {
                      if (isSuspensePromise(e)) {
                        return e.then(() => {
                          readAtomState(version, atom, true);
                        });
                      }
                      return e;
                    }
                    setAtomReadError(version, atom, e, dependencies, suspensePromise);
                    flushPending(version);
                  }));
                  return setAtomSuspensePromise(version, atom, suspensePromise, dependencies);
                }
                return setAtomValue(version, atom, promiseOrValue, dependencies);
              };
              const setAtomInvalidated = (version, atom) => {
                const atomState = getAtomState(version, atom);
                if (atomState) {
                  const nextAtomState = __spreadProps$1(__spreadValues$1({}, atomState), {
                    i: atomState.r
                  });
                  setAtomState(version, atom, nextAtomState);
                } else if (typeof process === "object" && "production" !== "production") {
                  console.warn("[Bug] could not invalidate non existing atom", atom);
                }
              };
              const readAtomState = (version, atom, force) => {
                if (!force) {
                  const atomState = getAtomState(version, atom);
                  if (atomState) {
                    if (atomState.r !== atomState.i && "p" in atomState && !isSuspensePromiseAlreadyCancelled(atomState.p)) {
                      return atomState;
                    }
                    atomState.d.forEach((_, a) => {
                      if (a !== atom) {
                        if (!mountedMap.has(a)) {
                          readAtomState(version, a);
                        } else {
                          const aState = getAtomState(version, a);
                          if (aState && aState.r === aState.i) {
                            readAtomState(version, a);
                          }
                        }
                      }
                    });
                    if (Array.from(atomState.d).every(([a, r]) => {
                      const aState = getAtomState(version, a);
                      return aState && "v" in aState && aState.r === r;
                    })) {
                      return atomState;
                    }
                  }
                }
                const dependencies = /* @__PURE__ */ new Set();
                try {
                  const promiseOrValue = atom.read((a) => {
                    dependencies.add(a);
                    const aState = a === atom ? getAtomState(version, a) : readAtomState(version, a);
                    if (aState) {
                      if ("e" in aState) {
                        throw aState.e;
                      }
                      if ("p" in aState) {
                        throw aState.p;
                      }
                      return aState.v;
                    }
                    if (hasInitialValue(a)) {
                      return a.init;
                    }
                    throw new Error("no atom init");
                  });
                  return setAtomPromiseOrValue(version, atom, promiseOrValue, dependencies);
                } catch (errorOrPromise) {
                  if (errorOrPromise instanceof Promise) {
                    const suspensePromise = createSuspensePromise(errorOrPromise);
                    return setAtomSuspensePromise(version, atom, suspensePromise, dependencies);
                  }
                  return setAtomReadError(version, atom, errorOrPromise, dependencies);
                }
              };
              const readAtom = (readingAtom, version) => {
                const atomState = readAtomState(version, readingAtom);
                return atomState;
              };
              const addAtom = (addingAtom) => {
                let mounted = mountedMap.get(addingAtom);
                if (!mounted) {
                  mounted = mountAtom(addingAtom);
                }
                return mounted;
              };
              const canUnmountAtom = (atom, mounted) => !mounted.l.size && (!mounted.t.size || mounted.t.size === 1 && mounted.t.has(atom));
              const delAtom = (deletingAtom) => {
                const mounted = mountedMap.get(deletingAtom);
                if (mounted && canUnmountAtom(deletingAtom, mounted)) {
                  unmountAtom(deletingAtom);
                }
              };
              const invalidateDependents = (version, atom) => {
                const mounted = mountedMap.get(atom);
                mounted == null ? void 0 : mounted.t.forEach((dependent) => {
                  if (dependent !== atom) {
                    setAtomInvalidated(version, dependent);
                    invalidateDependents(version, dependent);
                  }
                });
              };
              const writeAtomState = (version, atom, update) => {
                let isSync = true;
                const writeGetter = (a, options) => {
                  if (typeof options === "boolean") {
                    console.warn("[DEPRECATED] Please use { unstable_promise: true }");
                    options = { unstable_promise: options };
                  }
                  const aState = readAtomState(version, a);
                  if ("e" in aState) {
                    throw aState.e;
                  }
                  if ("p" in aState) {
                    if (options == null ? void 0 : options.unstable_promise) {
                      return aState.p.then(() => writeGetter(a, options));
                    }
                    if (typeof process === "object" && "production" !== "production") {
                      console.info("Reading pending atom state in write operation. We throw a promise for now.", a);
                    }
                    throw aState.p;
                  }
                  if ("v" in aState) {
                    return aState.v;
                  }
                  if (typeof process === "object" && "production" !== "production") {
                    console.warn("[Bug] no value found while reading atom in write operation. This is probably a bug.", a);
                  }
                  throw new Error("no value found");
                };
                const setter = (a, v) => {
                  let promiseOrVoid2;
                  if (a === atom) {
                    if (!hasInitialValue(a)) {
                      throw new Error("atom not writable");
                    }
                    const versionSet = cancelAllSuspensePromiseInCache(a);
                    versionSet.forEach((cancelledVersion) => {
                      if (cancelledVersion !== version) {
                        setAtomPromiseOrValue(cancelledVersion, a, v);
                      }
                    });
                    setAtomPromiseOrValue(version, a, v);
                    invalidateDependents(version, a);
                  } else {
                    promiseOrVoid2 = writeAtomState(version, a, v);
                  }
                  if (!isSync) {
                    flushPending(version);
                  }
                  return promiseOrVoid2;
                };
                const promiseOrVoid = atom.write(writeGetter, setter, update);
                isSync = false;
                version = void 0;
                return promiseOrVoid;
              };
              const writeAtom = (writingAtom, update, version) => {
                const promiseOrVoid = writeAtomState(version, writingAtom, update);
                flushPending(version);
                return promiseOrVoid;
              };
              const isActuallyWritableAtom = (atom) => !!atom.write;
              const mountAtom = (atom, initialDependent) => {
                const mounted = {
                  t: new Set(initialDependent && [initialDependent]),
                  l: /* @__PURE__ */ new Set()
                };
                mountedMap.set(atom, mounted);
                if (typeof process === "object" && "production" !== "production") {
                  mountedAtoms.add(atom);
                }
                const atomState = readAtomState(void 0, atom);
                atomState.d.forEach((_, a) => {
                  const aMounted = mountedMap.get(a);
                  if (aMounted) {
                    aMounted.t.add(atom);
                  } else {
                    if (a !== atom) {
                      mountAtom(a, atom);
                    }
                  }
                });
                if (isActuallyWritableAtom(atom) && atom.onMount) {
                  const setAtom = (update) => writeAtom(atom, update);
                  const onUnmount = atom.onMount(setAtom);
                  if (onUnmount) {
                    mounted.u = onUnmount;
                  }
                }
                return mounted;
              };
              const unmountAtom = (atom) => {
                var _a;
                const onUnmount = (_a = mountedMap.get(atom)) == null ? void 0 : _a.u;
                if (onUnmount) {
                  onUnmount();
                }
                mountedMap.delete(atom);
                if (typeof process === "object" && "production" !== "production") {
                  mountedAtoms.delete(atom);
                }
                const atomState = getAtomState(void 0, atom);
                if (atomState) {
                  atomState.d.forEach((_, a) => {
                    if (a !== atom) {
                      const mounted = mountedMap.get(a);
                      if (mounted) {
                        mounted.t.delete(atom);
                        if (canUnmountAtom(a, mounted)) {
                          unmountAtom(a);
                        }
                      }
                    }
                  });
                } else if (typeof process === "object" && "production" !== "production") {
                  console.warn("[Bug] could not find atom state to unmount", atom);
                }
              };
              const mountDependencies = (atom, atomState, prevReadDependencies) => {
                const dependencies = new Set(atomState.d.keys());
                prevReadDependencies == null ? void 0 : prevReadDependencies.forEach((_, a) => {
                  if (dependencies.has(a)) {
                    dependencies.delete(a);
                    return;
                  }
                  const mounted = mountedMap.get(a);
                  if (mounted) {
                    mounted.t.delete(atom);
                    if (canUnmountAtom(a, mounted)) {
                      unmountAtom(a);
                    }
                  }
                });
                dependencies.forEach((a) => {
                  const mounted = mountedMap.get(a);
                  if (mounted) {
                    mounted.t.add(atom);
                  } else if (mountedMap.has(atom)) {
                    mountAtom(a, atom);
                  }
                });
              };
              const flushPending = (version) => {
                if (version) {
                  const versionedAtomStateMap = getVersionedAtomStateMap(version);
                  versionedAtomStateMap.forEach((atomState, atom) => {
                    if (atomState !== committedAtomStateMap.get(atom)) {
                      const mounted = mountedMap.get(atom);
                      mounted == null ? void 0 : mounted.l.forEach((listener) => listener(version));
                    }
                  });
                  return;
                }
                while (pendingMap.size) {
                  const pending = Array.from(pendingMap);
                  pendingMap.clear();
                  pending.forEach(([atom, prevAtomState]) => {
                    const atomState = getAtomState(void 0, atom);
                    if (atomState && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
                      mountDependencies(atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
                    }
                    const mounted = mountedMap.get(atom);
                    mounted == null ? void 0 : mounted.l.forEach((listener) => listener());
                  });
                }
                if (typeof process === "object" && "production" !== "production") {
                  stateListeners.forEach((l) => l());
                }
              };
              const commitVersionedAtomStateMap = (version) => {
                const versionedAtomStateMap = getVersionedAtomStateMap(version);
                versionedAtomStateMap.forEach((atomState, atom) => {
                  const prevAtomState = committedAtomStateMap.get(atom);
                  if (atomState.r > ((prevAtomState == null ? void 0 : prevAtomState.r) || 0) || "v" in atomState && atomState.r === (prevAtomState == null ? void 0 : prevAtomState.r) && atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
                    committedAtomStateMap.set(atom, atomState);
                    if (atomState.d !== (prevAtomState == null ? void 0 : prevAtomState.d)) {
                      mountDependencies(atom, atomState, prevAtomState == null ? void 0 : prevAtomState.d);
                    }
                  }
                });
              };
              const commitAtom = (_atom, version) => {
                if (version) {
                  commitVersionedAtomStateMap(version);
                }
                flushPending(void 0);
              };
              const subscribeAtom = (atom, callback) => {
                const mounted = addAtom(atom);
                const listeners = mounted.l;
                listeners.add(callback);
                return () => {
                  listeners.delete(callback);
                  delAtom(atom);
                };
              };
              const restoreAtoms = (values, version) => {
                for (const [atom, value] of values) {
                  if (hasInitialValue(atom)) {
                    setAtomPromiseOrValue(version, atom, value);
                    invalidateDependents(version, atom);
                  }
                }
                flushPending(version);
              };
              if (typeof process === "object" && "production" !== "production") {
                return {
                  [READ_ATOM]: readAtom,
                  [WRITE_ATOM]: writeAtom,
                  [COMMIT_ATOM]: commitAtom,
                  [SUBSCRIBE_ATOM]: subscribeAtom,
                  [RESTORE_ATOMS]: restoreAtoms,
                  [DEV_SUBSCRIBE_STATE]: (l) => {
                    stateListeners.add(l);
                    return () => {
                      stateListeners.delete(l);
                    };
                  },
                  [DEV_GET_MOUNTED_ATOMS]: () => mountedAtoms.values(),
                  [DEV_GET_ATOM_STATE]: (a) => committedAtomStateMap.get(a),
                  [DEV_GET_MOUNTED]: (a) => mountedMap.get(a)
                };
              }
              return {
                [READ_ATOM]: readAtom,
                [WRITE_ATOM]: writeAtom,
                [COMMIT_ATOM]: commitAtom,
                [SUBSCRIBE_ATOM]: subscribeAtom,
                [RESTORE_ATOMS]: restoreAtoms
              };
            };

            const createScopeContainer = (initialValues) => {
              const store = createStore$3(initialValues);
              return { s: store };
            };
            const ScopeContextMap = /* @__PURE__ */ new Map();
            const getScopeContext = (scope) => {
              if (!ScopeContextMap.has(scope)) {
                ScopeContextMap.set(scope, React.createContext(createScopeContainer()));
              }
              return ScopeContextMap.get(scope);
            };

            let keyCount = 0;
            function atom(read, write) {
              const key = `atom${++keyCount}`;
              const config = {
                toString: () => key
              };
              if (typeof read === "function") {
                config.read = read;
              } else {
                config.init = read;
                config.read = (get) => get(config);
                config.write = (get, set, update) => set(config, typeof update === "function" ? update(get(config)) : update);
              }
              if (write) {
                config.write = write;
              }
              return config;
            }

            const isWritable = (atom) => !!atom.write;
            function useAtom(atom, scope) {
              if ("scope" in atom) {
                console.warn("atom.scope is deprecated. Please do useAtom(atom, scope) instead.");
                scope = atom.scope;
              }
              const ScopeContext = getScopeContext(scope);
              const { s: store, w: versionedWrite } = React.useContext(ScopeContext);
              const getAtomValue = React.useCallback((version2) => {
                const atomState = store[READ_ATOM](atom, version2);
                if ("e" in atomState) {
                  throw atomState.e;
                }
                if ("p" in atomState) {
                  throw atomState.p;
                }
                if ("v" in atomState) {
                  return atomState.v;
                }
                throw new Error("no atom value");
              }, [store, atom]);
              const [[version, value, atomFromUseReducer], rerenderIfChanged] = React.useReducer(React.useCallback((prev, nextVersion) => {
                const nextValue = getAtomValue(nextVersion);
                if (Object.is(prev[1], nextValue) && prev[2] === atom) {
                  return prev;
                }
                return [nextVersion, nextValue, atom];
              }, [getAtomValue, atom]), void 0, () => {
                const initialVersion = void 0;
                const initialValue = getAtomValue(initialVersion);
                return [initialVersion, initialValue, atom];
              });
              if (atomFromUseReducer !== atom) {
                rerenderIfChanged(void 0);
              }
              React.useEffect(() => {
                const unsubscribe = store[SUBSCRIBE_ATOM](atom, rerenderIfChanged);
                rerenderIfChanged(void 0);
                return unsubscribe;
              }, [store, atom]);
              React.useEffect(() => {
                store[COMMIT_ATOM](atom, version);
              });
              const setAtom = React.useCallback((update) => {
                if (isWritable(atom)) {
                  const write = (version2) => store[WRITE_ATOM](atom, update, version2);
                  return versionedWrite ? versionedWrite(write) : write();
                } else {
                  throw new Error("not writable atom");
                }
              }, [store, versionedWrite, atom]);
              React.useDebugValue(value);
              return [value, setAtom];
            }

            const RESET = Symbol();

            function useAtomValue(anAtom, scope) {
              return useAtom(anAtom, scope)[0];
            }

            function atomWithDefault(getDefault) {
              const EMPTY = Symbol();
              const overwrittenAtom = atom(EMPTY);
              const anAtom = atom((get) => {
                const overwritten = get(overwrittenAtom);
                if (overwritten !== EMPTY) {
                  return overwritten;
                }
                return getDefault(get);
              }, (get, set, update) => {
                if (update === RESET) {
                  return set(overwrittenAtom, EMPTY);
                }
                return set(overwrittenAtom, typeof update === "function" ? update(get(anAtom)) : update);
              });
              return anAtom;
            }
            function createJSONStorage(getStringStorage) {
              try {
                if (!getStringStorage().removeItem) {
                  console.warn("Missing removeItem. In the next version, it will be required.");
                }
              } catch {
              }
              return {
                getItem: (key) => {
                  const value = getStringStorage().getItem(key);
                  if (value instanceof Promise) {
                    return value.then((v) => JSON.parse(v || ""));
                  }
                  return JSON.parse(value || "");
                },
                setItem: (key, newValue) => getStringStorage().setItem(key, JSON.stringify(newValue)),
                removeItem: (key) => {
                  var _a, _b;
                  return (_b = (_a = getStringStorage()).removeItem) == null ? void 0 : _b.call(_a, key);
                }
              };
            }
            createJSONStorage(() => localStorage);

            var ReactReduxContext = /*#__PURE__*/React__default['default'].createContext(null);

            // Default to a dummy "batch" implementation that just runs the callback
            function defaultNoopBatch(callback) {
              callback();
            }

            var batch = defaultNoopBatch; // Allow injecting another batching function later

            var setBatch = function setBatch(newBatch) {
              return batch = newBatch;
            }; // Supply a getter just to skip dealing with ESM bindings

            var getBatch = function getBatch() {
              return batch;
            };

            // well as nesting subscriptions of descendant components, so that we can ensure the
            // ancestor components re-render before descendants

            function createListenerCollection() {
              var batch = getBatch();
              var first = null;
              var last = null;
              return {
                clear: function clear() {
                  first = null;
                  last = null;
                },
                notify: function notify() {
                  batch(function () {
                    var listener = first;

                    while (listener) {
                      listener.callback();
                      listener = listener.next;
                    }
                  });
                },
                get: function get() {
                  var listeners = [];
                  var listener = first;

                  while (listener) {
                    listeners.push(listener);
                    listener = listener.next;
                  }

                  return listeners;
                },
                subscribe: function subscribe(callback) {
                  var isSubscribed = true;
                  var listener = last = {
                    callback: callback,
                    next: null,
                    prev: last
                  };

                  if (listener.prev) {
                    listener.prev.next = listener;
                  } else {
                    first = listener;
                  }

                  return function unsubscribe() {
                    if (!isSubscribed || first === null) return;
                    isSubscribed = false;

                    if (listener.next) {
                      listener.next.prev = listener.prev;
                    } else {
                      last = listener.prev;
                    }

                    if (listener.prev) {
                      listener.prev.next = listener.next;
                    } else {
                      first = listener.next;
                    }
                  };
                }
              };
            }

            var nullListeners = {
              notify: function notify() {},
              get: function get() {
                return [];
              }
            };
            function createSubscription(store, parentSub) {
              var unsubscribe;
              var listeners = nullListeners;

              function addNestedSub(listener) {
                trySubscribe();
                return listeners.subscribe(listener);
              }

              function notifyNestedSubs() {
                listeners.notify();
              }

              function handleChangeWrapper() {
                if (subscription.onStateChange) {
                  subscription.onStateChange();
                }
              }

              function isSubscribed() {
                return Boolean(unsubscribe);
              }

              function trySubscribe() {
                if (!unsubscribe) {
                  unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
                  listeners = createListenerCollection();
                }
              }

              function tryUnsubscribe() {
                if (unsubscribe) {
                  unsubscribe();
                  unsubscribe = undefined;
                  listeners.clear();
                  listeners = nullListeners;
                }
              }

              var subscription = {
                addNestedSub: addNestedSub,
                notifyNestedSubs: notifyNestedSubs,
                handleChangeWrapper: handleChangeWrapper,
                isSubscribed: isSubscribed,
                trySubscribe: trySubscribe,
                tryUnsubscribe: tryUnsubscribe,
                getListeners: function getListeners() {
                  return listeners;
                }
              };
              return subscription;
            }

            // To get around it, we can conditionally useEffect on the server (no-op) and
            // useLayoutEffect in the browser. We need useLayoutEffect to ensure the store
            // subscription callback always has the selector from the latest render commit
            // available, otherwise a store update may happen between render and the effect,
            // which may cause missed updates; we also must ensure the store subscription
            // is created synchronously, otherwise a store update may occur before the
            // subscription is created and an inconsistent state may be observed

            var useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? React.useLayoutEffect : React.useEffect;

            /**
             * A hook to access the value of the `ReactReduxContext`. This is a low-level
             * hook that you should usually not need to call directly.
             *
             * @returns {any} the value of the `ReactReduxContext`
             *
             * @example
             *
             * import React from 'react'
             * import { useReduxContext } from 'react-redux'
             *
             * export const CounterComponent = ({ value }) => {
             *   const { store } = useReduxContext()
             *   return <div>{store.getState()}</div>
             * }
             */

            function useReduxContext() {
              var contextValue = React.useContext(ReactReduxContext);

              return contextValue;
            }

            /**
             * Hook factory, which creates a `useStore` hook bound to a given context.
             *
             * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
             * @returns {Function} A `useStore` hook bound to the specified context.
             */

            function createStoreHook(context) {
              if (context === void 0) {
                context = ReactReduxContext;
              }

              var useReduxContext$1 = context === ReactReduxContext ? useReduxContext : function () {
                return React.useContext(context);
              };
              return function useStore() {
                var _useReduxContext = useReduxContext$1(),
                    store = _useReduxContext.store;

                return store;
              };
            }
            /**
             * A hook to access the redux store.
             *
             * @returns {any} the redux store
             *
             * @example
             *
             * import React from 'react'
             * import { useStore } from 'react-redux'
             *
             * export const ExampleComponent = () => {
             *   const store = useStore()
             *   return <div>{store.getState()}</div>
             * }
             */

            var useStore$1 = /*#__PURE__*/createStoreHook();

            /**
             * Hook factory, which creates a `useDispatch` hook bound to a given context.
             *
             * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
             * @returns {Function} A `useDispatch` hook bound to the specified context.
             */

            function createDispatchHook(context) {
              if (context === void 0) {
                context = ReactReduxContext;
              }

              var useStore = context === ReactReduxContext ? useStore$1 : createStoreHook(context);
              return function useDispatch() {
                var store = useStore();
                return store.dispatch;
              };
            }
            /**
             * A hook to access the redux `dispatch` function.
             *
             * @returns {any|function} redux store's `dispatch` function
             *
             * @example
             *
             * import React, { useCallback } from 'react'
             * import { useDispatch } from 'react-redux'
             *
             * export const CounterComponent = ({ value }) => {
             *   const dispatch = useDispatch()
             *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
             *   return (
             *     <div>
             *       <span>{value}</span>
             *       <button onClick={increaseCounter}>Increase counter</button>
             *     </div>
             *   )
             * }
             */

            var useDispatch = /*#__PURE__*/createDispatchHook();

            var refEquality = function refEquality(a, b) {
              return a === b;
            };

            function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
              var _useReducer = React.useReducer(function (s) {
                return s + 1;
              }, 0),
                  forceRender = _useReducer[1];

              var subscription = React.useMemo(function () {
                return createSubscription(store, contextSub);
              }, [store, contextSub]);
              var latestSubscriptionCallbackError = React.useRef();
              var latestSelector = React.useRef();
              var latestStoreState = React.useRef();
              var latestSelectedState = React.useRef();
              var storeState = store.getState();
              var selectedState;

              try {
                if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
                  var newSelectedState = selector(storeState); // ensure latest selected state is reused so that a custom equality function can result in identical references

                  if (latestSelectedState.current === undefined || !equalityFn(newSelectedState, latestSelectedState.current)) {
                    selectedState = newSelectedState;
                  } else {
                    selectedState = latestSelectedState.current;
                  }
                } else {
                  selectedState = latestSelectedState.current;
                }
              } catch (err) {
                if (latestSubscriptionCallbackError.current) {
                  err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
                }

                throw err;
              }

              useIsomorphicLayoutEffect(function () {
                latestSelector.current = selector;
                latestStoreState.current = storeState;
                latestSelectedState.current = selectedState;
                latestSubscriptionCallbackError.current = undefined;
              });
              useIsomorphicLayoutEffect(function () {
                function checkForUpdates() {
                  try {
                    var newStoreState = store.getState(); // Avoid calling selector multiple times if the store's state has not changed

                    if (newStoreState === latestStoreState.current) {
                      return;
                    }

                    var _newSelectedState = latestSelector.current(newStoreState);

                    if (equalityFn(_newSelectedState, latestSelectedState.current)) {
                      return;
                    }

                    latestSelectedState.current = _newSelectedState;
                    latestStoreState.current = newStoreState;
                  } catch (err) {
                    // we ignore all errors here, since when the component
                    // is re-rendered, the selectors are called again, and
                    // will throw again, if neither props nor store state
                    // changed
                    latestSubscriptionCallbackError.current = err;
                  }

                  forceRender();
                }

                subscription.onStateChange = checkForUpdates;
                subscription.trySubscribe();
                checkForUpdates();
                return function () {
                  return subscription.tryUnsubscribe();
                };
              }, [store, subscription]);
              return selectedState;
            }
            /**
             * Hook factory, which creates a `useSelector` hook bound to a given context.
             *
             * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
             * @returns {Function} A `useSelector` hook bound to the specified context.
             */


            function createSelectorHook(context) {
              if (context === void 0) {
                context = ReactReduxContext;
              }

              var useReduxContext$1 = context === ReactReduxContext ? useReduxContext : function () {
                return React.useContext(context);
              };
              return function useSelector(selector, equalityFn) {
                if (equalityFn === void 0) {
                  equalityFn = refEquality;
                }

                var _useReduxContext = useReduxContext$1(),
                    store = _useReduxContext.store,
                    contextSub = _useReduxContext.subscription;

                var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
                React.useDebugValue(selectedState);
                return selectedState;
              };
            }
            /**
             * A hook to access the redux store's state. This hook takes a selector function
             * as an argument. The selector is called with the store state.
             *
             * This hook takes an optional equality comparison function as the second parameter
             * that allows you to customize the way the selected state is compared to determine
             * whether the component needs to be re-rendered.
             *
             * @param {Function} selector the selector function
             * @param {Function=} equalityFn the function that will be used to determine equality
             *
             * @returns {any} the selected state
             *
             * @example
             *
             * import React from 'react'
             * import { useSelector } from 'react-redux'
             *
             * export const CounterComponent = () => {
             *   const counter = useSelector(state => state.counter)
             *   return <div>{counter}</div>
             * }
             */

            var useSelector = /*#__PURE__*/createSelectorHook();

            var reactDom = {exports: {}};

            var reactDom_production_min = {};

            var scheduler = {exports: {}};

            var scheduler_production_min = {};

            /** @license React v0.20.2
             * scheduler.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            (function (exports) {
            var f,g,h,k;if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}
            if("undefined"===typeof window||"function"!==typeof MessageChannel){var t=null,u=null,w=function(){if(null!==t)try{var a=exports.unstable_now();t(!0,a);t=null;}catch(b){throw setTimeout(w,0),b;}};f=function(a){null!==t?setTimeout(f,0,a):(t=a,setTimeout(w,0));};g=function(a,b){u=setTimeout(a,b);};h=function(){clearTimeout(u);};exports.unstable_shouldYield=function(){return !1};k=exports.unstable_forceFrameRate=function(){};}else {var x=window.setTimeout,y=window.clearTimeout;if("undefined"!==typeof console){var z=
            window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");"function"!==typeof z&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");}var A=!1,B=null,C=-1,D=5,E=0;exports.unstable_shouldYield=function(){return exports.unstable_now()>=
            E};k=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):D=0<a?Math.floor(1E3/a):5;};var F=new MessageChannel,G=F.port2;F.port1.onmessage=function(){if(null!==B){var a=exports.unstable_now();E=a+D;try{B(!0,a)?G.postMessage(null):(A=!1,B=null);}catch(b){throw G.postMessage(null),b;}}else A=!1;};f=function(a){B=a;A||(A=!0,G.postMessage(null));};g=function(a,b){C=
            x(function(){a(exports.unstable_now());},b);};h=function(){y(C);C=-1;};}function H(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<I(e,b))a[d]=b,a[c]=e,c=d;else break a}}function J(a){a=a[0];return void 0===a?null:a}
            function K(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>I(n,c))void 0!==r&&0>I(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>I(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function I(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var L=[],M=[],N=1,O=null,P=3,Q=!1,R=!1,S=!1;
            function T(a){for(var b=J(M);null!==b;){if(null===b.callback)K(M);else if(b.startTime<=a)K(M),b.sortIndex=b.expirationTime,H(L,b);else break;b=J(M);}}function U(a){S=!1;T(a);if(!R)if(null!==J(L))R=!0,f(V);else {var b=J(M);null!==b&&g(U,b.startTime-a);}}
            function V(a,b){R=!1;S&&(S=!1,h());Q=!0;var c=P;try{T(b);for(O=J(L);null!==O&&(!(O.expirationTime>b)||a&&!exports.unstable_shouldYield());){var d=O.callback;if("function"===typeof d){O.callback=null;P=O.priorityLevel;var e=d(O.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?O.callback=e:O===J(L)&&K(L);T(b);}else K(L);O=J(L);}if(null!==O)var m=!0;else {var n=J(M);null!==n&&g(U,n.startTime-b);m=!1;}return m}finally{O=null,P=c,Q=!1;}}var W=k;exports.unstable_IdlePriority=5;
            exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){R||Q||(R=!0,f(V));};exports.unstable_getCurrentPriorityLevel=function(){return P};exports.unstable_getFirstCallbackNode=function(){return J(L)};
            exports.unstable_next=function(a){switch(P){case 1:case 2:case 3:var b=3;break;default:b=P;}var c=P;P=b;try{return a()}finally{P=c;}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=W;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=P;P=a;try{return b()}finally{P=c;}};
            exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:N++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,H(M,a),null===J(L)&&a===J(M)&&(S?h():S=!0,g(U,c-d))):(a.sortIndex=e,H(L,a),R||Q||(R=!0,f(V)));return a};
            exports.unstable_wrapCallback=function(a){var b=P;return function(){var c=P;P=b;try{return a.apply(this,arguments)}finally{P=c;}}};
            }(scheduler_production_min));

            {
              scheduler.exports = scheduler_production_min;
            }

            /** @license React v17.0.2
             * react-dom.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var aa=React__default['default'],m$2=objectAssign,r$5=scheduler.exports;function y$2(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(y$2(227));var ba=new Set,ca$1={};function da$1(a,b){ea(a,b);ea(a+"Capture",b);}
            function ea(a,b){ca$1[a]=b;for(a=0;a<b.length;a++)ba.add(b[a]);}
            var fa=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ha=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ia=Object.prototype.hasOwnProperty,
            ja$1={},ka={};function la(a){if(ia.call(ka,a))return !0;if(ia.call(ja$1,a))return !1;if(ha.test(a))return ka[a]=!0;ja$1[a]=!0;return !1}function ma(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
            function na(a,b,c,d){if(null===b||"undefined"===typeof b||ma(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function B$1(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var D$2={};
            "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){D$2[a]=new B$1(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];D$2[b]=new B$1(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){D$2[a]=new B$1(a,2,!1,a.toLowerCase(),null,!1,!1);});
            ["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){D$2[a]=new B$1(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){D$2[a]=new B$1(a,3,!1,a.toLowerCase(),null,!1,!1);});
            ["checked","multiple","muted","selected"].forEach(function(a){D$2[a]=new B$1(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){D$2[a]=new B$1(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){D$2[a]=new B$1(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){D$2[a]=new B$1(a,5,!1,a.toLowerCase(),null,!1,!1);});var oa=/[\-:]([a-z])/g;function pa(a){return a[1].toUpperCase()}
            "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(oa,
            pa);D$2[b]=new B$1(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(oa,pa);D$2[b]=new B$1(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(oa,pa);D$2[b]=new B$1(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){D$2[a]=new B$1(a,1,!1,a.toLowerCase(),null,!1,!1);});
            D$2.xlinkHref=new B$1("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){D$2[a]=new B$1(a,1,!1,a.toLowerCase(),null,!0,!0);});
            function qa(a,b,c,d){var e=D$2.hasOwnProperty(b)?D$2[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(na(b,c,e,d)&&(c=null),d||null===e?la(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))));}
            var ra=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,sa=60103,ta=60106,ua=60107,wa=60108,xa=60114,ya=60109,za=60110,Aa=60112,Ba=60113,Ca=60120,Da=60115,Ea=60116,Fa=60121,Ga=60128,Ha=60129,Ia=60130,Ja=60131;
            if("function"===typeof Symbol&&Symbol.for){var E$1=Symbol.for;sa=E$1("react.element");ta=E$1("react.portal");ua=E$1("react.fragment");wa=E$1("react.strict_mode");xa=E$1("react.profiler");ya=E$1("react.provider");za=E$1("react.context");Aa=E$1("react.forward_ref");Ba=E$1("react.suspense");Ca=E$1("react.suspense_list");Da=E$1("react.memo");Ea=E$1("react.lazy");Fa=E$1("react.block");E$1("react.scope");Ga=E$1("react.opaque.id");Ha=E$1("react.debug_trace_mode");Ia=E$1("react.offscreen");Ja=E$1("react.legacy_hidden");}
            var Ka="function"===typeof Symbol&&Symbol.iterator;function La(a){if(null===a||"object"!==typeof a)return null;a=Ka&&a[Ka]||a["@@iterator"];return "function"===typeof a?a:null}var Ma;function Na(a){if(void 0===Ma)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);Ma=b&&b[1]||"";}return "\n"+Ma+a}var Oa=!1;
            function Pa(a,b){if(!a||Oa)return "";Oa=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(k){var d=k;}Reflect.construct(a,[],b);}else {try{b.call();}catch(k){d=k;}a.call(b.prototype);}else {try{throw Error();}catch(k){d=k;}a();}}catch(k){if(k&&d&&"string"===typeof k.stack){for(var e=k.stack.split("\n"),
            f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h])return "\n"+e[g].replace(" at new "," at ");while(1<=g&&0<=h)}break}}}finally{Oa=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Na(a):""}
            function Qa(a){switch(a.tag){case 5:return Na(a.type);case 16:return Na("Lazy");case 13:return Na("Suspense");case 19:return Na("SuspenseList");case 0:case 2:case 15:return a=Pa(a.type,!1),a;case 11:return a=Pa(a.type.render,!1),a;case 22:return a=Pa(a.type._render,!1),a;case 1:return a=Pa(a.type,!0),a;default:return ""}}
            function Ra(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ua:return "Fragment";case ta:return "Portal";case xa:return "Profiler";case wa:return "StrictMode";case Ba:return "Suspense";case Ca:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case za:return (a.displayName||"Context")+".Consumer";case ya:return (a._context.displayName||"Context")+".Provider";case Aa:var b=a.render;b=b.displayName||b.name||"";
            return a.displayName||(""!==b?"ForwardRef("+b+")":"ForwardRef");case Da:return Ra(a.type);case Fa:return Ra(a._render);case Ea:b=a._payload;a=a._init;try{return Ra(a(b))}catch(c){}}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return ""}}function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
            function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
            null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
            function Ya(a,b){var c=b.checked;return m$2({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function $a(a,b){b=b.checked;null!=b&&qa(a,"checked",b,!1);}
            function ab(a,b){$a(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?bb(a,b.type,c):b.hasOwnProperty("defaultValue")&&bb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
            function cb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
            function bb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}function db(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a);});return b}function eb(a,b){a=m$2({children:void 0},b);if(b=db(b.children))a.children=b;return a}
            function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
            function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(y$2(91));return m$2({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(y$2(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(y$2(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
            function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}var kb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
            function lb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}function mb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?lb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
            var nb,ob=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==kb.svg||"innerHTML"in a)a.innerHTML=b;else {nb=nb||document.createElement("div");nb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=nb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
            function pb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
            var qb={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
            floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rb=["Webkit","ms","Moz","O"];Object.keys(qb).forEach(function(a){rb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qb[b]=qb[a];});});function sb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qb.hasOwnProperty(a)&&qb[a]?(""+b).trim():b+"px"}
            function tb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=sb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var ub=m$2({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
            function vb(a,b){if(b){if(ub[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(y$2(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(y$2(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(y$2(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(y$2(62));}}
            function wb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
            function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(y$2(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(a,b,c,d,e){return a(b,c,d,e)}function Ib(){}var Jb=Gb,Kb=!1,Lb=!1;function Mb(){if(null!==zb||null!==Ab)Ib(),Fb();}
            function Nb(a,b,c){if(Lb)return a(b,c);Lb=!0;try{return Jb(a,b,c)}finally{Lb=!1,Mb();}}
            function Ob(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
            typeof c)throw Error(y$2(231,b,typeof c));return c}var Pb=!1;if(fa)try{var Qb={};Object.defineProperty(Qb,"passive",{get:function(){Pb=!0;}});window.addEventListener("test",Qb,Qb);window.removeEventListener("test",Qb,Qb);}catch(a){Pb=!1;}function Rb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(n){this.onError(n);}}var Sb=!1,Tb=null,Ub=!1,Vb=null,Wb={onError:function(a){Sb=!0;Tb=a;}};function Xb(a,b,c,d,e,f,g,h,k){Sb=!1;Tb=null;Rb.apply(Wb,arguments);}
            function Yb(a,b,c,d,e,f,g,h,k){Xb.apply(this,arguments);if(Sb){if(Sb){var l=Tb;Sb=!1;Tb=null;}else throw Error(y$2(198));Ub||(Ub=!0,Vb=l);}}function Zb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function $b(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function ac(a){if(Zb(a)!==a)throw Error(y$2(188));}
            function bc(a){var b=a.alternate;if(!b){b=Zb(a);if(null===b)throw Error(y$2(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return ac(e),a;if(f===d)return ac(e),b;f=f.sibling;}throw Error(y$2(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
            c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(y$2(189));}}if(c.alternate!==d)throw Error(y$2(190));}if(3!==c.tag)throw Error(y$2(188));return c.stateNode.current===c?a:b}function cc(a){a=bc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else {if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
            function dc(a,b){for(var c=a.alternate;null!==b;){if(b===a||b===c)return !0;b=b.return;}return !1}var ec$1,fc,gc,hc,ic=!1,jc=[],kc=null,lc=null,mc=null,nc=new Map,oc=new Map,pc=[],qc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
            function rc(a,b,c,d,e){return {blockedOn:a,domEventName:b,eventSystemFlags:c|16,nativeEvent:e,targetContainers:[d]}}function sc(a,b){switch(a){case "focusin":case "focusout":kc=null;break;case "dragenter":case "dragleave":lc=null;break;case "mouseover":case "mouseout":mc=null;break;case "pointerover":case "pointerout":nc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":oc.delete(b.pointerId);}}
            function tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=rc(b,c,d,e,f),null!==b&&(b=Cb(b),null!==b&&fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
            function uc(a,b,c,d,e){switch(b){case "focusin":return kc=tc(kc,a,b,c,d,e),!0;case "dragenter":return lc=tc(lc,a,b,c,d,e),!0;case "mouseover":return mc=tc(mc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;nc.set(f,tc(nc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,oc.set(f,tc(oc.get(f)||null,a,b,c,d,e)),!0}return !1}
            function vc(a){var b=wc(a.target);if(null!==b){var c=Zb(b);if(null!==c)if(b=c.tag,13===b){if(b=$b(c),null!==b){a.blockedOn=b;hc(a.lanePriority,function(){r$5.unstable_runWithPriority(a.priority,function(){gc(c);});});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
            function xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c)return b=Cb(c),null!==b&&fc(b),a.blockedOn=c,!1;b.shift();}return !0}function zc(a,b,c){xc(a)&&c.delete(b);}
            function Ac(){for(ic=!1;0<jc.length;){var a=jc[0];if(null!==a.blockedOn){a=Cb(a.blockedOn);null!==a&&ec$1(a);break}for(var b=a.targetContainers;0<b.length;){var c=yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null!==c){a.blockedOn=c;break}b.shift();}null===a.blockedOn&&jc.shift();}null!==kc&&xc(kc)&&(kc=null);null!==lc&&xc(lc)&&(lc=null);null!==mc&&xc(mc)&&(mc=null);nc.forEach(zc);oc.forEach(zc);}
            function Bc(a,b){a.blockedOn===b&&(a.blockedOn=null,ic||(ic=!0,r$5.unstable_scheduleCallback(r$5.unstable_NormalPriority,Ac)));}
            function Cc(a){function b(b){return Bc(b,a)}if(0<jc.length){Bc(jc[0],a);for(var c=1;c<jc.length;c++){var d=jc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==kc&&Bc(kc,a);null!==lc&&Bc(lc,a);null!==mc&&Bc(mc,a);nc.forEach(b);oc.forEach(b);for(c=0;c<pc.length;c++)d=pc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<pc.length&&(c=pc[0],null===c.blockedOn);)vc(c),null===c.blockedOn&&pc.shift();}
            function Dc(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ec={animationend:Dc("Animation","AnimationEnd"),animationiteration:Dc("Animation","AnimationIteration"),animationstart:Dc("Animation","AnimationStart"),transitionend:Dc("Transition","TransitionEnd")},Fc={},Gc={};
            fa&&(Gc=document.createElement("div").style,"AnimationEvent"in window||(delete Ec.animationend.animation,delete Ec.animationiteration.animation,delete Ec.animationstart.animation),"TransitionEvent"in window||delete Ec.transitionend.transition);function Hc(a){if(Fc[a])return Fc[a];if(!Ec[a])return a;var b=Ec[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Gc)return Fc[a]=b[c];return a}
            var Ic=Hc("animationend"),Jc=Hc("animationiteration"),Kc=Hc("animationstart"),Lc=Hc("transitionend"),Mc=new Map,Nc=new Map,Oc=["abort","abort",Ic,"animationEnd",Jc,"animationIteration",Kc,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart",
            "lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Lc,"transitionEnd","waiting","waiting"];function Pc(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1];e="on"+(e[0].toUpperCase()+e.slice(1));Nc.set(d,b);Mc.set(d,e);da$1(e,[d]);}}var Qc=r$5.unstable_now;Qc();var F$1=8;
            function Rc(a){if(0!==(1&a))return F$1=15,1;if(0!==(2&a))return F$1=14,2;if(0!==(4&a))return F$1=13,4;var b=24&a;if(0!==b)return F$1=12,b;if(0!==(a&32))return F$1=11,32;b=192&a;if(0!==b)return F$1=10,b;if(0!==(a&256))return F$1=9,256;b=3584&a;if(0!==b)return F$1=8,b;if(0!==(a&4096))return F$1=7,4096;b=4186112&a;if(0!==b)return F$1=6,b;b=62914560&a;if(0!==b)return F$1=5,b;if(a&67108864)return F$1=4,67108864;if(0!==(a&134217728))return F$1=3,134217728;b=805306368&a;if(0!==b)return F$1=2,b;if(0!==(1073741824&a))return F$1=1,1073741824;
            F$1=8;return a}function Sc(a){switch(a){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}function Tc(a){switch(a){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(y$2(358,a));}}
            function Uc(a,b){var c=a.pendingLanes;if(0===c)return F$1=0;var d=0,e=0,f=a.expiredLanes,g=a.suspendedLanes,h=a.pingedLanes;if(0!==f)d=f,e=F$1=15;else if(f=c&134217727,0!==f){var k=f&~g;0!==k?(d=Rc(k),e=F$1):(h&=f,0!==h&&(d=Rc(h),e=F$1));}else f=c&~g,0!==f?(d=Rc(f),e=F$1):0!==h&&(d=Rc(h),e=F$1);if(0===d)return 0;d=31-Vc(d);d=c&((0>d?0:1<<d)<<1)-1;if(0!==b&&b!==d&&0===(b&g)){Rc(b);if(e<=F$1)return b;F$1=e;}b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-Vc(b),e=1<<c,d|=a[c],b&=~e;return d}
            function Wc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Xc(a,b){switch(a){case 15:return 1;case 14:return 2;case 12:return a=Yc(24&~b),0===a?Xc(10,b):a;case 10:return a=Yc(192&~b),0===a?Xc(8,b):a;case 8:return a=Yc(3584&~b),0===a&&(a=Yc(4186112&~b),0===a&&(a=512)),a;case 2:return b=Yc(805306368&~b),0===b&&(b=268435456),b}throw Error(y$2(358,a));}function Yc(a){return a&-a}function Zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
            function $c(a,b,c){a.pendingLanes|=b;var d=b-1;a.suspendedLanes&=d;a.pingedLanes&=d;a=a.eventTimes;b=31-Vc(b);a[b]=c;}var Vc=Math.clz32?Math.clz32:ad,bd=Math.log,cd=Math.LN2;function ad(a){return 0===a?32:31-(bd(a)/cd|0)|0}var dd=r$5.unstable_UserBlockingPriority,ed=r$5.unstable_runWithPriority,fd=!0;function gd(a,b,c,d){Kb||Ib();var e=hd,f=Kb;Kb=!0;try{Hb(e,a,b,c,d);}finally{(Kb=f)||Mb();}}function id$2(a,b,c,d){ed(dd,hd.bind(null,a,b,c,d));}
            function hd(a,b,c,d){if(fd){var e;if((e=0===(b&4))&&0<jc.length&&-1<qc.indexOf(a))a=rc(null,a,b,c,d),jc.push(a);else {var f=yc(a,b,c,d);if(null===f)e&&sc(a,d);else {if(e){if(-1<qc.indexOf(a)){a=rc(f,a,b,c,d);jc.push(a);return}if(uc(f,a,b,c,d))return;sc(a,d);}jd(a,b,d,null,c);}}}}
            function yc(a,b,c,d){var e=xb(d);e=wc(e);if(null!==e){var f=Zb(e);if(null===f)e=null;else {var g=f.tag;if(13===g){e=$b(f);if(null!==e)return e;e=null;}else if(3===g){if(f.stateNode.hydrate)return 3===f.tag?f.stateNode.containerInfo:null;e=null;}else f!==e&&(e=null);}}jd(a,b,d,e,c);return null}var kd=null,ld=null,md=null;
            function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
            function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}m$2(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
            (a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
            var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=m$2({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=m$2({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
            a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=m$2({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=m$2({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=m$2({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=m$2({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=m$2({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
            Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
            119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
            var Qd=m$2({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
            a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=m$2({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=m$2({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=m$2({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=m$2({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
            deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=fa&&"CompositionEvent"in window,be=null;fa&&"documentMode"in document&&(be=document.documentMode);var ce=fa&&"TextEvent"in window&&!be,de$1=fa&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
            function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he$1(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he$1(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
            function ke(a,b){if(ie)return "compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de$1&&"ko"!==b.locale?null:b.data;default:return null}}
            var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re(a){se(a,0);}function te(a){var b=ue(a);if(Wa(b))return a}
            function ve(a,b){if("change"===a)return b}var we=!1;if(fa){var xe;if(fa){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));a=re;if(Kb)a(b);else {Kb=!0;try{Gb(a,b);}finally{Kb=!1,Mb();}}}}
            function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge,Ie=Object.prototype.hasOwnProperty;
            function Je(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!Ie.call(b,c[d])||!He(a[c[d]],b[c[d]]))return !1;return !0}function Ke(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
            function Le(a,b){var c=Ke(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Ke(c);}}function Me(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Me(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
            function Ne(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Oe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
            var Pe=fa&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
            function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Oe(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Je(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
            Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),
            0);Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);Pc(Oc,2);for(var Ve="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),We=0;We<Ve.length;We++)Nc.set(Ve[We],0);ea("onMouseEnter",["mouseout","mouseover"]);
            ea("onMouseLeave",["mouseout","mouseover"]);ea("onPointerEnter",["pointerout","pointerover"]);ea("onPointerLeave",["pointerout","pointerover"]);da$1("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));da$1("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));da$1("onBeforeInput",["compositionend","keypress","textInput","paste"]);da$1("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));
            da$1("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));da$1("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));
            function Ze(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Yb(d,b,void 0,a);a.currentTarget=null;}
            function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;Ze(e,h,l);f=k;}}}if(Ub)throw a=Vb,Ub=!1,Vb=null,a;}
            function G$1(a,b){var c=$e(b),d=a+"__bubble";c.has(d)||(af$1(b,a,2,!1),c.add(d));}var bf="_reactListening"+Math.random().toString(36).slice(2);function cf(a){a[bf]||(a[bf]=!0,ba.forEach(function(b){Ye.has(b)||df(b,!1,a,null);df(b,!0,a,null);}));}
            function df(a,b,c,d){var e=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,f=c;"selectionchange"===a&&9!==c.nodeType&&(f=c.ownerDocument);if(null!==d&&!b&&Ye.has(a)){if("scroll"!==a)return;e|=2;f=d;}var g=$e(f),h=a+"__"+(b?"capture":"bubble");g.has(h)||(b&&(e|=4),af$1(f,a,e,b),g.add(h));}
            function af$1(a,b,c,d){var e=Nc.get(b);switch(void 0===e?2:e){case 0:e=gd;break;case 1:e=id$2;break;default:e=hd;}c=e.bind(null,b,c,a);e=void 0;!Pb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
            function jd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Nb(function(){var d=f,e=xb(c),g=[];
            a:{var h=Mc.get(a);if(void 0!==h){var k=td,x=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":x="focus";k=Fd;break;case "focusout":x="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
            Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case Ic:case Jc:case Kc:k=Hd;break;case Lc:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var w=0!==(b&4),z=!w&&"scroll"===a,u=w?null!==h?h+"Capture":null:h;w=[];for(var t=d,q;null!==
            t;){q=t;var v=q.stateNode;5===q.tag&&null!==v&&(q=v,null!==u&&(v=Ob(t,u),null!=v&&w.push(ef(t,v,q))));if(z)break;t=t.return;}0<w.length&&(h=new k(h,x,null,c,e),g.push({event:h,listeners:w}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&0===(b&16)&&(x=c.relatedTarget||c.fromElement)&&(wc(x)||x[ff]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(x=c.relatedTarget||c.toElement,k=d,x=x?wc(x):null,null!==
            x&&(z=Zb(x),x!==z||5!==x.tag&&6!==x.tag))x=null;}else k=null,x=d;if(k!==x){w=Bd;v="onMouseLeave";u="onMouseEnter";t="mouse";if("pointerout"===a||"pointerover"===a)w=Td,v="onPointerLeave",u="onPointerEnter",t="pointer";z=null==k?h:ue(k);q=null==x?h:ue(x);h=new w(v,t+"leave",k,c,e);h.target=z;h.relatedTarget=q;v=null;wc(e)===d&&(w=new w(u,t+"enter",x,c,e),w.target=q,w.relatedTarget=z,v=w);z=v;if(k&&x)b:{w=k;u=x;t=0;for(q=w;q;q=gf(q))t++;q=0;for(v=u;v;v=gf(v))q++;for(;0<t-q;)w=gf(w),t--;for(;0<q-t;)u=
            gf(u),q--;for(;t--;){if(w===u||null!==u&&w===u.alternate)break b;w=gf(w);u=gf(u);}w=null;}else w=null;null!==k&&hf(g,h,k,w,!1);null!==x&&null!==z&&hf(g,z,x,w,!0);}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var J=ve;else if(me(h))if(we)J=Fe;else {J=De;var K=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(J=Ee);if(J&&(J=J(a,d))){ne(g,J,c,e);break a}K&&K(a,h,d);"focusout"===a&&(K=h._wrapperState)&&
            K.controlled&&"number"===h.type&&bb(h,"number",h.value);}K=d?ue(d):window;switch(a){case "focusin":if(me(K)||"true"===K.contentEditable)Qe=K,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var Q;if(ae)b:{switch(a){case "compositionstart":var L="onCompositionStart";break b;case "compositionend":L="onCompositionEnd";break b;
            case "compositionupdate":L="onCompositionUpdate";break b}L=void 0;}else ie?ge(a,c)&&(L="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(L="onCompositionStart");L&&(de$1&&"ko"!==c.locale&&(ie||"onCompositionStart"!==L?"onCompositionEnd"===L&&ie&&(Q=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),K=oe(d,L),0<K.length&&(L=new Ld(L,a,null,c,e),g.push({event:L,listeners:K}),Q?L.data=Q:(Q=he$1(c),null!==Q&&(L.data=Q))));if(Q=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),0<d.length&&(e=new Ld("onBeforeInput",
            "beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=Q);}se(g,b);});}function ef(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Ob(a,c),null!=f&&d.unshift(ef(a,f,e)),f=Ob(a,b),null!=f&&d.push(ef(a,f,e)));a=a.return;}return d}function gf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
            function hf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Ob(c,f),null!=k&&g.unshift(ef(c,k,h))):e||(k=Ob(c,f),null!=k&&g.push(ef(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}function jf(){}var kf=null,lf=null;function mf(a,b){switch(a){case "button":case "input":case "select":case "textarea":return !!b.autoFocus}return !1}
            function nf(a,b){return "textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var of="function"===typeof setTimeout?setTimeout:void 0,pf="function"===typeof clearTimeout?clearTimeout:void 0;function qf(a){1===a.nodeType?a.textContent="":9===a.nodeType&&(a=a.body,null!=a&&(a.textContent=""));}
            function rf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}function sf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var tf=0;function uf(a){return {$$typeof:Ga,toString:a,valueOf:a}}var vf=Math.random().toString(36).slice(2),wf="__reactFiber$"+vf,xf="__reactProps$"+vf,ff="__reactContainer$"+vf,yf="__reactEvents$"+vf;
            function wc(a){var b=a[wf];if(b)return b;for(var c=a.parentNode;c;){if(b=c[ff]||c[wf]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=sf(a);null!==a;){if(c=a[wf])return c;a=sf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[wf]||a[ff];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(y$2(33));}function Db(a){return a[xf]||null}
            function $e(a){var b=a[yf];void 0===b&&(b=a[yf]=new Set);return b}var zf=[],Af=-1;function Bf(a){return {current:a}}function H$1(a){0>Af||(a.current=zf[Af],zf[Af]=null,Af--);}function I$1(a,b){Af++;zf[Af]=a.current;a.current=b;}var Cf={},M$1=Bf(Cf),N$2=Bf(!1),Df=Cf;
            function Ef(a,b){var c=a.type.contextTypes;if(!c)return Cf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function Ff(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Gf(){H$1(N$2);H$1(M$1);}function Hf(a,b,c){if(M$1.current!==Cf)throw Error(y$2(168));I$1(M$1,b);I$1(N$2,c);}
            function If(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(y$2(108,Ra(b)||"Unknown",e));return m$2({},c,d)}function Jf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Cf;Df=M$1.current;I$1(M$1,a);I$1(N$2,N$2.current);return !0}function Kf(a,b,c){var d=a.stateNode;if(!d)throw Error(y$2(169));c?(a=If(a,b,Df),d.__reactInternalMemoizedMergedChildContext=a,H$1(N$2),H$1(M$1),I$1(M$1,a)):H$1(N$2);I$1(N$2,c);}
            var Lf=null,Mf=null,Nf=r$5.unstable_runWithPriority,Of=r$5.unstable_scheduleCallback,Pf=r$5.unstable_cancelCallback,Qf=r$5.unstable_shouldYield,Rf=r$5.unstable_requestPaint,Sf=r$5.unstable_now,Tf=r$5.unstable_getCurrentPriorityLevel,Uf=r$5.unstable_ImmediatePriority,Vf=r$5.unstable_UserBlockingPriority,Wf=r$5.unstable_NormalPriority,Xf=r$5.unstable_LowPriority,Yf=r$5.unstable_IdlePriority,Zf={},$f=void 0!==Rf?Rf:function(){},ag=null,bg=null,cg=!1,dg=Sf(),O$1=1E4>dg?Sf:function(){return Sf()-dg};
            function eg(){switch(Tf()){case Uf:return 99;case Vf:return 98;case Wf:return 97;case Xf:return 96;case Yf:return 95;default:throw Error(y$2(332));}}function fg(a){switch(a){case 99:return Uf;case 98:return Vf;case 97:return Wf;case 96:return Xf;case 95:return Yf;default:throw Error(y$2(332));}}function gg(a,b){a=fg(a);return Nf(a,b)}function hg(a,b,c){a=fg(a);return Of(a,b,c)}function ig(){if(null!==bg){var a=bg;bg=null;Pf(a);}jg();}
            function jg(){if(!cg&&null!==ag){cg=!0;var a=0;try{var b=ag;gg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});ag=null;}catch(c){throw null!==ag&&(ag=ag.slice(a+1)),Of(Uf,ig),c;}finally{cg=!1;}}}var kg=ra.ReactCurrentBatchConfig;function lg(a,b){if(a&&a.defaultProps){b=m$2({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var mg=Bf(null),ng=null,og=null,pg=null;function qg(){pg=og=ng=null;}
            function rg(a){var b=mg.current;H$1(mg);a.type._context._currentValue=b;}function sg(a,b){for(;null!==a;){var c=a.alternate;if((a.childLanes&b)===b)if(null===c||(c.childLanes&b)===b)break;else c.childLanes|=b;else a.childLanes|=b,null!==c&&(c.childLanes|=b);a=a.return;}}function tg(a,b){ng=a;pg=og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(ug=!0),a.firstContext=null);}
            function vg(a,b){if(pg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)pg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===og){if(null===ng)throw Error(y$2(308));og=b;ng.dependencies={lanes:0,firstContext:b,responders:null};}else og=og.next=b;}return a._currentValue}var wg=!1;function xg(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null};}
            function yg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function zg(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}function Ag(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}}
            function Bg(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
            b;c.lastBaseUpdate=b;}
            function Cg(a,b,c,d){var e=a.updateQueue;wg=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var n=a.alternate;if(null!==n){n=n.updateQueue;var A=n.lastBaseUpdate;A!==g&&(null===A?n.firstBaseUpdate=l:A.next=l,n.lastBaseUpdate=k);}}if(null!==f){A=e.baseState;g=0;n=l=k=null;do{h=f.lane;var p=f.eventTime;if((d&h)===h){null!==n&&(n=n.next={eventTime:p,lane:0,tag:f.tag,payload:f.payload,callback:f.callback,
            next:null});a:{var C=a,x=f;h=b;p=c;switch(x.tag){case 1:C=x.payload;if("function"===typeof C){A=C.call(p,A,h);break a}A=C;break a;case 3:C.flags=C.flags&-4097|64;case 0:C=x.payload;h="function"===typeof C?C.call(p,A,h):C;if(null===h||void 0===h)break a;A=m$2({},A,h);break a;case 2:wg=!0;}}null!==f.callback&&(a.flags|=32,h=e.effects,null===h?e.effects=[f]:h.push(f));}else p={eventTime:p,lane:h,tag:f.tag,payload:f.payload,callback:f.callback,next:null},null===n?(l=n=p,k=A):n=n.next=p,g|=h;f=f.next;if(null===
            f)if(h=e.shared.pending,null===h)break;else f=h.next,h.next=null,e.lastBaseUpdate=h,e.shared.pending=null;}while(1);null===n&&(k=A);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=n;Dg|=g;a.lanes=g;a.memoizedState=A;}}function Eg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(y$2(191,e));e.call(d);}}}var Fg=(new aa.Component).refs;
            function Gg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:m$2({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
            var Kg={isMounted:function(a){return (a=a._reactInternals)?Zb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=Hg(),e=Ig(a),f=zg(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);Ag(a,f);Jg(a,e,d);},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=Hg(),d=Ig(a),e=zg(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=
            b);Ag(a,e);Jg(a,d,c);}};function Lg(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Je(c,d)||!Je(e,f):!0}
            function Mg(a,b,c){var d=!1,e=Cf;var f=b.contextType;"object"===typeof f&&null!==f?f=vg(f):(e=Ff(b)?Df:M$1.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Ef(a,e):Cf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Kg;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
            function Ng(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Kg.enqueueReplaceState(b,b.state,null);}
            function Og(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Fg;xg(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=vg(f):(f=Ff(b)?Df:M$1.current,e.context=Ef(a,f));Cg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Gg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
            (b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Kg.enqueueReplaceState(e,e.state,null),Cg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4);}var Pg=Array.isArray;
            function Qg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(y$2(309));var d=c.stateNode;}if(!d)throw Error(y$2(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Fg&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}if("string"!==typeof a)throw Error(y$2(284));if(!c._owner)throw Error(y$2(290,a));}return a}
            function Rg(a,b){if("textarea"!==a.type)throw Error(y$2(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b));}
            function Sg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.flags=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Tg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags=2,
            c):d;b.flags=2;return c}function g(b){a&&null===b.alternate&&(b.flags=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Ug(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Qg(a,b,c),d.return=a,d;d=Vg(c.type,c.key,c.props,null,a.mode,d);d.ref=Qg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=
            Wg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function n(a,b,c,d,f){if(null===b||7!==b.tag)return b=Xg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function A(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Ug(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case sa:return c=Vg(b.type,b.key,b.props,null,a.mode,c),c.ref=Qg(a,null,b),c.return=a,c;case ta:return b=Wg(b,a.mode,c),b.return=a,b}if(Pg(b)||La(b))return b=Xg(b,
            a.mode,c,null),b.return=a,b;Rg(a,b);}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case sa:return c.key===e?c.type===ua?n(a,b,c.props.children,d,e):k(a,b,c,d):null;case ta:return c.key===e?l(a,b,c,d):null}if(Pg(c)||La(c))return null!==e?null:n(a,b,c,d,null);Rg(a,c);}return null}function C(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=a.get(c)||
            null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case sa:return a=a.get(null===d.key?c:d.key)||null,d.type===ua?n(b,a,d.props.children,e,d.key):k(b,a,d,e);case ta:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Pg(d)||La(d))return a=a.get(c)||null,n(b,a,d,e,null);Rg(b,d);}return null}function x(e,g,h,k){for(var l=null,t=null,u=g,z=g=0,q=null;null!==u&&z<h.length;z++){u.index>z?(q=u,u=null):q=u.sibling;var n=p(e,u,h[z],k);if(null===n){null===u&&(u=q);break}a&&u&&null===
            n.alternate&&b(e,u);g=f(n,g,z);null===t?l=n:t.sibling=n;t=n;u=q;}if(z===h.length)return c(e,u),l;if(null===u){for(;z<h.length;z++)u=A(e,h[z],k),null!==u&&(g=f(u,g,z),null===t?l=u:t.sibling=u,t=u);return l}for(u=d(e,u);z<h.length;z++)q=C(u,e,z,h[z],k),null!==q&&(a&&null!==q.alternate&&u.delete(null===q.key?z:q.key),g=f(q,g,z),null===t?l=q:t.sibling=q,t=q);a&&u.forEach(function(a){return b(e,a)});return l}function w(e,g,h,k){var l=La(h);if("function"!==typeof l)throw Error(y$2(150));h=l.call(h);if(null==
            h)throw Error(y$2(151));for(var t=l=null,u=g,z=g=0,q=null,n=h.next();null!==u&&!n.done;z++,n=h.next()){u.index>z?(q=u,u=null):q=u.sibling;var w=p(e,u,n.value,k);if(null===w){null===u&&(u=q);break}a&&u&&null===w.alternate&&b(e,u);g=f(w,g,z);null===t?l=w:t.sibling=w;t=w;u=q;}if(n.done)return c(e,u),l;if(null===u){for(;!n.done;z++,n=h.next())n=A(e,n.value,k),null!==n&&(g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);return l}for(u=d(e,u);!n.done;z++,n=h.next())n=C(u,e,z,n.value,k),null!==n&&(a&&null!==n.alternate&&
            u.delete(null===n.key?z:n.key),g=f(n,g,z),null===t?l=n:t.sibling=n,t=n);a&&u.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ua&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case sa:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ua){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,k.sibling);
            d=e(k,f.props);d.ref=Qg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling;}f.type===ua?(d=Xg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Vg(f.type,f.key,f.props,null,a.mode,h),h.ref=Qg(a,d,f),h.return=a,a=h);}return g(a);case ta:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=
            Wg(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Ug(f,a.mode,h),d.return=a,a=d),g(a);if(Pg(f))return x(a,d,f,h);if(La(f))return w(a,d,f,h);l&&Rg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 22:case 0:case 11:case 15:throw Error(y$2(152,Ra(a.type)||"Component"));}return c(a,d)}}var Yg=Sg(!0),Zg=Sg(!1),$g={},ah=Bf($g),bh=Bf($g),ch=Bf($g);
            function dh(a){if(a===$g)throw Error(y$2(174));return a}function eh(a,b){I$1(ch,b);I$1(bh,a);I$1(ah,$g);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:mb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=mb(b,a);}H$1(ah);I$1(ah,b);}function fh(){H$1(ah);H$1(bh);H$1(ch);}function gh(a){dh(ch.current);var b=dh(ah.current);var c=mb(b,a.type);b!==c&&(I$1(bh,a),I$1(ah,c));}function hh(a){bh.current===a&&(H$1(ah),H$1(bh));}var P$1=Bf(0);
            function ih(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var jh=null,kh=null,lh=!1;
            function mh$2(a,b){var c=nh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.flags=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}function oh(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return !1;default:return !1}}
            function ph(a){if(lh){var b=kh;if(b){var c=b;if(!oh(a,b)){b=rf(c.nextSibling);if(!b||!oh(a,b)){a.flags=a.flags&-1025|2;lh=!1;jh=a;return}mh$2(jh,c);}jh=a;kh=rf(b.firstChild);}else a.flags=a.flags&-1025|2,lh=!1,jh=a;}}function qh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;jh=a;}
            function rh$1(a){if(a!==jh)return !1;if(!lh)return qh(a),lh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!nf(b,a.memoizedProps))for(b=kh;b;)mh$2(a,b),b=rf(b.nextSibling);qh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(y$2(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){kh=rf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}kh=null;}}else kh=jh?rf(a.stateNode.nextSibling):null;return !0}
            function sh$1(){kh=jh=null;lh=!1;}var th=[];function uh(){for(var a=0;a<th.length;a++)th[a]._workInProgressVersionPrimary=null;th.length=0;}var vh=ra.ReactCurrentDispatcher,wh=ra.ReactCurrentBatchConfig,xh=0,R$1=null,S$1=null,T=null,yh=!1,zh$1=!1;function Ah(){throw Error(y$2(321));}function Bh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
            function Ch(a,b,c,d,e,f){xh=f;R$1=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;vh.current=null===a||null===a.memoizedState?Dh:Eh;a=c(d,e);if(zh$1){f=0;do{zh$1=!1;if(!(25>f))throw Error(y$2(301));f+=1;T=S$1=null;b.updateQueue=null;vh.current=Fh;a=c(d,e);}while(zh$1)}vh.current=Gh;b=null!==S$1&&null!==S$1.next;xh=0;T=S$1=R$1=null;yh=!1;if(b)throw Error(y$2(300));return a}function Hh(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===T?R$1.memoizedState=T=a:T=T.next=a;return T}
            function Ih(){if(null===S$1){var a=R$1.alternate;a=null!==a?a.memoizedState:null;}else a=S$1.next;var b=null===T?R$1.memoizedState:T.next;if(null!==b)T=b,S$1=a;else {if(null===a)throw Error(y$2(310));S$1=a;a={memoizedState:S$1.memoizedState,baseState:S$1.baseState,baseQueue:S$1.baseQueue,queue:S$1.queue,next:null};null===T?R$1.memoizedState=T=a:T=T.next=a;}return T}function Jh(a,b){return "function"===typeof b?b(a):b}
            function Kh$1(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y$2(311));c.lastRenderedReducer=a;var d=S$1,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.lane;if((xh&l)===l)null!==h&&(h=h.next={lane:0,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),d=k.eagerReducer===a?k.eagerState:a(d,k.action);else {var n={lane:l,action:k.action,eagerReducer:k.eagerReducer,
            eagerState:k.eagerState,next:null};null===h?(g=h=n,f=d):h=h.next=n;R$1.lanes|=l;Dg|=l;}k=k.next;}while(null!==k&&k!==e);null===h?f=d:h.next=g;He(d,b.memoizedState)||(ug=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d;}return [b.memoizedState,c.dispatch]}
            function Lh(a){var b=Ih(),c=b.queue;if(null===c)throw Error(y$2(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}
            function Mh(a,b,c){var d=b._getVersion;d=d(b._source);var e=b._workInProgressVersionPrimary;if(null!==e)a=e===d;else if(a=a.mutableReadLanes,a=(xh&a)===a)b._workInProgressVersionPrimary=d,th.push(b);if(a)return c(b._source);th.push(b);throw Error(y$2(350));}
            function Nh(a,b,c,d){var e=U$1;if(null===e)throw Error(y$2(349));var f=b._getVersion,g=f(b._source),h=vh.current,k=h.useState(function(){return Mh(e,b,c)}),l=k[1],n=k[0];k=T;var A=a.memoizedState,p=A.refs,C=p.getSnapshot,x=A.source;A=A.subscribe;var w=R$1;a.memoizedState={refs:p,source:b,subscribe:d};h.useEffect(function(){p.getSnapshot=c;p.setSnapshot=l;var a=f(b._source);if(!He(g,a)){a=c(b._source);He(n,a)||(l(a),a=Ig(w),e.mutableReadLanes|=a&e.pendingLanes);a=e.mutableReadLanes;e.entangledLanes|=a;for(var d=
            e.entanglements,h=a;0<h;){var k=31-Vc(h),v=1<<k;d[k]|=a;h&=~v;}}},[c,b,d]);h.useEffect(function(){return d(b._source,function(){var a=p.getSnapshot,c=p.setSnapshot;try{c(a(b._source));var d=Ig(w);e.mutableReadLanes|=d&e.pendingLanes;}catch(q){c(function(){throw q;});}})},[b,d]);He(C,c)&&He(x,b)&&He(A,d)||(a={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:n},a.dispatch=l=Oh.bind(null,R$1,a),k.queue=a,k.baseQueue=null,n=Mh(e,b,c),k.memoizedState=k.baseState=n);return n}
            function Ph(a,b,c){var d=Ih();return Nh(d,a,b,c)}function Qh(a){var b=Hh();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:Jh,lastRenderedState:a};a=a.dispatch=Oh.bind(null,R$1,a);return [b.memoizedState,a]}
            function Rh(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=R$1.updateQueue;null===b?(b={lastEffect:null},R$1.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function Sh(a){var b=Hh();a={current:a};return b.memoizedState=a}function Th(){return Ih().memoizedState}function Uh(a,b,c,d){var e=Hh();R$1.flags|=a;e.memoizedState=Rh(1|b,c,void 0,void 0===d?null:d);}
            function Vh(a,b,c,d){var e=Ih();d=void 0===d?null:d;var f=void 0;if(null!==S$1){var g=S$1.memoizedState;f=g.destroy;if(null!==d&&Bh(d,g.deps)){Rh(b,c,f,d);return}}R$1.flags|=a;e.memoizedState=Rh(1|b,c,f,d);}function Wh(a,b){return Uh(516,4,a,b)}function Xh(a,b){return Vh(516,4,a,b)}function Yh(a,b){return Vh(4,2,a,b)}function Zh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}
            function $h(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Vh(4,2,Zh.bind(null,b,a),c)}function ai(){}function bi(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}function ci(a,b){var c=Ih();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Bh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}
            function di(a,b){var c=eg();gg(98>c?98:c,function(){a(!0);});gg(97<c?97:c,function(){var c=wh.transition;wh.transition=1;try{a(!1),b();}finally{wh.transition=c;}});}
            function Oh(a,b,c){var d=Hg(),e=Ig(a),f={lane:e,action:c,eagerReducer:null,eagerState:null,next:null},g=b.pending;null===g?f.next=f:(f.next=g.next,g.next=f);b.pending=f;g=a.alternate;if(a===R$1||null!==g&&g===R$1)zh$1=yh=!0;else {if(0===a.lanes&&(null===g||0===g.lanes)&&(g=b.lastRenderedReducer,null!==g))try{var h=b.lastRenderedState,k=g(h,c);f.eagerReducer=g;f.eagerState=k;if(He(k,h))return}catch(l){}finally{}Jg(a,e,d);}}
            var Gh={readContext:vg,useCallback:Ah,useContext:Ah,useEffect:Ah,useImperativeHandle:Ah,useLayoutEffect:Ah,useMemo:Ah,useReducer:Ah,useRef:Ah,useState:Ah,useDebugValue:Ah,useDeferredValue:Ah,useTransition:Ah,useMutableSource:Ah,useOpaqueIdentifier:Ah,unstable_isNewReconciler:!1},Dh={readContext:vg,useCallback:function(a,b){Hh().memoizedState=[a,void 0===b?null:b];return a},useContext:vg,useEffect:Wh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Uh(4,2,Zh.bind(null,
            b,a),c)},useLayoutEffect:function(a,b){return Uh(4,2,a,b)},useMemo:function(a,b){var c=Hh();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Hh();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=Oh.bind(null,R$1,a);return [d.memoizedState,a]},useRef:Sh,useState:Qh,useDebugValue:ai,useDeferredValue:function(a){var b=Qh(a),c=b[0],d=b[1];Wh(function(){var b=wh.transition;
            wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Qh(!1),b=a[0];a=di.bind(null,a[1]);Sh(a);return [a,b]},useMutableSource:function(a,b,c){var d=Hh();d.memoizedState={refs:{getSnapshot:b,setSnapshot:null},source:a,subscribe:c};return Nh(d,a,b,c)},useOpaqueIdentifier:function(){if(lh){var a=!1,b=uf(function(){a||(a=!0,c("r:"+(tf++).toString(36)));throw Error(y$2(355));}),c=Qh(b)[1];0===(R$1.mode&2)&&(R$1.flags|=516,Rh(5,function(){c("r:"+(tf++).toString(36));},
            void 0,null));return b}b="r:"+(tf++).toString(36);Qh(b);return b},unstable_isNewReconciler:!1},Eh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Kh$1,useRef:Th,useState:function(){return Kh$1(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Kh$1(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Kh$1(Jh)[0];return [Th().current,
            a]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Kh$1(Jh)[0]},unstable_isNewReconciler:!1},Fh={readContext:vg,useCallback:bi,useContext:vg,useEffect:Xh,useImperativeHandle:$h,useLayoutEffect:Yh,useMemo:ci,useReducer:Lh,useRef:Th,useState:function(){return Lh(Jh)},useDebugValue:ai,useDeferredValue:function(a){var b=Lh(Jh),c=b[0],d=b[1];Xh(function(){var b=wh.transition;wh.transition=1;try{d(a);}finally{wh.transition=b;}},[a]);return c},useTransition:function(){var a=Lh(Jh)[0];return [Th().current,
            a]},useMutableSource:Ph,useOpaqueIdentifier:function(){return Lh(Jh)[0]},unstable_isNewReconciler:!1},ei=ra.ReactCurrentOwner,ug=!1;function fi$1(a,b,c,d){b.child=null===a?Zg(b,null,c,d):Yg(b,a.child,c,d);}function gi(a,b,c,d,e){c=c.render;var f=b.ref;tg(b,e);d=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi$1(a,b,d,e);return b.child}
            function ii(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!ji(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ki(a,b,g,d,e,f);a=Vg(c.type,null,d,b,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(0===(e&f)&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:Je,c(e,d)&&a.ref===b.ref))return hi(a,b,f);b.flags|=1;a=Tg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
            function ki(a,b,c,d,e,f){if(null!==a&&Je(a.memoizedProps,d)&&a.ref===b.ref)if(ug=!1,0!==(f&e))0!==(a.flags&16384)&&(ug=!0);else return b.lanes=a.lanes,hi(a,b,f);return li(a,b,c,d,f)}
            function mi(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode||"unstable-defer-without-hiding"===d.mode)if(0===(b.mode&4))b.memoizedState={baseLanes:0},ni(b,c);else if(0!==(c&1073741824))b.memoizedState={baseLanes:0},ni(b,null!==f?f.baseLanes:c);else return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a},ni(b,a),null;else null!==f?(d=f.baseLanes|c,b.memoizedState=null):d=c,ni(b,d);fi$1(a,b,e,c);return b.child}
            function oi(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=128;}function li(a,b,c,d,e){var f=Ff(c)?Df:M$1.current;f=Ef(b,f);tg(b,e);c=Ch(a,b,c,d,f,e);if(null!==a&&!ug)return b.updateQueue=a.updateQueue,b.flags&=-517,a.lanes&=~e,hi(a,b,e);b.flags|=1;fi$1(a,b,c,e);return b.child}
            function pi(a,b,c,d,e){if(Ff(c)){var f=!0;Jf(b);}else f=!1;tg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),Mg(b,c,d),Og(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=vg(l):(l=Ff(c)?Df:M$1.current,l=Ef(b,l));var n=c.getDerivedStateFromProps,A="function"===typeof n||"function"===typeof g.getSnapshotBeforeUpdate;A||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
            "function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Ng(b,g,d,l);wg=!1;var p=b.memoizedState;g.state=p;Cg(b,d,g,e);k=b.memoizedState;h!==d||p!==k||N$2.current||wg?("function"===typeof n&&(Gg(b,c,n,d),k=b.memoizedState),(h=wg||Lg(b,c,h,d,p,k,l))?(A||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
            typeof g.componentDidMount&&(b.flags|=4)):("function"===typeof g.componentDidMount&&(b.flags|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4),d=!1);}else {g=b.stateNode;yg(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:lg(b.type,h);g.props=l;A=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=vg(k):(k=Ff(c)?Df:M$1.current,k=Ef(b,k));var C=c.getDerivedStateFromProps;(n="function"===typeof C||
            "function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==A||p!==k)&&Ng(b,g,d,k);wg=!1;p=b.memoizedState;g.state=p;Cg(b,d,g,e);var x=b.memoizedState;h!==A||p!==x||N$2.current||wg?("function"===typeof C&&(Gg(b,c,C,d),x=b.memoizedState),(l=wg||Lg(b,c,l,d,p,x,k))?(n||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
            x,k),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||
            h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=256),d=!1);}return qi(a,b,c,d,f,e)}
            function qi(a,b,c,d,e,f){oi(a,b);var g=0!==(b.flags&64);if(!d&&!g)return e&&Kf(b,c,!1),hi(a,b,f);d=b.stateNode;ei.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Yg(b,a.child,null,f),b.child=Yg(b,null,h,f)):fi$1(a,b,h,f);b.memoizedState=d.state;e&&Kf(b,c,!0);return b.child}function ri(a){var b=a.stateNode;b.pendingContext?Hf(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Hf(a,b.context,!1);eh(a,b.containerInfo);}
            var si={dehydrated:null,retryLane:0};
            function ti(a,b,c){var d=b.pendingProps,e=P$1.current,f=!1,g;(g=0!==(b.flags&64))||(g=null!==a&&null===a.memoizedState?!1:0!==(e&2));g?(f=!0,b.flags&=-65):null!==a&&null===a.memoizedState||void 0===d.fallback||!0===d.unstable_avoidThisFallback||(e|=1);I$1(P$1,e&1);if(null===a){void 0!==d.fallback&&ph(b);a=d.children;e=d.fallback;if(f)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},b.memoizedState=si,a;if("number"===typeof d.unstable_expectedLoadTime)return a=ui(b,a,e,c),b.child.memoizedState={baseLanes:c},
            b.memoizedState=si,b.lanes=33554432,a;c=vi$1({mode:"visible",children:a},b.mode,c,null);c.return=b;return b.child=c}if(null!==a.memoizedState){if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:{baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}if(f)return d=wi(a,b,d.children,d.fallback,c),f=b.child,e=a.child.memoizedState,f.memoizedState=null===e?{baseLanes:c}:
            {baseLanes:e.baseLanes|c},f.childLanes=a.childLanes&~c,b.memoizedState=si,d;c=xi(a,b,d.children,c);b.memoizedState=null;return c}function ui(a,b,c,d){var e=a.mode,f=a.child;b={mode:"hidden",children:b};0===(e&2)&&null!==f?(f.childLanes=0,f.pendingProps=b):f=vi$1(b,e,0,null);c=Xg(c,e,d,null);f.return=a;c.return=a;f.sibling=c;a.child=f;return c}
            function xi(a,b,c,d){var e=a.child;a=e.sibling;c=Tg(e,{mode:"visible",children:c});0===(b.mode&2)&&(c.lanes=d);c.return=b;c.sibling=null;null!==a&&(a.nextEffect=null,a.flags=8,b.firstEffect=b.lastEffect=a);return b.child=c}
            function wi(a,b,c,d,e){var f=b.mode,g=a.child;a=g.sibling;var h={mode:"hidden",children:c};0===(f&2)&&b.child!==g?(c=b.child,c.childLanes=0,c.pendingProps=h,g=c.lastEffect,null!==g?(b.firstEffect=c.firstEffect,b.lastEffect=g,g.nextEffect=null):b.firstEffect=b.lastEffect=null):c=Tg(g,h);null!==a?d=Tg(a,d):(d=Xg(d,f,e,null),d.flags|=2);d.return=b;c.return=b;c.sibling=d;b.child=c;return d}function yi(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);sg(a.return,b);}
            function zi(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailMode=e,g.lastEffect=f);}
            function Ai(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;fi$1(a,b,d.children,c);d=P$1.current;if(0!==(d&2))d=d&1|2,b.flags|=64;else {if(null!==a&&0!==(a.flags&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&yi(a,c);else if(19===a.tag)yi(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}I$1(P$1,d);if(0===(b.mode&2))b.memoizedState=
            null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===ih(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);zi(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===ih(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}zi(b,!0,c,null,f,b.lastEffect);break;case "together":zi(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null;}return b.child}
            function hi(a,b,c){null!==a&&(b.dependencies=a.dependencies);Dg|=b.lanes;if(0!==(c&b.childLanes)){if(null!==a&&b.child!==a.child)throw Error(y$2(153));if(null!==b.child){a=b.child;c=Tg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Tg(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}return null}var Bi,Ci,Di,Ei;
            Bi=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Ci=function(){};
            Di=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;dh(ah.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "option":e=eb(a,e);d=eb(a,d);f=[];break;case "select":e=m$2({},e,{value:void 0});d=m$2({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=jf);}vb(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===
            l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ca$1.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||
            (c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ca$1.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&G$1("scroll",a),f||h===k||(f=[])):"object"===typeof k&&null!==k&&k.$$typeof===Ga?k.toString():(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",
            c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Ei=function(a,b,c,d){c!==d&&(b.flags|=4);};function Fi(a,b){if(!lh)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
            function Gi(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return Ff(b.type)&&Gf(),null;case 3:fh();H$1(N$2);H$1(M$1);uh();d=b.stateNode;d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)rh$1(b)?b.flags|=4:d.hydrate||(b.flags|=256);Ci(b);return null;case 5:hh(b);var e=dh(ch.current);c=b.type;if(null!==a&&null!=b.stateNode)Di(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=128);else {if(!d){if(null===
            b.stateNode)throw Error(y$2(166));return null}a=dh(ah.current);if(rh$1(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[wf]=b;d[xf]=f;switch(c){case "dialog":G$1("cancel",d);G$1("close",d);break;case "iframe":case "object":case "embed":G$1("load",d);break;case "video":case "audio":for(a=0;a<Xe.length;a++)G$1(Xe[a],d);break;case "source":G$1("error",d);break;case "img":case "image":case "link":G$1("error",d);G$1("load",d);break;case "details":G$1("toggle",d);break;case "input":Za(d,f);G$1("invalid",d);break;case "select":d._wrapperState=
            {wasMultiple:!!f.multiple};G$1("invalid",d);break;case "textarea":hb(d,f),G$1("invalid",d);}vb(c,f);a=null;for(var g in f)f.hasOwnProperty(g)&&(e=f[g],"children"===g?"string"===typeof e?d.textContent!==e&&(a=["children",e]):"number"===typeof e&&d.textContent!==""+e&&(a=["children",""+e]):ca$1.hasOwnProperty(g)&&null!=e&&"onScroll"===g&&G$1("scroll",d));switch(c){case "input":Va(d);cb(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=
            jf);}d=a;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;a===kb.html&&(a=lb(c));a===kb.html?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[wf]=b;a[xf]=d;Bi(a,b,!1,!1);b.stateNode=a;g=wb(c,d);switch(c){case "dialog":G$1("cancel",a);G$1("close",a);
            e=d;break;case "iframe":case "object":case "embed":G$1("load",a);e=d;break;case "video":case "audio":for(e=0;e<Xe.length;e++)G$1(Xe[e],a);e=d;break;case "source":G$1("error",a);e=d;break;case "img":case "image":case "link":G$1("error",a);G$1("load",a);e=d;break;case "details":G$1("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);G$1("invalid",a);break;case "option":e=eb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=m$2({},d,{value:void 0});G$1("invalid",a);break;case "textarea":hb(a,d);e=
            gb(a,d);G$1("invalid",a);break;default:e=d;}vb(c,e);var h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?tb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&ob(a,k)):"children"===f?"string"===typeof k?("textarea"!==c||""!==k)&&pb(a,k):"number"===typeof k&&pb(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ca$1.hasOwnProperty(f)?null!=k&&"onScroll"===f&&G$1("scroll",a):null!=k&&qa(a,f,k,g));}switch(c){case "input":Va(a);cb(a,d,!1);
            break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof e.onClick&&(a.onclick=jf);}mf(c,d)&&(b.flags|=4);}null!==b.ref&&(b.flags|=128);}return null;case 6:if(a&&null!=b.stateNode)Ei(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(y$2(166));
            c=dh(ch.current);dh(ah.current);rh$1(b)?(d=b.stateNode,c=b.memoizedProps,d[wf]=b,d.nodeValue!==c&&(b.flags|=4)):(d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[wf]=b,b.stateNode=d);}return null;case 13:H$1(P$1);d=b.memoizedState;if(0!==(b.flags&64))return b.lanes=c,b;d=null!==d;c=!1;null===a?void 0!==b.memoizedProps.fallback&&rh$1(b):c=null!==a.memoizedState;if(d&&!c&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(P$1.current&1))0===V&&(V=3);else {if(0===V||3===V)V=
            4;null===U$1||0===(Dg&134217727)&&0===(Hi&134217727)||Ii(U$1,W$1);}if(d||c)b.flags|=4;return null;case 4:return fh(),Ci(b),null===a&&cf(b.stateNode.containerInfo),null;case 10:return rg(b),null;case 17:return Ff(b.type)&&Gf(),null;case 19:H$1(P$1);d=b.memoizedState;if(null===d)return null;f=0!==(b.flags&64);g=d.rendering;if(null===g)if(f)Fi(d,!1);else {if(0!==V||null!==a&&0!==(a.flags&64))for(a=b.child;null!==a;){g=ih(a);if(null!==g){b.flags|=64;Fi(d,!1);f=g.updateQueue;null!==f&&(b.updateQueue=f,b.flags|=4);
            null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=2,f.nextEffect=null,f.firstEffect=null,f.lastEffect=null,g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,
            f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;I$1(P$1,P$1.current&1|2);return b.child}a=a.sibling;}null!==d.tail&&O$1()>Ji&&(b.flags|=64,f=!0,Fi(d,!1),b.lanes=33554432);}else {if(!f)if(a=ih(g),null!==a){if(b.flags|=64,f=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Fi(d,!0),null===d.tail&&"hidden"===d.tailMode&&!g.alternate&&!lh)return b=b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*O$1()-d.renderingStartTime>Ji&&1073741824!==c&&(b.flags|=
            64,f=!0,Fi(d,!1),b.lanes=33554432);d.isBackwards?(g.sibling=b.child,b.child=g):(c=d.last,null!==c?c.sibling=g:b.child=g,d.last=g);}return null!==d.tail?(c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=O$1(),c.sibling=null,b=P$1.current,I$1(P$1,f?b&1|2:b&1),c):null;case 23:case 24:return Ki(),null!==a&&null!==a.memoizedState!==(null!==b.memoizedState)&&"unstable-defer-without-hiding"!==d.mode&&(b.flags|=4),null}throw Error(y$2(156,b.tag));}
            function Li(a){switch(a.tag){case 1:Ff(a.type)&&Gf();var b=a.flags;return b&4096?(a.flags=b&-4097|64,a):null;case 3:fh();H$1(N$2);H$1(M$1);uh();b=a.flags;if(0!==(b&64))throw Error(y$2(285));a.flags=b&-4097|64;return a;case 5:return hh(a),null;case 13:return H$1(P$1),b=a.flags,b&4096?(a.flags=b&-4097|64,a):null;case 19:return H$1(P$1),null;case 4:return fh(),null;case 10:return rg(a),null;case 23:case 24:return Ki(),null;default:return null}}
            function Mi(a,b){try{var c="",d=b;do c+=Qa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e}}function Ni(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Oi="function"===typeof WeakMap?WeakMap:Map;function Pi(a,b,c){c=zg(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qi||(Qi=!0,Ri=d);Ni(a,b);};return c}
            function Si(a,b,c){c=zg(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ni(a,b);return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Ti?Ti=new Set([this]):Ti.add(this),Ni(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}var Ui="function"===typeof WeakSet?WeakSet:Set;
            function Vi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){Wi(a,c);}else b.current=null;}function Xi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.flags&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:lg(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b;}return;case 3:b.flags&256&&qf(b.stateNode.containerInfo);return;case 5:case 6:case 4:case 17:return}throw Error(y$2(163));}
            function Yi(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{if(3===(a.tag&3)){var d=a.create;a.destroy=d();}a=a.next;}while(a!==b)}b=c.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){a=b=b.next;do{var e=a;d=e.next;e=e.tag;0!==(e&4)&&0!==(e&1)&&(Zi(c,a),$i(c,a));a=d;}while(a!==b)}return;case 1:a=c.stateNode;c.flags&4&&(null===b?a.componentDidMount():(d=c.elementType===c.type?b.memoizedProps:lg(c.type,b.memoizedProps),a.componentDidUpdate(d,
            b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)));b=c.updateQueue;null!==b&&Eg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode;}Eg(c,b,a);}return;case 5:a=c.stateNode;null===b&&c.flags&4&&mf(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Cc(c))));
            return;case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(y$2(163));}
            function aj(a,b){for(var c=a;;){if(5===c.tag){var d=c.stateNode;if(b)d=d.style,"function"===typeof d.setProperty?d.setProperty("display","none","important"):d.display="none";else {d=c.stateNode;var e=c.memoizedProps.style;e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null;d.style.display=sb("display",e);}}else if(6===c.tag)c.stateNode.nodeValue=b?"":c.memoizedProps;else if((23!==c.tag&&24!==c.tag||null===c.memoizedState||c===a)&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===
            a)break;for(;null===c.sibling;){if(null===c.return||c.return===a)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}}
            function bj(a,b){if(Mf&&"function"===typeof Mf.onCommitFiberUnmount)try{Mf.onCommitFiberUnmount(Lf,b);}catch(f){}switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var c=a=a.next;do{var d=c,e=d.destroy;d=d.tag;if(void 0!==e)if(0!==(d&4))Zi(b,c);else {d=b;try{e();}catch(f){Wi(d,f);}}c=c.next;}while(c!==a)}break;case 1:Vi(b);a=b.stateNode;if("function"===typeof a.componentWillUnmount)try{a.props=b.memoizedProps,a.state=b.memoizedState,a.componentWillUnmount();}catch(f){Wi(b,
            f);}break;case 5:Vi(b);break;case 4:cj(a,b);}}function dj(a){a.alternate=null;a.child=null;a.dependencies=null;a.firstEffect=null;a.lastEffect=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.return=null;a.updateQueue=null;}function ej(a){return 5===a.tag||3===a.tag||4===a.tag}
            function fj(a){a:{for(var b=a.return;null!==b;){if(ej(b))break a;b=b.return;}throw Error(y$2(160));}var c=b;b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(y$2(161));}c.flags&16&&(pb(b,""),c.flags&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||ej(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.flags&2)continue b;if(null===
            c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.flags&2)){c=c.stateNode;break a}}d?gj(a,c,b):hj(a,c,b);}
            function gj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=jf));else if(4!==d&&(a=a.child,null!==a))for(gj(a,b,c),a=a.sibling;null!==a;)gj(a,b,c),a=a.sibling;}
            function hj(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(hj(a,b,c),a=a.sibling;null!==a;)hj(a,b,c),a=a.sibling;}
            function cj(a,b){for(var c=b,d=!1,e,f;;){if(!d){d=c.return;a:for(;;){if(null===d)throw Error(y$2(160));e=d.stateNode;switch(d.tag){case 5:f=!1;break a;case 3:e=e.containerInfo;f=!0;break a;case 4:e=e.containerInfo;f=!0;break a}d=d.return;}d=!0;}if(5===c.tag||6===c.tag){a:for(var g=a,h=c,k=h;;)if(bj(g,k),null!==k.child&&4!==k.tag)k.child.return=k,k=k.child;else {if(k===h)break a;for(;null===k.sibling;){if(null===k.return||k.return===h)break a;k=k.return;}k.sibling.return=k.return;k=k.sibling;}f?(g=e,h=c.stateNode,
            8===g.nodeType?g.parentNode.removeChild(h):g.removeChild(h)):e.removeChild(c.stateNode);}else if(4===c.tag){if(null!==c.child){e=c.stateNode.containerInfo;f=!0;c.child.return=c;c=c.child;continue}}else if(bj(a,c),null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;4===c.tag&&(d=!1);}c.sibling.return=c.return;c=c.sibling;}}
            function ij(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:var c=b.updateQueue;c=null!==c?c.lastEffect:null;if(null!==c){var d=c=c.next;do 3===(d.tag&3)&&(a=d.destroy,d.destroy=void 0,void 0!==a&&a()),d=d.next;while(d!==c)}return;case 1:return;case 5:c=b.stateNode;if(null!=c){d=b.memoizedProps;var e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[xf]=d;"input"===a&&"radio"===d.type&&null!=d.name&&$a(c,d);wb(a,e);b=wb(a,d);for(e=0;e<f.length;e+=
            2){var g=f[e],h=f[e+1];"style"===g?tb(c,h):"dangerouslySetInnerHTML"===g?ob(c,h):"children"===g?pb(c,h):qa(c,g,h,b);}switch(a){case "input":ab(c,d);break;case "textarea":ib(c,d);break;case "select":a=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,f=d.value,null!=f?fb(c,!!d.multiple,f,!1):a!==!!d.multiple&&(null!=d.defaultValue?fb(c,!!d.multiple,d.defaultValue,!0):fb(c,!!d.multiple,d.multiple?[]:"",!1));}}}return;case 6:if(null===b.stateNode)throw Error(y$2(162));b.stateNode.nodeValue=
            b.memoizedProps;return;case 3:c=b.stateNode;c.hydrate&&(c.hydrate=!1,Cc(c.containerInfo));return;case 12:return;case 13:null!==b.memoizedState&&(jj=O$1(),aj(b.child,!0));kj(b);return;case 19:kj(b);return;case 17:return;case 23:case 24:aj(b,null!==b.memoizedState);return}throw Error(y$2(163));}function kj(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Ui);b.forEach(function(b){var d=lj.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
            function mj(a,b){return null!==a&&(a=a.memoizedState,null===a||null!==a.dehydrated)?(b=b.memoizedState,null!==b&&null===b.dehydrated):!1}var nj=Math.ceil,oj=ra.ReactCurrentDispatcher,pj=ra.ReactCurrentOwner,X$1=0,U$1=null,Y=null,W$1=0,qj=0,rj=Bf(0),V=0,sj=null,tj=0,Dg=0,Hi=0,uj=0,vj=null,jj=0,Ji=Infinity;function wj(){Ji=O$1()+500;}var Z$1=null,Qi=!1,Ri=null,Ti=null,xj=!1,yj=null,zj=90,Aj=[],Bj=[],Cj=null,Dj=0,Ej=null,Fj=-1,Gj=0,Hj=0,Ij=null,Jj=!1;function Hg(){return 0!==(X$1&48)?O$1():-1!==Fj?Fj:Fj=O$1()}
            function Ig(a){a=a.mode;if(0===(a&2))return 1;if(0===(a&4))return 99===eg()?1:2;0===Gj&&(Gj=tj);if(0!==kg.transition){0!==Hj&&(Hj=null!==vj?vj.pendingLanes:0);a=Gj;var b=4186112&~Hj;b&=-b;0===b&&(a=4186112&~a,b=a&-a,0===b&&(b=8192));return b}a=eg();0!==(X$1&4)&&98===a?a=Xc(12,Gj):(a=Sc(a),a=Xc(a,Gj));return a}
            function Jg(a,b,c){if(50<Dj)throw Dj=0,Ej=null,Error(y$2(185));a=Kj(a,b);if(null===a)return null;$c(a,b,c);a===U$1&&(Hi|=b,4===V&&Ii(a,W$1));var d=eg();1===b?0!==(X$1&8)&&0===(X$1&48)?Lj(a):(Mj(a,c),0===X$1&&(wj(),ig())):(0===(X$1&4)||98!==d&&99!==d||(null===Cj?Cj=new Set([a]):Cj.add(a)),Mj(a,c));vj=a;}function Kj(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}
            function Mj(a,b){for(var c=a.callbackNode,d=a.suspendedLanes,e=a.pingedLanes,f=a.expirationTimes,g=a.pendingLanes;0<g;){var h=31-Vc(g),k=1<<h,l=f[h];if(-1===l){if(0===(k&d)||0!==(k&e)){l=b;Rc(k);var n=F$1;f[h]=10<=n?l+250:6<=n?l+5E3:-1;}}else l<=b&&(a.expiredLanes|=k);g&=~k;}d=Uc(a,a===U$1?W$1:0);b=F$1;if(0===d)null!==c&&(c!==Zf&&Pf(c),a.callbackNode=null,a.callbackPriority=0);else {if(null!==c){if(a.callbackPriority===b)return;c!==Zf&&Pf(c);}15===b?(c=Lj.bind(null,a),null===ag?(ag=[c],bg=Of(Uf,jg)):ag.push(c),
            c=Zf):14===b?c=hg(99,Lj.bind(null,a)):(c=Tc(b),c=hg(c,Nj.bind(null,a)));a.callbackPriority=b;a.callbackNode=c;}}
            function Nj(a){Fj=-1;Hj=Gj=0;if(0!==(X$1&48))throw Error(y$2(327));var b=a.callbackNode;if(Oj()&&a.callbackNode!==b)return null;var c=Uc(a,a===U$1?W$1:0);if(0===c)return null;var d=c;var e=X$1;X$1|=16;var f=Pj();if(U$1!==a||W$1!==d)wj(),Qj(a,d);do try{Rj();break}catch(h){Sj(a,h);}while(1);qg();oj.current=f;X$1=e;null!==Y?d=0:(U$1=null,W$1=0,d=V);if(0!==(tj&Hi))Qj(a,0);else if(0!==d){2===d&&(X$1|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),c=Wc(a),0!==c&&(d=Tj(a,c)));if(1===d)throw b=sj,Qj(a,0),Ii(a,c),Mj(a,O$1()),b;a.finishedWork=
            a.current.alternate;a.finishedLanes=c;switch(d){case 0:case 1:throw Error(y$2(345));case 2:Uj(a);break;case 3:Ii(a,c);if((c&62914560)===c&&(d=jj+500-O$1(),10<d)){if(0!==Uc(a,0))break;e=a.suspendedLanes;if((e&c)!==c){Hg();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=of(Uj.bind(null,a),d);break}Uj(a);break;case 4:Ii(a,c);if((c&4186112)===c)break;d=a.eventTimes;for(e=-1;0<c;){var g=31-Vc(c);f=1<<g;g=d[g];g>e&&(e=g);c&=~f;}c=e;c=O$1()-c;c=(120>c?120:480>c?480:1080>c?1080:1920>c?1920:3E3>c?3E3:4320>
            c?4320:1960*nj(c/1960))-c;if(10<c){a.timeoutHandle=of(Uj.bind(null,a),c);break}Uj(a);break;case 5:Uj(a);break;default:throw Error(y$2(329));}}Mj(a,O$1());return a.callbackNode===b?Nj.bind(null,a):null}function Ii(a,b){b&=~uj;b&=~Hi;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-Vc(b),d=1<<c;a[c]=-1;b&=~d;}}
            function Lj(a){if(0!==(X$1&48))throw Error(y$2(327));Oj();if(a===U$1&&0!==(a.expiredLanes&W$1)){var b=W$1;var c=Tj(a,b);0!==(tj&Hi)&&(b=Uc(a,b),c=Tj(a,b));}else b=Uc(a,0),c=Tj(a,b);0!==a.tag&&2===c&&(X$1|=64,a.hydrate&&(a.hydrate=!1,qf(a.containerInfo)),b=Wc(a),0!==b&&(c=Tj(a,b)));if(1===c)throw c=sj,Qj(a,0),Ii(a,b),Mj(a,O$1()),c;a.finishedWork=a.current.alternate;a.finishedLanes=b;Uj(a);Mj(a,O$1());return null}
            function Vj(){if(null!==Cj){var a=Cj;Cj=null;a.forEach(function(a){a.expiredLanes|=24&a.pendingLanes;Mj(a,O$1());});}ig();}function Wj(a,b){var c=X$1;X$1|=1;try{return a(b)}finally{X$1=c,0===X$1&&(wj(),ig());}}function Xj(a,b){var c=X$1;X$1&=-2;X$1|=8;try{return a(b)}finally{X$1=c,0===X$1&&(wj(),ig());}}function ni(a,b){I$1(rj,qj);qj|=b;tj|=b;}function Ki(){qj=rj.current;H$1(rj);}
            function Qj(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,pf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Gf();break;case 3:fh();H$1(N$2);H$1(M$1);uh();break;case 5:hh(d);break;case 4:fh();break;case 13:H$1(P$1);break;case 19:H$1(P$1);break;case 10:rg(d);break;case 23:case 24:Ki();}c=c.return;}U$1=a;Y=Tg(a.current,null);W$1=qj=tj=b;V=0;sj=null;uj=Hi=Dg=0;}
            function Sj(a,b){do{var c=Y;try{qg();vh.current=Gh;if(yh){for(var d=R$1.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}yh=!1;}xh=0;T=S$1=R$1=null;zh$1=!1;pj.current=null;if(null===c||null===c.return){V=1;sj=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=W$1;h.flags|=2048;h.firstEffect=h.lastEffect=null;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k;if(0===(h.mode&2)){var n=h.alternate;n?(h.updateQueue=n.updateQueue,h.memoizedState=n.memoizedState,h.lanes=n.lanes):
            (h.updateQueue=null,h.memoizedState=null);}var A=0!==(P$1.current&1),p=g;do{var C;if(C=13===p.tag){var x=p.memoizedState;if(null!==x)C=null!==x.dehydrated?!0:!1;else {var w=p.memoizedProps;C=void 0===w.fallback?!1:!0!==w.unstable_avoidThisFallback?!0:A?!1:!0;}}if(C){var z=p.updateQueue;if(null===z){var u=new Set;u.add(l);p.updateQueue=u;}else z.add(l);if(0===(p.mode&2)){p.flags|=64;h.flags|=16384;h.flags&=-2981;if(1===h.tag)if(null===h.alternate)h.tag=17;else {var t=zg(-1,1);t.tag=2;Ag(h,t);}h.lanes|=1;break a}k=
            void 0;h=b;var q=f.pingCache;null===q?(q=f.pingCache=new Oi,k=new Set,q.set(l,k)):(k=q.get(l),void 0===k&&(k=new Set,q.set(l,k)));if(!k.has(h)){k.add(h);var v=Yj.bind(null,f,l,h);l.then(v,v);}p.flags|=4096;p.lanes=b;break a}p=p.return;}while(null!==p);k=Error((Ra(h.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");}5!==V&&(V=2);k=Mi(k,h);p=
            g;do{switch(p.tag){case 3:f=k;p.flags|=4096;b&=-b;p.lanes|=b;var J=Pi(p,f,b);Bg(p,J);break a;case 1:f=k;var K=p.type,Q=p.stateNode;if(0===(p.flags&64)&&("function"===typeof K.getDerivedStateFromError||null!==Q&&"function"===typeof Q.componentDidCatch&&(null===Ti||!Ti.has(Q)))){p.flags|=4096;b&=-b;p.lanes|=b;var L=Si(p,f,b);Bg(p,L);break a}}p=p.return;}while(null!==p)}Zj(c);}catch(va){b=va;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}
            function Pj(){var a=oj.current;oj.current=Gh;return null===a?Gh:a}function Tj(a,b){var c=X$1;X$1|=16;var d=Pj();U$1===a&&W$1===b||Qj(a,b);do try{ak();break}catch(e){Sj(a,e);}while(1);qg();X$1=c;oj.current=d;if(null!==Y)throw Error(y$2(261));U$1=null;W$1=0;return V}function ak(){for(;null!==Y;)bk(Y);}function Rj(){for(;null!==Y&&!Qf();)bk(Y);}function bk(a){var b=ck(a.alternate,a,qj);a.memoizedProps=a.pendingProps;null===b?Zj(a):Y=b;pj.current=null;}
            function Zj(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&2048)){c=Gi(c,b,qj);if(null!==c){Y=c;return}c=b;if(24!==c.tag&&23!==c.tag||null===c.memoizedState||0!==(qj&1073741824)||0===(c.mode&4)){for(var d=0,e=c.child;null!==e;)d|=e.lanes|e.childLanes,e=e.sibling;c.childLanes=d;}null!==a&&0===(a.flags&2048)&&(null===a.firstEffect&&(a.firstEffect=b.firstEffect),null!==b.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=b.firstEffect),a.lastEffect=b.lastEffect),1<b.flags&&(null!==
            a.lastEffect?a.lastEffect.nextEffect=b:a.firstEffect=b,a.lastEffect=b));}else {c=Li(b);if(null!==c){c.flags&=2047;Y=c;return}null!==a&&(a.firstEffect=a.lastEffect=null,a.flags|=2048);}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===V&&(V=5);}function Uj(a){var b=eg();gg(99,dk.bind(null,a,b));return null}
            function dk(a,b){do Oj();while(null!==yj);if(0!==(X$1&48))throw Error(y$2(327));var c=a.finishedWork;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(y$2(177));a.callbackNode=null;var d=c.lanes|c.childLanes,e=d,f=a.pendingLanes&~e;a.pendingLanes=e;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=e;a.mutableReadLanes&=e;a.entangledLanes&=e;e=a.entanglements;for(var g=a.eventTimes,h=a.expirationTimes;0<f;){var k=31-Vc(f),l=1<<k;e[k]=0;g[k]=-1;h[k]=-1;f&=~l;}null!==
            Cj&&0===(d&24)&&Cj.has(a)&&Cj.delete(a);a===U$1&&(Y=U$1=null,W$1=0);1<c.flags?null!==c.lastEffect?(c.lastEffect.nextEffect=c,d=c.firstEffect):d=c:d=c.firstEffect;if(null!==d){e=X$1;X$1|=32;pj.current=null;kf=fd;g=Ne();if(Oe(g)){if("selectionStart"in g)h={start:g.selectionStart,end:g.selectionEnd};else a:if(h=(h=g.ownerDocument)&&h.defaultView||window,(l=h.getSelection&&h.getSelection())&&0!==l.rangeCount){h=l.anchorNode;f=l.anchorOffset;k=l.focusNode;l=l.focusOffset;try{h.nodeType,k.nodeType;}catch(va){h=null;
            break a}var n=0,A=-1,p=-1,C=0,x=0,w=g,z=null;b:for(;;){for(var u;;){w!==h||0!==f&&3!==w.nodeType||(A=n+f);w!==k||0!==l&&3!==w.nodeType||(p=n+l);3===w.nodeType&&(n+=w.nodeValue.length);if(null===(u=w.firstChild))break;z=w;w=u;}for(;;){if(w===g)break b;z===h&&++C===f&&(A=n);z===k&&++x===l&&(p=n);if(null!==(u=w.nextSibling))break;w=z;z=w.parentNode;}w=u;}h=-1===A||-1===p?null:{start:A,end:p};}else h=null;h=h||{start:0,end:0};}else h=null;lf={focusedElem:g,selectionRange:h};fd=!1;Ij=null;Jj=!1;Z$1=d;do try{ek();}catch(va){if(null===
            Z$1)throw Error(y$2(330));Wi(Z$1,va);Z$1=Z$1.nextEffect;}while(null!==Z$1);Ij=null;Z$1=d;do try{for(g=a;null!==Z$1;){var t=Z$1.flags;t&16&&pb(Z$1.stateNode,"");if(t&128){var q=Z$1.alternate;if(null!==q){var v=q.ref;null!==v&&("function"===typeof v?v(null):v.current=null);}}switch(t&1038){case 2:fj(Z$1);Z$1.flags&=-3;break;case 6:fj(Z$1);Z$1.flags&=-3;ij(Z$1.alternate,Z$1);break;case 1024:Z$1.flags&=-1025;break;case 1028:Z$1.flags&=-1025;ij(Z$1.alternate,Z$1);break;case 4:ij(Z$1.alternate,Z$1);break;case 8:h=Z$1;cj(g,h);var J=h.alternate;dj(h);null!==
            J&&dj(J);}Z$1=Z$1.nextEffect;}}catch(va){if(null===Z$1)throw Error(y$2(330));Wi(Z$1,va);Z$1=Z$1.nextEffect;}while(null!==Z$1);v=lf;q=Ne();t=v.focusedElem;g=v.selectionRange;if(q!==t&&t&&t.ownerDocument&&Me(t.ownerDocument.documentElement,t)){null!==g&&Oe(t)&&(q=g.start,v=g.end,void 0===v&&(v=q),"selectionStart"in t?(t.selectionStart=q,t.selectionEnd=Math.min(v,t.value.length)):(v=(q=t.ownerDocument||document)&&q.defaultView||window,v.getSelection&&(v=v.getSelection(),h=t.textContent.length,J=Math.min(g.start,h),g=void 0===
            g.end?J:Math.min(g.end,h),!v.extend&&J>g&&(h=g,g=J,J=h),h=Le(t,J),f=Le(t,g),h&&f&&(1!==v.rangeCount||v.anchorNode!==h.node||v.anchorOffset!==h.offset||v.focusNode!==f.node||v.focusOffset!==f.offset)&&(q=q.createRange(),q.setStart(h.node,h.offset),v.removeAllRanges(),J>g?(v.addRange(q),v.extend(f.node,f.offset)):(q.setEnd(f.node,f.offset),v.addRange(q))))));q=[];for(v=t;v=v.parentNode;)1===v.nodeType&&q.push({element:v,left:v.scrollLeft,top:v.scrollTop});"function"===typeof t.focus&&t.focus();for(t=
            0;t<q.length;t++)v=q[t],v.element.scrollLeft=v.left,v.element.scrollTop=v.top;}fd=!!kf;lf=kf=null;a.current=c;Z$1=d;do try{for(t=a;null!==Z$1;){var K=Z$1.flags;K&36&&Yi(t,Z$1.alternate,Z$1);if(K&128){q=void 0;var Q=Z$1.ref;if(null!==Q){var L=Z$1.stateNode;switch(Z$1.tag){case 5:q=L;break;default:q=L;}"function"===typeof Q?Q(q):Q.current=q;}}Z$1=Z$1.nextEffect;}}catch(va){if(null===Z$1)throw Error(y$2(330));Wi(Z$1,va);Z$1=Z$1.nextEffect;}while(null!==Z$1);Z$1=null;$f();X$1=e;}else a.current=c;if(xj)xj=!1,yj=a,zj=b;else for(Z$1=d;null!==Z$1;)b=
            Z$1.nextEffect,Z$1.nextEffect=null,Z$1.flags&8&&(K=Z$1,K.sibling=null,K.stateNode=null),Z$1=b;d=a.pendingLanes;0===d&&(Ti=null);1===d?a===Ej?Dj++:(Dj=0,Ej=a):Dj=0;c=c.stateNode;if(Mf&&"function"===typeof Mf.onCommitFiberRoot)try{Mf.onCommitFiberRoot(Lf,c,void 0,64===(c.current.flags&64));}catch(va){}Mj(a,O$1());if(Qi)throw Qi=!1,a=Ri,Ri=null,a;if(0!==(X$1&8))return null;ig();return null}
            function ek(){for(;null!==Z$1;){var a=Z$1.alternate;Jj||null===Ij||(0!==(Z$1.flags&8)?dc(Z$1,Ij)&&(Jj=!0):13===Z$1.tag&&mj(a,Z$1)&&dc(Z$1,Ij)&&(Jj=!0));var b=Z$1.flags;0!==(b&256)&&Xi(a,Z$1);0===(b&512)||xj||(xj=!0,hg(97,function(){Oj();return null}));Z$1=Z$1.nextEffect;}}function Oj(){if(90!==zj){var a=97<zj?97:zj;zj=90;return gg(a,fk)}return !1}function $i(a,b){Aj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}));}function Zi(a,b){Bj.push(b,a);xj||(xj=!0,hg(97,function(){Oj();return null}));}
            function fk(){if(null===yj)return !1;var a=yj;yj=null;if(0!==(X$1&48))throw Error(y$2(331));var b=X$1;X$1|=32;var c=Bj;Bj=[];for(var d=0;d<c.length;d+=2){var e=c[d],f=c[d+1],g=e.destroy;e.destroy=void 0;if("function"===typeof g)try{g();}catch(k){if(null===f)throw Error(y$2(330));Wi(f,k);}}c=Aj;Aj=[];for(d=0;d<c.length;d+=2){e=c[d];f=c[d+1];try{var h=e.create;e.destroy=h();}catch(k){if(null===f)throw Error(y$2(330));Wi(f,k);}}for(h=a.current.firstEffect;null!==h;)a=h.nextEffect,h.nextEffect=null,h.flags&8&&(h.sibling=
            null,h.stateNode=null),h=a;X$1=b;ig();return !0}function gk(a,b,c){b=Mi(c,b);b=Pi(a,b,1);Ag(a,b);b=Hg();a=Kj(a,1);null!==a&&($c(a,1,b),Mj(a,b));}
            function Wi(a,b){if(3===a.tag)gk(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){gk(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d))){a=Mi(b,a);var e=Si(c,a,1);Ag(c,e);e=Hg();c=Kj(c,1);if(null!==c)$c(c,1,e),Mj(c,e);else if("function"===typeof d.componentDidCatch&&(null===Ti||!Ti.has(d)))try{d.componentDidCatch(b,a);}catch(f){}break}}c=c.return;}}
            function Yj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=Hg();a.pingedLanes|=a.suspendedLanes&c;U$1===a&&(W$1&c)===c&&(4===V||3===V&&(W$1&62914560)===W$1&&500>O$1()-jj?Qj(a,0):uj|=c);Mj(a,b);}function lj(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=a.mode,0===(b&2)?b=1:0===(b&4)?b=99===eg()?1:2:(0===Gj&&(Gj=tj),b=Yc(62914560&~Gj),0===b&&(b=4194304)));c=Hg();a=Kj(a,b);null!==a&&($c(a,b,c),Mj(a,c));}var ck;
            ck=function(a,b,c){var d=b.lanes;if(null!==a)if(a.memoizedProps!==b.pendingProps||N$2.current)ug=!0;else if(0!==(c&d))ug=0!==(a.flags&16384)?!0:!1;else {ug=!1;switch(b.tag){case 3:ri(b);sh$1();break;case 5:gh(b);break;case 1:Ff(b.type)&&Jf(b);break;case 4:eh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;var e=b.type._context;I$1(mg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){if(0!==(c&b.child.childLanes))return ti(a,b,c);I$1(P$1,P$1.current&1);b=hi(a,b,c);return null!==
            b?b.sibling:null}I$1(P$1,P$1.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&64)){if(d)return Ai(a,b,c);b.flags|=64;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);I$1(P$1,P$1.current);if(d)break;else return null;case 23:case 24:return b.lanes=0,mi(a,b,c)}return hi(a,b,c)}else ug=!1;b.lanes=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);a=b.pendingProps;e=Ef(b,M$1.current);tg(b,c);e=Ch(null,b,d,a,e,c);b.flags|=1;if("object"===
            typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(Ff(d)){var f=!0;Jf(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;xg(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Gg(b,d,g,a);e.updater=Kg;b.stateNode=e;e._reactInternals=b;Og(b,d,a,c);b=qi(null,b,d,!0,f,c);}else b.tag=0,fi$1(null,b,e,c),b=b.child;return b;case 16:e=b.elementType;a:{null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);
            a=b.pendingProps;f=e._init;e=f(e._payload);b.type=e;f=b.tag=hk(e);a=lg(e,a);switch(f){case 0:b=li(null,b,e,a,c);break a;case 1:b=pi(null,b,e,a,c);break a;case 11:b=gi(null,b,e,a,c);break a;case 14:b=ii(null,b,e,lg(e.type,a),d,c);break a}throw Error(y$2(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),li(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),pi(a,b,d,e,c);case 3:ri(b);d=b.updateQueue;if(null===a||null===d)throw Error(y$2(282));
            d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;yg(a,b);Cg(b,d,null,c);d=b.memoizedState.element;if(d===e)sh$1(),b=hi(a,b,c);else {e=b.stateNode;if(f=e.hydrate)kh=rf(b.stateNode.containerInfo.firstChild),jh=b,f=lh=!0;if(f){a=e.mutableSourceEagerHydrationData;if(null!=a)for(e=0;e<a.length;e+=2)f=a[e],f._workInProgressVersionPrimary=a[e+1],th.push(f);c=Zg(b,null,d,c);for(b.child=c;c;)c.flags=c.flags&-3|1024,c=c.sibling;}else fi$1(a,b,d,c),sh$1();b=b.child;}return b;case 5:return gh(b),null===a&&
            ph(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,nf(d,e)?g=null:null!==f&&nf(d,f)&&(b.flags|=16),oi(a,b),fi$1(a,b,g,c),b.child;case 6:return null===a&&ph(b),null;case 13:return ti(a,b,c);case 4:return eh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Yg(b,null,d,c):fi$1(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),gi(a,b,d,e,c);case 7:return fi$1(a,b,b.pendingProps,c),b.child;case 8:return fi$1(a,b,b.pendingProps.children,
            c),b.child;case 12:return fi$1(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I$1(mg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=He(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!N$2.current){b=hi(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==k){g=h.child;for(var l=
            k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=zg(-1,c&-c),l.tag=2,Ag(h,l));h.lanes|=c;l=h.alternate;null!==l&&(l.lanes|=c);sg(h.return,c);k.lanes|=c;break}l=l.next;}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return;}h=g;}fi$1(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,tg(b,c),e=vg(e,
            f.unstable_observedBits),d=d(e),b.flags|=1,fi$1(a,b,d,c),b.child;case 14:return e=b.type,f=lg(e,b.pendingProps),f=lg(e.type,f),ii(a,b,e,f,d,c);case 15:return ki(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:lg(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2),b.tag=1,Ff(d)?(a=!0,Jf(b)):a=!1,tg(b,c),Mg(b,d,e),Og(b,d,e,c),qi(null,b,d,!0,a,c);case 19:return Ai(a,b,c);case 23:return mi(a,b,c);case 24:return mi(a,b,c)}throw Error(y$2(156,b.tag));
            };function ik(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.flags=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childLanes=this.lanes=0;this.alternate=null;}function nh(a,b,c,d){return new ik(a,b,c,d)}function ji(a){a=a.prototype;return !(!a||!a.isReactComponent)}
            function hk(a){if("function"===typeof a)return ji(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Aa)return 11;if(a===Da)return 14}return 2}
            function Tg(a,b){var c=a.alternate;null===c?(c=nh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
            c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
            function Vg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)ji(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ua:return Xg(c.children,e,f,b);case Ha:g=8;e|=16;break;case wa:g=8;e|=1;break;case xa:return a=nh(12,c,b,e|8),a.elementType=xa,a.type=xa,a.lanes=f,a;case Ba:return a=nh(13,c,b,e),a.type=Ba,a.elementType=Ba,a.lanes=f,a;case Ca:return a=nh(19,c,b,e),a.elementType=Ca,a.lanes=f,a;case Ia:return vi$1(c,e,f,b);case Ja:return a=nh(24,c,b,e),a.elementType=Ja,a.lanes=f,a;default:if("object"===
            typeof a&&null!==a)switch(a.$$typeof){case ya:g=10;break a;case za:g=9;break a;case Aa:g=11;break a;case Da:g=14;break a;case Ea:g=16;d=null;break a;case Fa:g=22;break a}throw Error(y$2(130,null==a?a:typeof a,""));}b=nh(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Xg(a,b,c,d){a=nh(7,a,d,b);a.lanes=c;return a}function vi$1(a,b,c,d){a=nh(23,a,d,b);a.elementType=Ia;a.lanes=c;return a}function Ug(a,b,c){a=nh(6,a,null,b);a.lanes=c;return a}
            function Wg(a,b,c){b=nh(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
            function jk(a,b,c){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=0;this.eventTimes=Zc(0);this.expirationTimes=Zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Zc(0);this.mutableSourceEagerHydrationData=null;}
            function kk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:ta,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
            function lk(a,b,c,d){var e=b.current,f=Hg(),g=Ig(e);a:if(c){c=c._reactInternals;b:{if(Zb(c)!==c||1!==c.tag)throw Error(y$2(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(Ff(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return;}while(null!==h);throw Error(y$2(171));}if(1===c.tag){var k=c.type;if(Ff(k)){c=If(c,k,h);break a}}c=h;}else c=Cf;null===b.context?b.context=c:b.pendingContext=c;b=zg(f,g);b.payload={element:a};d=void 0===d?null:d;null!==
            d&&(b.callback=d);Ag(e,b);Jg(e,g,f);return g}function mk(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function nk(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function ok(a,b){nk(a,b);(a=a.alternate)&&nk(a,b);}function pk(){return null}
            function qk(a,b,c){var d=null!=c&&null!=c.hydrationOptions&&c.hydrationOptions.mutableSources||null;c=new jk(a,b,null!=c&&!0===c.hydrate);b=nh(3,null,null,2===b?7:1===b?3:0);c.current=b;b.stateNode=c;xg(b);a[ff]=c.current;cf(8===a.nodeType?a.parentNode:a);if(d)for(a=0;a<d.length;a++){b=d[a];var e=b._getVersion;e=e(b._source);null==c.mutableSourceEagerHydrationData?c.mutableSourceEagerHydrationData=[b,e]:c.mutableSourceEagerHydrationData.push(b,e);}this._internalRoot=c;}
            qk.prototype.render=function(a){lk(a,this._internalRoot,null,null);};qk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;lk(null,a,null,function(){b[ff]=null;});};function rk(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}
            function sk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new qk(a,0,b?{hydrate:!0}:void 0)}
            function tk(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=mk(g);h.call(a);};}lk(b,g,a,e);}else {f=c._reactRootContainer=sk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=mk(g);k.call(a);};}Xj(function(){lk(b,g,a,e);});}return mk(g)}ec$1=function(a){if(13===a.tag){var b=Hg();Jg(a,4,b);ok(a,4);}};fc=function(a){if(13===a.tag){var b=Hg();Jg(a,67108864,b);ok(a,67108864);}};
            gc=function(a){if(13===a.tag){var b=Hg(),c=Ig(a);Jg(a,c,b);ok(a,c);}};hc=function(a,b){return b()};
            yb=function(a,b,c){switch(b){case "input":ab(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(y$2(90));Wa(d);ab(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Wj;
            Hb=function(a,b,c,d,e){var f=X$1;X$1|=4;try{return gg(98,a.bind(null,b,c,d,e))}finally{X$1=f,0===X$1&&(wj(),ig());}};Ib=function(){0===(X$1&49)&&(Vj(),Oj());};Jb=function(a,b){var c=X$1;X$1|=2;try{return a(b)}finally{X$1=c,0===X$1&&(wj(),ig());}};function uk$1(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!rk(b))throw Error(y$2(200));return kk(a,b,null,c)}var vk={Events:[Cb,ue,Db,Eb,Fb,Oj,{current:!1}]},wk={findFiberByHostInstance:wc,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"};
            var xk={bundleType:wk.bundleType,version:wk.version,rendererPackageName:wk.rendererPackageName,rendererConfig:wk.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ra.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=cc(a);return null===a?null:a.stateNode},findFiberByHostInstance:wk.findFiberByHostInstance||
            pk,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var yk=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!yk.isDisabled&&yk.supportsFiber)try{Lf=yk.inject(xk),Mf=yk;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vk;reactDom_production_min.createPortal=uk$1;
            reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(y$2(188));throw Error(y$2(268,Object.keys(a)));}a=cc(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a,b){var c=X$1;if(0!==(c&48))return a(b);X$1|=1;try{if(a)return gg(99,a.bind(null,b))}finally{X$1=c,ig();}};reactDom_production_min.hydrate=function(a,b,c){if(!rk(b))throw Error(y$2(200));return tk(null,a,b,!0,c)};
            reactDom_production_min.render=function(a,b,c){if(!rk(b))throw Error(y$2(200));return tk(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!rk(a))throw Error(y$2(40));return a._reactRootContainer?(Xj(function(){tk(null,null,a,!1,function(){a._reactRootContainer=null;a[ff]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Wj;reactDom_production_min.unstable_createPortal=function(a,b){return uk$1(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
            reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!rk(c))throw Error(y$2(200));if(null==a||void 0===a._reactInternals)throw Error(y$2(38));return tk(a,b,c,!1,d)};reactDom_production_min.version="17.0.2";

            var schedulerTracing_production_min = {};

            /** @license React v0.20.2
             * scheduler-tracing.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var b$2=0;schedulerTracing_production_min.__interactionsRef=null;schedulerTracing_production_min.__subscriberRef=null;schedulerTracing_production_min.unstable_clear=function(a){return a()};schedulerTracing_production_min.unstable_getCurrent=function(){return null};schedulerTracing_production_min.unstable_getThreadID=function(){return ++b$2};schedulerTracing_production_min.unstable_subscribe=function(){};schedulerTracing_production_min.unstable_trace=function(a,d,c){return c()};schedulerTracing_production_min.unstable_unsubscribe=function(){};schedulerTracing_production_min.unstable_wrap=function(a){return a};

            function checkDCE() {
              /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
              if (
                typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
                typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
              ) {
                return;
              }
              try {
                // Verify that the code above has been dead code eliminated (DCE'd).
                __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
              } catch (err) {
                // DevTools shouldn't crash React, no matter what.
                // We should still report in case we break this code.
                console.error(err);
              }
            }

            {
              // DCE check should happen before ReactDOM bundle executes so that
              // DevTools can report bad minification during injection.
              checkDCE();
              reactDom.exports = reactDom_production_min;
            }

            var ReactDOM = reactDom.exports;

            // with standard React renderers (ReactDOM, React Native)

            setBatch(reactDom.exports.unstable_batchedUpdates);

            var bn = {exports: {}};

            (function (module) {
            (function (module, exports) {

              // Utils
              function assert (val, msg) {
                if (!val) throw new Error(msg || 'Assertion failed');
              }

              // Could use `inherits` module, but don't want to move from single file
              // architecture yet.
              function inherits (ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function () {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
              }

              // BN

              function BN (number, base, endian) {
                if (BN.isBN(number)) {
                  return number;
                }

                this.negative = 0;
                this.words = null;
                this.length = 0;

                // Reduction context
                this.red = null;

                if (number !== null) {
                  if (base === 'le' || base === 'be') {
                    endian = base;
                    base = 10;
                  }

                  this._init(number || 0, base || 10, endian || 'be');
                }
              }
              if (typeof module === 'object') {
                module.exports = BN;
              } else {
                exports.BN = BN;
              }

              BN.BN = BN;
              BN.wordSize = 26;

              var Buffer;
              try {
                if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
                  Buffer = window.Buffer;
                } else {
                  Buffer = require('buffer').Buffer;
                }
              } catch (e) {
              }

              BN.isBN = function isBN (num) {
                if (num instanceof BN) {
                  return true;
                }

                return num !== null && typeof num === 'object' &&
                  num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
              };

              BN.max = function max (left, right) {
                if (left.cmp(right) > 0) return left;
                return right;
              };

              BN.min = function min (left, right) {
                if (left.cmp(right) < 0) return left;
                return right;
              };

              BN.prototype._init = function init (number, base, endian) {
                if (typeof number === 'number') {
                  return this._initNumber(number, base, endian);
                }

                if (typeof number === 'object') {
                  return this._initArray(number, base, endian);
                }

                if (base === 'hex') {
                  base = 16;
                }
                assert(base === (base | 0) && base >= 2 && base <= 36);

                number = number.toString().replace(/\s+/g, '');
                var start = 0;
                if (number[0] === '-') {
                  start++;
                  this.negative = 1;
                }

                if (start < number.length) {
                  if (base === 16) {
                    this._parseHex(number, start, endian);
                  } else {
                    this._parseBase(number, base, start);
                    if (endian === 'le') {
                      this._initArray(this.toArray(), base, endian);
                    }
                  }
                }
              };

              BN.prototype._initNumber = function _initNumber (number, base, endian) {
                if (number < 0) {
                  this.negative = 1;
                  number = -number;
                }
                if (number < 0x4000000) {
                  this.words = [ number & 0x3ffffff ];
                  this.length = 1;
                } else if (number < 0x10000000000000) {
                  this.words = [
                    number & 0x3ffffff,
                    (number / 0x4000000) & 0x3ffffff
                  ];
                  this.length = 2;
                } else {
                  assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                  this.words = [
                    number & 0x3ffffff,
                    (number / 0x4000000) & 0x3ffffff,
                    1
                  ];
                  this.length = 3;
                }

                if (endian !== 'le') return;

                // Reverse the bytes
                this._initArray(this.toArray(), base, endian);
              };

              BN.prototype._initArray = function _initArray (number, base, endian) {
                // Perhaps a Uint8Array
                assert(typeof number.length === 'number');
                if (number.length <= 0) {
                  this.words = [ 0 ];
                  this.length = 1;
                  return this;
                }

                this.length = Math.ceil(number.length / 3);
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                  this.words[i] = 0;
                }

                var j, w;
                var off = 0;
                if (endian === 'be') {
                  for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
                    w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                    off += 24;
                    if (off >= 26) {
                      off -= 26;
                      j++;
                    }
                  }
                } else if (endian === 'le') {
                  for (i = 0, j = 0; i < number.length; i += 3) {
                    w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
                    this.words[j] |= (w << off) & 0x3ffffff;
                    this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
                    off += 24;
                    if (off >= 26) {
                      off -= 26;
                      j++;
                    }
                  }
                }
                return this.strip();
              };

              function parseHex4Bits (string, index) {
                var c = string.charCodeAt(index);
                // 'A' - 'F'
                if (c >= 65 && c <= 70) {
                  return c - 55;
                // 'a' - 'f'
                } else if (c >= 97 && c <= 102) {
                  return c - 87;
                // '0' - '9'
                } else {
                  return (c - 48) & 0xf;
                }
              }

              function parseHexByte (string, lowerBound, index) {
                var r = parseHex4Bits(string, index);
                if (index - 1 >= lowerBound) {
                  r |= parseHex4Bits(string, index - 1) << 4;
                }
                return r;
              }

              BN.prototype._parseHex = function _parseHex (number, start, endian) {
                // Create possibly bigger array to ensure that it fits the number
                this.length = Math.ceil((number.length - start) / 6);
                this.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                  this.words[i] = 0;
                }

                // 24-bits chunks
                var off = 0;
                var j = 0;

                var w;
                if (endian === 'be') {
                  for (i = number.length - 1; i >= start; i -= 2) {
                    w = parseHexByte(number, start, i) << off;
                    this.words[j] |= w & 0x3ffffff;
                    if (off >= 18) {
                      off -= 18;
                      j += 1;
                      this.words[j] |= w >>> 26;
                    } else {
                      off += 8;
                    }
                  }
                } else {
                  var parseLength = number.length - start;
                  for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
                    w = parseHexByte(number, start, i) << off;
                    this.words[j] |= w & 0x3ffffff;
                    if (off >= 18) {
                      off -= 18;
                      j += 1;
                      this.words[j] |= w >>> 26;
                    } else {
                      off += 8;
                    }
                  }
                }

                this.strip();
              };

              function parseBase (str, start, end, mul) {
                var r = 0;
                var len = Math.min(str.length, end);
                for (var i = start; i < len; i++) {
                  var c = str.charCodeAt(i) - 48;

                  r *= mul;

                  // 'a'
                  if (c >= 49) {
                    r += c - 49 + 0xa;

                  // 'A'
                  } else if (c >= 17) {
                    r += c - 17 + 0xa;

                  // '0' - '9'
                  } else {
                    r += c;
                  }
                }
                return r;
              }

              BN.prototype._parseBase = function _parseBase (number, base, start) {
                // Initialize as zero
                this.words = [ 0 ];
                this.length = 1;

                // Find length of limb in base
                for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
                  limbLen++;
                }
                limbLen--;
                limbPow = (limbPow / base) | 0;

                var total = number.length - start;
                var mod = total % limbLen;
                var end = Math.min(total, total - mod) + start;

                var word = 0;
                for (var i = start; i < end; i += limbLen) {
                  word = parseBase(number, i, i + limbLen, base);

                  this.imuln(limbPow);
                  if (this.words[0] + word < 0x4000000) {
                    this.words[0] += word;
                  } else {
                    this._iaddn(word);
                  }
                }

                if (mod !== 0) {
                  var pow = 1;
                  word = parseBase(number, i, number.length, base);

                  for (i = 0; i < mod; i++) {
                    pow *= base;
                  }

                  this.imuln(pow);
                  if (this.words[0] + word < 0x4000000) {
                    this.words[0] += word;
                  } else {
                    this._iaddn(word);
                  }
                }

                this.strip();
              };

              BN.prototype.copy = function copy (dest) {
                dest.words = new Array(this.length);
                for (var i = 0; i < this.length; i++) {
                  dest.words[i] = this.words[i];
                }
                dest.length = this.length;
                dest.negative = this.negative;
                dest.red = this.red;
              };

              BN.prototype.clone = function clone () {
                var r = new BN(null);
                this.copy(r);
                return r;
              };

              BN.prototype._expand = function _expand (size) {
                while (this.length < size) {
                  this.words[this.length++] = 0;
                }
                return this;
              };

              // Remove leading `0` from `this`
              BN.prototype.strip = function strip () {
                while (this.length > 1 && this.words[this.length - 1] === 0) {
                  this.length--;
                }
                return this._normSign();
              };

              BN.prototype._normSign = function _normSign () {
                // -0 = 0
                if (this.length === 1 && this.words[0] === 0) {
                  this.negative = 0;
                }
                return this;
              };

              BN.prototype.inspect = function inspect () {
                return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
              };

              /*

              var zeros = [];
              var groupSizes = [];
              var groupBases = [];

              var s = '';
              var i = -1;
              while (++i < BN.wordSize) {
                zeros[i] = s;
                s += '0';
              }
              groupSizes[0] = 0;
              groupSizes[1] = 0;
              groupBases[0] = 0;
              groupBases[1] = 0;
              var base = 2 - 1;
              while (++base < 36 + 1) {
                var groupSize = 0;
                var groupBase = 1;
                while (groupBase < (1 << BN.wordSize) / base) {
                  groupBase *= base;
                  groupSize += 1;
                }
                groupSizes[base] = groupSize;
                groupBases[base] = groupBase;
              }

              */

              var zeros = [
                '',
                '0',
                '00',
                '000',
                '0000',
                '00000',
                '000000',
                '0000000',
                '00000000',
                '000000000',
                '0000000000',
                '00000000000',
                '000000000000',
                '0000000000000',
                '00000000000000',
                '000000000000000',
                '0000000000000000',
                '00000000000000000',
                '000000000000000000',
                '0000000000000000000',
                '00000000000000000000',
                '000000000000000000000',
                '0000000000000000000000',
                '00000000000000000000000',
                '000000000000000000000000',
                '0000000000000000000000000'
              ];

              var groupSizes = [
                0, 0,
                25, 16, 12, 11, 10, 9, 8,
                8, 7, 7, 7, 7, 6, 6,
                6, 6, 6, 6, 6, 5, 5,
                5, 5, 5, 5, 5, 5, 5,
                5, 5, 5, 5, 5, 5, 5
              ];

              var groupBases = [
                0, 0,
                33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
                43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
                16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
                6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
                24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
              ];

              BN.prototype.toString = function toString (base, padding) {
                base = base || 10;
                padding = padding | 0 || 1;

                var out;
                if (base === 16 || base === 'hex') {
                  out = '';
                  var off = 0;
                  var carry = 0;
                  for (var i = 0; i < this.length; i++) {
                    var w = this.words[i];
                    var word = (((w << off) | carry) & 0xffffff).toString(16);
                    carry = (w >>> (24 - off)) & 0xffffff;
                    if (carry !== 0 || i !== this.length - 1) {
                      out = zeros[6 - word.length] + word + out;
                    } else {
                      out = word + out;
                    }
                    off += 2;
                    if (off >= 26) {
                      off -= 26;
                      i--;
                    }
                  }
                  if (carry !== 0) {
                    out = carry.toString(16) + out;
                  }
                  while (out.length % padding !== 0) {
                    out = '0' + out;
                  }
                  if (this.negative !== 0) {
                    out = '-' + out;
                  }
                  return out;
                }

                if (base === (base | 0) && base >= 2 && base <= 36) {
                  // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                  var groupSize = groupSizes[base];
                  // var groupBase = Math.pow(base, groupSize);
                  var groupBase = groupBases[base];
                  out = '';
                  var c = this.clone();
                  c.negative = 0;
                  while (!c.isZero()) {
                    var r = c.modn(groupBase).toString(base);
                    c = c.idivn(groupBase);

                    if (!c.isZero()) {
                      out = zeros[groupSize - r.length] + r + out;
                    } else {
                      out = r + out;
                    }
                  }
                  if (this.isZero()) {
                    out = '0' + out;
                  }
                  while (out.length % padding !== 0) {
                    out = '0' + out;
                  }
                  if (this.negative !== 0) {
                    out = '-' + out;
                  }
                  return out;
                }

                assert(false, 'Base should be between 2 and 36');
              };

              BN.prototype.toNumber = function toNumber () {
                var ret = this.words[0];
                if (this.length === 2) {
                  ret += this.words[1] * 0x4000000;
                } else if (this.length === 3 && this.words[2] === 0x01) {
                  // NOTE: at this stage it is known that the top bit is set
                  ret += 0x10000000000000 + (this.words[1] * 0x4000000);
                } else if (this.length > 2) {
                  assert(false, 'Number can only safely store up to 53 bits');
                }
                return (this.negative !== 0) ? -ret : ret;
              };

              BN.prototype.toJSON = function toJSON () {
                return this.toString(16);
              };

              BN.prototype.toBuffer = function toBuffer (endian, length) {
                assert(typeof Buffer !== 'undefined');
                return this.toArrayLike(Buffer, endian, length);
              };

              BN.prototype.toArray = function toArray (endian, length) {
                return this.toArrayLike(Array, endian, length);
              };

              BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
                var byteLength = this.byteLength();
                var reqLength = length || Math.max(1, byteLength);
                assert(byteLength <= reqLength, 'byte array longer than desired length');
                assert(reqLength > 0, 'Requested array length <= 0');

                this.strip();
                var littleEndian = endian === 'le';
                var res = new ArrayType(reqLength);

                var b, i;
                var q = this.clone();
                if (!littleEndian) {
                  // Assume big-endian
                  for (i = 0; i < reqLength - byteLength; i++) {
                    res[i] = 0;
                  }

                  for (i = 0; !q.isZero(); i++) {
                    b = q.andln(0xff);
                    q.iushrn(8);

                    res[reqLength - i - 1] = b;
                  }
                } else {
                  for (i = 0; !q.isZero(); i++) {
                    b = q.andln(0xff);
                    q.iushrn(8);

                    res[i] = b;
                  }

                  for (; i < reqLength; i++) {
                    res[i] = 0;
                  }
                }

                return res;
              };

              if (Math.clz32) {
                BN.prototype._countBits = function _countBits (w) {
                  return 32 - Math.clz32(w);
                };
              } else {
                BN.prototype._countBits = function _countBits (w) {
                  var t = w;
                  var r = 0;
                  if (t >= 0x1000) {
                    r += 13;
                    t >>>= 13;
                  }
                  if (t >= 0x40) {
                    r += 7;
                    t >>>= 7;
                  }
                  if (t >= 0x8) {
                    r += 4;
                    t >>>= 4;
                  }
                  if (t >= 0x02) {
                    r += 2;
                    t >>>= 2;
                  }
                  return r + t;
                };
              }

              BN.prototype._zeroBits = function _zeroBits (w) {
                // Short-cut
                if (w === 0) return 26;

                var t = w;
                var r = 0;
                if ((t & 0x1fff) === 0) {
                  r += 13;
                  t >>>= 13;
                }
                if ((t & 0x7f) === 0) {
                  r += 7;
                  t >>>= 7;
                }
                if ((t & 0xf) === 0) {
                  r += 4;
                  t >>>= 4;
                }
                if ((t & 0x3) === 0) {
                  r += 2;
                  t >>>= 2;
                }
                if ((t & 0x1) === 0) {
                  r++;
                }
                return r;
              };

              // Return number of used bits in a BN
              BN.prototype.bitLength = function bitLength () {
                var w = this.words[this.length - 1];
                var hi = this._countBits(w);
                return (this.length - 1) * 26 + hi;
              };

              function toBitArray (num) {
                var w = new Array(num.bitLength());

                for (var bit = 0; bit < w.length; bit++) {
                  var off = (bit / 26) | 0;
                  var wbit = bit % 26;

                  w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
                }

                return w;
              }

              // Number of trailing zero bits
              BN.prototype.zeroBits = function zeroBits () {
                if (this.isZero()) return 0;

                var r = 0;
                for (var i = 0; i < this.length; i++) {
                  var b = this._zeroBits(this.words[i]);
                  r += b;
                  if (b !== 26) break;
                }
                return r;
              };

              BN.prototype.byteLength = function byteLength () {
                return Math.ceil(this.bitLength() / 8);
              };

              BN.prototype.toTwos = function toTwos (width) {
                if (this.negative !== 0) {
                  return this.abs().inotn(width).iaddn(1);
                }
                return this.clone();
              };

              BN.prototype.fromTwos = function fromTwos (width) {
                if (this.testn(width - 1)) {
                  return this.notn(width).iaddn(1).ineg();
                }
                return this.clone();
              };

              BN.prototype.isNeg = function isNeg () {
                return this.negative !== 0;
              };

              // Return negative clone of `this`
              BN.prototype.neg = function neg () {
                return this.clone().ineg();
              };

              BN.prototype.ineg = function ineg () {
                if (!this.isZero()) {
                  this.negative ^= 1;
                }

                return this;
              };

              // Or `num` with `this` in-place
              BN.prototype.iuor = function iuor (num) {
                while (this.length < num.length) {
                  this.words[this.length++] = 0;
                }

                for (var i = 0; i < num.length; i++) {
                  this.words[i] = this.words[i] | num.words[i];
                }

                return this.strip();
              };

              BN.prototype.ior = function ior (num) {
                assert((this.negative | num.negative) === 0);
                return this.iuor(num);
              };

              // Or `num` with `this`
              BN.prototype.or = function or (num) {
                if (this.length > num.length) return this.clone().ior(num);
                return num.clone().ior(this);
              };

              BN.prototype.uor = function uor (num) {
                if (this.length > num.length) return this.clone().iuor(num);
                return num.clone().iuor(this);
              };

              // And `num` with `this` in-place
              BN.prototype.iuand = function iuand (num) {
                // b = min-length(num, this)
                var b;
                if (this.length > num.length) {
                  b = num;
                } else {
                  b = this;
                }

                for (var i = 0; i < b.length; i++) {
                  this.words[i] = this.words[i] & num.words[i];
                }

                this.length = b.length;

                return this.strip();
              };

              BN.prototype.iand = function iand (num) {
                assert((this.negative | num.negative) === 0);
                return this.iuand(num);
              };

              // And `num` with `this`
              BN.prototype.and = function and (num) {
                if (this.length > num.length) return this.clone().iand(num);
                return num.clone().iand(this);
              };

              BN.prototype.uand = function uand (num) {
                if (this.length > num.length) return this.clone().iuand(num);
                return num.clone().iuand(this);
              };

              // Xor `num` with `this` in-place
              BN.prototype.iuxor = function iuxor (num) {
                // a.length > b.length
                var a;
                var b;
                if (this.length > num.length) {
                  a = this;
                  b = num;
                } else {
                  a = num;
                  b = this;
                }

                for (var i = 0; i < b.length; i++) {
                  this.words[i] = a.words[i] ^ b.words[i];
                }

                if (this !== a) {
                  for (; i < a.length; i++) {
                    this.words[i] = a.words[i];
                  }
                }

                this.length = a.length;

                return this.strip();
              };

              BN.prototype.ixor = function ixor (num) {
                assert((this.negative | num.negative) === 0);
                return this.iuxor(num);
              };

              // Xor `num` with `this`
              BN.prototype.xor = function xor (num) {
                if (this.length > num.length) return this.clone().ixor(num);
                return num.clone().ixor(this);
              };

              BN.prototype.uxor = function uxor (num) {
                if (this.length > num.length) return this.clone().iuxor(num);
                return num.clone().iuxor(this);
              };

              // Not ``this`` with ``width`` bitwidth
              BN.prototype.inotn = function inotn (width) {
                assert(typeof width === 'number' && width >= 0);

                var bytesNeeded = Math.ceil(width / 26) | 0;
                var bitsLeft = width % 26;

                // Extend the buffer with leading zeroes
                this._expand(bytesNeeded);

                if (bitsLeft > 0) {
                  bytesNeeded--;
                }

                // Handle complete words
                for (var i = 0; i < bytesNeeded; i++) {
                  this.words[i] = ~this.words[i] & 0x3ffffff;
                }

                // Handle the residue
                if (bitsLeft > 0) {
                  this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
                }

                // And remove leading zeroes
                return this.strip();
              };

              BN.prototype.notn = function notn (width) {
                return this.clone().inotn(width);
              };

              // Set `bit` of `this`
              BN.prototype.setn = function setn (bit, val) {
                assert(typeof bit === 'number' && bit >= 0);

                var off = (bit / 26) | 0;
                var wbit = bit % 26;

                this._expand(off + 1);

                if (val) {
                  this.words[off] = this.words[off] | (1 << wbit);
                } else {
                  this.words[off] = this.words[off] & ~(1 << wbit);
                }

                return this.strip();
              };

              // Add `num` to `this` in-place
              BN.prototype.iadd = function iadd (num) {
                var r;

                // negative + positive
                if (this.negative !== 0 && num.negative === 0) {
                  this.negative = 0;
                  r = this.isub(num);
                  this.negative ^= 1;
                  return this._normSign();

                // positive + negative
                } else if (this.negative === 0 && num.negative !== 0) {
                  num.negative = 0;
                  r = this.isub(num);
                  num.negative = 1;
                  return r._normSign();
                }

                // a.length > b.length
                var a, b;
                if (this.length > num.length) {
                  a = this;
                  b = num;
                } else {
                  a = num;
                  b = this;
                }

                var carry = 0;
                for (var i = 0; i < b.length; i++) {
                  r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                  this.words[i] = r & 0x3ffffff;
                  carry = r >>> 26;
                }
                for (; carry !== 0 && i < a.length; i++) {
                  r = (a.words[i] | 0) + carry;
                  this.words[i] = r & 0x3ffffff;
                  carry = r >>> 26;
                }

                this.length = a.length;
                if (carry !== 0) {
                  this.words[this.length] = carry;
                  this.length++;
                // Copy the rest of the words
                } else if (a !== this) {
                  for (; i < a.length; i++) {
                    this.words[i] = a.words[i];
                  }
                }

                return this;
              };

              // Add `num` to `this`
              BN.prototype.add = function add (num) {
                var res;
                if (num.negative !== 0 && this.negative === 0) {
                  num.negative = 0;
                  res = this.sub(num);
                  num.negative ^= 1;
                  return res;
                } else if (num.negative === 0 && this.negative !== 0) {
                  this.negative = 0;
                  res = num.sub(this);
                  this.negative = 1;
                  return res;
                }

                if (this.length > num.length) return this.clone().iadd(num);

                return num.clone().iadd(this);
              };

              // Subtract `num` from `this` in-place
              BN.prototype.isub = function isub (num) {
                // this - (-num) = this + num
                if (num.negative !== 0) {
                  num.negative = 0;
                  var r = this.iadd(num);
                  num.negative = 1;
                  return r._normSign();

                // -this - num = -(this + num)
                } else if (this.negative !== 0) {
                  this.negative = 0;
                  this.iadd(num);
                  this.negative = 1;
                  return this._normSign();
                }

                // At this point both numbers are positive
                var cmp = this.cmp(num);

                // Optimization - zeroify
                if (cmp === 0) {
                  this.negative = 0;
                  this.length = 1;
                  this.words[0] = 0;
                  return this;
                }

                // a > b
                var a, b;
                if (cmp > 0) {
                  a = this;
                  b = num;
                } else {
                  a = num;
                  b = this;
                }

                var carry = 0;
                for (var i = 0; i < b.length; i++) {
                  r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                  carry = r >> 26;
                  this.words[i] = r & 0x3ffffff;
                }
                for (; carry !== 0 && i < a.length; i++) {
                  r = (a.words[i] | 0) + carry;
                  carry = r >> 26;
                  this.words[i] = r & 0x3ffffff;
                }

                // Copy rest of the words
                if (carry === 0 && i < a.length && a !== this) {
                  for (; i < a.length; i++) {
                    this.words[i] = a.words[i];
                  }
                }

                this.length = Math.max(this.length, i);

                if (a !== this) {
                  this.negative = 1;
                }

                return this.strip();
              };

              // Subtract `num` from `this`
              BN.prototype.sub = function sub (num) {
                return this.clone().isub(num);
              };

              function smallMulTo (self, num, out) {
                out.negative = num.negative ^ self.negative;
                var len = (self.length + num.length) | 0;
                out.length = len;
                len = (len - 1) | 0;

                // Peel one iteration (compiler can't do it, because of code complexity)
                var a = self.words[0] | 0;
                var b = num.words[0] | 0;
                var r = a * b;

                var lo = r & 0x3ffffff;
                var carry = (r / 0x4000000) | 0;
                out.words[0] = lo;

                for (var k = 1; k < len; k++) {
                  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                  // note that ncarry could be >= 0x3ffffff
                  var ncarry = carry >>> 26;
                  var rword = carry & 0x3ffffff;
                  var maxJ = Math.min(k, num.length - 1);
                  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                    var i = (k - j) | 0;
                    a = self.words[i] | 0;
                    b = num.words[j] | 0;
                    r = a * b + rword;
                    ncarry += (r / 0x4000000) | 0;
                    rword = r & 0x3ffffff;
                  }
                  out.words[k] = rword | 0;
                  carry = ncarry | 0;
                }
                if (carry !== 0) {
                  out.words[k] = carry | 0;
                } else {
                  out.length--;
                }

                return out.strip();
              }

              // TODO(indutny): it may be reasonable to omit it for users who don't need
              // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
              // multiplication (like elliptic secp256k1).
              var comb10MulTo = function comb10MulTo (self, num, out) {
                var a = self.words;
                var b = num.words;
                var o = out.words;
                var c = 0;
                var lo;
                var mid;
                var hi;
                var a0 = a[0] | 0;
                var al0 = a0 & 0x1fff;
                var ah0 = a0 >>> 13;
                var a1 = a[1] | 0;
                var al1 = a1 & 0x1fff;
                var ah1 = a1 >>> 13;
                var a2 = a[2] | 0;
                var al2 = a2 & 0x1fff;
                var ah2 = a2 >>> 13;
                var a3 = a[3] | 0;
                var al3 = a3 & 0x1fff;
                var ah3 = a3 >>> 13;
                var a4 = a[4] | 0;
                var al4 = a4 & 0x1fff;
                var ah4 = a4 >>> 13;
                var a5 = a[5] | 0;
                var al5 = a5 & 0x1fff;
                var ah5 = a5 >>> 13;
                var a6 = a[6] | 0;
                var al6 = a6 & 0x1fff;
                var ah6 = a6 >>> 13;
                var a7 = a[7] | 0;
                var al7 = a7 & 0x1fff;
                var ah7 = a7 >>> 13;
                var a8 = a[8] | 0;
                var al8 = a8 & 0x1fff;
                var ah8 = a8 >>> 13;
                var a9 = a[9] | 0;
                var al9 = a9 & 0x1fff;
                var ah9 = a9 >>> 13;
                var b0 = b[0] | 0;
                var bl0 = b0 & 0x1fff;
                var bh0 = b0 >>> 13;
                var b1 = b[1] | 0;
                var bl1 = b1 & 0x1fff;
                var bh1 = b1 >>> 13;
                var b2 = b[2] | 0;
                var bl2 = b2 & 0x1fff;
                var bh2 = b2 >>> 13;
                var b3 = b[3] | 0;
                var bl3 = b3 & 0x1fff;
                var bh3 = b3 >>> 13;
                var b4 = b[4] | 0;
                var bl4 = b4 & 0x1fff;
                var bh4 = b4 >>> 13;
                var b5 = b[5] | 0;
                var bl5 = b5 & 0x1fff;
                var bh5 = b5 >>> 13;
                var b6 = b[6] | 0;
                var bl6 = b6 & 0x1fff;
                var bh6 = b6 >>> 13;
                var b7 = b[7] | 0;
                var bl7 = b7 & 0x1fff;
                var bh7 = b7 >>> 13;
                var b8 = b[8] | 0;
                var bl8 = b8 & 0x1fff;
                var bh8 = b8 >>> 13;
                var b9 = b[9] | 0;
                var bl9 = b9 & 0x1fff;
                var bh9 = b9 >>> 13;

                out.negative = self.negative ^ num.negative;
                out.length = 19;
                /* k = 0 */
                lo = Math.imul(al0, bl0);
                mid = Math.imul(al0, bh0);
                mid = (mid + Math.imul(ah0, bl0)) | 0;
                hi = Math.imul(ah0, bh0);
                var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
                w0 &= 0x3ffffff;
                /* k = 1 */
                lo = Math.imul(al1, bl0);
                mid = Math.imul(al1, bh0);
                mid = (mid + Math.imul(ah1, bl0)) | 0;
                hi = Math.imul(ah1, bh0);
                lo = (lo + Math.imul(al0, bl1)) | 0;
                mid = (mid + Math.imul(al0, bh1)) | 0;
                mid = (mid + Math.imul(ah0, bl1)) | 0;
                hi = (hi + Math.imul(ah0, bh1)) | 0;
                var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
                w1 &= 0x3ffffff;
                /* k = 2 */
                lo = Math.imul(al2, bl0);
                mid = Math.imul(al2, bh0);
                mid = (mid + Math.imul(ah2, bl0)) | 0;
                hi = Math.imul(ah2, bh0);
                lo = (lo + Math.imul(al1, bl1)) | 0;
                mid = (mid + Math.imul(al1, bh1)) | 0;
                mid = (mid + Math.imul(ah1, bl1)) | 0;
                hi = (hi + Math.imul(ah1, bh1)) | 0;
                lo = (lo + Math.imul(al0, bl2)) | 0;
                mid = (mid + Math.imul(al0, bh2)) | 0;
                mid = (mid + Math.imul(ah0, bl2)) | 0;
                hi = (hi + Math.imul(ah0, bh2)) | 0;
                var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
                w2 &= 0x3ffffff;
                /* k = 3 */
                lo = Math.imul(al3, bl0);
                mid = Math.imul(al3, bh0);
                mid = (mid + Math.imul(ah3, bl0)) | 0;
                hi = Math.imul(ah3, bh0);
                lo = (lo + Math.imul(al2, bl1)) | 0;
                mid = (mid + Math.imul(al2, bh1)) | 0;
                mid = (mid + Math.imul(ah2, bl1)) | 0;
                hi = (hi + Math.imul(ah2, bh1)) | 0;
                lo = (lo + Math.imul(al1, bl2)) | 0;
                mid = (mid + Math.imul(al1, bh2)) | 0;
                mid = (mid + Math.imul(ah1, bl2)) | 0;
                hi = (hi + Math.imul(ah1, bh2)) | 0;
                lo = (lo + Math.imul(al0, bl3)) | 0;
                mid = (mid + Math.imul(al0, bh3)) | 0;
                mid = (mid + Math.imul(ah0, bl3)) | 0;
                hi = (hi + Math.imul(ah0, bh3)) | 0;
                var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
                w3 &= 0x3ffffff;
                /* k = 4 */
                lo = Math.imul(al4, bl0);
                mid = Math.imul(al4, bh0);
                mid = (mid + Math.imul(ah4, bl0)) | 0;
                hi = Math.imul(ah4, bh0);
                lo = (lo + Math.imul(al3, bl1)) | 0;
                mid = (mid + Math.imul(al3, bh1)) | 0;
                mid = (mid + Math.imul(ah3, bl1)) | 0;
                hi = (hi + Math.imul(ah3, bh1)) | 0;
                lo = (lo + Math.imul(al2, bl2)) | 0;
                mid = (mid + Math.imul(al2, bh2)) | 0;
                mid = (mid + Math.imul(ah2, bl2)) | 0;
                hi = (hi + Math.imul(ah2, bh2)) | 0;
                lo = (lo + Math.imul(al1, bl3)) | 0;
                mid = (mid + Math.imul(al1, bh3)) | 0;
                mid = (mid + Math.imul(ah1, bl3)) | 0;
                hi = (hi + Math.imul(ah1, bh3)) | 0;
                lo = (lo + Math.imul(al0, bl4)) | 0;
                mid = (mid + Math.imul(al0, bh4)) | 0;
                mid = (mid + Math.imul(ah0, bl4)) | 0;
                hi = (hi + Math.imul(ah0, bh4)) | 0;
                var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
                w4 &= 0x3ffffff;
                /* k = 5 */
                lo = Math.imul(al5, bl0);
                mid = Math.imul(al5, bh0);
                mid = (mid + Math.imul(ah5, bl0)) | 0;
                hi = Math.imul(ah5, bh0);
                lo = (lo + Math.imul(al4, bl1)) | 0;
                mid = (mid + Math.imul(al4, bh1)) | 0;
                mid = (mid + Math.imul(ah4, bl1)) | 0;
                hi = (hi + Math.imul(ah4, bh1)) | 0;
                lo = (lo + Math.imul(al3, bl2)) | 0;
                mid = (mid + Math.imul(al3, bh2)) | 0;
                mid = (mid + Math.imul(ah3, bl2)) | 0;
                hi = (hi + Math.imul(ah3, bh2)) | 0;
                lo = (lo + Math.imul(al2, bl3)) | 0;
                mid = (mid + Math.imul(al2, bh3)) | 0;
                mid = (mid + Math.imul(ah2, bl3)) | 0;
                hi = (hi + Math.imul(ah2, bh3)) | 0;
                lo = (lo + Math.imul(al1, bl4)) | 0;
                mid = (mid + Math.imul(al1, bh4)) | 0;
                mid = (mid + Math.imul(ah1, bl4)) | 0;
                hi = (hi + Math.imul(ah1, bh4)) | 0;
                lo = (lo + Math.imul(al0, bl5)) | 0;
                mid = (mid + Math.imul(al0, bh5)) | 0;
                mid = (mid + Math.imul(ah0, bl5)) | 0;
                hi = (hi + Math.imul(ah0, bh5)) | 0;
                var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
                w5 &= 0x3ffffff;
                /* k = 6 */
                lo = Math.imul(al6, bl0);
                mid = Math.imul(al6, bh0);
                mid = (mid + Math.imul(ah6, bl0)) | 0;
                hi = Math.imul(ah6, bh0);
                lo = (lo + Math.imul(al5, bl1)) | 0;
                mid = (mid + Math.imul(al5, bh1)) | 0;
                mid = (mid + Math.imul(ah5, bl1)) | 0;
                hi = (hi + Math.imul(ah5, bh1)) | 0;
                lo = (lo + Math.imul(al4, bl2)) | 0;
                mid = (mid + Math.imul(al4, bh2)) | 0;
                mid = (mid + Math.imul(ah4, bl2)) | 0;
                hi = (hi + Math.imul(ah4, bh2)) | 0;
                lo = (lo + Math.imul(al3, bl3)) | 0;
                mid = (mid + Math.imul(al3, bh3)) | 0;
                mid = (mid + Math.imul(ah3, bl3)) | 0;
                hi = (hi + Math.imul(ah3, bh3)) | 0;
                lo = (lo + Math.imul(al2, bl4)) | 0;
                mid = (mid + Math.imul(al2, bh4)) | 0;
                mid = (mid + Math.imul(ah2, bl4)) | 0;
                hi = (hi + Math.imul(ah2, bh4)) | 0;
                lo = (lo + Math.imul(al1, bl5)) | 0;
                mid = (mid + Math.imul(al1, bh5)) | 0;
                mid = (mid + Math.imul(ah1, bl5)) | 0;
                hi = (hi + Math.imul(ah1, bh5)) | 0;
                lo = (lo + Math.imul(al0, bl6)) | 0;
                mid = (mid + Math.imul(al0, bh6)) | 0;
                mid = (mid + Math.imul(ah0, bl6)) | 0;
                hi = (hi + Math.imul(ah0, bh6)) | 0;
                var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
                w6 &= 0x3ffffff;
                /* k = 7 */
                lo = Math.imul(al7, bl0);
                mid = Math.imul(al7, bh0);
                mid = (mid + Math.imul(ah7, bl0)) | 0;
                hi = Math.imul(ah7, bh0);
                lo = (lo + Math.imul(al6, bl1)) | 0;
                mid = (mid + Math.imul(al6, bh1)) | 0;
                mid = (mid + Math.imul(ah6, bl1)) | 0;
                hi = (hi + Math.imul(ah6, bh1)) | 0;
                lo = (lo + Math.imul(al5, bl2)) | 0;
                mid = (mid + Math.imul(al5, bh2)) | 0;
                mid = (mid + Math.imul(ah5, bl2)) | 0;
                hi = (hi + Math.imul(ah5, bh2)) | 0;
                lo = (lo + Math.imul(al4, bl3)) | 0;
                mid = (mid + Math.imul(al4, bh3)) | 0;
                mid = (mid + Math.imul(ah4, bl3)) | 0;
                hi = (hi + Math.imul(ah4, bh3)) | 0;
                lo = (lo + Math.imul(al3, bl4)) | 0;
                mid = (mid + Math.imul(al3, bh4)) | 0;
                mid = (mid + Math.imul(ah3, bl4)) | 0;
                hi = (hi + Math.imul(ah3, bh4)) | 0;
                lo = (lo + Math.imul(al2, bl5)) | 0;
                mid = (mid + Math.imul(al2, bh5)) | 0;
                mid = (mid + Math.imul(ah2, bl5)) | 0;
                hi = (hi + Math.imul(ah2, bh5)) | 0;
                lo = (lo + Math.imul(al1, bl6)) | 0;
                mid = (mid + Math.imul(al1, bh6)) | 0;
                mid = (mid + Math.imul(ah1, bl6)) | 0;
                hi = (hi + Math.imul(ah1, bh6)) | 0;
                lo = (lo + Math.imul(al0, bl7)) | 0;
                mid = (mid + Math.imul(al0, bh7)) | 0;
                mid = (mid + Math.imul(ah0, bl7)) | 0;
                hi = (hi + Math.imul(ah0, bh7)) | 0;
                var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
                w7 &= 0x3ffffff;
                /* k = 8 */
                lo = Math.imul(al8, bl0);
                mid = Math.imul(al8, bh0);
                mid = (mid + Math.imul(ah8, bl0)) | 0;
                hi = Math.imul(ah8, bh0);
                lo = (lo + Math.imul(al7, bl1)) | 0;
                mid = (mid + Math.imul(al7, bh1)) | 0;
                mid = (mid + Math.imul(ah7, bl1)) | 0;
                hi = (hi + Math.imul(ah7, bh1)) | 0;
                lo = (lo + Math.imul(al6, bl2)) | 0;
                mid = (mid + Math.imul(al6, bh2)) | 0;
                mid = (mid + Math.imul(ah6, bl2)) | 0;
                hi = (hi + Math.imul(ah6, bh2)) | 0;
                lo = (lo + Math.imul(al5, bl3)) | 0;
                mid = (mid + Math.imul(al5, bh3)) | 0;
                mid = (mid + Math.imul(ah5, bl3)) | 0;
                hi = (hi + Math.imul(ah5, bh3)) | 0;
                lo = (lo + Math.imul(al4, bl4)) | 0;
                mid = (mid + Math.imul(al4, bh4)) | 0;
                mid = (mid + Math.imul(ah4, bl4)) | 0;
                hi = (hi + Math.imul(ah4, bh4)) | 0;
                lo = (lo + Math.imul(al3, bl5)) | 0;
                mid = (mid + Math.imul(al3, bh5)) | 0;
                mid = (mid + Math.imul(ah3, bl5)) | 0;
                hi = (hi + Math.imul(ah3, bh5)) | 0;
                lo = (lo + Math.imul(al2, bl6)) | 0;
                mid = (mid + Math.imul(al2, bh6)) | 0;
                mid = (mid + Math.imul(ah2, bl6)) | 0;
                hi = (hi + Math.imul(ah2, bh6)) | 0;
                lo = (lo + Math.imul(al1, bl7)) | 0;
                mid = (mid + Math.imul(al1, bh7)) | 0;
                mid = (mid + Math.imul(ah1, bl7)) | 0;
                hi = (hi + Math.imul(ah1, bh7)) | 0;
                lo = (lo + Math.imul(al0, bl8)) | 0;
                mid = (mid + Math.imul(al0, bh8)) | 0;
                mid = (mid + Math.imul(ah0, bl8)) | 0;
                hi = (hi + Math.imul(ah0, bh8)) | 0;
                var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
                w8 &= 0x3ffffff;
                /* k = 9 */
                lo = Math.imul(al9, bl0);
                mid = Math.imul(al9, bh0);
                mid = (mid + Math.imul(ah9, bl0)) | 0;
                hi = Math.imul(ah9, bh0);
                lo = (lo + Math.imul(al8, bl1)) | 0;
                mid = (mid + Math.imul(al8, bh1)) | 0;
                mid = (mid + Math.imul(ah8, bl1)) | 0;
                hi = (hi + Math.imul(ah8, bh1)) | 0;
                lo = (lo + Math.imul(al7, bl2)) | 0;
                mid = (mid + Math.imul(al7, bh2)) | 0;
                mid = (mid + Math.imul(ah7, bl2)) | 0;
                hi = (hi + Math.imul(ah7, bh2)) | 0;
                lo = (lo + Math.imul(al6, bl3)) | 0;
                mid = (mid + Math.imul(al6, bh3)) | 0;
                mid = (mid + Math.imul(ah6, bl3)) | 0;
                hi = (hi + Math.imul(ah6, bh3)) | 0;
                lo = (lo + Math.imul(al5, bl4)) | 0;
                mid = (mid + Math.imul(al5, bh4)) | 0;
                mid = (mid + Math.imul(ah5, bl4)) | 0;
                hi = (hi + Math.imul(ah5, bh4)) | 0;
                lo = (lo + Math.imul(al4, bl5)) | 0;
                mid = (mid + Math.imul(al4, bh5)) | 0;
                mid = (mid + Math.imul(ah4, bl5)) | 0;
                hi = (hi + Math.imul(ah4, bh5)) | 0;
                lo = (lo + Math.imul(al3, bl6)) | 0;
                mid = (mid + Math.imul(al3, bh6)) | 0;
                mid = (mid + Math.imul(ah3, bl6)) | 0;
                hi = (hi + Math.imul(ah3, bh6)) | 0;
                lo = (lo + Math.imul(al2, bl7)) | 0;
                mid = (mid + Math.imul(al2, bh7)) | 0;
                mid = (mid + Math.imul(ah2, bl7)) | 0;
                hi = (hi + Math.imul(ah2, bh7)) | 0;
                lo = (lo + Math.imul(al1, bl8)) | 0;
                mid = (mid + Math.imul(al1, bh8)) | 0;
                mid = (mid + Math.imul(ah1, bl8)) | 0;
                hi = (hi + Math.imul(ah1, bh8)) | 0;
                lo = (lo + Math.imul(al0, bl9)) | 0;
                mid = (mid + Math.imul(al0, bh9)) | 0;
                mid = (mid + Math.imul(ah0, bl9)) | 0;
                hi = (hi + Math.imul(ah0, bh9)) | 0;
                var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
                w9 &= 0x3ffffff;
                /* k = 10 */
                lo = Math.imul(al9, bl1);
                mid = Math.imul(al9, bh1);
                mid = (mid + Math.imul(ah9, bl1)) | 0;
                hi = Math.imul(ah9, bh1);
                lo = (lo + Math.imul(al8, bl2)) | 0;
                mid = (mid + Math.imul(al8, bh2)) | 0;
                mid = (mid + Math.imul(ah8, bl2)) | 0;
                hi = (hi + Math.imul(ah8, bh2)) | 0;
                lo = (lo + Math.imul(al7, bl3)) | 0;
                mid = (mid + Math.imul(al7, bh3)) | 0;
                mid = (mid + Math.imul(ah7, bl3)) | 0;
                hi = (hi + Math.imul(ah7, bh3)) | 0;
                lo = (lo + Math.imul(al6, bl4)) | 0;
                mid = (mid + Math.imul(al6, bh4)) | 0;
                mid = (mid + Math.imul(ah6, bl4)) | 0;
                hi = (hi + Math.imul(ah6, bh4)) | 0;
                lo = (lo + Math.imul(al5, bl5)) | 0;
                mid = (mid + Math.imul(al5, bh5)) | 0;
                mid = (mid + Math.imul(ah5, bl5)) | 0;
                hi = (hi + Math.imul(ah5, bh5)) | 0;
                lo = (lo + Math.imul(al4, bl6)) | 0;
                mid = (mid + Math.imul(al4, bh6)) | 0;
                mid = (mid + Math.imul(ah4, bl6)) | 0;
                hi = (hi + Math.imul(ah4, bh6)) | 0;
                lo = (lo + Math.imul(al3, bl7)) | 0;
                mid = (mid + Math.imul(al3, bh7)) | 0;
                mid = (mid + Math.imul(ah3, bl7)) | 0;
                hi = (hi + Math.imul(ah3, bh7)) | 0;
                lo = (lo + Math.imul(al2, bl8)) | 0;
                mid = (mid + Math.imul(al2, bh8)) | 0;
                mid = (mid + Math.imul(ah2, bl8)) | 0;
                hi = (hi + Math.imul(ah2, bh8)) | 0;
                lo = (lo + Math.imul(al1, bl9)) | 0;
                mid = (mid + Math.imul(al1, bh9)) | 0;
                mid = (mid + Math.imul(ah1, bl9)) | 0;
                hi = (hi + Math.imul(ah1, bh9)) | 0;
                var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
                w10 &= 0x3ffffff;
                /* k = 11 */
                lo = Math.imul(al9, bl2);
                mid = Math.imul(al9, bh2);
                mid = (mid + Math.imul(ah9, bl2)) | 0;
                hi = Math.imul(ah9, bh2);
                lo = (lo + Math.imul(al8, bl3)) | 0;
                mid = (mid + Math.imul(al8, bh3)) | 0;
                mid = (mid + Math.imul(ah8, bl3)) | 0;
                hi = (hi + Math.imul(ah8, bh3)) | 0;
                lo = (lo + Math.imul(al7, bl4)) | 0;
                mid = (mid + Math.imul(al7, bh4)) | 0;
                mid = (mid + Math.imul(ah7, bl4)) | 0;
                hi = (hi + Math.imul(ah7, bh4)) | 0;
                lo = (lo + Math.imul(al6, bl5)) | 0;
                mid = (mid + Math.imul(al6, bh5)) | 0;
                mid = (mid + Math.imul(ah6, bl5)) | 0;
                hi = (hi + Math.imul(ah6, bh5)) | 0;
                lo = (lo + Math.imul(al5, bl6)) | 0;
                mid = (mid + Math.imul(al5, bh6)) | 0;
                mid = (mid + Math.imul(ah5, bl6)) | 0;
                hi = (hi + Math.imul(ah5, bh6)) | 0;
                lo = (lo + Math.imul(al4, bl7)) | 0;
                mid = (mid + Math.imul(al4, bh7)) | 0;
                mid = (mid + Math.imul(ah4, bl7)) | 0;
                hi = (hi + Math.imul(ah4, bh7)) | 0;
                lo = (lo + Math.imul(al3, bl8)) | 0;
                mid = (mid + Math.imul(al3, bh8)) | 0;
                mid = (mid + Math.imul(ah3, bl8)) | 0;
                hi = (hi + Math.imul(ah3, bh8)) | 0;
                lo = (lo + Math.imul(al2, bl9)) | 0;
                mid = (mid + Math.imul(al2, bh9)) | 0;
                mid = (mid + Math.imul(ah2, bl9)) | 0;
                hi = (hi + Math.imul(ah2, bh9)) | 0;
                var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
                w11 &= 0x3ffffff;
                /* k = 12 */
                lo = Math.imul(al9, bl3);
                mid = Math.imul(al9, bh3);
                mid = (mid + Math.imul(ah9, bl3)) | 0;
                hi = Math.imul(ah9, bh3);
                lo = (lo + Math.imul(al8, bl4)) | 0;
                mid = (mid + Math.imul(al8, bh4)) | 0;
                mid = (mid + Math.imul(ah8, bl4)) | 0;
                hi = (hi + Math.imul(ah8, bh4)) | 0;
                lo = (lo + Math.imul(al7, bl5)) | 0;
                mid = (mid + Math.imul(al7, bh5)) | 0;
                mid = (mid + Math.imul(ah7, bl5)) | 0;
                hi = (hi + Math.imul(ah7, bh5)) | 0;
                lo = (lo + Math.imul(al6, bl6)) | 0;
                mid = (mid + Math.imul(al6, bh6)) | 0;
                mid = (mid + Math.imul(ah6, bl6)) | 0;
                hi = (hi + Math.imul(ah6, bh6)) | 0;
                lo = (lo + Math.imul(al5, bl7)) | 0;
                mid = (mid + Math.imul(al5, bh7)) | 0;
                mid = (mid + Math.imul(ah5, bl7)) | 0;
                hi = (hi + Math.imul(ah5, bh7)) | 0;
                lo = (lo + Math.imul(al4, bl8)) | 0;
                mid = (mid + Math.imul(al4, bh8)) | 0;
                mid = (mid + Math.imul(ah4, bl8)) | 0;
                hi = (hi + Math.imul(ah4, bh8)) | 0;
                lo = (lo + Math.imul(al3, bl9)) | 0;
                mid = (mid + Math.imul(al3, bh9)) | 0;
                mid = (mid + Math.imul(ah3, bl9)) | 0;
                hi = (hi + Math.imul(ah3, bh9)) | 0;
                var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
                w12 &= 0x3ffffff;
                /* k = 13 */
                lo = Math.imul(al9, bl4);
                mid = Math.imul(al9, bh4);
                mid = (mid + Math.imul(ah9, bl4)) | 0;
                hi = Math.imul(ah9, bh4);
                lo = (lo + Math.imul(al8, bl5)) | 0;
                mid = (mid + Math.imul(al8, bh5)) | 0;
                mid = (mid + Math.imul(ah8, bl5)) | 0;
                hi = (hi + Math.imul(ah8, bh5)) | 0;
                lo = (lo + Math.imul(al7, bl6)) | 0;
                mid = (mid + Math.imul(al7, bh6)) | 0;
                mid = (mid + Math.imul(ah7, bl6)) | 0;
                hi = (hi + Math.imul(ah7, bh6)) | 0;
                lo = (lo + Math.imul(al6, bl7)) | 0;
                mid = (mid + Math.imul(al6, bh7)) | 0;
                mid = (mid + Math.imul(ah6, bl7)) | 0;
                hi = (hi + Math.imul(ah6, bh7)) | 0;
                lo = (lo + Math.imul(al5, bl8)) | 0;
                mid = (mid + Math.imul(al5, bh8)) | 0;
                mid = (mid + Math.imul(ah5, bl8)) | 0;
                hi = (hi + Math.imul(ah5, bh8)) | 0;
                lo = (lo + Math.imul(al4, bl9)) | 0;
                mid = (mid + Math.imul(al4, bh9)) | 0;
                mid = (mid + Math.imul(ah4, bl9)) | 0;
                hi = (hi + Math.imul(ah4, bh9)) | 0;
                var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
                w13 &= 0x3ffffff;
                /* k = 14 */
                lo = Math.imul(al9, bl5);
                mid = Math.imul(al9, bh5);
                mid = (mid + Math.imul(ah9, bl5)) | 0;
                hi = Math.imul(ah9, bh5);
                lo = (lo + Math.imul(al8, bl6)) | 0;
                mid = (mid + Math.imul(al8, bh6)) | 0;
                mid = (mid + Math.imul(ah8, bl6)) | 0;
                hi = (hi + Math.imul(ah8, bh6)) | 0;
                lo = (lo + Math.imul(al7, bl7)) | 0;
                mid = (mid + Math.imul(al7, bh7)) | 0;
                mid = (mid + Math.imul(ah7, bl7)) | 0;
                hi = (hi + Math.imul(ah7, bh7)) | 0;
                lo = (lo + Math.imul(al6, bl8)) | 0;
                mid = (mid + Math.imul(al6, bh8)) | 0;
                mid = (mid + Math.imul(ah6, bl8)) | 0;
                hi = (hi + Math.imul(ah6, bh8)) | 0;
                lo = (lo + Math.imul(al5, bl9)) | 0;
                mid = (mid + Math.imul(al5, bh9)) | 0;
                mid = (mid + Math.imul(ah5, bl9)) | 0;
                hi = (hi + Math.imul(ah5, bh9)) | 0;
                var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
                w14 &= 0x3ffffff;
                /* k = 15 */
                lo = Math.imul(al9, bl6);
                mid = Math.imul(al9, bh6);
                mid = (mid + Math.imul(ah9, bl6)) | 0;
                hi = Math.imul(ah9, bh6);
                lo = (lo + Math.imul(al8, bl7)) | 0;
                mid = (mid + Math.imul(al8, bh7)) | 0;
                mid = (mid + Math.imul(ah8, bl7)) | 0;
                hi = (hi + Math.imul(ah8, bh7)) | 0;
                lo = (lo + Math.imul(al7, bl8)) | 0;
                mid = (mid + Math.imul(al7, bh8)) | 0;
                mid = (mid + Math.imul(ah7, bl8)) | 0;
                hi = (hi + Math.imul(ah7, bh8)) | 0;
                lo = (lo + Math.imul(al6, bl9)) | 0;
                mid = (mid + Math.imul(al6, bh9)) | 0;
                mid = (mid + Math.imul(ah6, bl9)) | 0;
                hi = (hi + Math.imul(ah6, bh9)) | 0;
                var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
                w15 &= 0x3ffffff;
                /* k = 16 */
                lo = Math.imul(al9, bl7);
                mid = Math.imul(al9, bh7);
                mid = (mid + Math.imul(ah9, bl7)) | 0;
                hi = Math.imul(ah9, bh7);
                lo = (lo + Math.imul(al8, bl8)) | 0;
                mid = (mid + Math.imul(al8, bh8)) | 0;
                mid = (mid + Math.imul(ah8, bl8)) | 0;
                hi = (hi + Math.imul(ah8, bh8)) | 0;
                lo = (lo + Math.imul(al7, bl9)) | 0;
                mid = (mid + Math.imul(al7, bh9)) | 0;
                mid = (mid + Math.imul(ah7, bl9)) | 0;
                hi = (hi + Math.imul(ah7, bh9)) | 0;
                var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
                w16 &= 0x3ffffff;
                /* k = 17 */
                lo = Math.imul(al9, bl8);
                mid = Math.imul(al9, bh8);
                mid = (mid + Math.imul(ah9, bl8)) | 0;
                hi = Math.imul(ah9, bh8);
                lo = (lo + Math.imul(al8, bl9)) | 0;
                mid = (mid + Math.imul(al8, bh9)) | 0;
                mid = (mid + Math.imul(ah8, bl9)) | 0;
                hi = (hi + Math.imul(ah8, bh9)) | 0;
                var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
                w17 &= 0x3ffffff;
                /* k = 18 */
                lo = Math.imul(al9, bl9);
                mid = Math.imul(al9, bh9);
                mid = (mid + Math.imul(ah9, bl9)) | 0;
                hi = Math.imul(ah9, bh9);
                var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
                c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
                w18 &= 0x3ffffff;
                o[0] = w0;
                o[1] = w1;
                o[2] = w2;
                o[3] = w3;
                o[4] = w4;
                o[5] = w5;
                o[6] = w6;
                o[7] = w7;
                o[8] = w8;
                o[9] = w9;
                o[10] = w10;
                o[11] = w11;
                o[12] = w12;
                o[13] = w13;
                o[14] = w14;
                o[15] = w15;
                o[16] = w16;
                o[17] = w17;
                o[18] = w18;
                if (c !== 0) {
                  o[19] = c;
                  out.length++;
                }
                return out;
              };

              // Polyfill comb
              if (!Math.imul) {
                comb10MulTo = smallMulTo;
              }

              function bigMulTo (self, num, out) {
                out.negative = num.negative ^ self.negative;
                out.length = self.length + num.length;

                var carry = 0;
                var hncarry = 0;
                for (var k = 0; k < out.length - 1; k++) {
                  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                  // note that ncarry could be >= 0x3ffffff
                  var ncarry = hncarry;
                  hncarry = 0;
                  var rword = carry & 0x3ffffff;
                  var maxJ = Math.min(k, num.length - 1);
                  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
                    var i = k - j;
                    var a = self.words[i] | 0;
                    var b = num.words[j] | 0;
                    var r = a * b;

                    var lo = r & 0x3ffffff;
                    ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
                    lo = (lo + rword) | 0;
                    rword = lo & 0x3ffffff;
                    ncarry = (ncarry + (lo >>> 26)) | 0;

                    hncarry += ncarry >>> 26;
                    ncarry &= 0x3ffffff;
                  }
                  out.words[k] = rword;
                  carry = ncarry;
                  ncarry = hncarry;
                }
                if (carry !== 0) {
                  out.words[k] = carry;
                } else {
                  out.length--;
                }

                return out.strip();
              }

              function jumboMulTo (self, num, out) {
                var fftm = new FFTM();
                return fftm.mulp(self, num, out);
              }

              BN.prototype.mulTo = function mulTo (num, out) {
                var res;
                var len = this.length + num.length;
                if (this.length === 10 && num.length === 10) {
                  res = comb10MulTo(this, num, out);
                } else if (len < 63) {
                  res = smallMulTo(this, num, out);
                } else if (len < 1024) {
                  res = bigMulTo(this, num, out);
                } else {
                  res = jumboMulTo(this, num, out);
                }

                return res;
              };

              // Cooley-Tukey algorithm for FFT
              // slightly revisited to rely on looping instead of recursion

              function FFTM (x, y) {
                this.x = x;
                this.y = y;
              }

              FFTM.prototype.makeRBT = function makeRBT (N) {
                var t = new Array(N);
                var l = BN.prototype._countBits(N) - 1;
                for (var i = 0; i < N; i++) {
                  t[i] = this.revBin(i, l, N);
                }

                return t;
              };

              // Returns binary-reversed representation of `x`
              FFTM.prototype.revBin = function revBin (x, l, N) {
                if (x === 0 || x === N - 1) return x;

                var rb = 0;
                for (var i = 0; i < l; i++) {
                  rb |= (x & 1) << (l - i - 1);
                  x >>= 1;
                }

                return rb;
              };

              // Performs "tweedling" phase, therefore 'emulating'
              // behaviour of the recursive algorithm
              FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
                for (var i = 0; i < N; i++) {
                  rtws[i] = rws[rbt[i]];
                  itws[i] = iws[rbt[i]];
                }
              };

              FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
                this.permute(rbt, rws, iws, rtws, itws, N);

                for (var s = 1; s < N; s <<= 1) {
                  var l = s << 1;

                  var rtwdf = Math.cos(2 * Math.PI / l);
                  var itwdf = Math.sin(2 * Math.PI / l);

                  for (var p = 0; p < N; p += l) {
                    var rtwdf_ = rtwdf;
                    var itwdf_ = itwdf;

                    for (var j = 0; j < s; j++) {
                      var re = rtws[p + j];
                      var ie = itws[p + j];

                      var ro = rtws[p + j + s];
                      var io = itws[p + j + s];

                      var rx = rtwdf_ * ro - itwdf_ * io;

                      io = rtwdf_ * io + itwdf_ * ro;
                      ro = rx;

                      rtws[p + j] = re + ro;
                      itws[p + j] = ie + io;

                      rtws[p + j + s] = re - ro;
                      itws[p + j + s] = ie - io;

                      /* jshint maxdepth : false */
                      if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                      }
                    }
                  }
                }
              };

              FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
                var N = Math.max(m, n) | 1;
                var odd = N & 1;
                var i = 0;
                for (N = N / 2 | 0; N; N = N >>> 1) {
                  i++;
                }

                return 1 << i + 1 + odd;
              };

              FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
                if (N <= 1) return;

                for (var i = 0; i < N / 2; i++) {
                  var t = rws[i];

                  rws[i] = rws[N - i - 1];
                  rws[N - i - 1] = t;

                  t = iws[i];

                  iws[i] = -iws[N - i - 1];
                  iws[N - i - 1] = -t;
                }
              };

              FFTM.prototype.normalize13b = function normalize13b (ws, N) {
                var carry = 0;
                for (var i = 0; i < N / 2; i++) {
                  var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
                    Math.round(ws[2 * i] / N) +
                    carry;

                  ws[i] = w & 0x3ffffff;

                  if (w < 0x4000000) {
                    carry = 0;
                  } else {
                    carry = w / 0x4000000 | 0;
                  }
                }

                return ws;
              };

              FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
                var carry = 0;
                for (var i = 0; i < len; i++) {
                  carry = carry + (ws[i] | 0);

                  rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
                  rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
                }

                // Pad with zeroes
                for (i = 2 * len; i < N; ++i) {
                  rws[i] = 0;
                }

                assert(carry === 0);
                assert((carry & ~0x1fff) === 0);
              };

              FFTM.prototype.stub = function stub (N) {
                var ph = new Array(N);
                for (var i = 0; i < N; i++) {
                  ph[i] = 0;
                }

                return ph;
              };

              FFTM.prototype.mulp = function mulp (x, y, out) {
                var N = 2 * this.guessLen13b(x.length, y.length);

                var rbt = this.makeRBT(N);

                var _ = this.stub(N);

                var rws = new Array(N);
                var rwst = new Array(N);
                var iwst = new Array(N);

                var nrws = new Array(N);
                var nrwst = new Array(N);
                var niwst = new Array(N);

                var rmws = out.words;
                rmws.length = N;

                this.convert13b(x.words, x.length, rws, N);
                this.convert13b(y.words, y.length, nrws, N);

                this.transform(rws, _, rwst, iwst, N, rbt);
                this.transform(nrws, _, nrwst, niwst, N, rbt);

                for (var i = 0; i < N; i++) {
                  var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                  iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                  rwst[i] = rx;
                }

                this.conjugate(rwst, iwst, N);
                this.transform(rwst, iwst, rmws, _, N, rbt);
                this.conjugate(rmws, _, N);
                this.normalize13b(rmws, N);

                out.negative = x.negative ^ y.negative;
                out.length = x.length + y.length;
                return out.strip();
              };

              // Multiply `this` by `num`
              BN.prototype.mul = function mul (num) {
                var out = new BN(null);
                out.words = new Array(this.length + num.length);
                return this.mulTo(num, out);
              };

              // Multiply employing FFT
              BN.prototype.mulf = function mulf (num) {
                var out = new BN(null);
                out.words = new Array(this.length + num.length);
                return jumboMulTo(this, num, out);
              };

              // In-place Multiplication
              BN.prototype.imul = function imul (num) {
                return this.clone().mulTo(num, this);
              };

              BN.prototype.imuln = function imuln (num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);

                // Carry
                var carry = 0;
                for (var i = 0; i < this.length; i++) {
                  var w = (this.words[i] | 0) * num;
                  var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                  carry >>= 26;
                  carry += (w / 0x4000000) | 0;
                  // NOTE: lo is 27bit maximum
                  carry += lo >>> 26;
                  this.words[i] = lo & 0x3ffffff;
                }

                if (carry !== 0) {
                  this.words[i] = carry;
                  this.length++;
                }

                return this;
              };

              BN.prototype.muln = function muln (num) {
                return this.clone().imuln(num);
              };

              // `this` * `this`
              BN.prototype.sqr = function sqr () {
                return this.mul(this);
              };

              // `this` * `this` in-place
              BN.prototype.isqr = function isqr () {
                return this.imul(this.clone());
              };

              // Math.pow(`this`, `num`)
              BN.prototype.pow = function pow (num) {
                var w = toBitArray(num);
                if (w.length === 0) return new BN(1);

                // Skip leading zeroes
                var res = this;
                for (var i = 0; i < w.length; i++, res = res.sqr()) {
                  if (w[i] !== 0) break;
                }

                if (++i < w.length) {
                  for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
                    if (w[i] === 0) continue;

                    res = res.mul(q);
                  }
                }

                return res;
              };

              // Shift-left in-place
              BN.prototype.iushln = function iushln (bits) {
                assert(typeof bits === 'number' && bits >= 0);
                var r = bits % 26;
                var s = (bits - r) / 26;
                var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
                var i;

                if (r !== 0) {
                  var carry = 0;

                  for (i = 0; i < this.length; i++) {
                    var newCarry = this.words[i] & carryMask;
                    var c = ((this.words[i] | 0) - newCarry) << r;
                    this.words[i] = c | carry;
                    carry = newCarry >>> (26 - r);
                  }

                  if (carry) {
                    this.words[i] = carry;
                    this.length++;
                  }
                }

                if (s !== 0) {
                  for (i = this.length - 1; i >= 0; i--) {
                    this.words[i + s] = this.words[i];
                  }

                  for (i = 0; i < s; i++) {
                    this.words[i] = 0;
                  }

                  this.length += s;
                }

                return this.strip();
              };

              BN.prototype.ishln = function ishln (bits) {
                // TODO(indutny): implement me
                assert(this.negative === 0);
                return this.iushln(bits);
              };

              // Shift-right in-place
              // NOTE: `hint` is a lowest bit before trailing zeroes
              // NOTE: if `extended` is present - it will be filled with destroyed bits
              BN.prototype.iushrn = function iushrn (bits, hint, extended) {
                assert(typeof bits === 'number' && bits >= 0);
                var h;
                if (hint) {
                  h = (hint - (hint % 26)) / 26;
                } else {
                  h = 0;
                }

                var r = bits % 26;
                var s = Math.min((bits - r) / 26, this.length);
                var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                var maskedWords = extended;

                h -= s;
                h = Math.max(0, h);

                // Extended mode, copy masked part
                if (maskedWords) {
                  for (var i = 0; i < s; i++) {
                    maskedWords.words[i] = this.words[i];
                  }
                  maskedWords.length = s;
                }

                if (s === 0) ; else if (this.length > s) {
                  this.length -= s;
                  for (i = 0; i < this.length; i++) {
                    this.words[i] = this.words[i + s];
                  }
                } else {
                  this.words[0] = 0;
                  this.length = 1;
                }

                var carry = 0;
                for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
                  var word = this.words[i] | 0;
                  this.words[i] = (carry << (26 - r)) | (word >>> r);
                  carry = word & mask;
                }

                // Push carried bits as a mask
                if (maskedWords && carry !== 0) {
                  maskedWords.words[maskedWords.length++] = carry;
                }

                if (this.length === 0) {
                  this.words[0] = 0;
                  this.length = 1;
                }

                return this.strip();
              };

              BN.prototype.ishrn = function ishrn (bits, hint, extended) {
                // TODO(indutny): implement me
                assert(this.negative === 0);
                return this.iushrn(bits, hint, extended);
              };

              // Shift-left
              BN.prototype.shln = function shln (bits) {
                return this.clone().ishln(bits);
              };

              BN.prototype.ushln = function ushln (bits) {
                return this.clone().iushln(bits);
              };

              // Shift-right
              BN.prototype.shrn = function shrn (bits) {
                return this.clone().ishrn(bits);
              };

              BN.prototype.ushrn = function ushrn (bits) {
                return this.clone().iushrn(bits);
              };

              // Test if n bit is set
              BN.prototype.testn = function testn (bit) {
                assert(typeof bit === 'number' && bit >= 0);
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;

                // Fast case: bit is much higher than all existing words
                if (this.length <= s) return false;

                // Check bit and return
                var w = this.words[s];

                return !!(w & q);
              };

              // Return only lowers bits of number (in-place)
              BN.prototype.imaskn = function imaskn (bits) {
                assert(typeof bits === 'number' && bits >= 0);
                var r = bits % 26;
                var s = (bits - r) / 26;

                assert(this.negative === 0, 'imaskn works only with positive numbers');

                if (this.length <= s) {
                  return this;
                }

                if (r !== 0) {
                  s++;
                }
                this.length = Math.min(s, this.length);

                if (r !== 0) {
                  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
                  this.words[this.length - 1] &= mask;
                }

                return this.strip();
              };

              // Return only lowers bits of number
              BN.prototype.maskn = function maskn (bits) {
                return this.clone().imaskn(bits);
              };

              // Add plain number `num` to `this`
              BN.prototype.iaddn = function iaddn (num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);
                if (num < 0) return this.isubn(-num);

                // Possible sign change
                if (this.negative !== 0) {
                  if (this.length === 1 && (this.words[0] | 0) < num) {
                    this.words[0] = num - (this.words[0] | 0);
                    this.negative = 0;
                    return this;
                  }

                  this.negative = 0;
                  this.isubn(num);
                  this.negative = 1;
                  return this;
                }

                // Add without checks
                return this._iaddn(num);
              };

              BN.prototype._iaddn = function _iaddn (num) {
                this.words[0] += num;

                // Carry
                for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
                  this.words[i] -= 0x4000000;
                  if (i === this.length - 1) {
                    this.words[i + 1] = 1;
                  } else {
                    this.words[i + 1]++;
                  }
                }
                this.length = Math.max(this.length, i + 1);

                return this;
              };

              // Subtract plain number `num` from `this`
              BN.prototype.isubn = function isubn (num) {
                assert(typeof num === 'number');
                assert(num < 0x4000000);
                if (num < 0) return this.iaddn(-num);

                if (this.negative !== 0) {
                  this.negative = 0;
                  this.iaddn(num);
                  this.negative = 1;
                  return this;
                }

                this.words[0] -= num;

                if (this.length === 1 && this.words[0] < 0) {
                  this.words[0] = -this.words[0];
                  this.negative = 1;
                } else {
                  // Carry
                  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
                    this.words[i] += 0x4000000;
                    this.words[i + 1] -= 1;
                  }
                }

                return this.strip();
              };

              BN.prototype.addn = function addn (num) {
                return this.clone().iaddn(num);
              };

              BN.prototype.subn = function subn (num) {
                return this.clone().isubn(num);
              };

              BN.prototype.iabs = function iabs () {
                this.negative = 0;

                return this;
              };

              BN.prototype.abs = function abs () {
                return this.clone().iabs();
              };

              BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
                var len = num.length + shift;
                var i;

                this._expand(len);

                var w;
                var carry = 0;
                for (i = 0; i < num.length; i++) {
                  w = (this.words[i + shift] | 0) + carry;
                  var right = (num.words[i] | 0) * mul;
                  w -= right & 0x3ffffff;
                  carry = (w >> 26) - ((right / 0x4000000) | 0);
                  this.words[i + shift] = w & 0x3ffffff;
                }
                for (; i < this.length - shift; i++) {
                  w = (this.words[i + shift] | 0) + carry;
                  carry = w >> 26;
                  this.words[i + shift] = w & 0x3ffffff;
                }

                if (carry === 0) return this.strip();

                // Subtraction overflow
                assert(carry === -1);
                carry = 0;
                for (i = 0; i < this.length; i++) {
                  w = -(this.words[i] | 0) + carry;
                  carry = w >> 26;
                  this.words[i] = w & 0x3ffffff;
                }
                this.negative = 1;

                return this.strip();
              };

              BN.prototype._wordDiv = function _wordDiv (num, mode) {
                var shift = this.length - num.length;

                var a = this.clone();
                var b = num;

                // Normalize
                var bhi = b.words[b.length - 1] | 0;
                var bhiBits = this._countBits(bhi);
                shift = 26 - bhiBits;
                if (shift !== 0) {
                  b = b.ushln(shift);
                  a.iushln(shift);
                  bhi = b.words[b.length - 1] | 0;
                }

                // Initialize quotient
                var m = a.length - b.length;
                var q;

                if (mode !== 'mod') {
                  q = new BN(null);
                  q.length = m + 1;
                  q.words = new Array(q.length);
                  for (var i = 0; i < q.length; i++) {
                    q.words[i] = 0;
                  }
                }

                var diff = a.clone()._ishlnsubmul(b, 1, m);
                if (diff.negative === 0) {
                  a = diff;
                  if (q) {
                    q.words[m] = 1;
                  }
                }

                for (var j = m - 1; j >= 0; j--) {
                  var qj = (a.words[b.length + j] | 0) * 0x4000000 +
                    (a.words[b.length + j - 1] | 0);

                  // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                  // (0x7ffffff)
                  qj = Math.min((qj / bhi) | 0, 0x3ffffff);

                  a._ishlnsubmul(b, qj, j);
                  while (a.negative !== 0) {
                    qj--;
                    a.negative = 0;
                    a._ishlnsubmul(b, 1, j);
                    if (!a.isZero()) {
                      a.negative ^= 1;
                    }
                  }
                  if (q) {
                    q.words[j] = qj;
                  }
                }
                if (q) {
                  q.strip();
                }
                a.strip();

                // Denormalize
                if (mode !== 'div' && shift !== 0) {
                  a.iushrn(shift);
                }

                return {
                  div: q || null,
                  mod: a
                };
              };

              // NOTE: 1) `mode` can be set to `mod` to request mod only,
              //       to `div` to request div only, or be absent to
              //       request both div & mod
              //       2) `positive` is true if unsigned mod is requested
              BN.prototype.divmod = function divmod (num, mode, positive) {
                assert(!num.isZero());

                if (this.isZero()) {
                  return {
                    div: new BN(0),
                    mod: new BN(0)
                  };
                }

                var div, mod, res;
                if (this.negative !== 0 && num.negative === 0) {
                  res = this.neg().divmod(num, mode);

                  if (mode !== 'mod') {
                    div = res.div.neg();
                  }

                  if (mode !== 'div') {
                    mod = res.mod.neg();
                    if (positive && mod.negative !== 0) {
                      mod.iadd(num);
                    }
                  }

                  return {
                    div: div,
                    mod: mod
                  };
                }

                if (this.negative === 0 && num.negative !== 0) {
                  res = this.divmod(num.neg(), mode);

                  if (mode !== 'mod') {
                    div = res.div.neg();
                  }

                  return {
                    div: div,
                    mod: res.mod
                  };
                }

                if ((this.negative & num.negative) !== 0) {
                  res = this.neg().divmod(num.neg(), mode);

                  if (mode !== 'div') {
                    mod = res.mod.neg();
                    if (positive && mod.negative !== 0) {
                      mod.isub(num);
                    }
                  }

                  return {
                    div: res.div,
                    mod: mod
                  };
                }

                // Both numbers are positive at this point

                // Strip both numbers to approximate shift value
                if (num.length > this.length || this.cmp(num) < 0) {
                  return {
                    div: new BN(0),
                    mod: this
                  };
                }

                // Very short reduction
                if (num.length === 1) {
                  if (mode === 'div') {
                    return {
                      div: this.divn(num.words[0]),
                      mod: null
                    };
                  }

                  if (mode === 'mod') {
                    return {
                      div: null,
                      mod: new BN(this.modn(num.words[0]))
                    };
                  }

                  return {
                    div: this.divn(num.words[0]),
                    mod: new BN(this.modn(num.words[0]))
                  };
                }

                return this._wordDiv(num, mode);
              };

              // Find `this` / `num`
              BN.prototype.div = function div (num) {
                return this.divmod(num, 'div', false).div;
              };

              // Find `this` % `num`
              BN.prototype.mod = function mod (num) {
                return this.divmod(num, 'mod', false).mod;
              };

              BN.prototype.umod = function umod (num) {
                return this.divmod(num, 'mod', true).mod;
              };

              // Find Round(`this` / `num`)
              BN.prototype.divRound = function divRound (num) {
                var dm = this.divmod(num);

                // Fast case - exact division
                if (dm.mod.isZero()) return dm.div;

                var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

                var half = num.ushrn(1);
                var r2 = num.andln(1);
                var cmp = mod.cmp(half);

                // Round down
                if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

                // Round up
                return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
              };

              BN.prototype.modn = function modn (num) {
                assert(num <= 0x3ffffff);
                var p = (1 << 26) % num;

                var acc = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                  acc = (p * acc + (this.words[i] | 0)) % num;
                }

                return acc;
              };

              // In-place division by number
              BN.prototype.idivn = function idivn (num) {
                assert(num <= 0x3ffffff);

                var carry = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                  var w = (this.words[i] | 0) + carry * 0x4000000;
                  this.words[i] = (w / num) | 0;
                  carry = w % num;
                }

                return this.strip();
              };

              BN.prototype.divn = function divn (num) {
                return this.clone().idivn(num);
              };

              BN.prototype.egcd = function egcd (p) {
                assert(p.negative === 0);
                assert(!p.isZero());

                var x = this;
                var y = p.clone();

                if (x.negative !== 0) {
                  x = x.umod(p);
                } else {
                  x = x.clone();
                }

                // A * x + B * y = x
                var A = new BN(1);
                var B = new BN(0);

                // C * x + D * y = y
                var C = new BN(0);
                var D = new BN(1);

                var g = 0;

                while (x.isEven() && y.isEven()) {
                  x.iushrn(1);
                  y.iushrn(1);
                  ++g;
                }

                var yp = y.clone();
                var xp = x.clone();

                while (!x.isZero()) {
                  for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                  if (i > 0) {
                    x.iushrn(i);
                    while (i-- > 0) {
                      if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                      }

                      A.iushrn(1);
                      B.iushrn(1);
                    }
                  }

                  for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                  if (j > 0) {
                    y.iushrn(j);
                    while (j-- > 0) {
                      if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                      }

                      C.iushrn(1);
                      D.iushrn(1);
                    }
                  }

                  if (x.cmp(y) >= 0) {
                    x.isub(y);
                    A.isub(C);
                    B.isub(D);
                  } else {
                    y.isub(x);
                    C.isub(A);
                    D.isub(B);
                  }
                }

                return {
                  a: C,
                  b: D,
                  gcd: y.iushln(g)
                };
              };

              // This is reduced incarnation of the binary EEA
              // above, designated to invert members of the
              // _prime_ fields F(p) at a maximal speed
              BN.prototype._invmp = function _invmp (p) {
                assert(p.negative === 0);
                assert(!p.isZero());

                var a = this;
                var b = p.clone();

                if (a.negative !== 0) {
                  a = a.umod(p);
                } else {
                  a = a.clone();
                }

                var x1 = new BN(1);
                var x2 = new BN(0);

                var delta = b.clone();

                while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
                  for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                  if (i > 0) {
                    a.iushrn(i);
                    while (i-- > 0) {
                      if (x1.isOdd()) {
                        x1.iadd(delta);
                      }

                      x1.iushrn(1);
                    }
                  }

                  for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                  if (j > 0) {
                    b.iushrn(j);
                    while (j-- > 0) {
                      if (x2.isOdd()) {
                        x2.iadd(delta);
                      }

                      x2.iushrn(1);
                    }
                  }

                  if (a.cmp(b) >= 0) {
                    a.isub(b);
                    x1.isub(x2);
                  } else {
                    b.isub(a);
                    x2.isub(x1);
                  }
                }

                var res;
                if (a.cmpn(1) === 0) {
                  res = x1;
                } else {
                  res = x2;
                }

                if (res.cmpn(0) < 0) {
                  res.iadd(p);
                }

                return res;
              };

              BN.prototype.gcd = function gcd (num) {
                if (this.isZero()) return num.abs();
                if (num.isZero()) return this.abs();

                var a = this.clone();
                var b = num.clone();
                a.negative = 0;
                b.negative = 0;

                // Remove common factor of two
                for (var shift = 0; a.isEven() && b.isEven(); shift++) {
                  a.iushrn(1);
                  b.iushrn(1);
                }

                do {
                  while (a.isEven()) {
                    a.iushrn(1);
                  }
                  while (b.isEven()) {
                    b.iushrn(1);
                  }

                  var r = a.cmp(b);
                  if (r < 0) {
                    // Swap `a` and `b` to make `a` always bigger than `b`
                    var t = a;
                    a = b;
                    b = t;
                  } else if (r === 0 || b.cmpn(1) === 0) {
                    break;
                  }

                  a.isub(b);
                } while (true);

                return b.iushln(shift);
              };

              // Invert number in the field F(num)
              BN.prototype.invm = function invm (num) {
                return this.egcd(num).a.umod(num);
              };

              BN.prototype.isEven = function isEven () {
                return (this.words[0] & 1) === 0;
              };

              BN.prototype.isOdd = function isOdd () {
                return (this.words[0] & 1) === 1;
              };

              // And first word and num
              BN.prototype.andln = function andln (num) {
                return this.words[0] & num;
              };

              // Increment at the bit position in-line
              BN.prototype.bincn = function bincn (bit) {
                assert(typeof bit === 'number');
                var r = bit % 26;
                var s = (bit - r) / 26;
                var q = 1 << r;

                // Fast case: bit is much higher than all existing words
                if (this.length <= s) {
                  this._expand(s + 1);
                  this.words[s] |= q;
                  return this;
                }

                // Add bit and propagate, if needed
                var carry = q;
                for (var i = s; carry !== 0 && i < this.length; i++) {
                  var w = this.words[i] | 0;
                  w += carry;
                  carry = w >>> 26;
                  w &= 0x3ffffff;
                  this.words[i] = w;
                }
                if (carry !== 0) {
                  this.words[i] = carry;
                  this.length++;
                }
                return this;
              };

              BN.prototype.isZero = function isZero () {
                return this.length === 1 && this.words[0] === 0;
              };

              BN.prototype.cmpn = function cmpn (num) {
                var negative = num < 0;

                if (this.negative !== 0 && !negative) return -1;
                if (this.negative === 0 && negative) return 1;

                this.strip();

                var res;
                if (this.length > 1) {
                  res = 1;
                } else {
                  if (negative) {
                    num = -num;
                  }

                  assert(num <= 0x3ffffff, 'Number is too big');

                  var w = this.words[0] | 0;
                  res = w === num ? 0 : w < num ? -1 : 1;
                }
                if (this.negative !== 0) return -res | 0;
                return res;
              };

              // Compare two numbers and return:
              // 1 - if `this` > `num`
              // 0 - if `this` == `num`
              // -1 - if `this` < `num`
              BN.prototype.cmp = function cmp (num) {
                if (this.negative !== 0 && num.negative === 0) return -1;
                if (this.negative === 0 && num.negative !== 0) return 1;

                var res = this.ucmp(num);
                if (this.negative !== 0) return -res | 0;
                return res;
              };

              // Unsigned comparison
              BN.prototype.ucmp = function ucmp (num) {
                // At this point both numbers have the same sign
                if (this.length > num.length) return 1;
                if (this.length < num.length) return -1;

                var res = 0;
                for (var i = this.length - 1; i >= 0; i--) {
                  var a = this.words[i] | 0;
                  var b = num.words[i] | 0;

                  if (a === b) continue;
                  if (a < b) {
                    res = -1;
                  } else if (a > b) {
                    res = 1;
                  }
                  break;
                }
                return res;
              };

              BN.prototype.gtn = function gtn (num) {
                return this.cmpn(num) === 1;
              };

              BN.prototype.gt = function gt (num) {
                return this.cmp(num) === 1;
              };

              BN.prototype.gten = function gten (num) {
                return this.cmpn(num) >= 0;
              };

              BN.prototype.gte = function gte (num) {
                return this.cmp(num) >= 0;
              };

              BN.prototype.ltn = function ltn (num) {
                return this.cmpn(num) === -1;
              };

              BN.prototype.lt = function lt (num) {
                return this.cmp(num) === -1;
              };

              BN.prototype.lten = function lten (num) {
                return this.cmpn(num) <= 0;
              };

              BN.prototype.lte = function lte (num) {
                return this.cmp(num) <= 0;
              };

              BN.prototype.eqn = function eqn (num) {
                return this.cmpn(num) === 0;
              };

              BN.prototype.eq = function eq (num) {
                return this.cmp(num) === 0;
              };

              //
              // A reduce context, could be using montgomery or something better, depending
              // on the `m` itself.
              //
              BN.red = function red (num) {
                return new Red(num);
              };

              BN.prototype.toRed = function toRed (ctx) {
                assert(!this.red, 'Already a number in reduction context');
                assert(this.negative === 0, 'red works only with positives');
                return ctx.convertTo(this)._forceRed(ctx);
              };

              BN.prototype.fromRed = function fromRed () {
                assert(this.red, 'fromRed works only with numbers in reduction context');
                return this.red.convertFrom(this);
              };

              BN.prototype._forceRed = function _forceRed (ctx) {
                this.red = ctx;
                return this;
              };

              BN.prototype.forceRed = function forceRed (ctx) {
                assert(!this.red, 'Already a number in reduction context');
                return this._forceRed(ctx);
              };

              BN.prototype.redAdd = function redAdd (num) {
                assert(this.red, 'redAdd works only with red numbers');
                return this.red.add(this, num);
              };

              BN.prototype.redIAdd = function redIAdd (num) {
                assert(this.red, 'redIAdd works only with red numbers');
                return this.red.iadd(this, num);
              };

              BN.prototype.redSub = function redSub (num) {
                assert(this.red, 'redSub works only with red numbers');
                return this.red.sub(this, num);
              };

              BN.prototype.redISub = function redISub (num) {
                assert(this.red, 'redISub works only with red numbers');
                return this.red.isub(this, num);
              };

              BN.prototype.redShl = function redShl (num) {
                assert(this.red, 'redShl works only with red numbers');
                return this.red.shl(this, num);
              };

              BN.prototype.redMul = function redMul (num) {
                assert(this.red, 'redMul works only with red numbers');
                this.red._verify2(this, num);
                return this.red.mul(this, num);
              };

              BN.prototype.redIMul = function redIMul (num) {
                assert(this.red, 'redMul works only with red numbers');
                this.red._verify2(this, num);
                return this.red.imul(this, num);
              };

              BN.prototype.redSqr = function redSqr () {
                assert(this.red, 'redSqr works only with red numbers');
                this.red._verify1(this);
                return this.red.sqr(this);
              };

              BN.prototype.redISqr = function redISqr () {
                assert(this.red, 'redISqr works only with red numbers');
                this.red._verify1(this);
                return this.red.isqr(this);
              };

              // Square root over p
              BN.prototype.redSqrt = function redSqrt () {
                assert(this.red, 'redSqrt works only with red numbers');
                this.red._verify1(this);
                return this.red.sqrt(this);
              };

              BN.prototype.redInvm = function redInvm () {
                assert(this.red, 'redInvm works only with red numbers');
                this.red._verify1(this);
                return this.red.invm(this);
              };

              // Return negative clone of `this` % `red modulo`
              BN.prototype.redNeg = function redNeg () {
                assert(this.red, 'redNeg works only with red numbers');
                this.red._verify1(this);
                return this.red.neg(this);
              };

              BN.prototype.redPow = function redPow (num) {
                assert(this.red && !num.red, 'redPow(normalNum)');
                this.red._verify1(this);
                return this.red.pow(this, num);
              };

              // Prime numbers with efficient reduction
              var primes = {
                k256: null,
                p224: null,
                p192: null,
                p25519: null
              };

              // Pseudo-Mersenne prime
              function MPrime (name, p) {
                // P = 2 ^ N - K
                this.name = name;
                this.p = new BN(p, 16);
                this.n = this.p.bitLength();
                this.k = new BN(1).iushln(this.n).isub(this.p);

                this.tmp = this._tmp();
              }

              MPrime.prototype._tmp = function _tmp () {
                var tmp = new BN(null);
                tmp.words = new Array(Math.ceil(this.n / 13));
                return tmp;
              };

              MPrime.prototype.ireduce = function ireduce (num) {
                // Assumes that `num` is less than `P^2`
                // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                var r = num;
                var rlen;

                do {
                  this.split(r, this.tmp);
                  r = this.imulK(r);
                  r = r.iadd(this.tmp);
                  rlen = r.bitLength();
                } while (rlen > this.n);

                var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                if (cmp === 0) {
                  r.words[0] = 0;
                  r.length = 1;
                } else if (cmp > 0) {
                  r.isub(this.p);
                } else {
                  if (r.strip !== undefined) {
                    // r is BN v4 instance
                    r.strip();
                  } else {
                    // r is BN v5 instance
                    r._strip();
                  }
                }

                return r;
              };

              MPrime.prototype.split = function split (input, out) {
                input.iushrn(this.n, 0, out);
              };

              MPrime.prototype.imulK = function imulK (num) {
                return num.imul(this.k);
              };

              function K256 () {
                MPrime.call(
                  this,
                  'k256',
                  'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
              }
              inherits(K256, MPrime);

              K256.prototype.split = function split (input, output) {
                // 256 = 9 * 26 + 22
                var mask = 0x3fffff;

                var outLen = Math.min(input.length, 9);
                for (var i = 0; i < outLen; i++) {
                  output.words[i] = input.words[i];
                }
                output.length = outLen;

                if (input.length <= 9) {
                  input.words[0] = 0;
                  input.length = 1;
                  return;
                }

                // Shift by 9 limbs
                var prev = input.words[9];
                output.words[output.length++] = prev & mask;

                for (i = 10; i < input.length; i++) {
                  var next = input.words[i] | 0;
                  input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
                  prev = next;
                }
                prev >>>= 22;
                input.words[i - 10] = prev;
                if (prev === 0 && input.length > 10) {
                  input.length -= 10;
                } else {
                  input.length -= 9;
                }
              };

              K256.prototype.imulK = function imulK (num) {
                // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                num.words[num.length] = 0;
                num.words[num.length + 1] = 0;
                num.length += 2;

                // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                var lo = 0;
                for (var i = 0; i < num.length; i++) {
                  var w = num.words[i] | 0;
                  lo += w * 0x3d1;
                  num.words[i] = lo & 0x3ffffff;
                  lo = w * 0x40 + ((lo / 0x4000000) | 0);
                }

                // Fast length reduction
                if (num.words[num.length - 1] === 0) {
                  num.length--;
                  if (num.words[num.length - 1] === 0) {
                    num.length--;
                  }
                }
                return num;
              };

              function P224 () {
                MPrime.call(
                  this,
                  'p224',
                  'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
              }
              inherits(P224, MPrime);

              function P192 () {
                MPrime.call(
                  this,
                  'p192',
                  'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
              }
              inherits(P192, MPrime);

              function P25519 () {
                // 2 ^ 255 - 19
                MPrime.call(
                  this,
                  '25519',
                  '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
              }
              inherits(P25519, MPrime);

              P25519.prototype.imulK = function imulK (num) {
                // K = 0x13
                var carry = 0;
                for (var i = 0; i < num.length; i++) {
                  var hi = (num.words[i] | 0) * 0x13 + carry;
                  var lo = hi & 0x3ffffff;
                  hi >>>= 26;

                  num.words[i] = lo;
                  carry = hi;
                }
                if (carry !== 0) {
                  num.words[num.length++] = carry;
                }
                return num;
              };

              // Exported mostly for testing purposes, use plain name instead
              BN._prime = function prime (name) {
                // Cached version of prime
                if (primes[name]) return primes[name];

                var prime;
                if (name === 'k256') {
                  prime = new K256();
                } else if (name === 'p224') {
                  prime = new P224();
                } else if (name === 'p192') {
                  prime = new P192();
                } else if (name === 'p25519') {
                  prime = new P25519();
                } else {
                  throw new Error('Unknown prime ' + name);
                }
                primes[name] = prime;

                return prime;
              };

              //
              // Base reduction engine
              //
              function Red (m) {
                if (typeof m === 'string') {
                  var prime = BN._prime(m);
                  this.m = prime.p;
                  this.prime = prime;
                } else {
                  assert(m.gtn(1), 'modulus must be greater than 1');
                  this.m = m;
                  this.prime = null;
                }
              }

              Red.prototype._verify1 = function _verify1 (a) {
                assert(a.negative === 0, 'red works only with positives');
                assert(a.red, 'red works only with red numbers');
              };

              Red.prototype._verify2 = function _verify2 (a, b) {
                assert((a.negative | b.negative) === 0, 'red works only with positives');
                assert(a.red && a.red === b.red,
                  'red works only with red numbers');
              };

              Red.prototype.imod = function imod (a) {
                if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                return a.umod(this.m)._forceRed(this);
              };

              Red.prototype.neg = function neg (a) {
                if (a.isZero()) {
                  return a.clone();
                }

                return this.m.sub(a)._forceRed(this);
              };

              Red.prototype.add = function add (a, b) {
                this._verify2(a, b);

                var res = a.add(b);
                if (res.cmp(this.m) >= 0) {
                  res.isub(this.m);
                }
                return res._forceRed(this);
              };

              Red.prototype.iadd = function iadd (a, b) {
                this._verify2(a, b);

                var res = a.iadd(b);
                if (res.cmp(this.m) >= 0) {
                  res.isub(this.m);
                }
                return res;
              };

              Red.prototype.sub = function sub (a, b) {
                this._verify2(a, b);

                var res = a.sub(b);
                if (res.cmpn(0) < 0) {
                  res.iadd(this.m);
                }
                return res._forceRed(this);
              };

              Red.prototype.isub = function isub (a, b) {
                this._verify2(a, b);

                var res = a.isub(b);
                if (res.cmpn(0) < 0) {
                  res.iadd(this.m);
                }
                return res;
              };

              Red.prototype.shl = function shl (a, num) {
                this._verify1(a);
                return this.imod(a.ushln(num));
              };

              Red.prototype.imul = function imul (a, b) {
                this._verify2(a, b);
                return this.imod(a.imul(b));
              };

              Red.prototype.mul = function mul (a, b) {
                this._verify2(a, b);
                return this.imod(a.mul(b));
              };

              Red.prototype.isqr = function isqr (a) {
                return this.imul(a, a.clone());
              };

              Red.prototype.sqr = function sqr (a) {
                return this.mul(a, a);
              };

              Red.prototype.sqrt = function sqrt (a) {
                if (a.isZero()) return a.clone();

                var mod3 = this.m.andln(3);
                assert(mod3 % 2 === 1);

                // Fast case
                if (mod3 === 3) {
                  var pow = this.m.add(new BN(1)).iushrn(2);
                  return this.pow(a, pow);
                }

                // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                //
                // Find Q and S, that Q * 2 ^ S = (P - 1)
                var q = this.m.subn(1);
                var s = 0;
                while (!q.isZero() && q.andln(1) === 0) {
                  s++;
                  q.iushrn(1);
                }
                assert(!q.isZero());

                var one = new BN(1).toRed(this);
                var nOne = one.redNeg();

                // Find quadratic non-residue
                // NOTE: Max is such because of generalized Riemann hypothesis.
                var lpow = this.m.subn(1).iushrn(1);
                var z = this.m.bitLength();
                z = new BN(2 * z * z).toRed(this);

                while (this.pow(z, lpow).cmp(nOne) !== 0) {
                  z.redIAdd(nOne);
                }

                var c = this.pow(z, q);
                var r = this.pow(a, q.addn(1).iushrn(1));
                var t = this.pow(a, q);
                var m = s;
                while (t.cmp(one) !== 0) {
                  var tmp = t;
                  for (var i = 0; tmp.cmp(one) !== 0; i++) {
                    tmp = tmp.redSqr();
                  }
                  assert(i < m);
                  var b = this.pow(c, new BN(1).iushln(m - i - 1));

                  r = r.redMul(b);
                  c = b.redSqr();
                  t = t.redMul(c);
                  m = i;
                }

                return r;
              };

              Red.prototype.invm = function invm (a) {
                var inv = a._invmp(this.m);
                if (inv.negative !== 0) {
                  inv.negative = 0;
                  return this.imod(inv).redNeg();
                } else {
                  return this.imod(inv);
                }
              };

              Red.prototype.pow = function pow (a, num) {
                if (num.isZero()) return new BN(1).toRed(this);
                if (num.cmpn(1) === 0) return a.clone();

                var windowSize = 4;
                var wnd = new Array(1 << windowSize);
                wnd[0] = new BN(1).toRed(this);
                wnd[1] = a;
                for (var i = 2; i < wnd.length; i++) {
                  wnd[i] = this.mul(wnd[i - 1], a);
                }

                var res = wnd[0];
                var current = 0;
                var currentLen = 0;
                var start = num.bitLength() % 26;
                if (start === 0) {
                  start = 26;
                }

                for (i = num.length - 1; i >= 0; i--) {
                  var word = num.words[i];
                  for (var j = start - 1; j >= 0; j--) {
                    var bit = (word >> j) & 1;
                    if (res !== wnd[0]) {
                      res = this.sqr(res);
                    }

                    if (bit === 0 && current === 0) {
                      currentLen = 0;
                      continue;
                    }

                    current <<= 1;
                    current |= bit;
                    currentLen++;
                    if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

                    res = this.mul(res, wnd[current]);
                    currentLen = 0;
                    current = 0;
                  }
                  start = 26;
                }

                return res;
              };

              Red.prototype.convertTo = function convertTo (num) {
                var r = num.umod(this.m);

                return r === num ? r.clone() : r;
              };

              Red.prototype.convertFrom = function convertFrom (num) {
                var res = num.clone();
                res.red = null;
                return res;
              };

              //
              // Montgomery method engine
              //

              BN.mont = function mont (num) {
                return new Mont(num);
              };

              function Mont (m) {
                Red.call(this, m);

                this.shift = this.m.bitLength();
                if (this.shift % 26 !== 0) {
                  this.shift += 26 - (this.shift % 26);
                }

                this.r = new BN(1).iushln(this.shift);
                this.r2 = this.imod(this.r.sqr());
                this.rinv = this.r._invmp(this.m);

                this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                this.minv = this.minv.umod(this.r);
                this.minv = this.r.sub(this.minv);
              }
              inherits(Mont, Red);

              Mont.prototype.convertTo = function convertTo (num) {
                return this.imod(num.ushln(this.shift));
              };

              Mont.prototype.convertFrom = function convertFrom (num) {
                var r = this.imod(num.mul(this.rinv));
                r.red = null;
                return r;
              };

              Mont.prototype.imul = function imul (a, b) {
                if (a.isZero() || b.isZero()) {
                  a.words[0] = 0;
                  a.length = 1;
                  return a;
                }

                var t = a.imul(b);
                var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t.isub(c).iushrn(this.shift);
                var res = u;

                if (u.cmp(this.m) >= 0) {
                  res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                  res = u.iadd(this.m);
                }

                return res._forceRed(this);
              };

              Mont.prototype.mul = function mul (a, b) {
                if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

                var t = a.mul(b);
                var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                var u = t.isub(c).iushrn(this.shift);
                var res = u;
                if (u.cmp(this.m) >= 0) {
                  res = u.isub(this.m);
                } else if (u.cmpn(0) < 0) {
                  res = u.iadd(this.m);
                }

                return res._forceRed(this);
              };

              Mont.prototype.invm = function invm (a) {
                // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                var res = this.imod(a._invmp(this.m).mul(this.r2));
                return res._forceRed(this);
              };
            })(module, commonjsGlobal);
            }(bn));

            var BN$1 = bn.exports;

            const version$p = "logger/5.5.0";

            let _permanentCensorErrors = false;
            let _censorErrors = false;
            const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
            let _logLevel = LogLevels["default"];
            let _globalLogger = null;
            function _checkNormalize() {
                try {
                    const missing = [];
                    // Make sure all forms of normalization are supported
                    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                        try {
                            if ("test".normalize(form) !== "test") {
                                throw new Error("bad normalize");
                            }
                            ;
                        }
                        catch (error) {
                            missing.push(form);
                        }
                    });
                    if (missing.length) {
                        throw new Error("missing " + missing.join(", "));
                    }
                    if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                        throw new Error("broken implementation");
                    }
                }
                catch (error) {
                    return error.message;
                }
                return null;
            }
            const _normalizeError = _checkNormalize();
            var LogLevel;
            (function (LogLevel) {
                LogLevel["DEBUG"] = "DEBUG";
                LogLevel["INFO"] = "INFO";
                LogLevel["WARNING"] = "WARNING";
                LogLevel["ERROR"] = "ERROR";
                LogLevel["OFF"] = "OFF";
            })(LogLevel || (LogLevel = {}));
            var ErrorCode;
            (function (ErrorCode) {
                ///////////////////
                // Generic Errors
                // Unknown Error
                ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
                // Not Implemented
                ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
                // Unsupported Operation
                //   - operation
                ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
                // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
                //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
                ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
                // Some sort of bad response from the server
                ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
                // Timeout
                ErrorCode["TIMEOUT"] = "TIMEOUT";
                ///////////////////
                // Operational  Errors
                // Buffer Overrun
                ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
                // Numeric Fault
                //   - operation: the operation being executed
                //   - fault: the reason this faulted
                ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
                ///////////////////
                // Argument Errors
                // Missing new operator to an object
                //  - name: The name of the class
                ErrorCode["MISSING_NEW"] = "MISSING_NEW";
                // Invalid argument (e.g. value is incompatible with type) to a function:
                //   - argument: The argument name that was invalid
                //   - value: The value of the argument
                ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
                // Missing argument to a function:
                //   - count: The number of arguments received
                //   - expectedCount: The number of arguments expected
                ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
                // Too many arguments
                //   - count: The number of arguments received
                //   - expectedCount: The number of arguments expected
                ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
                ///////////////////
                // Blockchain Errors
                // Call exception
                //  - transaction: the transaction
                //  - address?: the contract address
                //  - args?: The arguments passed into the function
                //  - method?: The Solidity method signature
                //  - errorSignature?: The EIP848 error signature
                //  - errorArgs?: The EIP848 error parameters
                //  - reason: The reason (only for EIP848 "Error(string)")
                ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
                // Insufficient funds (< value + gasLimit * gasPrice)
                //   - transaction: the transaction attempted
                ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
                // Nonce has already been used
                //   - transaction: the transaction attempted
                ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
                // The replacement fee for the transaction is too low
                //   - transaction: the transaction attempted
                ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
                // The gas limit could not be estimated
                //   - transaction: the transaction passed to estimateGas
                ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
                // The transaction was replaced by one with a higher gas price
                //   - reason: "cancelled", "replaced" or "repriced"
                //   - cancelled: true if reason == "cancelled" or reason == "replaced")
                //   - hash: original transaction hash
                //   - replacement: the full TransactionsResponse for the replacement
                //   - receipt: the receipt of the replacement
                ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
            })(ErrorCode || (ErrorCode = {}));
            const HEX = "0123456789abcdef";
            class Logger {
                constructor(version) {
                    Object.defineProperty(this, "version", {
                        enumerable: true,
                        value: version,
                        writable: false
                    });
                }
                _log(logLevel, args) {
                    const level = logLevel.toLowerCase();
                    if (LogLevels[level] == null) {
                        this.throwArgumentError("invalid log level name", "logLevel", logLevel);
                    }
                    if (_logLevel > LogLevels[level]) {
                        return;
                    }
                    console.log.apply(console, args);
                }
                debug(...args) {
                    this._log(Logger.levels.DEBUG, args);
                }
                info(...args) {
                    this._log(Logger.levels.INFO, args);
                }
                warn(...args) {
                    this._log(Logger.levels.WARNING, args);
                }
                makeError(message, code, params) {
                    // Errors are being censored
                    if (_censorErrors) {
                        return this.makeError("censored error", code, {});
                    }
                    if (!code) {
                        code = Logger.errors.UNKNOWN_ERROR;
                    }
                    if (!params) {
                        params = {};
                    }
                    const messageDetails = [];
                    Object.keys(params).forEach((key) => {
                        const value = params[key];
                        try {
                            if (value instanceof Uint8Array) {
                                let hex = "";
                                for (let i = 0; i < value.length; i++) {
                                    hex += HEX[value[i] >> 4];
                                    hex += HEX[value[i] & 0x0f];
                                }
                                messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                            }
                            else {
                                messageDetails.push(key + "=" + JSON.stringify(value));
                            }
                        }
                        catch (error) {
                            messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                        }
                    });
                    messageDetails.push(`code=${code}`);
                    messageDetails.push(`version=${this.version}`);
                    const reason = message;
                    if (messageDetails.length) {
                        message += " (" + messageDetails.join(", ") + ")";
                    }
                    // @TODO: Any??
                    const error = new Error(message);
                    error.reason = reason;
                    error.code = code;
                    Object.keys(params).forEach(function (key) {
                        error[key] = params[key];
                    });
                    return error;
                }
                throwError(message, code, params) {
                    throw this.makeError(message, code, params);
                }
                throwArgumentError(message, name, value) {
                    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                        argument: name,
                        value: value
                    });
                }
                assert(condition, message, code, params) {
                    if (!!condition) {
                        return;
                    }
                    this.throwError(message, code, params);
                }
                assertArgument(condition, message, name, value) {
                    if (!!condition) {
                        return;
                    }
                    this.throwArgumentError(message, name, value);
                }
                checkNormalize(message) {
                    if (_normalizeError) {
                        this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "String.prototype.normalize", form: _normalizeError
                        });
                    }
                }
                checkSafeUint53(value, message) {
                    if (typeof (value) !== "number") {
                        return;
                    }
                    if (message == null) {
                        message = "value not safe";
                    }
                    if (value < 0 || value >= 0x1fffffffffffff) {
                        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                            operation: "checkSafeInteger",
                            fault: "out-of-safe-range",
                            value: value
                        });
                    }
                    if (value % 1) {
                        this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                            operation: "checkSafeInteger",
                            fault: "non-integer",
                            value: value
                        });
                    }
                }
                checkArgumentCount(count, expectedCount, message) {
                    if (message) {
                        message = ": " + message;
                    }
                    else {
                        message = "";
                    }
                    if (count < expectedCount) {
                        this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                            count: count,
                            expectedCount: expectedCount
                        });
                    }
                    if (count > expectedCount) {
                        this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                            count: count,
                            expectedCount: expectedCount
                        });
                    }
                }
                checkNew(target, kind) {
                    if (target === Object || target == null) {
                        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
                    }
                }
                checkAbstract(target, kind) {
                    if (target === kind) {
                        this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
                    }
                    else if (target === Object || target == null) {
                        this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
                    }
                }
                static globalLogger() {
                    if (!_globalLogger) {
                        _globalLogger = new Logger(version$p);
                    }
                    return _globalLogger;
                }
                static setCensorship(censorship, permanent) {
                    if (!censorship && permanent) {
                        this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "setCensorship"
                        });
                    }
                    if (_permanentCensorErrors) {
                        if (!censorship) {
                            return;
                        }
                        this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "setCensorship"
                        });
                    }
                    _censorErrors = !!censorship;
                    _permanentCensorErrors = !!permanent;
                }
                static setLogLevel(logLevel) {
                    const level = LogLevels[logLevel.toLowerCase()];
                    if (level == null) {
                        Logger.globalLogger().warn("invalid log level - " + logLevel);
                        return;
                    }
                    _logLevel = level;
                }
                static from(version) {
                    return new Logger(version);
                }
            }
            Logger.errors = ErrorCode;
            Logger.levels = LogLevel;

            var lib_esm$k = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        get LogLevel () { return LogLevel; },
                        get ErrorCode () { return ErrorCode; },
                        Logger: Logger
            });

            const version$o = "bytes/5.5.0";

            const logger$x = new Logger(version$o);
            ///////////////////////////////
            function isHexable(value) {
                return !!(value.toHexString);
            }
            function addSlice(array) {
                if (array.slice) {
                    return array;
                }
                array.slice = function () {
                    const args = Array.prototype.slice.call(arguments);
                    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
                };
                return array;
            }
            function isBytesLike(value) {
                return ((isHexString(value) && !(value.length % 2)) || isBytes(value));
            }
            function isInteger(value) {
                return (typeof (value) === "number" && value == value && (value % 1) === 0);
            }
            function isBytes(value) {
                if (value == null) {
                    return false;
                }
                if (value.constructor === Uint8Array) {
                    return true;
                }
                if (typeof (value) === "string") {
                    return false;
                }
                if (!isInteger(value.length) || value.length < 0) {
                    return false;
                }
                for (let i = 0; i < value.length; i++) {
                    const v = value[i];
                    if (!isInteger(v) || v < 0 || v >= 256) {
                        return false;
                    }
                }
                return true;
            }
            function arrayify(value, options) {
                if (!options) {
                    options = {};
                }
                if (typeof (value) === "number") {
                    logger$x.checkSafeUint53(value, "invalid arrayify value");
                    const result = [];
                    while (value) {
                        result.unshift(value & 0xff);
                        value = parseInt(String(value / 256));
                    }
                    if (result.length === 0) {
                        result.push(0);
                    }
                    return addSlice(new Uint8Array(result));
                }
                if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if (isHexable(value)) {
                    value = value.toHexString();
                }
                if (isHexString(value)) {
                    let hex = value.substring(2);
                    if (hex.length % 2) {
                        if (options.hexPad === "left") {
                            hex = "0x0" + hex.substring(2);
                        }
                        else if (options.hexPad === "right") {
                            hex += "0";
                        }
                        else {
                            logger$x.throwArgumentError("hex data is odd-length", "value", value);
                        }
                    }
                    const result = [];
                    for (let i = 0; i < hex.length; i += 2) {
                        result.push(parseInt(hex.substring(i, i + 2), 16));
                    }
                    return addSlice(new Uint8Array(result));
                }
                if (isBytes(value)) {
                    return addSlice(new Uint8Array(value));
                }
                return logger$x.throwArgumentError("invalid arrayify value", "value", value);
            }
            function concat$3(items) {
                const objects = items.map(item => arrayify(item));
                const length = objects.reduce((accum, item) => (accum + item.length), 0);
                const result = new Uint8Array(length);
                objects.reduce((offset, object) => {
                    result.set(object, offset);
                    return offset + object.length;
                }, 0);
                return addSlice(result);
            }
            function stripZeros(value) {
                let result = arrayify(value);
                if (result.length === 0) {
                    return result;
                }
                // Find the first non-zero entry
                let start = 0;
                while (start < result.length && result[start] === 0) {
                    start++;
                }
                // If we started with zeros, strip them
                if (start) {
                    result = result.slice(start);
                }
                return result;
            }
            function zeroPad(value, length) {
                value = arrayify(value);
                if (value.length > length) {
                    logger$x.throwArgumentError("value out of range", "value", arguments[0]);
                }
                const result = new Uint8Array(length);
                result.set(value, length - value.length);
                return addSlice(result);
            }
            function isHexString(value, length) {
                if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
                    return false;
                }
                if (length && value.length !== 2 + 2 * length) {
                    return false;
                }
                return true;
            }
            const HexCharacters = "0123456789abcdef";
            function hexlify(value, options) {
                if (!options) {
                    options = {};
                }
                if (typeof (value) === "number") {
                    logger$x.checkSafeUint53(value, "invalid hexlify value");
                    let hex = "";
                    while (value) {
                        hex = HexCharacters[value & 0xf] + hex;
                        value = Math.floor(value / 16);
                    }
                    if (hex.length) {
                        if (hex.length % 2) {
                            hex = "0" + hex;
                        }
                        return "0x" + hex;
                    }
                    return "0x00";
                }
                if (typeof (value) === "bigint") {
                    value = value.toString(16);
                    if (value.length % 2) {
                        return ("0x0" + value);
                    }
                    return "0x" + value;
                }
                if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if (isHexable(value)) {
                    return value.toHexString();
                }
                if (isHexString(value)) {
                    if (value.length % 2) {
                        if (options.hexPad === "left") {
                            value = "0x0" + value.substring(2);
                        }
                        else if (options.hexPad === "right") {
                            value += "0";
                        }
                        else {
                            logger$x.throwArgumentError("hex data is odd-length", "value", value);
                        }
                    }
                    return value.toLowerCase();
                }
                if (isBytes(value)) {
                    let result = "0x";
                    for (let i = 0; i < value.length; i++) {
                        let v = value[i];
                        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
                    }
                    return result;
                }
                return logger$x.throwArgumentError("invalid hexlify value", "value", value);
            }
            /*
            function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
                if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
                    return "0x0" + value.substring(2);
                }
                return value;
            }
            */
            function hexDataLength(data) {
                if (typeof (data) !== "string") {
                    data = hexlify(data);
                }
                else if (!isHexString(data) || (data.length % 2)) {
                    return null;
                }
                return (data.length - 2) / 2;
            }
            function hexDataSlice(data, offset, endOffset) {
                if (typeof (data) !== "string") {
                    data = hexlify(data);
                }
                else if (!isHexString(data) || (data.length % 2)) {
                    logger$x.throwArgumentError("invalid hexData", "value", data);
                }
                offset = 2 + 2 * offset;
                if (endOffset != null) {
                    return "0x" + data.substring(offset, 2 + 2 * endOffset);
                }
                return "0x" + data.substring(offset);
            }
            function hexConcat(items) {
                let result = "0x";
                items.forEach((item) => {
                    result += hexlify(item).substring(2);
                });
                return result;
            }
            function hexValue(value) {
                const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
                if (trimmed === "0x") {
                    return "0x0";
                }
                return trimmed;
            }
            function hexStripZeros(value) {
                if (typeof (value) !== "string") {
                    value = hexlify(value);
                }
                if (!isHexString(value)) {
                    logger$x.throwArgumentError("invalid hex string", "value", value);
                }
                value = value.substring(2);
                let offset = 0;
                while (offset < value.length && value[offset] === "0") {
                    offset++;
                }
                return "0x" + value.substring(offset);
            }
            function hexZeroPad(value, length) {
                if (typeof (value) !== "string") {
                    value = hexlify(value);
                }
                else if (!isHexString(value)) {
                    logger$x.throwArgumentError("invalid hex string", "value", value);
                }
                if (value.length > 2 * length + 2) {
                    logger$x.throwArgumentError("value out of range", "value", arguments[1]);
                }
                while (value.length < 2 * length + 2) {
                    value = "0x0" + value.substring(2);
                }
                return value;
            }
            function splitSignature(signature) {
                const result = {
                    r: "0x",
                    s: "0x",
                    _vs: "0x",
                    recoveryParam: 0,
                    v: 0
                };
                if (isBytesLike(signature)) {
                    const bytes = arrayify(signature);
                    if (bytes.length !== 65) {
                        logger$x.throwArgumentError("invalid signature string; must be 65 bytes", "signature", signature);
                    }
                    // Get the r, s and v
                    result.r = hexlify(bytes.slice(0, 32));
                    result.s = hexlify(bytes.slice(32, 64));
                    result.v = bytes[64];
                    // Allow a recid to be used as the v
                    if (result.v < 27) {
                        if (result.v === 0 || result.v === 1) {
                            result.v += 27;
                        }
                        else {
                            logger$x.throwArgumentError("signature invalid v byte", "signature", signature);
                        }
                    }
                    // Compute recoveryParam from v
                    result.recoveryParam = 1 - (result.v % 2);
                    // Compute _vs from recoveryParam and s
                    if (result.recoveryParam) {
                        bytes[32] |= 0x80;
                    }
                    result._vs = hexlify(bytes.slice(32, 64));
                }
                else {
                    result.r = signature.r;
                    result.s = signature.s;
                    result.v = signature.v;
                    result.recoveryParam = signature.recoveryParam;
                    result._vs = signature._vs;
                    // If the _vs is available, use it to populate missing s, v and recoveryParam
                    // and verify non-missing s, v and recoveryParam
                    if (result._vs != null) {
                        const vs = zeroPad(arrayify(result._vs), 32);
                        result._vs = hexlify(vs);
                        // Set or check the recid
                        const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
                        if (result.recoveryParam == null) {
                            result.recoveryParam = recoveryParam;
                        }
                        else if (result.recoveryParam !== recoveryParam) {
                            logger$x.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                        }
                        // Set or check the s
                        vs[0] &= 0x7f;
                        const s = hexlify(vs);
                        if (result.s == null) {
                            result.s = s;
                        }
                        else if (result.s !== s) {
                            logger$x.throwArgumentError("signature v mismatch _vs", "signature", signature);
                        }
                    }
                    // Use recid and v to populate each other
                    if (result.recoveryParam == null) {
                        if (result.v == null) {
                            logger$x.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                        }
                        else if (result.v === 0 || result.v === 1) {
                            result.recoveryParam = result.v;
                        }
                        else {
                            result.recoveryParam = 1 - (result.v % 2);
                        }
                    }
                    else {
                        if (result.v == null) {
                            result.v = 27 + result.recoveryParam;
                        }
                        else {
                            const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                            if (result.recoveryParam !== recId) {
                                logger$x.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                            }
                        }
                    }
                    if (result.r == null || !isHexString(result.r)) {
                        logger$x.throwArgumentError("signature missing or invalid r", "signature", signature);
                    }
                    else {
                        result.r = hexZeroPad(result.r, 32);
                    }
                    if (result.s == null || !isHexString(result.s)) {
                        logger$x.throwArgumentError("signature missing or invalid s", "signature", signature);
                    }
                    else {
                        result.s = hexZeroPad(result.s, 32);
                    }
                    const vs = arrayify(result.s);
                    if (vs[0] >= 128) {
                        logger$x.throwArgumentError("signature s out of range", "signature", signature);
                    }
                    if (result.recoveryParam) {
                        vs[0] |= 0x80;
                    }
                    const _vs = hexlify(vs);
                    if (result._vs) {
                        if (!isHexString(result._vs)) {
                            logger$x.throwArgumentError("signature invalid _vs", "signature", signature);
                        }
                        result._vs = hexZeroPad(result._vs, 32);
                    }
                    // Set or check the _vs
                    if (result._vs == null) {
                        result._vs = _vs;
                    }
                    else if (result._vs !== _vs) {
                        logger$x.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
                    }
                }
                return result;
            }
            function joinSignature(signature) {
                signature = splitSignature(signature);
                return hexlify(concat$3([
                    signature.r,
                    signature.s,
                    (signature.recoveryParam ? "0x1c" : "0x1b")
                ]));
            }

            var lib_esm$j = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        isBytesLike: isBytesLike,
                        isBytes: isBytes,
                        arrayify: arrayify,
                        concat: concat$3,
                        stripZeros: stripZeros,
                        zeroPad: zeroPad,
                        isHexString: isHexString,
                        hexlify: hexlify,
                        hexDataLength: hexDataLength,
                        hexDataSlice: hexDataSlice,
                        hexConcat: hexConcat,
                        hexValue: hexValue,
                        hexStripZeros: hexStripZeros,
                        hexZeroPad: hexZeroPad,
                        splitSignature: splitSignature,
                        joinSignature: joinSignature
            });

            const version$n = "bignumber/5.5.0";

            var BN = BN$1.BN;
            const logger$w = new Logger(version$n);
            const _constructorGuard$4 = {};
            const MAX_SAFE = 0x1fffffffffffff;
            function isBigNumberish(value) {
                return (value != null) && (BigNumber.isBigNumber(value) ||
                    (typeof (value) === "number" && (value % 1) === 0) ||
                    (typeof (value) === "string" && !!value.match(/^-?[0-9]+$/)) ||
                    isHexString(value) ||
                    (typeof (value) === "bigint") ||
                    isBytes(value));
            }
            // Only warn about passing 10 into radix once
            let _warnedToStringRadix = false;
            class BigNumber {
                constructor(constructorGuard, hex) {
                    logger$w.checkNew(new.target, BigNumber);
                    if (constructorGuard !== _constructorGuard$4) {
                        logger$w.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "new (BigNumber)"
                        });
                    }
                    this._hex = hex;
                    this._isBigNumber = true;
                    Object.freeze(this);
                }
                fromTwos(value) {
                    return toBigNumber(toBN(this).fromTwos(value));
                }
                toTwos(value) {
                    return toBigNumber(toBN(this).toTwos(value));
                }
                abs() {
                    if (this._hex[0] === "-") {
                        return BigNumber.from(this._hex.substring(1));
                    }
                    return this;
                }
                add(other) {
                    return toBigNumber(toBN(this).add(toBN(other)));
                }
                sub(other) {
                    return toBigNumber(toBN(this).sub(toBN(other)));
                }
                div(other) {
                    const o = BigNumber.from(other);
                    if (o.isZero()) {
                        throwFault$1("division by zero", "div");
                    }
                    return toBigNumber(toBN(this).div(toBN(other)));
                }
                mul(other) {
                    return toBigNumber(toBN(this).mul(toBN(other)));
                }
                mod(other) {
                    const value = toBN(other);
                    if (value.isNeg()) {
                        throwFault$1("cannot modulo negative values", "mod");
                    }
                    return toBigNumber(toBN(this).umod(value));
                }
                pow(other) {
                    const value = toBN(other);
                    if (value.isNeg()) {
                        throwFault$1("cannot raise to negative values", "pow");
                    }
                    return toBigNumber(toBN(this).pow(value));
                }
                and(other) {
                    const value = toBN(other);
                    if (this.isNegative() || value.isNeg()) {
                        throwFault$1("cannot 'and' negative values", "and");
                    }
                    return toBigNumber(toBN(this).and(value));
                }
                or(other) {
                    const value = toBN(other);
                    if (this.isNegative() || value.isNeg()) {
                        throwFault$1("cannot 'or' negative values", "or");
                    }
                    return toBigNumber(toBN(this).or(value));
                }
                xor(other) {
                    const value = toBN(other);
                    if (this.isNegative() || value.isNeg()) {
                        throwFault$1("cannot 'xor' negative values", "xor");
                    }
                    return toBigNumber(toBN(this).xor(value));
                }
                mask(value) {
                    if (this.isNegative() || value < 0) {
                        throwFault$1("cannot mask negative values", "mask");
                    }
                    return toBigNumber(toBN(this).maskn(value));
                }
                shl(value) {
                    if (this.isNegative() || value < 0) {
                        throwFault$1("cannot shift negative values", "shl");
                    }
                    return toBigNumber(toBN(this).shln(value));
                }
                shr(value) {
                    if (this.isNegative() || value < 0) {
                        throwFault$1("cannot shift negative values", "shr");
                    }
                    return toBigNumber(toBN(this).shrn(value));
                }
                eq(other) {
                    return toBN(this).eq(toBN(other));
                }
                lt(other) {
                    return toBN(this).lt(toBN(other));
                }
                lte(other) {
                    return toBN(this).lte(toBN(other));
                }
                gt(other) {
                    return toBN(this).gt(toBN(other));
                }
                gte(other) {
                    return toBN(this).gte(toBN(other));
                }
                isNegative() {
                    return (this._hex[0] === "-");
                }
                isZero() {
                    return toBN(this).isZero();
                }
                toNumber() {
                    try {
                        return toBN(this).toNumber();
                    }
                    catch (error) {
                        throwFault$1("overflow", "toNumber", this.toString());
                    }
                    return null;
                }
                toBigInt() {
                    try {
                        return BigInt(this.toString());
                    }
                    catch (e) { }
                    return logger$w.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
                        value: this.toString()
                    });
                }
                toString() {
                    // Lots of people expect this, which we do not support, so check (See: #889)
                    if (arguments.length > 0) {
                        if (arguments[0] === 10) {
                            if (!_warnedToStringRadix) {
                                _warnedToStringRadix = true;
                                logger$w.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                            }
                        }
                        else if (arguments[0] === 16) {
                            logger$w.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
                        }
                        else {
                            logger$w.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
                        }
                    }
                    return toBN(this).toString(10);
                }
                toHexString() {
                    return this._hex;
                }
                toJSON(key) {
                    return { type: "BigNumber", hex: this.toHexString() };
                }
                static from(value) {
                    if (value instanceof BigNumber) {
                        return value;
                    }
                    if (typeof (value) === "string") {
                        if (value.match(/^-?0x[0-9a-f]+$/i)) {
                            return new BigNumber(_constructorGuard$4, toHex$1(value));
                        }
                        if (value.match(/^-?[0-9]+$/)) {
                            return new BigNumber(_constructorGuard$4, toHex$1(new BN(value)));
                        }
                        return logger$w.throwArgumentError("invalid BigNumber string", "value", value);
                    }
                    if (typeof (value) === "number") {
                        if (value % 1) {
                            throwFault$1("underflow", "BigNumber.from", value);
                        }
                        if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                            throwFault$1("overflow", "BigNumber.from", value);
                        }
                        return BigNumber.from(String(value));
                    }
                    const anyValue = value;
                    if (typeof (anyValue) === "bigint") {
                        return BigNumber.from(anyValue.toString());
                    }
                    if (isBytes(anyValue)) {
                        return BigNumber.from(hexlify(anyValue));
                    }
                    if (anyValue) {
                        // Hexable interface (takes priority)
                        if (anyValue.toHexString) {
                            const hex = anyValue.toHexString();
                            if (typeof (hex) === "string") {
                                return BigNumber.from(hex);
                            }
                        }
                        else {
                            // For now, handle legacy JSON-ified values (goes away in v6)
                            let hex = anyValue._hex;
                            // New-form JSON
                            if (hex == null && anyValue.type === "BigNumber") {
                                hex = anyValue.hex;
                            }
                            if (typeof (hex) === "string") {
                                if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
                                    return BigNumber.from(hex);
                                }
                            }
                        }
                    }
                    return logger$w.throwArgumentError("invalid BigNumber value", "value", value);
                }
                static isBigNumber(value) {
                    return !!(value && value._isBigNumber);
                }
            }
            // Normalize the hex string
            function toHex$1(value) {
                // For BN, call on the hex string
                if (typeof (value) !== "string") {
                    return toHex$1(value.toString(16));
                }
                // If negative, prepend the negative sign to the normalized positive value
                if (value[0] === "-") {
                    // Strip off the negative sign
                    value = value.substring(1);
                    // Cannot have multiple negative signs (e.g. "--0x04")
                    if (value[0] === "-") {
                        logger$w.throwArgumentError("invalid hex", "value", value);
                    }
                    // Call toHex on the positive component
                    value = toHex$1(value);
                    // Do not allow "-0x00"
                    if (value === "0x00") {
                        return value;
                    }
                    // Negate the value
                    return "-" + value;
                }
                // Add a "0x" prefix if missing
                if (value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                // Normalize zero
                if (value === "0x") {
                    return "0x00";
                }
                // Make the string even length
                if (value.length % 2) {
                    value = "0x0" + value.substring(2);
                }
                // Trim to smallest even-length string
                while (value.length > 4 && value.substring(0, 4) === "0x00") {
                    value = "0x" + value.substring(4);
                }
                return value;
            }
            function toBigNumber(value) {
                return BigNumber.from(toHex$1(value));
            }
            function toBN(value) {
                const hex = BigNumber.from(value).toHexString();
                if (hex[0] === "-") {
                    return (new BN("-" + hex.substring(3), 16));
                }
                return new BN(hex.substring(2), 16);
            }
            function throwFault$1(fault, operation, value) {
                const params = { fault: fault, operation: operation };
                if (value != null) {
                    params.value = value;
                }
                return logger$w.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
            }
            // value should have no prefix
            function _base36To16(value) {
                return (new BN(value, 36)).toString(16);
            }
            // value should have no prefix
            function _base16To36(value) {
                return (new BN(value, 16)).toString(36);
            }

            const logger$v = new Logger(version$n);
            const _constructorGuard$3 = {};
            const Zero$2 = BigNumber.from(0);
            const NegativeOne$2 = BigNumber.from(-1);
            function throwFault(message, fault, operation, value) {
                const params = { fault: fault, operation: operation };
                if (value !== undefined) {
                    params.value = value;
                }
                return logger$v.throwError(message, Logger.errors.NUMERIC_FAULT, params);
            }
            // Constant to pull zeros from for multipliers
            let zeros = "0";
            while (zeros.length < 256) {
                zeros += zeros;
            }
            // Returns a string "1" followed by decimal "0"s
            function getMultiplier(decimals) {
                if (typeof (decimals) !== "number") {
                    try {
                        decimals = BigNumber.from(decimals).toNumber();
                    }
                    catch (e) { }
                }
                if (typeof (decimals) === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
                    return ("1" + zeros.substring(0, decimals));
                }
                return logger$v.throwArgumentError("invalid decimal size", "decimals", decimals);
            }
            function formatFixed(value, decimals) {
                if (decimals == null) {
                    decimals = 0;
                }
                const multiplier = getMultiplier(decimals);
                // Make sure wei is a big number (convert as necessary)
                value = BigNumber.from(value);
                const negative = value.lt(Zero$2);
                if (negative) {
                    value = value.mul(NegativeOne$2);
                }
                let fraction = value.mod(multiplier).toString();
                while (fraction.length < multiplier.length - 1) {
                    fraction = "0" + fraction;
                }
                // Strip training 0
                fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
                const whole = value.div(multiplier).toString();
                if (multiplier.length === 1) {
                    value = whole;
                }
                else {
                    value = whole + "." + fraction;
                }
                if (negative) {
                    value = "-" + value;
                }
                return value;
            }
            function parseFixed(value, decimals) {
                if (decimals == null) {
                    decimals = 0;
                }
                const multiplier = getMultiplier(decimals);
                if (typeof (value) !== "string" || !value.match(/^-?[0-9.]+$/)) {
                    logger$v.throwArgumentError("invalid decimal value", "value", value);
                }
                // Is it negative?
                const negative = (value.substring(0, 1) === "-");
                if (negative) {
                    value = value.substring(1);
                }
                if (value === ".") {
                    logger$v.throwArgumentError("missing value", "value", value);
                }
                // Split it into a whole and fractional part
                const comps = value.split(".");
                if (comps.length > 2) {
                    logger$v.throwArgumentError("too many decimal points", "value", value);
                }
                let whole = comps[0], fraction = comps[1];
                if (!whole) {
                    whole = "0";
                }
                if (!fraction) {
                    fraction = "0";
                }
                // Trim trailing zeros
                while (fraction[fraction.length - 1] === "0") {
                    fraction = fraction.substring(0, fraction.length - 1);
                }
                // Check the fraction doesn't exceed our decimals size
                if (fraction.length > multiplier.length - 1) {
                    throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
                }
                // If decimals is 0, we have an empty string for fraction
                if (fraction === "") {
                    fraction = "0";
                }
                // Fully pad the string with zeros to get to wei
                while (fraction.length < multiplier.length - 1) {
                    fraction += "0";
                }
                const wholeValue = BigNumber.from(whole);
                const fractionValue = BigNumber.from(fraction);
                let wei = (wholeValue.mul(multiplier)).add(fractionValue);
                if (negative) {
                    wei = wei.mul(NegativeOne$2);
                }
                return wei;
            }
            class FixedFormat {
                constructor(constructorGuard, signed, width, decimals) {
                    if (constructorGuard !== _constructorGuard$3) {
                        logger$v.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "new FixedFormat"
                        });
                    }
                    this.signed = signed;
                    this.width = width;
                    this.decimals = decimals;
                    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
                    this._multiplier = getMultiplier(decimals);
                    Object.freeze(this);
                }
                static from(value) {
                    if (value instanceof FixedFormat) {
                        return value;
                    }
                    if (typeof (value) === "number") {
                        value = `fixed128x${value}`;
                    }
                    let signed = true;
                    let width = 128;
                    let decimals = 18;
                    if (typeof (value) === "string") {
                        if (value === "fixed") ;
                        else if (value === "ufixed") {
                            signed = false;
                        }
                        else {
                            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
                            if (!match) {
                                logger$v.throwArgumentError("invalid fixed format", "format", value);
                            }
                            signed = (match[1] !== "u");
                            width = parseInt(match[2]);
                            decimals = parseInt(match[3]);
                        }
                    }
                    else if (value) {
                        const check = (key, type, defaultValue) => {
                            if (value[key] == null) {
                                return defaultValue;
                            }
                            if (typeof (value[key]) !== type) {
                                logger$v.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
                            }
                            return value[key];
                        };
                        signed = check("signed", "boolean", signed);
                        width = check("width", "number", width);
                        decimals = check("decimals", "number", decimals);
                    }
                    if (width % 8) {
                        logger$v.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
                    }
                    if (decimals > 80) {
                        logger$v.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
                    }
                    return new FixedFormat(_constructorGuard$3, signed, width, decimals);
                }
            }
            class FixedNumber {
                constructor(constructorGuard, hex, value, format) {
                    logger$v.checkNew(new.target, FixedNumber);
                    if (constructorGuard !== _constructorGuard$3) {
                        logger$v.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "new FixedFormat"
                        });
                    }
                    this.format = format;
                    this._hex = hex;
                    this._value = value;
                    this._isFixedNumber = true;
                    Object.freeze(this);
                }
                _checkFormat(other) {
                    if (this.format.name !== other.format.name) {
                        logger$v.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
                    }
                }
                addUnsafe(other) {
                    this._checkFormat(other);
                    const a = parseFixed(this._value, this.format.decimals);
                    const b = parseFixed(other._value, other.format.decimals);
                    return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
                }
                subUnsafe(other) {
                    this._checkFormat(other);
                    const a = parseFixed(this._value, this.format.decimals);
                    const b = parseFixed(other._value, other.format.decimals);
                    return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
                }
                mulUnsafe(other) {
                    this._checkFormat(other);
                    const a = parseFixed(this._value, this.format.decimals);
                    const b = parseFixed(other._value, other.format.decimals);
                    return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
                }
                divUnsafe(other) {
                    this._checkFormat(other);
                    const a = parseFixed(this._value, this.format.decimals);
                    const b = parseFixed(other._value, other.format.decimals);
                    return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
                }
                floor() {
                    const comps = this.toString().split(".");
                    if (comps.length === 1) {
                        comps.push("0");
                    }
                    let result = FixedNumber.from(comps[0], this.format);
                    const hasFraction = !comps[1].match(/^(0*)$/);
                    if (this.isNegative() && hasFraction) {
                        result = result.subUnsafe(ONE.toFormat(result.format));
                    }
                    return result;
                }
                ceiling() {
                    const comps = this.toString().split(".");
                    if (comps.length === 1) {
                        comps.push("0");
                    }
                    let result = FixedNumber.from(comps[0], this.format);
                    const hasFraction = !comps[1].match(/^(0*)$/);
                    if (!this.isNegative() && hasFraction) {
                        result = result.addUnsafe(ONE.toFormat(result.format));
                    }
                    return result;
                }
                // @TODO: Support other rounding algorithms
                round(decimals) {
                    if (decimals == null) {
                        decimals = 0;
                    }
                    // If we are already in range, we're done
                    const comps = this.toString().split(".");
                    if (comps.length === 1) {
                        comps.push("0");
                    }
                    if (decimals < 0 || decimals > 80 || (decimals % 1)) {
                        logger$v.throwArgumentError("invalid decimal count", "decimals", decimals);
                    }
                    if (comps[1].length <= decimals) {
                        return this;
                    }
                    const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
                    const bump = BUMP.toFormat(this.format);
                    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
                }
                isZero() {
                    return (this._value === "0.0" || this._value === "0");
                }
                isNegative() {
                    return (this._value[0] === "-");
                }
                toString() { return this._value; }
                toHexString(width) {
                    if (width == null) {
                        return this._hex;
                    }
                    if (width % 8) {
                        logger$v.throwArgumentError("invalid byte width", "width", width);
                    }
                    const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
                    return hexZeroPad(hex, width / 8);
                }
                toUnsafeFloat() { return parseFloat(this.toString()); }
                toFormat(format) {
                    return FixedNumber.fromString(this._value, format);
                }
                static fromValue(value, decimals, format) {
                    // If decimals looks more like a format, and there is no format, shift the parameters
                    if (format == null && decimals != null && !isBigNumberish(decimals)) {
                        format = decimals;
                        decimals = null;
                    }
                    if (decimals == null) {
                        decimals = 0;
                    }
                    if (format == null) {
                        format = "fixed";
                    }
                    return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
                }
                static fromString(value, format) {
                    if (format == null) {
                        format = "fixed";
                    }
                    const fixedFormat = FixedFormat.from(format);
                    const numeric = parseFixed(value, fixedFormat.decimals);
                    if (!fixedFormat.signed && numeric.lt(Zero$2)) {
                        throwFault("unsigned value cannot be negative", "overflow", "value", value);
                    }
                    let hex = null;
                    if (fixedFormat.signed) {
                        hex = numeric.toTwos(fixedFormat.width).toHexString();
                    }
                    else {
                        hex = numeric.toHexString();
                        hex = hexZeroPad(hex, fixedFormat.width / 8);
                    }
                    const decimal = formatFixed(numeric, fixedFormat.decimals);
                    return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
                }
                static fromBytes(value, format) {
                    if (format == null) {
                        format = "fixed";
                    }
                    const fixedFormat = FixedFormat.from(format);
                    if (arrayify(value).length > fixedFormat.width / 8) {
                        throw new Error("overflow");
                    }
                    let numeric = BigNumber.from(value);
                    if (fixedFormat.signed) {
                        numeric = numeric.fromTwos(fixedFormat.width);
                    }
                    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
                    const decimal = formatFixed(numeric, fixedFormat.decimals);
                    return new FixedNumber(_constructorGuard$3, hex, decimal, fixedFormat);
                }
                static from(value, format) {
                    if (typeof (value) === "string") {
                        return FixedNumber.fromString(value, format);
                    }
                    if (isBytes(value)) {
                        return FixedNumber.fromBytes(value, format);
                    }
                    try {
                        return FixedNumber.fromValue(value, 0, format);
                    }
                    catch (error) {
                        // Allow NUMERIC_FAULT to bubble up
                        if (error.code !== Logger.errors.INVALID_ARGUMENT) {
                            throw error;
                        }
                    }
                    return logger$v.throwArgumentError("invalid FixedNumber value", "value", value);
                }
                static isFixedNumber(value) {
                    return !!(value && value._isFixedNumber);
                }
            }
            const ONE = FixedNumber.from(1);
            const BUMP = FixedNumber.from("0.5");

            const version$m = "properties/5.5.0";

            var __awaiter$a = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$u = new Logger(version$m);
            function defineReadOnly(object, name, value) {
                Object.defineProperty(object, name, {
                    enumerable: true,
                    value: value,
                    writable: false,
                });
            }
            // Crawl up the constructor chain to find a static method
            function getStatic(ctor, key) {
                for (let i = 0; i < 32; i++) {
                    if (ctor[key]) {
                        return ctor[key];
                    }
                    if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                        break;
                    }
                    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
                }
                return null;
            }
            function resolveProperties(object) {
                return __awaiter$a(this, void 0, void 0, function* () {
                    const promises = Object.keys(object).map((key) => {
                        const value = object[key];
                        return Promise.resolve(value).then((v) => ({ key: key, value: v }));
                    });
                    const results = yield Promise.all(promises);
                    return results.reduce((accum, result) => {
                        accum[(result.key)] = result.value;
                        return accum;
                    }, {});
                });
            }
            function checkProperties(object, properties) {
                if (!object || typeof (object) !== "object") {
                    logger$u.throwArgumentError("invalid object", "object", object);
                }
                Object.keys(object).forEach((key) => {
                    if (!properties[key]) {
                        logger$u.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
                    }
                });
            }
            function shallowCopy(object) {
                const result = {};
                for (const key in object) {
                    result[key] = object[key];
                }
                return result;
            }
            const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
            function _isFrozen(object) {
                // Opaque objects are not mutable, so safe to copy by assignment
                if (object === undefined || object === null || opaque[typeof (object)]) {
                    return true;
                }
                if (Array.isArray(object) || typeof (object) === "object") {
                    if (!Object.isFrozen(object)) {
                        return false;
                    }
                    const keys = Object.keys(object);
                    for (let i = 0; i < keys.length; i++) {
                        let value = null;
                        try {
                            value = object[keys[i]];
                        }
                        catch (error) {
                            // If accessing a value triggers an error, it is a getter
                            // designed to do so (e.g. Result) and is therefore "frozen"
                            continue;
                        }
                        if (!_isFrozen(value)) {
                            return false;
                        }
                    }
                    return true;
                }
                return logger$u.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
            }
            // Returns a new copy of object, such that no properties may be replaced.
            // New properties may be added only to objects.
            function _deepCopy(object) {
                if (_isFrozen(object)) {
                    return object;
                }
                // Arrays are mutable, so we need to create a copy
                if (Array.isArray(object)) {
                    return Object.freeze(object.map((item) => deepCopy(item)));
                }
                if (typeof (object) === "object") {
                    const result = {};
                    for (const key in object) {
                        const value = object[key];
                        if (value === undefined) {
                            continue;
                        }
                        defineReadOnly(result, key, deepCopy(value));
                    }
                    return result;
                }
                return logger$u.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
            }
            function deepCopy(object) {
                return _deepCopy(object);
            }
            class Description {
                constructor(info) {
                    for (const key in info) {
                        this[key] = deepCopy(info[key]);
                    }
                }
            }

            var lib_esm$i = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        defineReadOnly: defineReadOnly,
                        getStatic: getStatic,
                        resolveProperties: resolveProperties,
                        checkProperties: checkProperties,
                        shallowCopy: shallowCopy,
                        deepCopy: deepCopy,
                        Description: Description
            });

            const version$l = "abi/5.5.0";

            const logger$t = new Logger(version$l);
            const _constructorGuard$2 = {};
            let ModifiersBytes = { calldata: true, memory: true, storage: true };
            let ModifiersNest = { calldata: true, memory: true };
            function checkModifier(type, name) {
                if (type === "bytes" || type === "string") {
                    if (ModifiersBytes[name]) {
                        return true;
                    }
                }
                else if (type === "address") {
                    if (name === "payable") {
                        return true;
                    }
                }
                else if (type.indexOf("[") >= 0 || type === "tuple") {
                    if (ModifiersNest[name]) {
                        return true;
                    }
                }
                if (ModifiersBytes[name] || name === "payable") {
                    logger$t.throwArgumentError("invalid modifier", "name", name);
                }
                return false;
            }
            // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
            function parseParamType(param, allowIndexed) {
                let originalParam = param;
                function throwError(i) {
                    logger$t.throwArgumentError(`unexpected character at position ${i}`, "param", param);
                }
                param = param.replace(/\s/g, " ");
                function newNode(parent) {
                    let node = { type: "", name: "", parent: parent, state: { allowType: true } };
                    if (allowIndexed) {
                        node.indexed = false;
                    }
                    return node;
                }
                let parent = { type: "", name: "", state: { allowType: true } };
                let node = parent;
                for (let i = 0; i < param.length; i++) {
                    let c = param[i];
                    switch (c) {
                        case "(":
                            if (node.state.allowType && node.type === "") {
                                node.type = "tuple";
                            }
                            else if (!node.state.allowParams) {
                                throwError(i);
                            }
                            node.state.allowType = false;
                            node.type = verifyType(node.type);
                            node.components = [newNode(node)];
                            node = node.components[0];
                            break;
                        case ")":
                            delete node.state;
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            node.type = verifyType(node.type);
                            let child = node;
                            node = node.parent;
                            if (!node) {
                                throwError(i);
                            }
                            delete child.parent;
                            node.state.allowParams = false;
                            node.state.allowName = true;
                            node.state.allowArray = true;
                            break;
                        case ",":
                            delete node.state;
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            node.type = verifyType(node.type);
                            let sibling = newNode(node.parent);
                            //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                            node.parent.components.push(sibling);
                            delete node.parent;
                            node = sibling;
                            break;
                        // Hit a space...
                        case " ":
                            // If reading type, the type is done and may read a param or name
                            if (node.state.allowType) {
                                if (node.type !== "") {
                                    node.type = verifyType(node.type);
                                    delete node.state.allowType;
                                    node.state.allowName = true;
                                    node.state.allowParams = true;
                                }
                            }
                            // If reading name, the name is done
                            if (node.state.allowName) {
                                if (node.name !== "") {
                                    if (node.name === "indexed") {
                                        if (!allowIndexed) {
                                            throwError(i);
                                        }
                                        if (node.indexed) {
                                            throwError(i);
                                        }
                                        node.indexed = true;
                                        node.name = "";
                                    }
                                    else if (checkModifier(node.type, node.name)) {
                                        node.name = "";
                                    }
                                    else {
                                        node.state.allowName = false;
                                    }
                                }
                            }
                            break;
                        case "[":
                            if (!node.state.allowArray) {
                                throwError(i);
                            }
                            node.type += c;
                            node.state.allowArray = false;
                            node.state.allowName = false;
                            node.state.readArray = true;
                            break;
                        case "]":
                            if (!node.state.readArray) {
                                throwError(i);
                            }
                            node.type += c;
                            node.state.readArray = false;
                            node.state.allowArray = true;
                            node.state.allowName = true;
                            break;
                        default:
                            if (node.state.allowType) {
                                node.type += c;
                                node.state.allowParams = true;
                                node.state.allowArray = true;
                            }
                            else if (node.state.allowName) {
                                node.name += c;
                                delete node.state.allowArray;
                            }
                            else if (node.state.readArray) {
                                node.type += c;
                            }
                            else {
                                throwError(i);
                            }
                    }
                }
                if (node.parent) {
                    logger$t.throwArgumentError("unexpected eof", "param", param);
                }
                delete parent.state;
                if (node.name === "indexed") {
                    if (!allowIndexed) {
                        throwError(originalParam.length - 7);
                    }
                    if (node.indexed) {
                        throwError(originalParam.length - 7);
                    }
                    node.indexed = true;
                    node.name = "";
                }
                else if (checkModifier(node.type, node.name)) {
                    node.name = "";
                }
                parent.type = verifyType(parent.type);
                return parent;
            }
            function populate(object, params) {
                for (let key in params) {
                    defineReadOnly(object, key, params[key]);
                }
            }
            const FormatTypes = Object.freeze({
                // Bare formatting, as is needed for computing a sighash of an event or function
                sighash: "sighash",
                // Human-Readable with Minimal spacing and without names (compact human-readable)
                minimal: "minimal",
                // Human-Readable with nice spacing, including all names
                full: "full",
                // JSON-format a la Solidity
                json: "json"
            });
            const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
            class ParamType {
                constructor(constructorGuard, params) {
                    if (constructorGuard !== _constructorGuard$2) {
                        logger$t.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "new ParamType()"
                        });
                    }
                    populate(this, params);
                    let match = this.type.match(paramTypeArray);
                    if (match) {
                        populate(this, {
                            arrayLength: parseInt(match[2] || "-1"),
                            arrayChildren: ParamType.fromObject({
                                type: match[1],
                                components: this.components
                            }),
                            baseType: "array"
                        });
                    }
                    else {
                        populate(this, {
                            arrayLength: null,
                            arrayChildren: null,
                            baseType: ((this.components != null) ? "tuple" : this.type)
                        });
                    }
                    this._isParamType = true;
                    Object.freeze(this);
                }
                // Format the parameter fragment
                //   - sighash: "(uint256,address)"
                //   - minimal: "tuple(uint256,address) indexed"
                //   - full:    "tuple(uint256 foo, address bar) indexed baz"
                format(format) {
                    if (!format) {
                        format = FormatTypes.sighash;
                    }
                    if (!FormatTypes[format]) {
                        logger$t.throwArgumentError("invalid format type", "format", format);
                    }
                    if (format === FormatTypes.json) {
                        let result = {
                            type: ((this.baseType === "tuple") ? "tuple" : this.type),
                            name: (this.name || undefined)
                        };
                        if (typeof (this.indexed) === "boolean") {
                            result.indexed = this.indexed;
                        }
                        if (this.components) {
                            result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
                        }
                        return JSON.stringify(result);
                    }
                    let result = "";
                    // Array
                    if (this.baseType === "array") {
                        result += this.arrayChildren.format(format);
                        result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
                    }
                    else {
                        if (this.baseType === "tuple") {
                            if (format !== FormatTypes.sighash) {
                                result += this.type;
                            }
                            result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
                        }
                        else {
                            result += this.type;
                        }
                    }
                    if (format !== FormatTypes.sighash) {
                        if (this.indexed === true) {
                            result += " indexed";
                        }
                        if (format === FormatTypes.full && this.name) {
                            result += " " + this.name;
                        }
                    }
                    return result;
                }
                static from(value, allowIndexed) {
                    if (typeof (value) === "string") {
                        return ParamType.fromString(value, allowIndexed);
                    }
                    return ParamType.fromObject(value);
                }
                static fromObject(value) {
                    if (ParamType.isParamType(value)) {
                        return value;
                    }
                    return new ParamType(_constructorGuard$2, {
                        name: (value.name || null),
                        type: verifyType(value.type),
                        indexed: ((value.indexed == null) ? null : !!value.indexed),
                        components: (value.components ? value.components.map(ParamType.fromObject) : null)
                    });
                }
                static fromString(value, allowIndexed) {
                    function ParamTypify(node) {
                        return ParamType.fromObject({
                            name: node.name,
                            type: node.type,
                            indexed: node.indexed,
                            components: node.components
                        });
                    }
                    return ParamTypify(parseParamType(value, !!allowIndexed));
                }
                static isParamType(value) {
                    return !!(value != null && value._isParamType);
                }
            }
            function parseParams(value, allowIndex) {
                return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
            }
            class Fragment {
                constructor(constructorGuard, params) {
                    if (constructorGuard !== _constructorGuard$2) {
                        logger$t.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "new Fragment()"
                        });
                    }
                    populate(this, params);
                    this._isFragment = true;
                    Object.freeze(this);
                }
                static from(value) {
                    if (Fragment.isFragment(value)) {
                        return value;
                    }
                    if (typeof (value) === "string") {
                        return Fragment.fromString(value);
                    }
                    return Fragment.fromObject(value);
                }
                static fromObject(value) {
                    if (Fragment.isFragment(value)) {
                        return value;
                    }
                    switch (value.type) {
                        case "function":
                            return FunctionFragment.fromObject(value);
                        case "event":
                            return EventFragment.fromObject(value);
                        case "constructor":
                            return ConstructorFragment.fromObject(value);
                        case "error":
                            return ErrorFragment.fromObject(value);
                        case "fallback":
                        case "receive":
                            // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                            return null;
                    }
                    return logger$t.throwArgumentError("invalid fragment object", "value", value);
                }
                static fromString(value) {
                    // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
                    value = value.replace(/\s/g, " ");
                    value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
                    value = value.trim();
                    if (value.split(" ")[0] === "event") {
                        return EventFragment.fromString(value.substring(5).trim());
                    }
                    else if (value.split(" ")[0] === "function") {
                        return FunctionFragment.fromString(value.substring(8).trim());
                    }
                    else if (value.split("(")[0].trim() === "constructor") {
                        return ConstructorFragment.fromString(value.trim());
                    }
                    else if (value.split(" ")[0] === "error") {
                        return ErrorFragment.fromString(value.substring(5).trim());
                    }
                    return logger$t.throwArgumentError("unsupported fragment", "value", value);
                }
                static isFragment(value) {
                    return !!(value && value._isFragment);
                }
            }
            class EventFragment extends Fragment {
                format(format) {
                    if (!format) {
                        format = FormatTypes.sighash;
                    }
                    if (!FormatTypes[format]) {
                        logger$t.throwArgumentError("invalid format type", "format", format);
                    }
                    if (format === FormatTypes.json) {
                        return JSON.stringify({
                            type: "event",
                            anonymous: this.anonymous,
                            name: this.name,
                            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                        });
                    }
                    let result = "";
                    if (format !== FormatTypes.sighash) {
                        result += "event ";
                    }
                    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
                    if (format !== FormatTypes.sighash) {
                        if (this.anonymous) {
                            result += "anonymous ";
                        }
                    }
                    return result.trim();
                }
                static from(value) {
                    if (typeof (value) === "string") {
                        return EventFragment.fromString(value);
                    }
                    return EventFragment.fromObject(value);
                }
                static fromObject(value) {
                    if (EventFragment.isEventFragment(value)) {
                        return value;
                    }
                    if (value.type !== "event") {
                        logger$t.throwArgumentError("invalid event object", "value", value);
                    }
                    const params = {
                        name: verifyIdentifier(value.name),
                        anonymous: value.anonymous,
                        inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                        type: "event"
                    };
                    return new EventFragment(_constructorGuard$2, params);
                }
                static fromString(value) {
                    let match = value.match(regexParen);
                    if (!match) {
                        logger$t.throwArgumentError("invalid event string", "value", value);
                    }
                    let anonymous = false;
                    match[3].split(" ").forEach((modifier) => {
                        switch (modifier.trim()) {
                            case "anonymous":
                                anonymous = true;
                                break;
                            case "":
                                break;
                            default:
                                logger$t.warn("unknown modifier: " + modifier);
                        }
                    });
                    return EventFragment.fromObject({
                        name: match[1].trim(),
                        anonymous: anonymous,
                        inputs: parseParams(match[2], true),
                        type: "event"
                    });
                }
                static isEventFragment(value) {
                    return (value && value._isFragment && value.type === "event");
                }
            }
            function parseGas(value, params) {
                params.gas = null;
                let comps = value.split("@");
                if (comps.length !== 1) {
                    if (comps.length > 2) {
                        logger$t.throwArgumentError("invalid human-readable ABI signature", "value", value);
                    }
                    if (!comps[1].match(/^[0-9]+$/)) {
                        logger$t.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
                    }
                    params.gas = BigNumber.from(comps[1]);
                    return comps[0];
                }
                return value;
            }
            function parseModifiers(value, params) {
                params.constant = false;
                params.payable = false;
                params.stateMutability = "nonpayable";
                value.split(" ").forEach((modifier) => {
                    switch (modifier.trim()) {
                        case "constant":
                            params.constant = true;
                            break;
                        case "payable":
                            params.payable = true;
                            params.stateMutability = "payable";
                            break;
                        case "nonpayable":
                            params.payable = false;
                            params.stateMutability = "nonpayable";
                            break;
                        case "pure":
                            params.constant = true;
                            params.stateMutability = "pure";
                            break;
                        case "view":
                            params.constant = true;
                            params.stateMutability = "view";
                            break;
                        case "external":
                        case "public":
                        case "":
                            break;
                        default:
                            console.log("unknown modifier: " + modifier);
                    }
                });
            }
            function verifyState(value) {
                let result = {
                    constant: false,
                    payable: true,
                    stateMutability: "payable"
                };
                if (value.stateMutability != null) {
                    result.stateMutability = value.stateMutability;
                    // Set (and check things are consistent) the constant property
                    result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
                    if (value.constant != null) {
                        if ((!!value.constant) !== result.constant) {
                            logger$t.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
                        }
                    }
                    // Set (and check things are consistent) the payable property
                    result.payable = (result.stateMutability === "payable");
                    if (value.payable != null) {
                        if ((!!value.payable) !== result.payable) {
                            logger$t.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
                        }
                    }
                }
                else if (value.payable != null) {
                    result.payable = !!value.payable;
                    // If payable we can assume non-constant; otherwise we can't assume
                    if (value.constant == null && !result.payable && value.type !== "constructor") {
                        logger$t.throwArgumentError("unable to determine stateMutability", "value", value);
                    }
                    result.constant = !!value.constant;
                    if (result.constant) {
                        result.stateMutability = "view";
                    }
                    else {
                        result.stateMutability = (result.payable ? "payable" : "nonpayable");
                    }
                    if (result.payable && result.constant) {
                        logger$t.throwArgumentError("cannot have constant payable function", "value", value);
                    }
                }
                else if (value.constant != null) {
                    result.constant = !!value.constant;
                    result.payable = !result.constant;
                    result.stateMutability = (result.constant ? "view" : "payable");
                }
                else if (value.type !== "constructor") {
                    logger$t.throwArgumentError("unable to determine stateMutability", "value", value);
                }
                return result;
            }
            class ConstructorFragment extends Fragment {
                format(format) {
                    if (!format) {
                        format = FormatTypes.sighash;
                    }
                    if (!FormatTypes[format]) {
                        logger$t.throwArgumentError("invalid format type", "format", format);
                    }
                    if (format === FormatTypes.json) {
                        return JSON.stringify({
                            type: "constructor",
                            stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                            payable: this.payable,
                            gas: (this.gas ? this.gas.toNumber() : undefined),
                            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                        });
                    }
                    if (format === FormatTypes.sighash) {
                        logger$t.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "format(sighash)"
                        });
                    }
                    let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
                    if (this.stateMutability && this.stateMutability !== "nonpayable") {
                        result += this.stateMutability + " ";
                    }
                    return result.trim();
                }
                static from(value) {
                    if (typeof (value) === "string") {
                        return ConstructorFragment.fromString(value);
                    }
                    return ConstructorFragment.fromObject(value);
                }
                static fromObject(value) {
                    if (ConstructorFragment.isConstructorFragment(value)) {
                        return value;
                    }
                    if (value.type !== "constructor") {
                        logger$t.throwArgumentError("invalid constructor object", "value", value);
                    }
                    let state = verifyState(value);
                    if (state.constant) {
                        logger$t.throwArgumentError("constructor cannot be constant", "value", value);
                    }
                    const params = {
                        name: null,
                        type: value.type,
                        inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                        payable: state.payable,
                        stateMutability: state.stateMutability,
                        gas: (value.gas ? BigNumber.from(value.gas) : null)
                    };
                    return new ConstructorFragment(_constructorGuard$2, params);
                }
                static fromString(value) {
                    let params = { type: "constructor" };
                    value = parseGas(value, params);
                    let parens = value.match(regexParen);
                    if (!parens || parens[1].trim() !== "constructor") {
                        logger$t.throwArgumentError("invalid constructor string", "value", value);
                    }
                    params.inputs = parseParams(parens[2].trim(), false);
                    parseModifiers(parens[3].trim(), params);
                    return ConstructorFragment.fromObject(params);
                }
                static isConstructorFragment(value) {
                    return (value && value._isFragment && value.type === "constructor");
                }
            }
            class FunctionFragment extends ConstructorFragment {
                format(format) {
                    if (!format) {
                        format = FormatTypes.sighash;
                    }
                    if (!FormatTypes[format]) {
                        logger$t.throwArgumentError("invalid format type", "format", format);
                    }
                    if (format === FormatTypes.json) {
                        return JSON.stringify({
                            type: "function",
                            name: this.name,
                            constant: this.constant,
                            stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                            payable: this.payable,
                            gas: (this.gas ? this.gas.toNumber() : undefined),
                            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                            outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
                        });
                    }
                    let result = "";
                    if (format !== FormatTypes.sighash) {
                        result += "function ";
                    }
                    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
                    if (format !== FormatTypes.sighash) {
                        if (this.stateMutability) {
                            if (this.stateMutability !== "nonpayable") {
                                result += (this.stateMutability + " ");
                            }
                        }
                        else if (this.constant) {
                            result += "view ";
                        }
                        if (this.outputs && this.outputs.length) {
                            result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
                        }
                        if (this.gas != null) {
                            result += "@" + this.gas.toString() + " ";
                        }
                    }
                    return result.trim();
                }
                static from(value) {
                    if (typeof (value) === "string") {
                        return FunctionFragment.fromString(value);
                    }
                    return FunctionFragment.fromObject(value);
                }
                static fromObject(value) {
                    if (FunctionFragment.isFunctionFragment(value)) {
                        return value;
                    }
                    if (value.type !== "function") {
                        logger$t.throwArgumentError("invalid function object", "value", value);
                    }
                    let state = verifyState(value);
                    const params = {
                        type: value.type,
                        name: verifyIdentifier(value.name),
                        constant: state.constant,
                        inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                        outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
                        payable: state.payable,
                        stateMutability: state.stateMutability,
                        gas: (value.gas ? BigNumber.from(value.gas) : null)
                    };
                    return new FunctionFragment(_constructorGuard$2, params);
                }
                static fromString(value) {
                    let params = { type: "function" };
                    value = parseGas(value, params);
                    let comps = value.split(" returns ");
                    if (comps.length > 2) {
                        logger$t.throwArgumentError("invalid function string", "value", value);
                    }
                    let parens = comps[0].match(regexParen);
                    if (!parens) {
                        logger$t.throwArgumentError("invalid function signature", "value", value);
                    }
                    params.name = parens[1].trim();
                    if (params.name) {
                        verifyIdentifier(params.name);
                    }
                    params.inputs = parseParams(parens[2], false);
                    parseModifiers(parens[3].trim(), params);
                    // We have outputs
                    if (comps.length > 1) {
                        let returns = comps[1].match(regexParen);
                        if (returns[1].trim() != "" || returns[3].trim() != "") {
                            logger$t.throwArgumentError("unexpected tokens", "value", value);
                        }
                        params.outputs = parseParams(returns[2], false);
                    }
                    else {
                        params.outputs = [];
                    }
                    return FunctionFragment.fromObject(params);
                }
                static isFunctionFragment(value) {
                    return (value && value._isFragment && value.type === "function");
                }
            }
            //export class StructFragment extends Fragment {
            //}
            function checkForbidden(fragment) {
                const sig = fragment.format();
                if (sig === "Error(string)" || sig === "Panic(uint256)") {
                    logger$t.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
                }
                return fragment;
            }
            class ErrorFragment extends Fragment {
                format(format) {
                    if (!format) {
                        format = FormatTypes.sighash;
                    }
                    if (!FormatTypes[format]) {
                        logger$t.throwArgumentError("invalid format type", "format", format);
                    }
                    if (format === FormatTypes.json) {
                        return JSON.stringify({
                            type: "error",
                            name: this.name,
                            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                        });
                    }
                    let result = "";
                    if (format !== FormatTypes.sighash) {
                        result += "error ";
                    }
                    result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
                    return result.trim();
                }
                static from(value) {
                    if (typeof (value) === "string") {
                        return ErrorFragment.fromString(value);
                    }
                    return ErrorFragment.fromObject(value);
                }
                static fromObject(value) {
                    if (ErrorFragment.isErrorFragment(value)) {
                        return value;
                    }
                    if (value.type !== "error") {
                        logger$t.throwArgumentError("invalid error object", "value", value);
                    }
                    const params = {
                        type: value.type,
                        name: verifyIdentifier(value.name),
                        inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
                    };
                    return checkForbidden(new ErrorFragment(_constructorGuard$2, params));
                }
                static fromString(value) {
                    let params = { type: "error" };
                    let parens = value.match(regexParen);
                    if (!parens) {
                        logger$t.throwArgumentError("invalid error signature", "value", value);
                    }
                    params.name = parens[1].trim();
                    if (params.name) {
                        verifyIdentifier(params.name);
                    }
                    params.inputs = parseParams(parens[2], false);
                    return checkForbidden(ErrorFragment.fromObject(params));
                }
                static isErrorFragment(value) {
                    return (value && value._isFragment && value.type === "error");
                }
            }
            function verifyType(type) {
                // These need to be transformed to their full description
                if (type.match(/^uint($|[^1-9])/)) {
                    type = "uint256" + type.substring(4);
                }
                else if (type.match(/^int($|[^1-9])/)) {
                    type = "int256" + type.substring(3);
                }
                // @TODO: more verification
                return type;
            }
            // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
            const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
            function verifyIdentifier(value) {
                if (!value || !value.match(regexIdentifier)) {
                    logger$t.throwArgumentError(`invalid identifier "${value}"`, "value", value);
                }
                return value;
            }
            const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
            function splitNesting(value) {
                value = value.trim();
                let result = [];
                let accum = "";
                let depth = 0;
                for (let offset = 0; offset < value.length; offset++) {
                    let c = value[offset];
                    if (c === "," && depth === 0) {
                        result.push(accum);
                        accum = "";
                    }
                    else {
                        accum += c;
                        if (c === "(") {
                            depth++;
                        }
                        else if (c === ")") {
                            depth--;
                            if (depth === -1) {
                                logger$t.throwArgumentError("unbalanced parenthesis", "value", value);
                            }
                        }
                    }
                }
                if (accum) {
                    result.push(accum);
                }
                return result;
            }

            const logger$s = new Logger(version$l);
            function checkResultErrors(result) {
                // Find the first error (if any)
                const errors = [];
                const checkErrors = function (path, object) {
                    if (!Array.isArray(object)) {
                        return;
                    }
                    for (let key in object) {
                        const childPath = path.slice();
                        childPath.push(key);
                        try {
                            checkErrors(childPath, object[key]);
                        }
                        catch (error) {
                            errors.push({ path: childPath, error: error });
                        }
                    }
                };
                checkErrors([], result);
                return errors;
            }
            class Coder {
                constructor(name, type, localName, dynamic) {
                    // @TODO: defineReadOnly these
                    this.name = name;
                    this.type = type;
                    this.localName = localName;
                    this.dynamic = dynamic;
                }
                _throwError(message, value) {
                    logger$s.throwArgumentError(message, this.localName, value);
                }
            }
            class Writer {
                constructor(wordSize) {
                    defineReadOnly(this, "wordSize", wordSize || 32);
                    this._data = [];
                    this._dataLength = 0;
                    this._padding = new Uint8Array(wordSize);
                }
                get data() {
                    return hexConcat(this._data);
                }
                get length() { return this._dataLength; }
                _writeData(data) {
                    this._data.push(data);
                    this._dataLength += data.length;
                    return data.length;
                }
                appendWriter(writer) {
                    return this._writeData(concat$3(writer._data));
                }
                // Arrayish items; padded on the right to wordSize
                writeBytes(value) {
                    let bytes = arrayify(value);
                    const paddingOffset = bytes.length % this.wordSize;
                    if (paddingOffset) {
                        bytes = concat$3([bytes, this._padding.slice(paddingOffset)]);
                    }
                    return this._writeData(bytes);
                }
                _getValue(value) {
                    let bytes = arrayify(BigNumber.from(value));
                    if (bytes.length > this.wordSize) {
                        logger$s.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                            length: this.wordSize,
                            offset: bytes.length
                        });
                    }
                    if (bytes.length % this.wordSize) {
                        bytes = concat$3([this._padding.slice(bytes.length % this.wordSize), bytes]);
                    }
                    return bytes;
                }
                // BigNumberish items; padded on the left to wordSize
                writeValue(value) {
                    return this._writeData(this._getValue(value));
                }
                writeUpdatableValue() {
                    const offset = this._data.length;
                    this._data.push(this._padding);
                    this._dataLength += this.wordSize;
                    return (value) => {
                        this._data[offset] = this._getValue(value);
                    };
                }
            }
            class Reader {
                constructor(data, wordSize, coerceFunc, allowLoose) {
                    defineReadOnly(this, "_data", arrayify(data));
                    defineReadOnly(this, "wordSize", wordSize || 32);
                    defineReadOnly(this, "_coerceFunc", coerceFunc);
                    defineReadOnly(this, "allowLoose", allowLoose);
                    this._offset = 0;
                }
                get data() { return hexlify(this._data); }
                get consumed() { return this._offset; }
                // The default Coerce function
                static coerce(name, value) {
                    let match = name.match("^u?int([0-9]+)$");
                    if (match && parseInt(match[1]) <= 48) {
                        value = value.toNumber();
                    }
                    return value;
                }
                coerce(name, value) {
                    if (this._coerceFunc) {
                        return this._coerceFunc(name, value);
                    }
                    return Reader.coerce(name, value);
                }
                _peekBytes(offset, length, loose) {
                    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
                    if (this._offset + alignedLength > this._data.length) {
                        if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                            alignedLength = length;
                        }
                        else {
                            logger$s.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                                length: this._data.length,
                                offset: this._offset + alignedLength
                            });
                        }
                    }
                    return this._data.slice(this._offset, this._offset + alignedLength);
                }
                subReader(offset) {
                    return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
                }
                readBytes(length, loose) {
                    let bytes = this._peekBytes(0, length, !!loose);
                    this._offset += bytes.length;
                    // @TODO: Make sure the length..end bytes are all 0?
                    return bytes.slice(0, length);
                }
                readValue() {
                    return BigNumber.from(this.readBytes(this.wordSize));
                }
            }

            var sha3$1 = {exports: {}};

            (function (module) {
            /*jslint bitwise: true */
            (function () {

              var INPUT_ERROR = 'input is invalid type';
              var FINALIZE_ERROR = 'finalize already called';
              var WINDOW = typeof window === 'object';
              var root = WINDOW ? window : {};
              if (root.JS_SHA3_NO_WINDOW) {
                WINDOW = false;
              }
              var WEB_WORKER = !WINDOW && typeof self === 'object';
              var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
              if (NODE_JS) {
                root = commonjsGlobal;
              } else if (WEB_WORKER) {
                root = self;
              }
              var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
              var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
              var HEX_CHARS = '0123456789abcdef'.split('');
              var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
              var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
              var KECCAK_PADDING = [1, 256, 65536, 16777216];
              var PADDING = [6, 1536, 393216, 100663296];
              var SHIFT = [0, 8, 16, 24];
              var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
                0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
                2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
                2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
                2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
              var BITS = [224, 256, 384, 512];
              var SHAKE_BITS = [128, 256];
              var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
              var CSHAKE_BYTEPAD = {
                '128': 168,
                '256': 136
              };

              if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
                Array.isArray = function (obj) {
                  return Object.prototype.toString.call(obj) === '[object Array]';
                };
              }

              if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
                ArrayBuffer.isView = function (obj) {
                  return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
                };
              }

              var createOutputMethod = function (bits, padding, outputType) {
                return function (message) {
                  return new Keccak(bits, padding, bits).update(message)[outputType]();
                };
              };

              var createShakeOutputMethod = function (bits, padding, outputType) {
                return function (message, outputBits) {
                  return new Keccak(bits, padding, outputBits).update(message)[outputType]();
                };
              };

              var createCshakeOutputMethod = function (bits, padding, outputType) {
                return function (message, outputBits, n, s) {
                  return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
                };
              };

              var createKmacOutputMethod = function (bits, padding, outputType) {
                return function (key, message, outputBits, s) {
                  return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
                };
              };

              var createOutputMethods = function (method, createMethod, bits, padding) {
                for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
                  var type = OUTPUT_TYPES[i];
                  method[type] = createMethod(bits, padding, type);
                }
                return method;
              };

              var createMethod = function (bits, padding) {
                var method = createOutputMethod(bits, padding, 'hex');
                method.create = function () {
                  return new Keccak(bits, padding, bits);
                };
                method.update = function (message) {
                  return method.create().update(message);
                };
                return createOutputMethods(method, createOutputMethod, bits, padding);
              };

              var createShakeMethod = function (bits, padding) {
                var method = createShakeOutputMethod(bits, padding, 'hex');
                method.create = function (outputBits) {
                  return new Keccak(bits, padding, outputBits);
                };
                method.update = function (message, outputBits) {
                  return method.create(outputBits).update(message);
                };
                return createOutputMethods(method, createShakeOutputMethod, bits, padding);
              };

              var createCshakeMethod = function (bits, padding) {
                var w = CSHAKE_BYTEPAD[bits];
                var method = createCshakeOutputMethod(bits, padding, 'hex');
                method.create = function (outputBits, n, s) {
                  if (!n && !s) {
                    return methods['shake' + bits].create(outputBits);
                  } else {
                    return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
                  }
                };
                method.update = function (message, outputBits, n, s) {
                  return method.create(outputBits, n, s).update(message);
                };
                return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
              };

              var createKmacMethod = function (bits, padding) {
                var w = CSHAKE_BYTEPAD[bits];
                var method = createKmacOutputMethod(bits, padding, 'hex');
                method.create = function (key, outputBits, s) {
                  return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
                };
                method.update = function (key, message, outputBits, s) {
                  return method.create(key, outputBits, s).update(message);
                };
                return createOutputMethods(method, createKmacOutputMethod, bits, padding);
              };

              var algorithms = [
                { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
                { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
                { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
                { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
                { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
              ];

              var methods = {}, methodNames = [];

              for (var i = 0; i < algorithms.length; ++i) {
                var algorithm = algorithms[i];
                var bits = algorithm.bits;
                for (var j = 0; j < bits.length; ++j) {
                  var methodName = algorithm.name + '_' + bits[j];
                  methodNames.push(methodName);
                  methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
                  if (algorithm.name !== 'sha3') {
                    var newMethodName = algorithm.name + bits[j];
                    methodNames.push(newMethodName);
                    methods[newMethodName] = methods[methodName];
                  }
                }
              }

              function Keccak(bits, padding, outputBits) {
                this.blocks = [];
                this.s = [];
                this.padding = padding;
                this.outputBits = outputBits;
                this.reset = true;
                this.finalized = false;
                this.block = 0;
                this.start = 0;
                this.blockCount = (1600 - (bits << 1)) >> 5;
                this.byteCount = this.blockCount << 2;
                this.outputBlocks = outputBits >> 5;
                this.extraBytes = (outputBits & 31) >> 3;

                for (var i = 0; i < 50; ++i) {
                  this.s[i] = 0;
                }
              }

              Keccak.prototype.update = function (message) {
                if (this.finalized) {
                  throw new Error(FINALIZE_ERROR);
                }
                var notString, type = typeof message;
                if (type !== 'string') {
                  if (type === 'object') {
                    if (message === null) {
                      throw new Error(INPUT_ERROR);
                    } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                      message = new Uint8Array(message);
                    } else if (!Array.isArray(message)) {
                      if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                        throw new Error(INPUT_ERROR);
                      }
                    }
                  } else {
                    throw new Error(INPUT_ERROR);
                  }
                  notString = true;
                }
                var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
                  blockCount = this.blockCount, index = 0, s = this.s, i, code;

                while (index < length) {
                  if (this.reset) {
                    this.reset = false;
                    blocks[0] = this.block;
                    for (i = 1; i < blockCount + 1; ++i) {
                      blocks[i] = 0;
                    }
                  }
                  if (notString) {
                    for (i = this.start; index < length && i < byteCount; ++index) {
                      blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
                    }
                  } else {
                    for (i = this.start; index < length && i < byteCount; ++index) {
                      code = message.charCodeAt(index);
                      if (code < 0x80) {
                        blocks[i >> 2] |= code << SHIFT[i++ & 3];
                      } else if (code < 0x800) {
                        blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                      } else if (code < 0xd800 || code >= 0xe000) {
                        blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                        blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                      } else {
                        code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                        blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                        blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                        blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                        blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                      }
                    }
                  }
                  this.lastByteIndex = i;
                  if (i >= byteCount) {
                    this.start = i - byteCount;
                    this.block = blocks[blockCount];
                    for (i = 0; i < blockCount; ++i) {
                      s[i] ^= blocks[i];
                    }
                    f(s);
                    this.reset = true;
                  } else {
                    this.start = i;
                  }
                }
                return this;
              };

              Keccak.prototype.encode = function (x, right) {
                var o = x & 255, n = 1;
                var bytes = [o];
                x = x >> 8;
                o = x & 255;
                while (o > 0) {
                  bytes.unshift(o);
                  x = x >> 8;
                  o = x & 255;
                  ++n;
                }
                if (right) {
                  bytes.push(n);
                } else {
                  bytes.unshift(n);
                }
                this.update(bytes);
                return bytes.length;
              };

              Keccak.prototype.encodeString = function (str) {
                var notString, type = typeof str;
                if (type !== 'string') {
                  if (type === 'object') {
                    if (str === null) {
                      throw new Error(INPUT_ERROR);
                    } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
                      str = new Uint8Array(str);
                    } else if (!Array.isArray(str)) {
                      if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                        throw new Error(INPUT_ERROR);
                      }
                    }
                  } else {
                    throw new Error(INPUT_ERROR);
                  }
                  notString = true;
                }
                var bytes = 0, length = str.length;
                if (notString) {
                  bytes = length;
                } else {
                  for (var i = 0; i < str.length; ++i) {
                    var code = str.charCodeAt(i);
                    if (code < 0x80) {
                      bytes += 1;
                    } else if (code < 0x800) {
                      bytes += 2;
                    } else if (code < 0xd800 || code >= 0xe000) {
                      bytes += 3;
                    } else {
                      code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
                      bytes += 4;
                    }
                  }
                }
                bytes += this.encode(bytes * 8);
                this.update(str);
                return bytes;
              };

              Keccak.prototype.bytepad = function (strs, w) {
                var bytes = this.encode(w);
                for (var i = 0; i < strs.length; ++i) {
                  bytes += this.encodeString(strs[i]);
                }
                var paddingBytes = w - bytes % w;
                var zeros = [];
                zeros.length = paddingBytes;
                this.update(zeros);
                return this;
              };

              Keccak.prototype.finalize = function () {
                if (this.finalized) {
                  return;
                }
                this.finalized = true;
                var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
                blocks[i >> 2] |= this.padding[i & 3];
                if (this.lastByteIndex === this.byteCount) {
                  blocks[0] = blocks[blockCount];
                  for (i = 1; i < blockCount + 1; ++i) {
                    blocks[i] = 0;
                  }
                }
                blocks[blockCount - 1] |= 0x80000000;
                for (i = 0; i < blockCount; ++i) {
                  s[i] ^= blocks[i];
                }
                f(s);
              };

              Keccak.prototype.toString = Keccak.prototype.hex = function () {
                this.finalize();

                var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                  extraBytes = this.extraBytes, i = 0, j = 0;
                var hex = '', block;
                while (j < outputBlocks) {
                  for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                    block = s[i];
                    hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
                      HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
                      HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
                      HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
                  }
                  if (j % blockCount === 0) {
                    f(s);
                    i = 0;
                  }
                }
                if (extraBytes) {
                  block = s[i];
                  hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
                  if (extraBytes > 1) {
                    hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
                  }
                  if (extraBytes > 2) {
                    hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
                  }
                }
                return hex;
              };

              Keccak.prototype.arrayBuffer = function () {
                this.finalize();

                var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                  extraBytes = this.extraBytes, i = 0, j = 0;
                var bytes = this.outputBits >> 3;
                var buffer;
                if (extraBytes) {
                  buffer = new ArrayBuffer((outputBlocks + 1) << 2);
                } else {
                  buffer = new ArrayBuffer(bytes);
                }
                var array = new Uint32Array(buffer);
                while (j < outputBlocks) {
                  for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                    array[j] = s[i];
                  }
                  if (j % blockCount === 0) {
                    f(s);
                  }
                }
                if (extraBytes) {
                  array[i] = s[i];
                  buffer = buffer.slice(0, bytes);
                }
                return buffer;
              };

              Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

              Keccak.prototype.digest = Keccak.prototype.array = function () {
                this.finalize();

                var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
                  extraBytes = this.extraBytes, i = 0, j = 0;
                var array = [], offset, block;
                while (j < outputBlocks) {
                  for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
                    offset = j << 2;
                    block = s[i];
                    array[offset] = block & 0xFF;
                    array[offset + 1] = (block >> 8) & 0xFF;
                    array[offset + 2] = (block >> 16) & 0xFF;
                    array[offset + 3] = (block >> 24) & 0xFF;
                  }
                  if (j % blockCount === 0) {
                    f(s);
                  }
                }
                if (extraBytes) {
                  offset = j << 2;
                  block = s[i];
                  array[offset] = block & 0xFF;
                  if (extraBytes > 1) {
                    array[offset + 1] = (block >> 8) & 0xFF;
                  }
                  if (extraBytes > 2) {
                    array[offset + 2] = (block >> 16) & 0xFF;
                  }
                }
                return array;
              };

              function Kmac(bits, padding, outputBits) {
                Keccak.call(this, bits, padding, outputBits);
              }

              Kmac.prototype = new Keccak();

              Kmac.prototype.finalize = function () {
                this.encode(this.outputBits, true);
                return Keccak.prototype.finalize.call(this);
              };

              var f = function (s) {
                var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
                  b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
                  b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
                  b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
                for (n = 0; n < 48; n += 2) {
                  c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
                  c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
                  c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
                  c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
                  c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
                  c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
                  c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
                  c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
                  c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
                  c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

                  h = c8 ^ ((c2 << 1) | (c3 >>> 31));
                  l = c9 ^ ((c3 << 1) | (c2 >>> 31));
                  s[0] ^= h;
                  s[1] ^= l;
                  s[10] ^= h;
                  s[11] ^= l;
                  s[20] ^= h;
                  s[21] ^= l;
                  s[30] ^= h;
                  s[31] ^= l;
                  s[40] ^= h;
                  s[41] ^= l;
                  h = c0 ^ ((c4 << 1) | (c5 >>> 31));
                  l = c1 ^ ((c5 << 1) | (c4 >>> 31));
                  s[2] ^= h;
                  s[3] ^= l;
                  s[12] ^= h;
                  s[13] ^= l;
                  s[22] ^= h;
                  s[23] ^= l;
                  s[32] ^= h;
                  s[33] ^= l;
                  s[42] ^= h;
                  s[43] ^= l;
                  h = c2 ^ ((c6 << 1) | (c7 >>> 31));
                  l = c3 ^ ((c7 << 1) | (c6 >>> 31));
                  s[4] ^= h;
                  s[5] ^= l;
                  s[14] ^= h;
                  s[15] ^= l;
                  s[24] ^= h;
                  s[25] ^= l;
                  s[34] ^= h;
                  s[35] ^= l;
                  s[44] ^= h;
                  s[45] ^= l;
                  h = c4 ^ ((c8 << 1) | (c9 >>> 31));
                  l = c5 ^ ((c9 << 1) | (c8 >>> 31));
                  s[6] ^= h;
                  s[7] ^= l;
                  s[16] ^= h;
                  s[17] ^= l;
                  s[26] ^= h;
                  s[27] ^= l;
                  s[36] ^= h;
                  s[37] ^= l;
                  s[46] ^= h;
                  s[47] ^= l;
                  h = c6 ^ ((c0 << 1) | (c1 >>> 31));
                  l = c7 ^ ((c1 << 1) | (c0 >>> 31));
                  s[8] ^= h;
                  s[9] ^= l;
                  s[18] ^= h;
                  s[19] ^= l;
                  s[28] ^= h;
                  s[29] ^= l;
                  s[38] ^= h;
                  s[39] ^= l;
                  s[48] ^= h;
                  s[49] ^= l;

                  b0 = s[0];
                  b1 = s[1];
                  b32 = (s[11] << 4) | (s[10] >>> 28);
                  b33 = (s[10] << 4) | (s[11] >>> 28);
                  b14 = (s[20] << 3) | (s[21] >>> 29);
                  b15 = (s[21] << 3) | (s[20] >>> 29);
                  b46 = (s[31] << 9) | (s[30] >>> 23);
                  b47 = (s[30] << 9) | (s[31] >>> 23);
                  b28 = (s[40] << 18) | (s[41] >>> 14);
                  b29 = (s[41] << 18) | (s[40] >>> 14);
                  b20 = (s[2] << 1) | (s[3] >>> 31);
                  b21 = (s[3] << 1) | (s[2] >>> 31);
                  b2 = (s[13] << 12) | (s[12] >>> 20);
                  b3 = (s[12] << 12) | (s[13] >>> 20);
                  b34 = (s[22] << 10) | (s[23] >>> 22);
                  b35 = (s[23] << 10) | (s[22] >>> 22);
                  b16 = (s[33] << 13) | (s[32] >>> 19);
                  b17 = (s[32] << 13) | (s[33] >>> 19);
                  b48 = (s[42] << 2) | (s[43] >>> 30);
                  b49 = (s[43] << 2) | (s[42] >>> 30);
                  b40 = (s[5] << 30) | (s[4] >>> 2);
                  b41 = (s[4] << 30) | (s[5] >>> 2);
                  b22 = (s[14] << 6) | (s[15] >>> 26);
                  b23 = (s[15] << 6) | (s[14] >>> 26);
                  b4 = (s[25] << 11) | (s[24] >>> 21);
                  b5 = (s[24] << 11) | (s[25] >>> 21);
                  b36 = (s[34] << 15) | (s[35] >>> 17);
                  b37 = (s[35] << 15) | (s[34] >>> 17);
                  b18 = (s[45] << 29) | (s[44] >>> 3);
                  b19 = (s[44] << 29) | (s[45] >>> 3);
                  b10 = (s[6] << 28) | (s[7] >>> 4);
                  b11 = (s[7] << 28) | (s[6] >>> 4);
                  b42 = (s[17] << 23) | (s[16] >>> 9);
                  b43 = (s[16] << 23) | (s[17] >>> 9);
                  b24 = (s[26] << 25) | (s[27] >>> 7);
                  b25 = (s[27] << 25) | (s[26] >>> 7);
                  b6 = (s[36] << 21) | (s[37] >>> 11);
                  b7 = (s[37] << 21) | (s[36] >>> 11);
                  b38 = (s[47] << 24) | (s[46] >>> 8);
                  b39 = (s[46] << 24) | (s[47] >>> 8);
                  b30 = (s[8] << 27) | (s[9] >>> 5);
                  b31 = (s[9] << 27) | (s[8] >>> 5);
                  b12 = (s[18] << 20) | (s[19] >>> 12);
                  b13 = (s[19] << 20) | (s[18] >>> 12);
                  b44 = (s[29] << 7) | (s[28] >>> 25);
                  b45 = (s[28] << 7) | (s[29] >>> 25);
                  b26 = (s[38] << 8) | (s[39] >>> 24);
                  b27 = (s[39] << 8) | (s[38] >>> 24);
                  b8 = (s[48] << 14) | (s[49] >>> 18);
                  b9 = (s[49] << 14) | (s[48] >>> 18);

                  s[0] = b0 ^ (~b2 & b4);
                  s[1] = b1 ^ (~b3 & b5);
                  s[10] = b10 ^ (~b12 & b14);
                  s[11] = b11 ^ (~b13 & b15);
                  s[20] = b20 ^ (~b22 & b24);
                  s[21] = b21 ^ (~b23 & b25);
                  s[30] = b30 ^ (~b32 & b34);
                  s[31] = b31 ^ (~b33 & b35);
                  s[40] = b40 ^ (~b42 & b44);
                  s[41] = b41 ^ (~b43 & b45);
                  s[2] = b2 ^ (~b4 & b6);
                  s[3] = b3 ^ (~b5 & b7);
                  s[12] = b12 ^ (~b14 & b16);
                  s[13] = b13 ^ (~b15 & b17);
                  s[22] = b22 ^ (~b24 & b26);
                  s[23] = b23 ^ (~b25 & b27);
                  s[32] = b32 ^ (~b34 & b36);
                  s[33] = b33 ^ (~b35 & b37);
                  s[42] = b42 ^ (~b44 & b46);
                  s[43] = b43 ^ (~b45 & b47);
                  s[4] = b4 ^ (~b6 & b8);
                  s[5] = b5 ^ (~b7 & b9);
                  s[14] = b14 ^ (~b16 & b18);
                  s[15] = b15 ^ (~b17 & b19);
                  s[24] = b24 ^ (~b26 & b28);
                  s[25] = b25 ^ (~b27 & b29);
                  s[34] = b34 ^ (~b36 & b38);
                  s[35] = b35 ^ (~b37 & b39);
                  s[44] = b44 ^ (~b46 & b48);
                  s[45] = b45 ^ (~b47 & b49);
                  s[6] = b6 ^ (~b8 & b0);
                  s[7] = b7 ^ (~b9 & b1);
                  s[16] = b16 ^ (~b18 & b10);
                  s[17] = b17 ^ (~b19 & b11);
                  s[26] = b26 ^ (~b28 & b20);
                  s[27] = b27 ^ (~b29 & b21);
                  s[36] = b36 ^ (~b38 & b30);
                  s[37] = b37 ^ (~b39 & b31);
                  s[46] = b46 ^ (~b48 & b40);
                  s[47] = b47 ^ (~b49 & b41);
                  s[8] = b8 ^ (~b0 & b2);
                  s[9] = b9 ^ (~b1 & b3);
                  s[18] = b18 ^ (~b10 & b12);
                  s[19] = b19 ^ (~b11 & b13);
                  s[28] = b28 ^ (~b20 & b22);
                  s[29] = b29 ^ (~b21 & b23);
                  s[38] = b38 ^ (~b30 & b32);
                  s[39] = b39 ^ (~b31 & b33);
                  s[48] = b48 ^ (~b40 & b42);
                  s[49] = b49 ^ (~b41 & b43);

                  s[0] ^= RC[n];
                  s[1] ^= RC[n + 1];
                }
              };

              if (COMMON_JS) {
                module.exports = methods;
              } else {
                for (i = 0; i < methodNames.length; ++i) {
                  root[methodNames[i]] = methods[methodNames[i]];
                }
              }
            })();
            }(sha3$1));

            var sha3 = sha3$1.exports;

            function keccak256$1(data) {
                return '0x' + sha3.keccak_256(arrayify(data));
            }

            var lib_esm$h = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        keccak256: keccak256$1
            });

            const version$k = "rlp/5.5.0";

            const logger$r = new Logger(version$k);
            function arrayifyInteger(value) {
                const result = [];
                while (value) {
                    result.unshift(value & 0xff);
                    value >>= 8;
                }
                return result;
            }
            function unarrayifyInteger(data, offset, length) {
                let result = 0;
                for (let i = 0; i < length; i++) {
                    result = (result * 256) + data[offset + i];
                }
                return result;
            }
            function _encode(object) {
                if (Array.isArray(object)) {
                    let payload = [];
                    object.forEach(function (child) {
                        payload = payload.concat(_encode(child));
                    });
                    if (payload.length <= 55) {
                        payload.unshift(0xc0 + payload.length);
                        return payload;
                    }
                    const length = arrayifyInteger(payload.length);
                    length.unshift(0xf7 + length.length);
                    return length.concat(payload);
                }
                if (!isBytesLike(object)) {
                    logger$r.throwArgumentError("RLP object must be BytesLike", "object", object);
                }
                const data = Array.prototype.slice.call(arrayify(object));
                if (data.length === 1 && data[0] <= 0x7f) {
                    return data;
                }
                else if (data.length <= 55) {
                    data.unshift(0x80 + data.length);
                    return data;
                }
                const length = arrayifyInteger(data.length);
                length.unshift(0xb7 + length.length);
                return length.concat(data);
            }
            function encode$9(object) {
                return hexlify(_encode(object));
            }
            function _decodeChildren(data, offset, childOffset, length) {
                const result = [];
                while (childOffset < offset + 1 + length) {
                    const decoded = _decode(data, childOffset);
                    result.push(decoded.result);
                    childOffset += decoded.consumed;
                    if (childOffset > offset + 1 + length) {
                        logger$r.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
                    }
                }
                return { consumed: (1 + length), result: result };
            }
            // returns { consumed: number, result: Object }
            function _decode(data, offset) {
                if (data.length === 0) {
                    logger$r.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
                }
                // Array with extra length prefix
                if (data[offset] >= 0xf8) {
                    const lengthLength = data[offset] - 0xf7;
                    if (offset + 1 + lengthLength > data.length) {
                        logger$r.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
                    }
                    const length = unarrayifyInteger(data, offset + 1, lengthLength);
                    if (offset + 1 + lengthLength + length > data.length) {
                        logger$r.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
                    }
                    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
                }
                else if (data[offset] >= 0xc0) {
                    const length = data[offset] - 0xc0;
                    if (offset + 1 + length > data.length) {
                        logger$r.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
                    }
                    return _decodeChildren(data, offset, offset + 1, length);
                }
                else if (data[offset] >= 0xb8) {
                    const lengthLength = data[offset] - 0xb7;
                    if (offset + 1 + lengthLength > data.length) {
                        logger$r.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
                    }
                    const length = unarrayifyInteger(data, offset + 1, lengthLength);
                    if (offset + 1 + lengthLength + length > data.length) {
                        logger$r.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
                    }
                    const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
                    return { consumed: (1 + lengthLength + length), result: result };
                }
                else if (data[offset] >= 0x80) {
                    const length = data[offset] - 0x80;
                    if (offset + 1 + length > data.length) {
                        logger$r.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
                    }
                    const result = hexlify(data.slice(offset + 1, offset + 1 + length));
                    return { consumed: (1 + length), result: result };
                }
                return { consumed: 1, result: hexlify(data[offset]) };
            }
            function decode$8(data) {
                const bytes = arrayify(data);
                const decoded = _decode(bytes, 0);
                if (decoded.consumed !== bytes.length) {
                    logger$r.throwArgumentError("invalid rlp data", "data", data);
                }
                return decoded.result;
            }

            var lib_esm$g = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        encode: encode$9,
                        decode: decode$8
            });

            const version$j = "address/5.5.0";

            const logger$q = new Logger(version$j);
            function getChecksumAddress(address) {
                if (!isHexString(address, 20)) {
                    logger$q.throwArgumentError("invalid address", "address", address);
                }
                address = address.toLowerCase();
                const chars = address.substring(2).split("");
                const expanded = new Uint8Array(40);
                for (let i = 0; i < 40; i++) {
                    expanded[i] = chars[i].charCodeAt(0);
                }
                const hashed = arrayify(keccak256$1(expanded));
                for (let i = 0; i < 40; i += 2) {
                    if ((hashed[i >> 1] >> 4) >= 8) {
                        chars[i] = chars[i].toUpperCase();
                    }
                    if ((hashed[i >> 1] & 0x0f) >= 8) {
                        chars[i + 1] = chars[i + 1].toUpperCase();
                    }
                }
                return "0x" + chars.join("");
            }
            // Shims for environments that are missing some required constants and functions
            const MAX_SAFE_INTEGER = 0x1fffffffffffff;
            function log10(x) {
                if (Math.log10) {
                    return Math.log10(x);
                }
                return Math.log(x) / Math.LN10;
            }
            // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
            // Create lookup table
            const ibanLookup = {};
            for (let i = 0; i < 10; i++) {
                ibanLookup[String(i)] = String(i);
            }
            for (let i = 0; i < 26; i++) {
                ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
            }
            // How many decimal digits can we process? (for 64-bit float, this is 15)
            const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
            function ibanChecksum(address) {
                address = address.toUpperCase();
                address = address.substring(4) + address.substring(0, 2) + "00";
                let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
                // Javascript can handle integers safely up to 15 (decimal) digits
                while (expanded.length >= safeDigits) {
                    let block = expanded.substring(0, safeDigits);
                    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
                }
                let checksum = String(98 - (parseInt(expanded, 10) % 97));
                while (checksum.length < 2) {
                    checksum = "0" + checksum;
                }
                return checksum;
            }
            function getAddress(address) {
                let result = null;
                if (typeof (address) !== "string") {
                    logger$q.throwArgumentError("invalid address", "address", address);
                }
                if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
                    // Missing the 0x prefix
                    if (address.substring(0, 2) !== "0x") {
                        address = "0x" + address;
                    }
                    result = getChecksumAddress(address);
                    // It is a checksummed address with a bad checksum
                    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                        logger$q.throwArgumentError("bad address checksum", "address", address);
                    }
                    // Maybe ICAP? (we only support direct mode)
                }
                else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                    // It is an ICAP address with a bad checksum
                    if (address.substring(2, 4) !== ibanChecksum(address)) {
                        logger$q.throwArgumentError("bad icap checksum", "address", address);
                    }
                    result = _base36To16(address.substring(4));
                    while (result.length < 40) {
                        result = "0" + result;
                    }
                    result = getChecksumAddress("0x" + result);
                }
                else {
                    logger$q.throwArgumentError("invalid address", "address", address);
                }
                return result;
            }
            function isAddress$1(address) {
                try {
                    getAddress(address);
                    return true;
                }
                catch (error) { }
                return false;
            }
            function getIcapAddress(address) {
                let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
                while (base36.length < 30) {
                    base36 = "0" + base36;
                }
                return "XE" + ibanChecksum("XE00" + base36) + base36;
            }
            // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
            function getContractAddress(transaction) {
                let from = null;
                try {
                    from = getAddress(transaction.from);
                }
                catch (error) {
                    logger$q.throwArgumentError("missing from address", "transaction", transaction);
                }
                const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
                return getAddress(hexDataSlice(keccak256$1(encode$9([from, nonce])), 12));
            }
            function getCreate2Address(from, salt, initCodeHash) {
                if (hexDataLength(salt) !== 32) {
                    logger$q.throwArgumentError("salt must be 32 bytes", "salt", salt);
                }
                if (hexDataLength(initCodeHash) !== 32) {
                    logger$q.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
                }
                return getAddress(hexDataSlice(keccak256$1(concat$3(["0xff", getAddress(from), salt, initCodeHash])), 12));
            }

            var lib_esm$f = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        getAddress: getAddress,
                        isAddress: isAddress$1,
                        getIcapAddress: getIcapAddress,
                        getContractAddress: getContractAddress,
                        getCreate2Address: getCreate2Address
            });

            class AddressCoder extends Coder {
                constructor(localName) {
                    super("address", "address", localName, false);
                }
                defaultValue() {
                    return "0x0000000000000000000000000000000000000000";
                }
                encode(writer, value) {
                    try {
                        value = getAddress(value);
                    }
                    catch (error) {
                        this._throwError(error.message, value);
                    }
                    return writer.writeValue(value);
                }
                decode(reader) {
                    return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
                }
            }

            // Clones the functionality of an existing Coder, but without a localName
            class AnonymousCoder extends Coder {
                constructor(coder) {
                    super(coder.name, coder.type, undefined, coder.dynamic);
                    this.coder = coder;
                }
                defaultValue() {
                    return this.coder.defaultValue();
                }
                encode(writer, value) {
                    return this.coder.encode(writer, value);
                }
                decode(reader) {
                    return this.coder.decode(reader);
                }
            }

            const logger$p = new Logger(version$l);
            function pack$1(writer, coders, values) {
                let arrayValues = null;
                if (Array.isArray(values)) {
                    arrayValues = values;
                }
                else if (values && typeof (values) === "object") {
                    let unique = {};
                    arrayValues = coders.map((coder) => {
                        const name = coder.localName;
                        if (!name) {
                            logger$p.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
                                argument: "values",
                                coder: coder,
                                value: values
                            });
                        }
                        if (unique[name]) {
                            logger$p.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
                                argument: "values",
                                coder: coder,
                                value: values
                            });
                        }
                        unique[name] = true;
                        return values[name];
                    });
                }
                else {
                    logger$p.throwArgumentError("invalid tuple value", "tuple", values);
                }
                if (coders.length !== arrayValues.length) {
                    logger$p.throwArgumentError("types/value length mismatch", "tuple", values);
                }
                let staticWriter = new Writer(writer.wordSize);
                let dynamicWriter = new Writer(writer.wordSize);
                let updateFuncs = [];
                coders.forEach((coder, index) => {
                    let value = arrayValues[index];
                    if (coder.dynamic) {
                        // Get current dynamic offset (for the future pointer)
                        let dynamicOffset = dynamicWriter.length;
                        // Encode the dynamic value into the dynamicWriter
                        coder.encode(dynamicWriter, value);
                        // Prepare to populate the correct offset once we are done
                        let updateFunc = staticWriter.writeUpdatableValue();
                        updateFuncs.push((baseOffset) => {
                            updateFunc(baseOffset + dynamicOffset);
                        });
                    }
                    else {
                        coder.encode(staticWriter, value);
                    }
                });
                // Backfill all the dynamic offsets, now that we know the static length
                updateFuncs.forEach((func) => { func(staticWriter.length); });
                let length = writer.appendWriter(staticWriter);
                length += writer.appendWriter(dynamicWriter);
                return length;
            }
            function unpack(reader, coders) {
                let values = [];
                // A reader anchored to this base
                let baseReader = reader.subReader(0);
                coders.forEach((coder) => {
                    let value = null;
                    if (coder.dynamic) {
                        let offset = reader.readValue();
                        let offsetReader = baseReader.subReader(offset.toNumber());
                        try {
                            value = coder.decode(offsetReader);
                        }
                        catch (error) {
                            // Cannot recover from this
                            if (error.code === Logger.errors.BUFFER_OVERRUN) {
                                throw error;
                            }
                            value = error;
                            value.baseType = coder.name;
                            value.name = coder.localName;
                            value.type = coder.type;
                        }
                    }
                    else {
                        try {
                            value = coder.decode(reader);
                        }
                        catch (error) {
                            // Cannot recover from this
                            if (error.code === Logger.errors.BUFFER_OVERRUN) {
                                throw error;
                            }
                            value = error;
                            value.baseType = coder.name;
                            value.name = coder.localName;
                            value.type = coder.type;
                        }
                    }
                    if (value != undefined) {
                        values.push(value);
                    }
                });
                // We only output named properties for uniquely named coders
                const uniqueNames = coders.reduce((accum, coder) => {
                    const name = coder.localName;
                    if (name) {
                        if (!accum[name]) {
                            accum[name] = 0;
                        }
                        accum[name]++;
                    }
                    return accum;
                }, {});
                // Add any named parameters (i.e. tuples)
                coders.forEach((coder, index) => {
                    let name = coder.localName;
                    if (!name || uniqueNames[name] !== 1) {
                        return;
                    }
                    if (name === "length") {
                        name = "_length";
                    }
                    if (values[name] != null) {
                        return;
                    }
                    const value = values[index];
                    if (value instanceof Error) {
                        Object.defineProperty(values, name, {
                            enumerable: true,
                            get: () => { throw value; }
                        });
                    }
                    else {
                        values[name] = value;
                    }
                });
                for (let i = 0; i < values.length; i++) {
                    const value = values[i];
                    if (value instanceof Error) {
                        Object.defineProperty(values, i, {
                            enumerable: true,
                            get: () => { throw value; }
                        });
                    }
                }
                return Object.freeze(values);
            }
            class ArrayCoder extends Coder {
                constructor(coder, length, localName) {
                    const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
                    const dynamic = (length === -1 || coder.dynamic);
                    super("array", type, localName, dynamic);
                    this.coder = coder;
                    this.length = length;
                }
                defaultValue() {
                    // Verifies the child coder is valid (even if the array is dynamic or 0-length)
                    const defaultChild = this.coder.defaultValue();
                    const result = [];
                    for (let i = 0; i < this.length; i++) {
                        result.push(defaultChild);
                    }
                    return result;
                }
                encode(writer, value) {
                    if (!Array.isArray(value)) {
                        this._throwError("expected array value", value);
                    }
                    let count = this.length;
                    if (count === -1) {
                        count = value.length;
                        writer.writeValue(value.length);
                    }
                    logger$p.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
                    let coders = [];
                    for (let i = 0; i < value.length; i++) {
                        coders.push(this.coder);
                    }
                    return pack$1(writer, coders, value);
                }
                decode(reader) {
                    let count = this.length;
                    if (count === -1) {
                        count = reader.readValue().toNumber();
                        // Check that there is *roughly* enough data to ensure
                        // stray random data is not being read as a length. Each
                        // slot requires at least 32 bytes for their value (or 32
                        // bytes as a link to the data). This could use a much
                        // tighter bound, but we are erroring on the side of safety.
                        if (count * 32 > reader._data.length) {
                            logger$p.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
                                length: reader._data.length,
                                count: count
                            });
                        }
                    }
                    let coders = [];
                    for (let i = 0; i < count; i++) {
                        coders.push(new AnonymousCoder(this.coder));
                    }
                    return reader.coerce(this.name, unpack(reader, coders));
                }
            }

            class BooleanCoder extends Coder {
                constructor(localName) {
                    super("bool", "bool", localName, false);
                }
                defaultValue() {
                    return false;
                }
                encode(writer, value) {
                    return writer.writeValue(value ? 1 : 0);
                }
                decode(reader) {
                    return reader.coerce(this.type, !reader.readValue().isZero());
                }
            }

            class DynamicBytesCoder extends Coder {
                constructor(type, localName) {
                    super(type, type, localName, true);
                }
                defaultValue() {
                    return "0x";
                }
                encode(writer, value) {
                    value = arrayify(value);
                    let length = writer.writeValue(value.length);
                    length += writer.writeBytes(value);
                    return length;
                }
                decode(reader) {
                    return reader.readBytes(reader.readValue().toNumber(), true);
                }
            }
            class BytesCoder extends DynamicBytesCoder {
                constructor(localName) {
                    super("bytes", localName);
                }
                decode(reader) {
                    return reader.coerce(this.name, hexlify(super.decode(reader)));
                }
            }

            // @TODO: Merge this with bytes
            class FixedBytesCoder extends Coder {
                constructor(size, localName) {
                    let name = "bytes" + String(size);
                    super(name, name, localName, false);
                    this.size = size;
                }
                defaultValue() {
                    return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
                }
                encode(writer, value) {
                    let data = arrayify(value);
                    if (data.length !== this.size) {
                        this._throwError("incorrect data length", value);
                    }
                    return writer.writeBytes(data);
                }
                decode(reader) {
                    return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
                }
            }

            class NullCoder extends Coder {
                constructor(localName) {
                    super("null", "", localName, false);
                }
                defaultValue() {
                    return null;
                }
                encode(writer, value) {
                    if (value != null) {
                        this._throwError("not null", value);
                    }
                    return writer.writeBytes([]);
                }
                decode(reader) {
                    reader.readBytes(0);
                    return reader.coerce(this.name, null);
                }
            }

            const AddressZero = "0x0000000000000000000000000000000000000000";

            const NegativeOne$1 = ( /*#__PURE__*/BigNumber.from(-1));
            const Zero$1 = ( /*#__PURE__*/BigNumber.from(0));
            const One$1 = ( /*#__PURE__*/BigNumber.from(1));
            const MaxUint256$1 = ( /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

            const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

            class NumberCoder extends Coder {
                constructor(size, signed, localName) {
                    const name = ((signed ? "int" : "uint") + (size * 8));
                    super(name, name, localName, false);
                    this.size = size;
                    this.signed = signed;
                }
                defaultValue() {
                    return 0;
                }
                encode(writer, value) {
                    let v = BigNumber.from(value);
                    // Check bounds are safe for encoding
                    let maxUintValue = MaxUint256$1.mask(writer.wordSize * 8);
                    if (this.signed) {
                        let bounds = maxUintValue.mask(this.size * 8 - 1);
                        if (v.gt(bounds) || v.lt(bounds.add(One$1).mul(NegativeOne$1))) {
                            this._throwError("value out-of-bounds", value);
                        }
                    }
                    else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
                        this._throwError("value out-of-bounds", value);
                    }
                    v = v.toTwos(this.size * 8).mask(this.size * 8);
                    if (this.signed) {
                        v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
                    }
                    return writer.writeValue(v);
                }
                decode(reader) {
                    let value = reader.readValue().mask(this.size * 8);
                    if (this.signed) {
                        value = value.fromTwos(this.size * 8);
                    }
                    return reader.coerce(this.name, value);
                }
            }

            const version$i = "strings/5.5.0";

            const logger$o = new Logger(version$i);
            ///////////////////////////////
            var UnicodeNormalizationForm;
            (function (UnicodeNormalizationForm) {
                UnicodeNormalizationForm["current"] = "";
                UnicodeNormalizationForm["NFC"] = "NFC";
                UnicodeNormalizationForm["NFD"] = "NFD";
                UnicodeNormalizationForm["NFKC"] = "NFKC";
                UnicodeNormalizationForm["NFKD"] = "NFKD";
            })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
            var Utf8ErrorReason;
            (function (Utf8ErrorReason) {
                // A continuation byte was present where there was nothing to continue
                // - offset = the index the codepoint began in
                Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
                // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
                // - offset = the index the codepoint began in
                Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
                // The string is too short to process the expected codepoint
                // - offset = the index the codepoint began in
                Utf8ErrorReason["OVERRUN"] = "string overrun";
                // A missing continuation byte was expected but not found
                // - offset = the index the continuation byte was expected at
                Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
                // The computed code point is outside the range for UTF-8
                // - offset       = start of this codepoint
                // - badCodepoint = the computed codepoint; outside the UTF-8 range
                Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
                // UTF-8 strings may not contain UTF-16 surrogate pairs
                // - offset       = start of this codepoint
                // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
                Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
                // The string is an overlong representation
                // - offset       = start of this codepoint
                // - badCodepoint = the computed codepoint; already bounds checked
                Utf8ErrorReason["OVERLONG"] = "overlong representation";
            })(Utf8ErrorReason || (Utf8ErrorReason = {}));
            function errorFunc(reason, offset, bytes, output, badCodepoint) {
                return logger$o.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
            }
            function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
                // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
                if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
                    let i = 0;
                    for (let o = offset + 1; o < bytes.length; o++) {
                        if (bytes[o] >> 6 !== 0x02) {
                            break;
                        }
                        i++;
                    }
                    return i;
                }
                // This byte runs us past the end of the string, so just jump to the end
                // (but the first byte was read already read and therefore skipped)
                if (reason === Utf8ErrorReason.OVERRUN) {
                    return bytes.length - offset - 1;
                }
                // Nothing to skip
                return 0;
            }
            function replaceFunc(reason, offset, bytes, output, badCodepoint) {
                // Overlong representations are otherwise "valid" code points; just non-deistingtished
                if (reason === Utf8ErrorReason.OVERLONG) {
                    output.push(badCodepoint);
                    return 0;
                }
                // Put the replacement character into the output
                output.push(0xfffd);
                // Otherwise, process as if ignoring errors
                return ignoreFunc(reason, offset, bytes);
            }
            // Common error handing strategies
            const Utf8ErrorFuncs = Object.freeze({
                error: errorFunc,
                ignore: ignoreFunc,
                replace: replaceFunc
            });
            // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
            function getUtf8CodePoints(bytes, onError) {
                if (onError == null) {
                    onError = Utf8ErrorFuncs.error;
                }
                bytes = arrayify(bytes);
                const result = [];
                let i = 0;
                // Invalid bytes are ignored
                while (i < bytes.length) {
                    const c = bytes[i++];
                    // 0xxx xxxx
                    if (c >> 7 === 0) {
                        result.push(c);
                        continue;
                    }
                    // Multibyte; how many bytes left for this character?
                    let extraLength = null;
                    let overlongMask = null;
                    // 110x xxxx 10xx xxxx
                    if ((c & 0xe0) === 0xc0) {
                        extraLength = 1;
                        overlongMask = 0x7f;
                        // 1110 xxxx 10xx xxxx 10xx xxxx
                    }
                    else if ((c & 0xf0) === 0xe0) {
                        extraLength = 2;
                        overlongMask = 0x7ff;
                        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
                    }
                    else if ((c & 0xf8) === 0xf0) {
                        extraLength = 3;
                        overlongMask = 0xffff;
                    }
                    else {
                        if ((c & 0xc0) === 0x80) {
                            i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
                        }
                        else {
                            i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
                        }
                        continue;
                    }
                    // Do we have enough bytes in our data?
                    if (i - 1 + extraLength >= bytes.length) {
                        i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
                        continue;
                    }
                    // Remove the length prefix from the char
                    let res = c & ((1 << (8 - extraLength - 1)) - 1);
                    for (let j = 0; j < extraLength; j++) {
                        let nextChar = bytes[i];
                        // Invalid continuation byte
                        if ((nextChar & 0xc0) != 0x80) {
                            i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                            res = null;
                            break;
                        }
                        res = (res << 6) | (nextChar & 0x3f);
                        i++;
                    }
                    // See above loop for invalid continuation byte
                    if (res === null) {
                        continue;
                    }
                    // Maximum code point
                    if (res > 0x10ffff) {
                        i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
                        continue;
                    }
                    // Reserved for UTF-16 surrogate halves
                    if (res >= 0xd800 && res <= 0xdfff) {
                        i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
                        continue;
                    }
                    // Check for overlong sequences (more bytes than needed)
                    if (res <= overlongMask) {
                        i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
                        continue;
                    }
                    result.push(res);
                }
                return result;
            }
            // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
            function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
                if (form != UnicodeNormalizationForm.current) {
                    logger$o.checkNormalize();
                    str = str.normalize(form);
                }
                let result = [];
                for (let i = 0; i < str.length; i++) {
                    const c = str.charCodeAt(i);
                    if (c < 0x80) {
                        result.push(c);
                    }
                    else if (c < 0x800) {
                        result.push((c >> 6) | 0xc0);
                        result.push((c & 0x3f) | 0x80);
                    }
                    else if ((c & 0xfc00) == 0xd800) {
                        i++;
                        const c2 = str.charCodeAt(i);
                        if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                            throw new Error("invalid utf-8 string");
                        }
                        // Surrogate Pair
                        const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                        result.push((pair >> 18) | 0xf0);
                        result.push(((pair >> 12) & 0x3f) | 0x80);
                        result.push(((pair >> 6) & 0x3f) | 0x80);
                        result.push((pair & 0x3f) | 0x80);
                    }
                    else {
                        result.push((c >> 12) | 0xe0);
                        result.push(((c >> 6) & 0x3f) | 0x80);
                        result.push((c & 0x3f) | 0x80);
                    }
                }
                return arrayify(result);
            }
            function escapeChar(value) {
                const hex = ("0000" + value.toString(16));
                return "\\u" + hex.substring(hex.length - 4);
            }
            function _toEscapedUtf8String(bytes, onError) {
                return '"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {
                    if (codePoint < 256) {
                        switch (codePoint) {
                            case 8: return "\\b";
                            case 9: return "\\t";
                            case 10: return "\\n";
                            case 13: return "\\r";
                            case 34: return "\\\"";
                            case 92: return "\\\\";
                        }
                        if (codePoint >= 32 && codePoint < 127) {
                            return String.fromCharCode(codePoint);
                        }
                    }
                    if (codePoint <= 0xffff) {
                        return escapeChar(codePoint);
                    }
                    codePoint -= 0x10000;
                    return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
                }).join("") + '"';
            }
            function _toUtf8String(codePoints) {
                return codePoints.map((codePoint) => {
                    if (codePoint <= 0xffff) {
                        return String.fromCharCode(codePoint);
                    }
                    codePoint -= 0x10000;
                    return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
                }).join("");
            }
            function toUtf8String(bytes, onError) {
                return _toUtf8String(getUtf8CodePoints(bytes, onError));
            }
            function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
                return getUtf8CodePoints(toUtf8Bytes(str, form));
            }

            function formatBytes32String(text) {
                // Get the bytes
                const bytes = toUtf8Bytes(text);
                // Check we have room for null-termination
                if (bytes.length > 31) {
                    throw new Error("bytes32 string must be less than 32 bytes");
                }
                // Zero-pad (implicitly null-terminates)
                return hexlify(concat$3([bytes, HashZero]).slice(0, 32));
            }
            function parseBytes32String(bytes) {
                const data = arrayify(bytes);
                // Must be 32 bytes with a null-termination
                if (data.length !== 32) {
                    throw new Error("invalid bytes32 - not 32 bytes long");
                }
                if (data[31] !== 0) {
                    throw new Error("invalid bytes32 string - no null terminator");
                }
                // Find the null termination
                let length = 31;
                while (data[length - 1] === 0) {
                    length--;
                }
                // Determine the string value
                return toUtf8String(data.slice(0, length));
            }

            function bytes2(data) {
                if ((data.length % 4) !== 0) {
                    throw new Error("bad data");
                }
                let result = [];
                for (let i = 0; i < data.length; i += 4) {
                    result.push(parseInt(data.substring(i, i + 4), 16));
                }
                return result;
            }
            function createTable(data, func) {
                if (!func) {
                    func = function (value) { return [parseInt(value, 16)]; };
                }
                let lo = 0;
                let result = {};
                data.split(",").forEach((pair) => {
                    let comps = pair.split(":");
                    lo += parseInt(comps[0], 16);
                    result[lo] = func(comps[1]);
                });
                return result;
            }
            function createRangeTable(data) {
                let hi = 0;
                return data.split(",").map((v) => {
                    let comps = v.split("-");
                    if (comps.length === 1) {
                        comps[1] = "0";
                    }
                    else if (comps[1] === "") {
                        comps[1] = "1";
                    }
                    let lo = hi + parseInt(comps[0], 16);
                    hi = parseInt(comps[1], 16);
                    return { l: lo, h: hi };
                });
            }
            function matchMap(value, ranges) {
                let lo = 0;
                for (let i = 0; i < ranges.length; i++) {
                    let range = ranges[i];
                    lo += range.l;
                    if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {
                        if (range.e && range.e.indexOf(value - lo) !== -1) {
                            continue;
                        }
                        return range;
                    }
                }
                return null;
            }
            const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
            // @TODO: Make this relative...
            const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
            const Table_B_2_ranges = [
                { h: 25, s: 32, l: 65 },
                { h: 30, s: 32, e: [23], l: 127 },
                { h: 54, s: 1, e: [48], l: 64, d: 2 },
                { h: 14, s: 1, l: 57, d: 2 },
                { h: 44, s: 1, l: 17, d: 2 },
                { h: 10, s: 1, e: [2, 6, 8], l: 61, d: 2 },
                { h: 16, s: 1, l: 68, d: 2 },
                { h: 84, s: 1, e: [18, 24, 66], l: 19, d: 2 },
                { h: 26, s: 32, e: [17], l: 435 },
                { h: 22, s: 1, l: 71, d: 2 },
                { h: 15, s: 80, l: 40 },
                { h: 31, s: 32, l: 16 },
                { h: 32, s: 1, l: 80, d: 2 },
                { h: 52, s: 1, l: 42, d: 2 },
                { h: 12, s: 1, l: 55, d: 2 },
                { h: 40, s: 1, e: [38], l: 15, d: 2 },
                { h: 14, s: 1, l: 48, d: 2 },
                { h: 37, s: 48, l: 49 },
                { h: 148, s: 1, l: 6351, d: 2 },
                { h: 88, s: 1, l: 160, d: 2 },
                { h: 15, s: 16, l: 704 },
                { h: 25, s: 26, l: 854 },
                { h: 25, s: 32, l: 55915 },
                { h: 37, s: 40, l: 1247 },
                { h: 25, s: -119711, l: 53248 },
                { h: 25, s: -119763, l: 52 },
                { h: 25, s: -119815, l: 52 },
                { h: 25, s: -119867, e: [1, 4, 5, 7, 8, 11, 12, 17], l: 52 },
                { h: 25, s: -119919, l: 52 },
                { h: 24, s: -119971, e: [2, 7, 8, 17], l: 52 },
                { h: 24, s: -120023, e: [2, 7, 13, 15, 16, 17], l: 52 },
                { h: 25, s: -120075, l: 52 },
                { h: 25, s: -120127, l: 52 },
                { h: 25, s: -120179, l: 52 },
                { h: 25, s: -120231, l: 52 },
                { h: 25, s: -120283, l: 52 },
                { h: 25, s: -120335, l: 52 },
                { h: 24, s: -119543, e: [17], l: 56 },
                { h: 24, s: -119601, e: [17], l: 58 },
                { h: 24, s: -119659, e: [17], l: 58 },
                { h: 24, s: -119717, e: [17], l: 58 },
                { h: 24, s: -119775, e: [17], l: 58 }
            ];
            const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
            const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
            const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
            const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
            function flatten(values) {
                return values.reduce((accum, value) => {
                    value.forEach((value) => { accum.push(value); });
                    return accum;
                }, []);
            }
            function _nameprepTableA1(codepoint) {
                return !!matchMap(codepoint, Table_A_1_ranges);
            }
            function _nameprepTableB2(codepoint) {
                let range = matchMap(codepoint, Table_B_2_ranges);
                if (range) {
                    return [codepoint + range.s];
                }
                let codes = Table_B_2_lut_abs[codepoint];
                if (codes) {
                    return codes;
                }
                let shift = Table_B_2_lut_rel[codepoint];
                if (shift) {
                    return [codepoint + shift[0]];
                }
                let complex = Table_B_2_complex[codepoint];
                if (complex) {
                    return complex;
                }
                return null;
            }
            function _nameprepTableC(codepoint) {
                return !!matchMap(codepoint, Table_C_ranges);
            }
            function nameprep(value) {
                // This allows platforms with incomplete normalize to bypass
                // it for very basic names which the built-in toLowerCase
                // will certainly handle correctly
                if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
                    return value.toLowerCase();
                }
                // Get the code points (keeping the current normalization)
                let codes = toUtf8CodePoints(value);
                codes = flatten(codes.map((code) => {
                    // Substitute Table B.1 (Maps to Nothing)
                    if (Table_B_1_flags.indexOf(code) >= 0) {
                        return [];
                    }
                    if (code >= 0xfe00 && code <= 0xfe0f) {
                        return [];
                    }
                    // Substitute Table B.2 (Case Folding)
                    let codesTableB2 = _nameprepTableB2(code);
                    if (codesTableB2) {
                        return codesTableB2;
                    }
                    // No Substitution
                    return [code];
                }));
                // Normalize using form KC
                codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);
                // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9
                codes.forEach((code) => {
                    if (_nameprepTableC(code)) {
                        throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
                    }
                });
                // Prohibit Unassigned Code Points (Table A.1)
                codes.forEach((code) => {
                    if (_nameprepTableA1(code)) {
                        throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
                    }
                });
                // IDNA extras
                let name = _toUtf8String(codes);
                // IDNA: 4.2.3.1
                if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
                    throw new Error("invalid hyphen");
                }
                // IDNA: 4.2.4
                if (name.length > 63) {
                    throw new Error("too long");
                }
                return name;
            }

            var lib_esm$e = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        _toEscapedUtf8String: _toEscapedUtf8String,
                        toUtf8Bytes: toUtf8Bytes,
                        toUtf8CodePoints: toUtf8CodePoints,
                        toUtf8String: toUtf8String,
                        Utf8ErrorFuncs: Utf8ErrorFuncs,
                        get Utf8ErrorReason () { return Utf8ErrorReason; },
                        get UnicodeNormalizationForm () { return UnicodeNormalizationForm; },
                        formatBytes32String: formatBytes32String,
                        parseBytes32String: parseBytes32String,
                        nameprep: nameprep
            });

            class StringCoder extends DynamicBytesCoder {
                constructor(localName) {
                    super("string", localName);
                }
                defaultValue() {
                    return "";
                }
                encode(writer, value) {
                    return super.encode(writer, toUtf8Bytes(value));
                }
                decode(reader) {
                    return toUtf8String(super.decode(reader));
                }
            }

            class TupleCoder extends Coder {
                constructor(coders, localName) {
                    let dynamic = false;
                    const types = [];
                    coders.forEach((coder) => {
                        if (coder.dynamic) {
                            dynamic = true;
                        }
                        types.push(coder.type);
                    });
                    const type = ("tuple(" + types.join(",") + ")");
                    super("tuple", type, localName, dynamic);
                    this.coders = coders;
                }
                defaultValue() {
                    const values = [];
                    this.coders.forEach((coder) => {
                        values.push(coder.defaultValue());
                    });
                    // We only output named properties for uniquely named coders
                    const uniqueNames = this.coders.reduce((accum, coder) => {
                        const name = coder.localName;
                        if (name) {
                            if (!accum[name]) {
                                accum[name] = 0;
                            }
                            accum[name]++;
                        }
                        return accum;
                    }, {});
                    // Add named values
                    this.coders.forEach((coder, index) => {
                        let name = coder.localName;
                        if (!name || uniqueNames[name] !== 1) {
                            return;
                        }
                        if (name === "length") {
                            name = "_length";
                        }
                        if (values[name] != null) {
                            return;
                        }
                        values[name] = values[index];
                    });
                    return Object.freeze(values);
                }
                encode(writer, value) {
                    return pack$1(writer, this.coders, value);
                }
                decode(reader) {
                    return reader.coerce(this.name, unpack(reader, this.coders));
                }
            }

            const logger$n = new Logger(version$l);
            const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
            const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
            class AbiCoder {
                constructor(coerceFunc) {
                    logger$n.checkNew(new.target, AbiCoder);
                    defineReadOnly(this, "coerceFunc", coerceFunc || null);
                }
                _getCoder(param) {
                    switch (param.baseType) {
                        case "address":
                            return new AddressCoder(param.name);
                        case "bool":
                            return new BooleanCoder(param.name);
                        case "string":
                            return new StringCoder(param.name);
                        case "bytes":
                            return new BytesCoder(param.name);
                        case "array":
                            return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                        case "tuple":
                            return new TupleCoder((param.components || []).map((component) => {
                                return this._getCoder(component);
                            }), param.name);
                        case "":
                            return new NullCoder(param.name);
                    }
                    // u?int[0-9]*
                    let match = param.type.match(paramTypeNumber);
                    if (match) {
                        let size = parseInt(match[2] || "256");
                        if (size === 0 || size > 256 || (size % 8) !== 0) {
                            logger$n.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                        }
                        return new NumberCoder(size / 8, (match[1] === "int"), param.name);
                    }
                    // bytes[0-9]+
                    match = param.type.match(paramTypeBytes);
                    if (match) {
                        let size = parseInt(match[1]);
                        if (size === 0 || size > 32) {
                            logger$n.throwArgumentError("invalid bytes length", "param", param);
                        }
                        return new FixedBytesCoder(size, param.name);
                    }
                    return logger$n.throwArgumentError("invalid type", "type", param.type);
                }
                _getWordSize() { return 32; }
                _getReader(data, allowLoose) {
                    return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
                }
                _getWriter() {
                    return new Writer(this._getWordSize());
                }
                getDefaultValue(types) {
                    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
                    const coder = new TupleCoder(coders, "_");
                    return coder.defaultValue();
                }
                encode(types, values) {
                    if (types.length !== values.length) {
                        logger$n.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                            count: { types: types.length, values: values.length },
                            value: { types: types, values: values }
                        });
                    }
                    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
                    const coder = (new TupleCoder(coders, "_"));
                    const writer = this._getWriter();
                    coder.encode(writer, values);
                    return writer.data;
                }
                decode(types, data, loose) {
                    const coders = types.map((type) => this._getCoder(ParamType.from(type)));
                    const coder = new TupleCoder(coders, "_");
                    return coder.decode(this._getReader(arrayify(data), loose));
                }
            }
            const defaultAbiCoder = new AbiCoder();

            function id$1(text) {
                return keccak256$1(toUtf8Bytes(text));
            }

            const version$h = "hash/5.5.0";

            const logger$m = new Logger(version$h);
            const Zeros$1 = new Uint8Array(32);
            Zeros$1.fill(0);
            const Partition = new RegExp("^((.*)\\.)?([^.]+)$");
            function isValidName(name) {
                try {
                    const comps = name.split(".");
                    for (let i = 0; i < comps.length; i++) {
                        if (nameprep(comps[i]).length === 0) {
                            throw new Error("empty");
                        }
                    }
                    return true;
                }
                catch (error) { }
                return false;
            }
            function namehash(name) {
                /* istanbul ignore if */
                if (typeof (name) !== "string") {
                    logger$m.throwArgumentError("invalid ENS name; not a string", "name", name);
                }
                let current = name;
                let result = Zeros$1;
                while (current.length) {
                    const partition = current.match(Partition);
                    if (partition == null || partition[2] === "") {
                        logger$m.throwArgumentError("invalid ENS address; missing component", "name", name);
                    }
                    const label = toUtf8Bytes(nameprep(partition[3]));
                    result = keccak256$1(concat$3([result, keccak256$1(label)]));
                    current = partition[2] || "";
                }
                return hexlify(result);
            }

            const messagePrefix = "\x19Ethereum Signed Message:\n";
            function hashMessage(message) {
                if (typeof (message) === "string") {
                    message = toUtf8Bytes(message);
                }
                return keccak256$1(concat$3([
                    toUtf8Bytes(messagePrefix),
                    toUtf8Bytes(String(message.length)),
                    message
                ]));
            }

            var __awaiter$9 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$l = new Logger(version$h);
            const padding = new Uint8Array(32);
            padding.fill(0);
            const NegativeOne = BigNumber.from(-1);
            const Zero = BigNumber.from(0);
            const One = BigNumber.from(1);
            const MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
            function hexPadRight(value) {
                const bytes = arrayify(value);
                const padOffset = bytes.length % 32;
                if (padOffset) {
                    return hexConcat([bytes, padding.slice(padOffset)]);
                }
                return hexlify(bytes);
            }
            const hexTrue = hexZeroPad(One.toHexString(), 32);
            const hexFalse = hexZeroPad(Zero.toHexString(), 32);
            const domainFieldTypes = {
                name: "string",
                version: "string",
                chainId: "uint256",
                verifyingContract: "address",
                salt: "bytes32"
            };
            const domainFieldNames = [
                "name", "version", "chainId", "verifyingContract", "salt"
            ];
            function checkString(key) {
                return function (value) {
                    if (typeof (value) !== "string") {
                        logger$l.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
                    }
                    return value;
                };
            }
            const domainChecks = {
                name: checkString("name"),
                version: checkString("version"),
                chainId: function (value) {
                    try {
                        return BigNumber.from(value).toString();
                    }
                    catch (error) { }
                    return logger$l.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
                },
                verifyingContract: function (value) {
                    try {
                        return getAddress(value).toLowerCase();
                    }
                    catch (error) { }
                    return logger$l.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
                },
                salt: function (value) {
                    try {
                        const bytes = arrayify(value);
                        if (bytes.length !== 32) {
                            throw new Error("bad length");
                        }
                        return hexlify(bytes);
                    }
                    catch (error) { }
                    return logger$l.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
                }
            };
            function getBaseEncoder(type) {
                // intXX and uintXX
                {
                    const match = type.match(/^(u?)int(\d*)$/);
                    if (match) {
                        const signed = (match[1] === "");
                        const width = parseInt(match[2] || "256");
                        if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                            logger$l.throwArgumentError("invalid numeric width", "type", type);
                        }
                        const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);
                        const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
                        return function (value) {
                            const v = BigNumber.from(value);
                            if (v.lt(boundsLower) || v.gt(boundsUpper)) {
                                logger$l.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                            }
                            return hexZeroPad(v.toTwos(256).toHexString(), 32);
                        };
                    }
                }
                // bytesXX
                {
                    const match = type.match(/^bytes(\d+)$/);
                    if (match) {
                        const width = parseInt(match[1]);
                        if (width === 0 || width > 32 || match[1] !== String(width)) {
                            logger$l.throwArgumentError("invalid bytes width", "type", type);
                        }
                        return function (value) {
                            const bytes = arrayify(value);
                            if (bytes.length !== width) {
                                logger$l.throwArgumentError(`invalid length for ${type}`, "value", value);
                            }
                            return hexPadRight(value);
                        };
                    }
                }
                switch (type) {
                    case "address": return function (value) {
                        return hexZeroPad(getAddress(value), 32);
                    };
                    case "bool": return function (value) {
                        return ((!value) ? hexFalse : hexTrue);
                    };
                    case "bytes": return function (value) {
                        return keccak256$1(value);
                    };
                    case "string": return function (value) {
                        return id$1(value);
                    };
                }
                return null;
            }
            function encodeType(name, fields) {
                return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
            }
            class TypedDataEncoder {
                constructor(types) {
                    defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
                    defineReadOnly(this, "_encoderCache", {});
                    defineReadOnly(this, "_types", {});
                    // Link struct types to their direct child structs
                    const links = {};
                    // Link structs to structs which contain them as a child
                    const parents = {};
                    // Link all subtypes within a given struct
                    const subtypes = {};
                    Object.keys(types).forEach((type) => {
                        links[type] = {};
                        parents[type] = [];
                        subtypes[type] = {};
                    });
                    for (const name in types) {
                        const uniqueNames = {};
                        types[name].forEach((field) => {
                            // Check each field has a unique name
                            if (uniqueNames[field.name]) {
                                logger$l.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                            }
                            uniqueNames[field.name] = true;
                            // Get the base type (drop any array specifiers)
                            const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                            if (baseType === name) {
                                logger$l.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                            }
                            // Is this a base encoding type?
                            const encoder = getBaseEncoder(baseType);
                            if (encoder) {
                                return;
                            }
                            if (!parents[baseType]) {
                                logger$l.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                            }
                            // Add linkage
                            parents[baseType].push(name);
                            links[name][baseType] = true;
                        });
                    }
                    // Deduce the primary type
                    const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));
                    if (primaryTypes.length === 0) {
                        logger$l.throwArgumentError("missing primary type", "types", types);
                    }
                    else if (primaryTypes.length > 1) {
                        logger$l.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", types);
                    }
                    defineReadOnly(this, "primaryType", primaryTypes[0]);
                    // Check for circular type references
                    function checkCircular(type, found) {
                        if (found[type]) {
                            logger$l.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
                        }
                        found[type] = true;
                        Object.keys(links[type]).forEach((child) => {
                            if (!parents[child]) {
                                return;
                            }
                            // Recursively check children
                            checkCircular(child, found);
                            // Mark all ancestors as having this decendant
                            Object.keys(found).forEach((subtype) => {
                                subtypes[subtype][child] = true;
                            });
                        });
                        delete found[type];
                    }
                    checkCircular(this.primaryType, {});
                    // Compute each fully describe type
                    for (const name in subtypes) {
                        const st = Object.keys(subtypes[name]);
                        st.sort();
                        this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join("");
                    }
                }
                getEncoder(type) {
                    let encoder = this._encoderCache[type];
                    if (!encoder) {
                        encoder = this._encoderCache[type] = this._getEncoder(type);
                    }
                    return encoder;
                }
                _getEncoder(type) {
                    // Basic encoder type (address, bool, uint256, etc)
                    {
                        const encoder = getBaseEncoder(type);
                        if (encoder) {
                            return encoder;
                        }
                    }
                    // Array
                    const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
                    if (match) {
                        const subtype = match[1];
                        const subEncoder = this.getEncoder(subtype);
                        const length = parseInt(match[3]);
                        return (value) => {
                            if (length >= 0 && value.length !== length) {
                                logger$l.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                            }
                            let result = value.map(subEncoder);
                            if (this._types[subtype]) {
                                result = result.map(keccak256$1);
                            }
                            return keccak256$1(hexConcat(result));
                        };
                    }
                    // Struct
                    const fields = this.types[type];
                    if (fields) {
                        const encodedType = id$1(this._types[type]);
                        return (value) => {
                            const values = fields.map(({ name, type }) => {
                                const result = this.getEncoder(type)(value[name]);
                                if (this._types[type]) {
                                    return keccak256$1(result);
                                }
                                return result;
                            });
                            values.unshift(encodedType);
                            return hexConcat(values);
                        };
                    }
                    return logger$l.throwArgumentError(`unknown type: ${type}`, "type", type);
                }
                encodeType(name) {
                    const result = this._types[name];
                    if (!result) {
                        logger$l.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
                    }
                    return result;
                }
                encodeData(type, value) {
                    return this.getEncoder(type)(value);
                }
                hashStruct(name, value) {
                    return keccak256$1(this.encodeData(name, value));
                }
                encode(value) {
                    return this.encodeData(this.primaryType, value);
                }
                hash(value) {
                    return this.hashStruct(this.primaryType, value);
                }
                _visit(type, value, callback) {
                    // Basic encoder type (address, bool, uint256, etc)
                    {
                        const encoder = getBaseEncoder(type);
                        if (encoder) {
                            return callback(type, value);
                        }
                    }
                    // Array
                    const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
                    if (match) {
                        const subtype = match[1];
                        const length = parseInt(match[3]);
                        if (length >= 0 && value.length !== length) {
                            logger$l.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                        }
                        return value.map((v) => this._visit(subtype, v, callback));
                    }
                    // Struct
                    const fields = this.types[type];
                    if (fields) {
                        return fields.reduce((accum, { name, type }) => {
                            accum[name] = this._visit(type, value[name], callback);
                            return accum;
                        }, {});
                    }
                    return logger$l.throwArgumentError(`unknown type: ${type}`, "type", type);
                }
                visit(value, callback) {
                    return this._visit(this.primaryType, value, callback);
                }
                static from(types) {
                    return new TypedDataEncoder(types);
                }
                static getPrimaryType(types) {
                    return TypedDataEncoder.from(types).primaryType;
                }
                static hashStruct(name, types, value) {
                    return TypedDataEncoder.from(types).hashStruct(name, value);
                }
                static hashDomain(domain) {
                    const domainFields = [];
                    for (const name in domain) {
                        const type = domainFieldTypes[name];
                        if (!type) {
                            logger$l.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
                        }
                        domainFields.push({ name, type });
                    }
                    domainFields.sort((a, b) => {
                        return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
                    });
                    return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
                }
                static encode(domain, types, value) {
                    return hexConcat([
                        "0x1901",
                        TypedDataEncoder.hashDomain(domain),
                        TypedDataEncoder.from(types).hash(value)
                    ]);
                }
                static hash(domain, types, value) {
                    return keccak256$1(TypedDataEncoder.encode(domain, types, value));
                }
                // Replaces all address types with ENS names with their looked up address
                static resolveNames(domain, types, value, resolveName) {
                    return __awaiter$9(this, void 0, void 0, function* () {
                        // Make a copy to isolate it from the object passed in
                        domain = shallowCopy(domain);
                        // Look up all ENS names
                        const ensCache = {};
                        // Do we need to look up the domain's verifyingContract?
                        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
                            ensCache[domain.verifyingContract] = "0x";
                        }
                        // We are going to use the encoder to visit all the base values
                        const encoder = TypedDataEncoder.from(types);
                        // Get a list of all the addresses
                        encoder.visit(value, (type, value) => {
                            if (type === "address" && !isHexString(value, 20)) {
                                ensCache[value] = "0x";
                            }
                            return value;
                        });
                        // Lookup each name
                        for (const name in ensCache) {
                            ensCache[name] = yield resolveName(name);
                        }
                        // Replace the domain verifyingContract if needed
                        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                            domain.verifyingContract = ensCache[domain.verifyingContract];
                        }
                        // Replace all ENS names with their address
                        value = encoder.visit(value, (type, value) => {
                            if (type === "address" && ensCache[value]) {
                                return ensCache[value];
                            }
                            return value;
                        });
                        return { domain, value };
                    });
                }
                static getPayload(domain, types, value) {
                    // Validate the domain fields
                    TypedDataEncoder.hashDomain(domain);
                    // Derive the EIP712Domain Struct reference type
                    const domainValues = {};
                    const domainTypes = [];
                    domainFieldNames.forEach((name) => {
                        const value = domain[name];
                        if (value == null) {
                            return;
                        }
                        domainValues[name] = domainChecks[name](value);
                        domainTypes.push({ name, type: domainFieldTypes[name] });
                    });
                    const encoder = TypedDataEncoder.from(types);
                    const typesWithDomain = shallowCopy(types);
                    if (typesWithDomain.EIP712Domain) {
                        logger$l.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
                    }
                    else {
                        typesWithDomain.EIP712Domain = domainTypes;
                    }
                    // Validate the data structures and types
                    encoder.encode(value);
                    return {
                        types: typesWithDomain,
                        domain: domainValues,
                        primaryType: encoder.primaryType,
                        message: encoder.visit(value, (type, value) => {
                            // bytes
                            if (type.match(/^bytes(\d*)/)) {
                                return hexlify(arrayify(value));
                            }
                            // uint or int
                            if (type.match(/^u?int/)) {
                                return BigNumber.from(value).toString();
                            }
                            switch (type) {
                                case "address":
                                    return value.toLowerCase();
                                case "bool":
                                    return !!value;
                                case "string":
                                    if (typeof (value) !== "string") {
                                        logger$l.throwArgumentError(`invalid string`, "value", value);
                                    }
                                    return value;
                            }
                            return logger$l.throwArgumentError("unsupported type", "type", type);
                        })
                    };
                }
            }

            var lib_esm$d = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        id: id$1,
                        namehash: namehash,
                        isValidName: isValidName,
                        messagePrefix: messagePrefix,
                        hashMessage: hashMessage,
                        _TypedDataEncoder: TypedDataEncoder
            });

            const logger$k = new Logger(version$l);
            class LogDescription extends Description {
            }
            class TransactionDescription extends Description {
            }
            class ErrorDescription extends Description {
            }
            class Indexed extends Description {
                static isIndexed(value) {
                    return !!(value && value._isIndexed);
                }
            }
            const BuiltinErrors = {
                "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
                "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
            };
            function wrapAccessError(property, error) {
                const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
                wrap.error = error;
                return wrap;
            }
            /*
            function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
                params.reduce((accum, param) => {
                    if (param.name) {
                        if (accum[param.name]) {
                            logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
                        }
                        accum[param.name] = true;
                    }
                    return accum;
                }, <{ [ name: string ]: boolean }>{ });
            }
            */
            class Interface {
                constructor(fragments) {
                    logger$k.checkNew(new.target, Interface);
                    let abi = [];
                    if (typeof (fragments) === "string") {
                        abi = JSON.parse(fragments);
                    }
                    else {
                        abi = fragments;
                    }
                    defineReadOnly(this, "fragments", abi.map((fragment) => {
                        return Fragment.from(fragment);
                    }).filter((fragment) => (fragment != null)));
                    defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
                    defineReadOnly(this, "functions", {});
                    defineReadOnly(this, "errors", {});
                    defineReadOnly(this, "events", {});
                    defineReadOnly(this, "structs", {});
                    // Add all fragments by their signature
                    this.fragments.forEach((fragment) => {
                        let bucket = null;
                        switch (fragment.type) {
                            case "constructor":
                                if (this.deploy) {
                                    logger$k.warn("duplicate definition - constructor");
                                    return;
                                }
                                //checkNames(fragment, "input", fragment.inputs);
                                defineReadOnly(this, "deploy", fragment);
                                return;
                            case "function":
                                //checkNames(fragment, "input", fragment.inputs);
                                //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                                bucket = this.functions;
                                break;
                            case "event":
                                //checkNames(fragment, "input", fragment.inputs);
                                bucket = this.events;
                                break;
                            case "error":
                                bucket = this.errors;
                                break;
                            default:
                                return;
                        }
                        let signature = fragment.format();
                        if (bucket[signature]) {
                            logger$k.warn("duplicate definition - " + signature);
                            return;
                        }
                        bucket[signature] = fragment;
                    });
                    // If we do not have a constructor add a default
                    if (!this.deploy) {
                        defineReadOnly(this, "deploy", ConstructorFragment.from({
                            payable: false,
                            type: "constructor"
                        }));
                    }
                    defineReadOnly(this, "_isInterface", true);
                }
                format(format) {
                    if (!format) {
                        format = FormatTypes.full;
                    }
                    if (format === FormatTypes.sighash) {
                        logger$k.throwArgumentError("interface does not support formatting sighash", "format", format);
                    }
                    const abi = this.fragments.map((fragment) => fragment.format(format));
                    // We need to re-bundle the JSON fragments a bit
                    if (format === FormatTypes.json) {
                        return JSON.stringify(abi.map((j) => JSON.parse(j)));
                    }
                    return abi;
                }
                // Sub-classes can override these to handle other blockchains
                static getAbiCoder() {
                    return defaultAbiCoder;
                }
                static getAddress(address) {
                    return getAddress(address);
                }
                static getSighash(fragment) {
                    return hexDataSlice(id$1(fragment.format()), 0, 4);
                }
                static getEventTopic(eventFragment) {
                    return id$1(eventFragment.format());
                }
                // Find a function definition by any means necessary (unless it is ambiguous)
                getFunction(nameOrSignatureOrSighash) {
                    if (isHexString(nameOrSignatureOrSighash)) {
                        for (const name in this.functions) {
                            if (nameOrSignatureOrSighash === this.getSighash(name)) {
                                return this.functions[name];
                            }
                        }
                        logger$k.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
                    }
                    // It is a bare name, look up the function (will return null if ambiguous)
                    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                        const name = nameOrSignatureOrSighash.trim();
                        const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                        if (matching.length === 0) {
                            logger$k.throwArgumentError("no matching function", "name", name);
                        }
                        else if (matching.length > 1) {
                            logger$k.throwArgumentError("multiple matching functions", "name", name);
                        }
                        return this.functions[matching[0]];
                    }
                    // Normalize the signature and lookup the function
                    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
                    if (!result) {
                        logger$k.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
                    }
                    return result;
                }
                // Find an event definition by any means necessary (unless it is ambiguous)
                getEvent(nameOrSignatureOrTopic) {
                    if (isHexString(nameOrSignatureOrTopic)) {
                        const topichash = nameOrSignatureOrTopic.toLowerCase();
                        for (const name in this.events) {
                            if (topichash === this.getEventTopic(name)) {
                                return this.events[name];
                            }
                        }
                        logger$k.throwArgumentError("no matching event", "topichash", topichash);
                    }
                    // It is a bare name, look up the function (will return null if ambiguous)
                    if (nameOrSignatureOrTopic.indexOf("(") === -1) {
                        const name = nameOrSignatureOrTopic.trim();
                        const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                        if (matching.length === 0) {
                            logger$k.throwArgumentError("no matching event", "name", name);
                        }
                        else if (matching.length > 1) {
                            logger$k.throwArgumentError("multiple matching events", "name", name);
                        }
                        return this.events[matching[0]];
                    }
                    // Normalize the signature and lookup the function
                    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
                    if (!result) {
                        logger$k.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
                    }
                    return result;
                }
                // Find a function definition by any means necessary (unless it is ambiguous)
                getError(nameOrSignatureOrSighash) {
                    if (isHexString(nameOrSignatureOrSighash)) {
                        const getSighash = getStatic(this.constructor, "getSighash");
                        for (const name in this.errors) {
                            const error = this.errors[name];
                            if (nameOrSignatureOrSighash === getSighash(error)) {
                                return this.errors[name];
                            }
                        }
                        logger$k.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
                    }
                    // It is a bare name, look up the function (will return null if ambiguous)
                    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                        const name = nameOrSignatureOrSighash.trim();
                        const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                        if (matching.length === 0) {
                            logger$k.throwArgumentError("no matching error", "name", name);
                        }
                        else if (matching.length > 1) {
                            logger$k.throwArgumentError("multiple matching errors", "name", name);
                        }
                        return this.errors[matching[0]];
                    }
                    // Normalize the signature and lookup the function
                    const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
                    if (!result) {
                        logger$k.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
                    }
                    return result;
                }
                // Get the sighash (the bytes4 selector) used by Solidity to identify a function
                getSighash(fragment) {
                    if (typeof (fragment) === "string") {
                        try {
                            fragment = this.getFunction(fragment);
                        }
                        catch (error) {
                            try {
                                fragment = this.getError(fragment);
                            }
                            catch (_) {
                                throw error;
                            }
                        }
                    }
                    return getStatic(this.constructor, "getSighash")(fragment);
                }
                // Get the topic (the bytes32 hash) used by Solidity to identify an event
                getEventTopic(eventFragment) {
                    if (typeof (eventFragment) === "string") {
                        eventFragment = this.getEvent(eventFragment);
                    }
                    return getStatic(this.constructor, "getEventTopic")(eventFragment);
                }
                _decodeParams(params, data) {
                    return this._abiCoder.decode(params, data);
                }
                _encodeParams(params, values) {
                    return this._abiCoder.encode(params, values);
                }
                encodeDeploy(values) {
                    return this._encodeParams(this.deploy.inputs, values || []);
                }
                decodeErrorResult(fragment, data) {
                    if (typeof (fragment) === "string") {
                        fragment = this.getError(fragment);
                    }
                    const bytes = arrayify(data);
                    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
                        logger$k.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
                    }
                    return this._decodeParams(fragment.inputs, bytes.slice(4));
                }
                encodeErrorResult(fragment, values) {
                    if (typeof (fragment) === "string") {
                        fragment = this.getError(fragment);
                    }
                    return hexlify(concat$3([
                        this.getSighash(fragment),
                        this._encodeParams(fragment.inputs, values || [])
                    ]));
                }
                // Decode the data for a function call (e.g. tx.data)
                decodeFunctionData(functionFragment, data) {
                    if (typeof (functionFragment) === "string") {
                        functionFragment = this.getFunction(functionFragment);
                    }
                    const bytes = arrayify(data);
                    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
                        logger$k.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
                    }
                    return this._decodeParams(functionFragment.inputs, bytes.slice(4));
                }
                // Encode the data for a function call (e.g. tx.data)
                encodeFunctionData(functionFragment, values) {
                    if (typeof (functionFragment) === "string") {
                        functionFragment = this.getFunction(functionFragment);
                    }
                    return hexlify(concat$3([
                        this.getSighash(functionFragment),
                        this._encodeParams(functionFragment.inputs, values || [])
                    ]));
                }
                // Decode the result from a function call (e.g. from eth_call)
                decodeFunctionResult(functionFragment, data) {
                    if (typeof (functionFragment) === "string") {
                        functionFragment = this.getFunction(functionFragment);
                    }
                    let bytes = arrayify(data);
                    let reason = null;
                    let errorArgs = null;
                    let errorName = null;
                    let errorSignature = null;
                    switch (bytes.length % this._abiCoder._getWordSize()) {
                        case 0:
                            try {
                                return this._abiCoder.decode(functionFragment.outputs, bytes);
                            }
                            catch (error) { }
                            break;
                        case 4: {
                            const selector = hexlify(bytes.slice(0, 4));
                            const builtin = BuiltinErrors[selector];
                            if (builtin) {
                                errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                                errorName = builtin.name;
                                errorSignature = builtin.signature;
                                if (builtin.reason) {
                                    reason = errorArgs[0];
                                }
                            }
                            else {
                                try {
                                    const error = this.getError(selector);
                                    errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                                    errorName = error.name;
                                    errorSignature = error.format();
                                }
                                catch (error) {
                                    console.log(error);
                                }
                            }
                            break;
                        }
                    }
                    return logger$k.throwError("call revert exception", Logger.errors.CALL_EXCEPTION, {
                        method: functionFragment.format(),
                        errorArgs, errorName, errorSignature, reason
                    });
                }
                // Encode the result for a function call (e.g. for eth_call)
                encodeFunctionResult(functionFragment, values) {
                    if (typeof (functionFragment) === "string") {
                        functionFragment = this.getFunction(functionFragment);
                    }
                    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
                }
                // Create the filter for the event with search criteria (e.g. for eth_filterLog)
                encodeFilterTopics(eventFragment, values) {
                    if (typeof (eventFragment) === "string") {
                        eventFragment = this.getEvent(eventFragment);
                    }
                    if (values.length > eventFragment.inputs.length) {
                        logger$k.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
                            argument: "values",
                            value: values
                        });
                    }
                    let topics = [];
                    if (!eventFragment.anonymous) {
                        topics.push(this.getEventTopic(eventFragment));
                    }
                    const encodeTopic = (param, value) => {
                        if (param.type === "string") {
                            return id$1(value);
                        }
                        else if (param.type === "bytes") {
                            return keccak256$1(hexlify(value));
                        }
                        // Check addresses are valid
                        if (param.type === "address") {
                            this._abiCoder.encode(["address"], [value]);
                        }
                        return hexZeroPad(hexlify(value), 32);
                    };
                    values.forEach((value, index) => {
                        let param = eventFragment.inputs[index];
                        if (!param.indexed) {
                            if (value != null) {
                                logger$k.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                            }
                            return;
                        }
                        if (value == null) {
                            topics.push(null);
                        }
                        else if (param.baseType === "array" || param.baseType === "tuple") {
                            logger$k.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                        }
                        else if (Array.isArray(value)) {
                            topics.push(value.map((value) => encodeTopic(param, value)));
                        }
                        else {
                            topics.push(encodeTopic(param, value));
                        }
                    });
                    // Trim off trailing nulls
                    while (topics.length && topics[topics.length - 1] === null) {
                        topics.pop();
                    }
                    return topics;
                }
                encodeEventLog(eventFragment, values) {
                    if (typeof (eventFragment) === "string") {
                        eventFragment = this.getEvent(eventFragment);
                    }
                    const topics = [];
                    const dataTypes = [];
                    const dataValues = [];
                    if (!eventFragment.anonymous) {
                        topics.push(this.getEventTopic(eventFragment));
                    }
                    if (values.length !== eventFragment.inputs.length) {
                        logger$k.throwArgumentError("event arguments/values mismatch", "values", values);
                    }
                    eventFragment.inputs.forEach((param, index) => {
                        const value = values[index];
                        if (param.indexed) {
                            if (param.type === "string") {
                                topics.push(id$1(value));
                            }
                            else if (param.type === "bytes") {
                                topics.push(keccak256$1(value));
                            }
                            else if (param.baseType === "tuple" || param.baseType === "array") {
                                // @TODO
                                throw new Error("not implemented");
                            }
                            else {
                                topics.push(this._abiCoder.encode([param.type], [value]));
                            }
                        }
                        else {
                            dataTypes.push(param);
                            dataValues.push(value);
                        }
                    });
                    return {
                        data: this._abiCoder.encode(dataTypes, dataValues),
                        topics: topics
                    };
                }
                // Decode a filter for the event and the search criteria
                decodeEventLog(eventFragment, data, topics) {
                    if (typeof (eventFragment) === "string") {
                        eventFragment = this.getEvent(eventFragment);
                    }
                    if (topics != null && !eventFragment.anonymous) {
                        let topicHash = this.getEventTopic(eventFragment);
                        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                            logger$k.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
                        }
                        topics = topics.slice(1);
                    }
                    let indexed = [];
                    let nonIndexed = [];
                    let dynamic = [];
                    eventFragment.inputs.forEach((param, index) => {
                        if (param.indexed) {
                            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                                indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
                                dynamic.push(true);
                            }
                            else {
                                indexed.push(param);
                                dynamic.push(false);
                            }
                        }
                        else {
                            nonIndexed.push(param);
                            dynamic.push(false);
                        }
                    });
                    let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat$3(topics)) : null;
                    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
                    let result = [];
                    let nonIndexedIndex = 0, indexedIndex = 0;
                    eventFragment.inputs.forEach((param, index) => {
                        if (param.indexed) {
                            if (resultIndexed == null) {
                                result[index] = new Indexed({ _isIndexed: true, hash: null });
                            }
                            else if (dynamic[index]) {
                                result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                            }
                            else {
                                try {
                                    result[index] = resultIndexed[indexedIndex++];
                                }
                                catch (error) {
                                    result[index] = error;
                                }
                            }
                        }
                        else {
                            try {
                                result[index] = resultNonIndexed[nonIndexedIndex++];
                            }
                            catch (error) {
                                result[index] = error;
                            }
                        }
                        // Add the keyword argument if named and safe
                        if (param.name && result[param.name] == null) {
                            const value = result[index];
                            // Make error named values throw on access
                            if (value instanceof Error) {
                                Object.defineProperty(result, param.name, {
                                    enumerable: true,
                                    get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                                });
                            }
                            else {
                                result[param.name] = value;
                            }
                        }
                    });
                    // Make all error indexed values throw on access
                    for (let i = 0; i < result.length; i++) {
                        const value = result[i];
                        if (value instanceof Error) {
                            Object.defineProperty(result, i, {
                                enumerable: true,
                                get: () => { throw wrapAccessError(`index ${i}`, value); }
                            });
                        }
                    }
                    return Object.freeze(result);
                }
                // Given a transaction, find the matching function fragment (if any) and
                // determine all its properties and call parameters
                parseTransaction(tx) {
                    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
                    if (!fragment) {
                        return null;
                    }
                    return new TransactionDescription({
                        args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
                        functionFragment: fragment,
                        name: fragment.name,
                        signature: fragment.format(),
                        sighash: this.getSighash(fragment),
                        value: BigNumber.from(tx.value || "0"),
                    });
                }
                // @TODO
                //parseCallResult(data: BytesLike): ??
                // Given an event log, find the matching event fragment (if any) and
                // determine all its properties and values
                parseLog(log) {
                    let fragment = this.getEvent(log.topics[0]);
                    if (!fragment || fragment.anonymous) {
                        return null;
                    }
                    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
                    //        Probably not, because just because it is the only event in the ABI does
                    //        not mean we have the full ABI; maybe just a fragment?
                    return new LogDescription({
                        eventFragment: fragment,
                        name: fragment.name,
                        signature: fragment.format(),
                        topic: this.getEventTopic(fragment),
                        args: this.decodeEventLog(fragment, log.data, log.topics)
                    });
                }
                parseError(data) {
                    const hexData = hexlify(data);
                    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
                    if (!fragment) {
                        return null;
                    }
                    return new ErrorDescription({
                        args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
                        errorFragment: fragment,
                        name: fragment.name,
                        signature: fragment.format(),
                        sighash: this.getSighash(fragment),
                    });
                }
                /*
                static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
                    if (Interface.isInterface(value)) {
                        return value;
                    }
                    if (typeof(value) === "string") {
                        return new Interface(JSON.parse(value));
                    }
                    return new Interface(value);
                }
                */
                static isInterface(value) {
                    return !!(value && value._isInterface);
                }
            }

            var lib_esm$c = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        ConstructorFragment: ConstructorFragment,
                        ErrorFragment: ErrorFragment,
                        EventFragment: EventFragment,
                        Fragment: Fragment,
                        FunctionFragment: FunctionFragment,
                        ParamType: ParamType,
                        FormatTypes: FormatTypes,
                        AbiCoder: AbiCoder,
                        defaultAbiCoder: defaultAbiCoder,
                        Interface: Interface,
                        Indexed: Indexed,
                        checkResultErrors: checkResultErrors,
                        LogDescription: LogDescription,
                        TransactionDescription: TransactionDescription
            });

            const version$g = "abstract-provider/5.5.1";

            var __awaiter$8 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$j = new Logger(version$g);
            //export type CallTransactionable = {
            //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
            //};
            class ForkEvent extends Description {
                static isForkEvent(value) {
                    return !!(value && value._isForkEvent);
                }
            }
            ///////////////////////////////
            // Exported Abstracts
            class Provider$1 {
                constructor() {
                    logger$j.checkAbstract(new.target, Provider$1);
                    defineReadOnly(this, "_isProvider", true);
                }
                getFeeData() {
                    return __awaiter$8(this, void 0, void 0, function* () {
                        const { block, gasPrice } = yield resolveProperties({
                            block: this.getBlock("latest"),
                            gasPrice: this.getGasPrice().catch((error) => {
                                // @TODO: Why is this now failing on Calaveras?
                                //console.log(error);
                                return null;
                            })
                        });
                        let maxFeePerGas = null, maxPriorityFeePerGas = null;
                        if (block && block.baseFeePerGas) {
                            // We may want to compute this more accurately in the future,
                            // using the formula "check if the base fee is correct".
                            // See: https://eips.ethereum.org/EIPS/eip-1559
                            maxPriorityFeePerGas = BigNumber.from("2500000000");
                            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                        }
                        return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };
                    });
                }
                // Alias for "on"
                addListener(eventName, listener) {
                    return this.on(eventName, listener);
                }
                // Alias for "off"
                removeListener(eventName, listener) {
                    return this.off(eventName, listener);
                }
                static isProvider(value) {
                    return !!(value && value._isProvider);
                }
            }

            const version$f = "abstract-signer/5.5.0";

            var __awaiter$7 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$i = new Logger(version$f);
            const allowedTransactionKeys$2 = [
                "accessList", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
            ];
            const forwardErrors = [
                Logger.errors.INSUFFICIENT_FUNDS,
                Logger.errors.NONCE_EXPIRED,
                Logger.errors.REPLACEMENT_UNDERPRICED,
            ];
            class Signer {
                ///////////////////
                // Sub-classes MUST call super
                constructor() {
                    logger$i.checkAbstract(new.target, Signer);
                    defineReadOnly(this, "_isSigner", true);
                }
                ///////////////////
                // Sub-classes MAY override these
                getBalance(blockTag) {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("getBalance");
                        return yield this.provider.getBalance(this.getAddress(), blockTag);
                    });
                }
                getTransactionCount(blockTag) {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("getTransactionCount");
                        return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
                    });
                }
                // Populates "from" if unspecified, and estimates the gas for the transaction
                estimateGas(transaction) {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("estimateGas");
                        const tx = yield resolveProperties(this.checkTransaction(transaction));
                        return yield this.provider.estimateGas(tx);
                    });
                }
                // Populates "from" if unspecified, and calls with the transaction
                call(transaction, blockTag) {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("call");
                        const tx = yield resolveProperties(this.checkTransaction(transaction));
                        return yield this.provider.call(tx, blockTag);
                    });
                }
                // Populates all fields in a transaction, signs it and sends it to the network
                sendTransaction(transaction) {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("sendTransaction");
                        const tx = yield this.populateTransaction(transaction);
                        const signedTx = yield this.signTransaction(tx);
                        return yield this.provider.sendTransaction(signedTx);
                    });
                }
                getChainId() {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("getChainId");
                        const network = yield this.provider.getNetwork();
                        return network.chainId;
                    });
                }
                getGasPrice() {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("getGasPrice");
                        return yield this.provider.getGasPrice();
                    });
                }
                getFeeData() {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("getFeeData");
                        return yield this.provider.getFeeData();
                    });
                }
                resolveName(name) {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        this._checkProvider("resolveName");
                        return yield this.provider.resolveName(name);
                    });
                }
                // Checks a transaction does not contain invalid keys and if
                // no "from" is provided, populates it.
                // - does NOT require a provider
                // - adds "from" is not present
                // - returns a COPY (safe to mutate the result)
                // By default called from: (overriding these prevents it)
                //   - call
                //   - estimateGas
                //   - populateTransaction (and therefor sendTransaction)
                checkTransaction(transaction) {
                    for (const key in transaction) {
                        if (allowedTransactionKeys$2.indexOf(key) === -1) {
                            logger$i.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
                        }
                    }
                    const tx = shallowCopy(transaction);
                    if (tx.from == null) {
                        tx.from = this.getAddress();
                    }
                    else {
                        // Make sure any provided address matches this signer
                        tx.from = Promise.all([
                            Promise.resolve(tx.from),
                            this.getAddress()
                        ]).then((result) => {
                            if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                                logger$i.throwArgumentError("from address mismatch", "transaction", transaction);
                            }
                            return result[0];
                        });
                    }
                    return tx;
                }
                // Populates ALL keys for a transaction and checks that "from" matches
                // this Signer. Should be used by sendTransaction but NOT by signTransaction.
                // By default called from: (overriding these prevents it)
                //   - sendTransaction
                //
                // Notes:
                //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
                populateTransaction(transaction) {
                    return __awaiter$7(this, void 0, void 0, function* () {
                        const tx = yield resolveProperties(this.checkTransaction(transaction));
                        if (tx.to != null) {
                            tx.to = Promise.resolve(tx.to).then((to) => __awaiter$7(this, void 0, void 0, function* () {
                                if (to == null) {
                                    return null;
                                }
                                const address = yield this.resolveName(to);
                                if (address == null) {
                                    logger$i.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                                }
                                return address;
                            }));
                            // Prevent this error from causing an UnhandledPromiseException
                            tx.to.catch((error) => { });
                        }
                        // Do not allow mixing pre-eip-1559 and eip-1559 properties
                        const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
                        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                            logger$i.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                        }
                        else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                            logger$i.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                        }
                        if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
                            // Fully-formed EIP-1559 transaction (skip getFeeData)
                            tx.type = 2;
                        }
                        else if (tx.type === 0 || tx.type === 1) {
                            // Explicit Legacy or EIP-2930 transaction
                            // Populate missing gasPrice
                            if (tx.gasPrice == null) {
                                tx.gasPrice = this.getGasPrice();
                            }
                        }
                        else {
                            // We need to get fee data to determine things
                            const feeData = yield this.getFeeData();
                            if (tx.type == null) {
                                // We need to auto-detect the intended type of this transaction...
                                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                                    // The network supports EIP-1559!
                                    // Upgrade transaction from null to eip-1559
                                    tx.type = 2;
                                    if (tx.gasPrice != null) {
                                        // Using legacy gasPrice property on an eip-1559 network,
                                        // so use gasPrice as both fee properties
                                        const gasPrice = tx.gasPrice;
                                        delete tx.gasPrice;
                                        tx.maxFeePerGas = gasPrice;
                                        tx.maxPriorityFeePerGas = gasPrice;
                                    }
                                    else {
                                        // Populate missing fee data
                                        if (tx.maxFeePerGas == null) {
                                            tx.maxFeePerGas = feeData.maxFeePerGas;
                                        }
                                        if (tx.maxPriorityFeePerGas == null) {
                                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                        }
                                    }
                                }
                                else if (feeData.gasPrice != null) {
                                    // Network doesn't support EIP-1559...
                                    // ...but they are trying to use EIP-1559 properties
                                    if (hasEip1559) {
                                        logger$i.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                                            operation: "populateTransaction"
                                        });
                                    }
                                    // Populate missing fee data
                                    if (tx.gasPrice == null) {
                                        tx.gasPrice = feeData.gasPrice;
                                    }
                                    // Explicitly set untyped transaction to legacy
                                    tx.type = 0;
                                }
                                else {
                                    // getFeeData has failed us.
                                    logger$i.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                                        operation: "signer.getFeeData"
                                    });
                                }
                            }
                            else if (tx.type === 2) {
                                // Explicitly using EIP-1559
                                // Populate missing fee data
                                if (tx.maxFeePerGas == null) {
                                    tx.maxFeePerGas = feeData.maxFeePerGas;
                                }
                                if (tx.maxPriorityFeePerGas == null) {
                                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                }
                            }
                        }
                        if (tx.nonce == null) {
                            tx.nonce = this.getTransactionCount("pending");
                        }
                        if (tx.gasLimit == null) {
                            tx.gasLimit = this.estimateGas(tx).catch((error) => {
                                if (forwardErrors.indexOf(error.code) >= 0) {
                                    throw error;
                                }
                                return logger$i.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                                    error: error,
                                    tx: tx
                                });
                            });
                        }
                        if (tx.chainId == null) {
                            tx.chainId = this.getChainId();
                        }
                        else {
                            tx.chainId = Promise.all([
                                Promise.resolve(tx.chainId),
                                this.getChainId()
                            ]).then((results) => {
                                if (results[1] !== 0 && results[0] !== results[1]) {
                                    logger$i.throwArgumentError("chainId address mismatch", "transaction", transaction);
                                }
                                return results[0];
                            });
                        }
                        return yield resolveProperties(tx);
                    });
                }
                ///////////////////
                // Sub-classes SHOULD leave these alone
                _checkProvider(operation) {
                    if (!this.provider) {
                        logger$i.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: (operation || "_checkProvider")
                        });
                    }
                }
                static isSigner(value) {
                    return !!(value && value._isSigner);
                }
            }
            class VoidSigner extends Signer {
                constructor(address, provider) {
                    logger$i.checkNew(new.target, VoidSigner);
                    super();
                    defineReadOnly(this, "address", address);
                    defineReadOnly(this, "provider", provider || null);
                }
                getAddress() {
                    return Promise.resolve(this.address);
                }
                _fail(message, operation) {
                    return Promise.resolve().then(() => {
                        logger$i.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
                    });
                }
                signMessage(message) {
                    return this._fail("VoidSigner cannot sign messages", "signMessage");
                }
                signTransaction(transaction) {
                    return this._fail("VoidSigner cannot sign transactions", "signTransaction");
                }
                _signTypedData(domain, types, value) {
                    return this._fail("VoidSigner cannot sign typed data", "signTypedData");
                }
                connect(provider) {
                    return new VoidSigner(this.address, provider);
                }
            }

            var hash = {};

            var utils$a = {};

            var minimalisticAssert$1 = assert$b;

            function assert$b(val, msg) {
              if (!val)
                throw new Error(msg || 'Assertion failed');
            }

            assert$b.equal = function assertEqual(l, r, msg) {
              if (l != r)
                throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
            };

            var inherits_browser$1 = {exports: {}};

            if (typeof Object.create === 'function') {
              // implementation from standard node.js 'util' module
              inherits_browser$1.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;
                  ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                      value: ctor,
                      enumerable: false,
                      writable: true,
                      configurable: true
                    }
                  });
                }
              };
            } else {
              // old school shim for old browsers
              inherits_browser$1.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;
                  var TempCtor = function () {};
                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                }
              };
            }

            var assert$a = minimalisticAssert$1;
            var inherits = inherits_browser$1.exports;

            utils$a.inherits = inherits;

            function isSurrogatePair(msg, i) {
              if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
                return false;
              }
              if (i < 0 || i + 1 >= msg.length) {
                return false;
              }
              return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
            }

            function toArray(msg, enc) {
              if (Array.isArray(msg))
                return msg.slice();
              if (!msg)
                return [];
              var res = [];
              if (typeof msg === 'string') {
                if (!enc) {
                  // Inspired by stringToUtf8ByteArray() in closure-library by Google
                  // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
                  // Apache License 2.0
                  // https://github.com/google/closure-library/blob/master/LICENSE
                  var p = 0;
                  for (var i = 0; i < msg.length; i++) {
                    var c = msg.charCodeAt(i);
                    if (c < 128) {
                      res[p++] = c;
                    } else if (c < 2048) {
                      res[p++] = (c >> 6) | 192;
                      res[p++] = (c & 63) | 128;
                    } else if (isSurrogatePair(msg, i)) {
                      c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                      res[p++] = (c >> 18) | 240;
                      res[p++] = ((c >> 12) & 63) | 128;
                      res[p++] = ((c >> 6) & 63) | 128;
                      res[p++] = (c & 63) | 128;
                    } else {
                      res[p++] = (c >> 12) | 224;
                      res[p++] = ((c >> 6) & 63) | 128;
                      res[p++] = (c & 63) | 128;
                    }
                  }
                } else if (enc === 'hex') {
                  msg = msg.replace(/[^a-z0-9]+/ig, '');
                  if (msg.length % 2 !== 0)
                    msg = '0' + msg;
                  for (i = 0; i < msg.length; i += 2)
                    res.push(parseInt(msg[i] + msg[i + 1], 16));
                }
              } else {
                for (i = 0; i < msg.length; i++)
                  res[i] = msg[i] | 0;
              }
              return res;
            }
            utils$a.toArray = toArray;

            function toHex(msg) {
              var res = '';
              for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
              return res;
            }
            utils$a.toHex = toHex;

            function htonl(w) {
              var res = (w >>> 24) |
                        ((w >>> 8) & 0xff00) |
                        ((w << 8) & 0xff0000) |
                        ((w & 0xff) << 24);
              return res >>> 0;
            }
            utils$a.htonl = htonl;

            function toHex32(msg, endian) {
              var res = '';
              for (var i = 0; i < msg.length; i++) {
                var w = msg[i];
                if (endian === 'little')
                  w = htonl(w);
                res += zero8(w.toString(16));
              }
              return res;
            }
            utils$a.toHex32 = toHex32;

            function zero2(word) {
              if (word.length === 1)
                return '0' + word;
              else
                return word;
            }
            utils$a.zero2 = zero2;

            function zero8(word) {
              if (word.length === 7)
                return '0' + word;
              else if (word.length === 6)
                return '00' + word;
              else if (word.length === 5)
                return '000' + word;
              else if (word.length === 4)
                return '0000' + word;
              else if (word.length === 3)
                return '00000' + word;
              else if (word.length === 2)
                return '000000' + word;
              else if (word.length === 1)
                return '0000000' + word;
              else
                return word;
            }
            utils$a.zero8 = zero8;

            function join32(msg, start, end, endian) {
              var len = end - start;
              assert$a(len % 4 === 0);
              var res = new Array(len / 4);
              for (var i = 0, k = start; i < res.length; i++, k += 4) {
                var w;
                if (endian === 'big')
                  w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
                else
                  w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
                res[i] = w >>> 0;
              }
              return res;
            }
            utils$a.join32 = join32;

            function split32(msg, endian) {
              var res = new Array(msg.length * 4);
              for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                var m = msg[i];
                if (endian === 'big') {
                  res[k] = m >>> 24;
                  res[k + 1] = (m >>> 16) & 0xff;
                  res[k + 2] = (m >>> 8) & 0xff;
                  res[k + 3] = m & 0xff;
                } else {
                  res[k + 3] = m >>> 24;
                  res[k + 2] = (m >>> 16) & 0xff;
                  res[k + 1] = (m >>> 8) & 0xff;
                  res[k] = m & 0xff;
                }
              }
              return res;
            }
            utils$a.split32 = split32;

            function rotr32$1(w, b) {
              return (w >>> b) | (w << (32 - b));
            }
            utils$a.rotr32 = rotr32$1;

            function rotl32$2(w, b) {
              return (w << b) | (w >>> (32 - b));
            }
            utils$a.rotl32 = rotl32$2;

            function sum32$3(a, b) {
              return (a + b) >>> 0;
            }
            utils$a.sum32 = sum32$3;

            function sum32_3$1(a, b, c) {
              return (a + b + c) >>> 0;
            }
            utils$a.sum32_3 = sum32_3$1;

            function sum32_4$2(a, b, c, d) {
              return (a + b + c + d) >>> 0;
            }
            utils$a.sum32_4 = sum32_4$2;

            function sum32_5$2(a, b, c, d, e) {
              return (a + b + c + d + e) >>> 0;
            }
            utils$a.sum32_5 = sum32_5$2;

            function sum64$1(buf, pos, ah, al) {
              var bh = buf[pos];
              var bl = buf[pos + 1];

              var lo = (al + bl) >>> 0;
              var hi = (lo < al ? 1 : 0) + ah + bh;
              buf[pos] = hi >>> 0;
              buf[pos + 1] = lo;
            }
            utils$a.sum64 = sum64$1;

            function sum64_hi$1(ah, al, bh, bl) {
              var lo = (al + bl) >>> 0;
              var hi = (lo < al ? 1 : 0) + ah + bh;
              return hi >>> 0;
            }
            utils$a.sum64_hi = sum64_hi$1;

            function sum64_lo$1(ah, al, bh, bl) {
              var lo = al + bl;
              return lo >>> 0;
            }
            utils$a.sum64_lo = sum64_lo$1;

            function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
              var carry = 0;
              var lo = al;
              lo = (lo + bl) >>> 0;
              carry += lo < al ? 1 : 0;
              lo = (lo + cl) >>> 0;
              carry += lo < cl ? 1 : 0;
              lo = (lo + dl) >>> 0;
              carry += lo < dl ? 1 : 0;

              var hi = ah + bh + ch + dh + carry;
              return hi >>> 0;
            }
            utils$a.sum64_4_hi = sum64_4_hi$1;

            function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
              var lo = al + bl + cl + dl;
              return lo >>> 0;
            }
            utils$a.sum64_4_lo = sum64_4_lo$1;

            function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
              var carry = 0;
              var lo = al;
              lo = (lo + bl) >>> 0;
              carry += lo < al ? 1 : 0;
              lo = (lo + cl) >>> 0;
              carry += lo < cl ? 1 : 0;
              lo = (lo + dl) >>> 0;
              carry += lo < dl ? 1 : 0;
              lo = (lo + el) >>> 0;
              carry += lo < el ? 1 : 0;

              var hi = ah + bh + ch + dh + eh + carry;
              return hi >>> 0;
            }
            utils$a.sum64_5_hi = sum64_5_hi$1;

            function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
              var lo = al + bl + cl + dl + el;

              return lo >>> 0;
            }
            utils$a.sum64_5_lo = sum64_5_lo$1;

            function rotr64_hi$1(ah, al, num) {
              var r = (al << (32 - num)) | (ah >>> num);
              return r >>> 0;
            }
            utils$a.rotr64_hi = rotr64_hi$1;

            function rotr64_lo$1(ah, al, num) {
              var r = (ah << (32 - num)) | (al >>> num);
              return r >>> 0;
            }
            utils$a.rotr64_lo = rotr64_lo$1;

            function shr64_hi$1(ah, al, num) {
              return ah >>> num;
            }
            utils$a.shr64_hi = shr64_hi$1;

            function shr64_lo$1(ah, al, num) {
              var r = (ah << (32 - num)) | (al >>> num);
              return r >>> 0;
            }
            utils$a.shr64_lo = shr64_lo$1;

            var common$5 = {};

            var utils$9 = utils$a;
            var assert$9 = minimalisticAssert$1;

            function BlockHash$4() {
              this.pending = null;
              this.pendingTotal = 0;
              this.blockSize = this.constructor.blockSize;
              this.outSize = this.constructor.outSize;
              this.hmacStrength = this.constructor.hmacStrength;
              this.padLength = this.constructor.padLength / 8;
              this.endian = 'big';

              this._delta8 = this.blockSize / 8;
              this._delta32 = this.blockSize / 32;
            }
            common$5.BlockHash = BlockHash$4;

            BlockHash$4.prototype.update = function update(msg, enc) {
              // Convert message to array, pad it, and join into 32bit blocks
              msg = utils$9.toArray(msg, enc);
              if (!this.pending)
                this.pending = msg;
              else
                this.pending = this.pending.concat(msg);
              this.pendingTotal += msg.length;

              // Enough data, try updating
              if (this.pending.length >= this._delta8) {
                msg = this.pending;

                // Process pending data in blocks
                var r = msg.length % this._delta8;
                this.pending = msg.slice(msg.length - r, msg.length);
                if (this.pending.length === 0)
                  this.pending = null;

                msg = utils$9.join32(msg, 0, msg.length - r, this.endian);
                for (var i = 0; i < msg.length; i += this._delta32)
                  this._update(msg, i, i + this._delta32);
              }

              return this;
            };

            BlockHash$4.prototype.digest = function digest(enc) {
              this.update(this._pad());
              assert$9(this.pending === null);

              return this._digest(enc);
            };

            BlockHash$4.prototype._pad = function pad() {
              var len = this.pendingTotal;
              var bytes = this._delta8;
              var k = bytes - ((len + this.padLength) % bytes);
              var res = new Array(k + this.padLength);
              res[0] = 0x80;
              for (var i = 1; i < k; i++)
                res[i] = 0;

              // Append length
              len <<= 3;
              if (this.endian === 'big') {
                for (var t = 8; t < this.padLength; t++)
                  res[i++] = 0;

                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = (len >>> 24) & 0xff;
                res[i++] = (len >>> 16) & 0xff;
                res[i++] = (len >>> 8) & 0xff;
                res[i++] = len & 0xff;
              } else {
                res[i++] = len & 0xff;
                res[i++] = (len >>> 8) & 0xff;
                res[i++] = (len >>> 16) & 0xff;
                res[i++] = (len >>> 24) & 0xff;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;

                for (t = 8; t < this.padLength; t++)
                  res[i++] = 0;
              }

              return res;
            };

            var sha$1 = {};

            var common$4 = {};

            var utils$8 = utils$a;
            var rotr32 = utils$8.rotr32;

            function ft_1$1(s, x, y, z) {
              if (s === 0)
                return ch32$1(x, y, z);
              if (s === 1 || s === 3)
                return p32(x, y, z);
              if (s === 2)
                return maj32$1(x, y, z);
            }
            common$4.ft_1 = ft_1$1;

            function ch32$1(x, y, z) {
              return (x & y) ^ ((~x) & z);
            }
            common$4.ch32 = ch32$1;

            function maj32$1(x, y, z) {
              return (x & y) ^ (x & z) ^ (y & z);
            }
            common$4.maj32 = maj32$1;

            function p32(x, y, z) {
              return x ^ y ^ z;
            }
            common$4.p32 = p32;

            function s0_256$1(x) {
              return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
            }
            common$4.s0_256 = s0_256$1;

            function s1_256$1(x) {
              return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
            }
            common$4.s1_256 = s1_256$1;

            function g0_256$1(x) {
              return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
            }
            common$4.g0_256 = g0_256$1;

            function g1_256$1(x) {
              return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
            }
            common$4.g1_256 = g1_256$1;

            var utils$7 = utils$a;
            var common$3 = common$5;
            var shaCommon$1 = common$4;

            var rotl32$1 = utils$7.rotl32;
            var sum32$2 = utils$7.sum32;
            var sum32_5$1 = utils$7.sum32_5;
            var ft_1 = shaCommon$1.ft_1;
            var BlockHash$3 = common$3.BlockHash;

            var sha1_K = [
              0x5A827999, 0x6ED9EBA1,
              0x8F1BBCDC, 0xCA62C1D6
            ];

            function SHA1() {
              if (!(this instanceof SHA1))
                return new SHA1();

              BlockHash$3.call(this);
              this.h = [
                0x67452301, 0xefcdab89, 0x98badcfe,
                0x10325476, 0xc3d2e1f0 ];
              this.W = new Array(80);
            }

            utils$7.inherits(SHA1, BlockHash$3);
            var _1 = SHA1;

            SHA1.blockSize = 512;
            SHA1.outSize = 160;
            SHA1.hmacStrength = 80;
            SHA1.padLength = 64;

            SHA1.prototype._update = function _update(msg, start) {
              var W = this.W;

              for (var i = 0; i < 16; i++)
                W[i] = msg[start + i];

              for(; i < W.length; i++)
                W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

              var a = this.h[0];
              var b = this.h[1];
              var c = this.h[2];
              var d = this.h[3];
              var e = this.h[4];

              for (i = 0; i < W.length; i++) {
                var s = ~~(i / 20);
                var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                e = d;
                d = c;
                c = rotl32$1(b, 30);
                b = a;
                a = t;
              }

              this.h[0] = sum32$2(this.h[0], a);
              this.h[1] = sum32$2(this.h[1], b);
              this.h[2] = sum32$2(this.h[2], c);
              this.h[3] = sum32$2(this.h[3], d);
              this.h[4] = sum32$2(this.h[4], e);
            };

            SHA1.prototype._digest = function digest(enc) {
              if (enc === 'hex')
                return utils$7.toHex32(this.h, 'big');
              else
                return utils$7.split32(this.h, 'big');
            };

            var utils$6 = utils$a;
            var common$2 = common$5;
            var shaCommon = common$4;
            var assert$8 = minimalisticAssert$1;

            var sum32$1 = utils$6.sum32;
            var sum32_4$1 = utils$6.sum32_4;
            var sum32_5 = utils$6.sum32_5;
            var ch32 = shaCommon.ch32;
            var maj32 = shaCommon.maj32;
            var s0_256 = shaCommon.s0_256;
            var s1_256 = shaCommon.s1_256;
            var g0_256 = shaCommon.g0_256;
            var g1_256 = shaCommon.g1_256;

            var BlockHash$2 = common$2.BlockHash;

            var sha256_K = [
              0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
              0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
              0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
              0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
              0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
              0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
              0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
              0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
              0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
              0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
              0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
              0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
              0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
              0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
              0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
              0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
            ];

            function SHA256$1() {
              if (!(this instanceof SHA256$1))
                return new SHA256$1();

              BlockHash$2.call(this);
              this.h = [
                0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
                0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
              ];
              this.k = sha256_K;
              this.W = new Array(64);
            }
            utils$6.inherits(SHA256$1, BlockHash$2);
            var _256 = SHA256$1;

            SHA256$1.blockSize = 512;
            SHA256$1.outSize = 256;
            SHA256$1.hmacStrength = 192;
            SHA256$1.padLength = 64;

            SHA256$1.prototype._update = function _update(msg, start) {
              var W = this.W;

              for (var i = 0; i < 16; i++)
                W[i] = msg[start + i];
              for (; i < W.length; i++)
                W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

              var a = this.h[0];
              var b = this.h[1];
              var c = this.h[2];
              var d = this.h[3];
              var e = this.h[4];
              var f = this.h[5];
              var g = this.h[6];
              var h = this.h[7];

              assert$8(this.k.length === W.length);
              for (i = 0; i < W.length; i++) {
                var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                var T2 = sum32$1(s0_256(a), maj32(a, b, c));
                h = g;
                g = f;
                f = e;
                e = sum32$1(d, T1);
                d = c;
                c = b;
                b = a;
                a = sum32$1(T1, T2);
              }

              this.h[0] = sum32$1(this.h[0], a);
              this.h[1] = sum32$1(this.h[1], b);
              this.h[2] = sum32$1(this.h[2], c);
              this.h[3] = sum32$1(this.h[3], d);
              this.h[4] = sum32$1(this.h[4], e);
              this.h[5] = sum32$1(this.h[5], f);
              this.h[6] = sum32$1(this.h[6], g);
              this.h[7] = sum32$1(this.h[7], h);
            };

            SHA256$1.prototype._digest = function digest(enc) {
              if (enc === 'hex')
                return utils$6.toHex32(this.h, 'big');
              else
                return utils$6.split32(this.h, 'big');
            };

            var utils$5 = utils$a;
            var SHA256 = _256;

            function SHA224() {
              if (!(this instanceof SHA224))
                return new SHA224();

              SHA256.call(this);
              this.h = [
                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
            }
            utils$5.inherits(SHA224, SHA256);
            var _224 = SHA224;

            SHA224.blockSize = 512;
            SHA224.outSize = 224;
            SHA224.hmacStrength = 192;
            SHA224.padLength = 64;

            SHA224.prototype._digest = function digest(enc) {
              // Just truncate output
              if (enc === 'hex')
                return utils$5.toHex32(this.h.slice(0, 7), 'big');
              else
                return utils$5.split32(this.h.slice(0, 7), 'big');
            };

            var utils$4 = utils$a;
            var common$1 = common$5;
            var assert$7 = minimalisticAssert$1;

            var rotr64_hi = utils$4.rotr64_hi;
            var rotr64_lo = utils$4.rotr64_lo;
            var shr64_hi = utils$4.shr64_hi;
            var shr64_lo = utils$4.shr64_lo;
            var sum64 = utils$4.sum64;
            var sum64_hi = utils$4.sum64_hi;
            var sum64_lo = utils$4.sum64_lo;
            var sum64_4_hi = utils$4.sum64_4_hi;
            var sum64_4_lo = utils$4.sum64_4_lo;
            var sum64_5_hi = utils$4.sum64_5_hi;
            var sum64_5_lo = utils$4.sum64_5_lo;

            var BlockHash$1 = common$1.BlockHash;

            var sha512_K = [
              0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
              0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
              0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
              0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
              0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
              0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
              0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
              0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
              0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
              0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
              0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
              0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
              0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
              0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
              0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
              0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
              0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
              0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
              0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
              0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
              0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
              0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
              0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
              0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
              0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
              0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
              0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
              0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
              0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
              0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
              0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
              0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
              0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
              0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
              0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
              0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
              0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
              0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
              0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
              0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
            ];

            function SHA512$1() {
              if (!(this instanceof SHA512$1))
                return new SHA512$1();

              BlockHash$1.call(this);
              this.h = [
                0x6a09e667, 0xf3bcc908,
                0xbb67ae85, 0x84caa73b,
                0x3c6ef372, 0xfe94f82b,
                0xa54ff53a, 0x5f1d36f1,
                0x510e527f, 0xade682d1,
                0x9b05688c, 0x2b3e6c1f,
                0x1f83d9ab, 0xfb41bd6b,
                0x5be0cd19, 0x137e2179 ];
              this.k = sha512_K;
              this.W = new Array(160);
            }
            utils$4.inherits(SHA512$1, BlockHash$1);
            var _512 = SHA512$1;

            SHA512$1.blockSize = 1024;
            SHA512$1.outSize = 512;
            SHA512$1.hmacStrength = 192;
            SHA512$1.padLength = 128;

            SHA512$1.prototype._prepareBlock = function _prepareBlock(msg, start) {
              var W = this.W;

              // 32 x 32bit words
              for (var i = 0; i < 32; i++)
                W[i] = msg[start + i];
              for (; i < W.length; i += 2) {
                var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
                var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                var c1_hi = W[i - 14];  // i - 7
                var c1_lo = W[i - 13];
                var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
                var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                var c3_hi = W[i - 32];  // i - 16
                var c3_lo = W[i - 31];

                W[i] = sum64_4_hi(
                  c0_hi, c0_lo,
                  c1_hi, c1_lo,
                  c2_hi, c2_lo,
                  c3_hi, c3_lo);
                W[i + 1] = sum64_4_lo(
                  c0_hi, c0_lo,
                  c1_hi, c1_lo,
                  c2_hi, c2_lo,
                  c3_hi, c3_lo);
              }
            };

            SHA512$1.prototype._update = function _update(msg, start) {
              this._prepareBlock(msg, start);

              var W = this.W;

              var ah = this.h[0];
              var al = this.h[1];
              var bh = this.h[2];
              var bl = this.h[3];
              var ch = this.h[4];
              var cl = this.h[5];
              var dh = this.h[6];
              var dl = this.h[7];
              var eh = this.h[8];
              var el = this.h[9];
              var fh = this.h[10];
              var fl = this.h[11];
              var gh = this.h[12];
              var gl = this.h[13];
              var hh = this.h[14];
              var hl = this.h[15];

              assert$7(this.k.length === W.length);
              for (var i = 0; i < W.length; i += 2) {
                var c0_hi = hh;
                var c0_lo = hl;
                var c1_hi = s1_512_hi(eh, el);
                var c1_lo = s1_512_lo(eh, el);
                var c2_hi = ch64_hi(eh, el, fh, fl, gh);
                var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                var c3_hi = this.k[i];
                var c3_lo = this.k[i + 1];
                var c4_hi = W[i];
                var c4_lo = W[i + 1];

                var T1_hi = sum64_5_hi(
                  c0_hi, c0_lo,
                  c1_hi, c1_lo,
                  c2_hi, c2_lo,
                  c3_hi, c3_lo,
                  c4_hi, c4_lo);
                var T1_lo = sum64_5_lo(
                  c0_hi, c0_lo,
                  c1_hi, c1_lo,
                  c2_hi, c2_lo,
                  c3_hi, c3_lo,
                  c4_hi, c4_lo);

                c0_hi = s0_512_hi(ah, al);
                c0_lo = s0_512_lo(ah, al);
                c1_hi = maj64_hi(ah, al, bh, bl, ch);
                c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

                var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

                hh = gh;
                hl = gl;

                gh = fh;
                gl = fl;

                fh = eh;
                fl = el;

                eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                el = sum64_lo(dl, dl, T1_hi, T1_lo);

                dh = ch;
                dl = cl;

                ch = bh;
                cl = bl;

                bh = ah;
                bl = al;

                ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
              }

              sum64(this.h, 0, ah, al);
              sum64(this.h, 2, bh, bl);
              sum64(this.h, 4, ch, cl);
              sum64(this.h, 6, dh, dl);
              sum64(this.h, 8, eh, el);
              sum64(this.h, 10, fh, fl);
              sum64(this.h, 12, gh, gl);
              sum64(this.h, 14, hh, hl);
            };

            SHA512$1.prototype._digest = function digest(enc) {
              if (enc === 'hex')
                return utils$4.toHex32(this.h, 'big');
              else
                return utils$4.split32(this.h, 'big');
            };

            function ch64_hi(xh, xl, yh, yl, zh) {
              var r = (xh & yh) ^ ((~xh) & zh);
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function ch64_lo(xh, xl, yh, yl, zh, zl) {
              var r = (xl & yl) ^ ((~xl) & zl);
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function maj64_hi(xh, xl, yh, yl, zh) {
              var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function maj64_lo(xh, xl, yh, yl, zh, zl) {
              var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function s0_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 28);
              var c1_hi = rotr64_hi(xl, xh, 2);  // 34
              var c2_hi = rotr64_hi(xl, xh, 7);  // 39

              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function s0_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 28);
              var c1_lo = rotr64_lo(xl, xh, 2);  // 34
              var c2_lo = rotr64_lo(xl, xh, 7);  // 39

              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function s1_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 14);
              var c1_hi = rotr64_hi(xh, xl, 18);
              var c2_hi = rotr64_hi(xl, xh, 9);  // 41

              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function s1_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 14);
              var c1_lo = rotr64_lo(xh, xl, 18);
              var c2_lo = rotr64_lo(xl, xh, 9);  // 41

              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function g0_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 1);
              var c1_hi = rotr64_hi(xh, xl, 8);
              var c2_hi = shr64_hi(xh, xl, 7);

              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function g0_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 1);
              var c1_lo = rotr64_lo(xh, xl, 8);
              var c2_lo = shr64_lo(xh, xl, 7);

              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function g1_512_hi(xh, xl) {
              var c0_hi = rotr64_hi(xh, xl, 19);
              var c1_hi = rotr64_hi(xl, xh, 29);  // 61
              var c2_hi = shr64_hi(xh, xl, 6);

              var r = c0_hi ^ c1_hi ^ c2_hi;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            function g1_512_lo(xh, xl) {
              var c0_lo = rotr64_lo(xh, xl, 19);
              var c1_lo = rotr64_lo(xl, xh, 29);  // 61
              var c2_lo = shr64_lo(xh, xl, 6);

              var r = c0_lo ^ c1_lo ^ c2_lo;
              if (r < 0)
                r += 0x100000000;
              return r;
            }

            var utils$3 = utils$a;

            var SHA512 = _512;

            function SHA384() {
              if (!(this instanceof SHA384))
                return new SHA384();

              SHA512.call(this);
              this.h = [
                0xcbbb9d5d, 0xc1059ed8,
                0x629a292a, 0x367cd507,
                0x9159015a, 0x3070dd17,
                0x152fecd8, 0xf70e5939,
                0x67332667, 0xffc00b31,
                0x8eb44a87, 0x68581511,
                0xdb0c2e0d, 0x64f98fa7,
                0x47b5481d, 0xbefa4fa4 ];
            }
            utils$3.inherits(SHA384, SHA512);
            var _384 = SHA384;

            SHA384.blockSize = 1024;
            SHA384.outSize = 384;
            SHA384.hmacStrength = 192;
            SHA384.padLength = 128;

            SHA384.prototype._digest = function digest(enc) {
              if (enc === 'hex')
                return utils$3.toHex32(this.h.slice(0, 12), 'big');
              else
                return utils$3.split32(this.h.slice(0, 12), 'big');
            };

            sha$1.sha1 = _1;
            sha$1.sha224 = _224;
            sha$1.sha256 = _256;
            sha$1.sha384 = _384;
            sha$1.sha512 = _512;

            var ripemd = {};

            var utils$2 = utils$a;
            var common = common$5;

            var rotl32 = utils$2.rotl32;
            var sum32 = utils$2.sum32;
            var sum32_3 = utils$2.sum32_3;
            var sum32_4 = utils$2.sum32_4;
            var BlockHash = common.BlockHash;

            function RIPEMD160() {
              if (!(this instanceof RIPEMD160))
                return new RIPEMD160();

              BlockHash.call(this);

              this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
              this.endian = 'little';
            }
            utils$2.inherits(RIPEMD160, BlockHash);
            ripemd.ripemd160 = RIPEMD160;

            RIPEMD160.blockSize = 512;
            RIPEMD160.outSize = 160;
            RIPEMD160.hmacStrength = 192;
            RIPEMD160.padLength = 64;

            RIPEMD160.prototype._update = function update(msg, start) {
              var A = this.h[0];
              var B = this.h[1];
              var C = this.h[2];
              var D = this.h[3];
              var E = this.h[4];
              var Ah = A;
              var Bh = B;
              var Ch = C;
              var Dh = D;
              var Eh = E;
              for (var j = 0; j < 80; j++) {
                var T = sum32(
                  rotl32(
                    sum32_4(A, f$2(j, B, C, D), msg[r$4[j] + start], K(j)),
                    s$2[j]),
                  E);
                A = E;
                E = D;
                D = rotl32(C, 10);
                C = B;
                B = T;
                T = sum32(
                  rotl32(
                    sum32_4(Ah, f$2(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
                    sh[j]),
                  Eh);
                Ah = Eh;
                Eh = Dh;
                Dh = rotl32(Ch, 10);
                Ch = Bh;
                Bh = T;
              }
              T = sum32_3(this.h[1], C, Dh);
              this.h[1] = sum32_3(this.h[2], D, Eh);
              this.h[2] = sum32_3(this.h[3], E, Ah);
              this.h[3] = sum32_3(this.h[4], A, Bh);
              this.h[4] = sum32_3(this.h[0], B, Ch);
              this.h[0] = T;
            };

            RIPEMD160.prototype._digest = function digest(enc) {
              if (enc === 'hex')
                return utils$2.toHex32(this.h, 'little');
              else
                return utils$2.split32(this.h, 'little');
            };

            function f$2(j, x, y, z) {
              if (j <= 15)
                return x ^ y ^ z;
              else if (j <= 31)
                return (x & y) | ((~x) & z);
              else if (j <= 47)
                return (x | (~y)) ^ z;
              else if (j <= 63)
                return (x & z) | (y & (~z));
              else
                return x ^ (y | (~z));
            }

            function K(j) {
              if (j <= 15)
                return 0x00000000;
              else if (j <= 31)
                return 0x5a827999;
              else if (j <= 47)
                return 0x6ed9eba1;
              else if (j <= 63)
                return 0x8f1bbcdc;
              else
                return 0xa953fd4e;
            }

            function Kh(j) {
              if (j <= 15)
                return 0x50a28be6;
              else if (j <= 31)
                return 0x5c4dd124;
              else if (j <= 47)
                return 0x6d703ef3;
              else if (j <= 63)
                return 0x7a6d76e9;
              else
                return 0x00000000;
            }

            var r$4 = [
              0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
              7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
              3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
              1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
              4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
            ];

            var rh = [
              5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
              6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
              15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
              8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
              12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
            ];

            var s$2 = [
              11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
              7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
              11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
              11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
              9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
            ];

            var sh = [
              8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
              9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
              9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
              15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
              8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
            ];

            var utils$1 = utils$a;
            var assert$6 = minimalisticAssert$1;

            function Hmac(hash, key, enc) {
              if (!(this instanceof Hmac))
                return new Hmac(hash, key, enc);
              this.Hash = hash;
              this.blockSize = hash.blockSize / 8;
              this.outSize = hash.outSize / 8;
              this.inner = null;
              this.outer = null;

              this._init(utils$1.toArray(key, enc));
            }
            var hmac = Hmac;

            Hmac.prototype._init = function init(key) {
              // Shorten key, if needed
              if (key.length > this.blockSize)
                key = new this.Hash().update(key).digest();
              assert$6(key.length <= this.blockSize);

              // Add padding to key
              for (var i = key.length; i < this.blockSize; i++)
                key.push(0);

              for (i = 0; i < key.length; i++)
                key[i] ^= 0x36;
              this.inner = new this.Hash().update(key);

              // 0x36 ^ 0x5c = 0x6a
              for (i = 0; i < key.length; i++)
                key[i] ^= 0x6a;
              this.outer = new this.Hash().update(key);
            };

            Hmac.prototype.update = function update(msg, enc) {
              this.inner.update(msg, enc);
              return this;
            };

            Hmac.prototype.digest = function digest(enc) {
              this.outer.update(this.inner.digest());
              return this.outer.digest(enc);
            };

            (function (exports) {
            var hash = exports;

            hash.utils = utils$a;
            hash.common = common$5;
            hash.sha = sha$1;
            hash.ripemd = ripemd;
            hash.hmac = hmac;

            // Proxy hash functions to the main object
            hash.sha1 = hash.sha.sha1;
            hash.sha256 = hash.sha.sha256;
            hash.sha224 = hash.sha.sha224;
            hash.sha384 = hash.sha.sha384;
            hash.sha512 = hash.sha.sha512;
            hash.ripemd160 = hash.ripemd.ripemd160;
            }(hash));

            function createCommonjsModule$1(fn, basedir, module) {
            	return module = {
            		path: basedir,
            		exports: {},
            		require: function (path, base) {
            			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
            		}
            	}, fn(module, module.exports), module.exports;
            }

            function commonjsRequire () {
            	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
            }

            var minimalisticAssert = assert;

            function assert(val, msg) {
              if (!val)
                throw new Error(msg || 'Assertion failed');
            }

            assert.equal = function assertEqual(l, r, msg) {
              if (l != r)
                throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
            };

            var utils_1 = createCommonjsModule$1(function (module, exports) {

            var utils = exports;

            function toArray(msg, enc) {
              if (Array.isArray(msg))
                return msg.slice();
              if (!msg)
                return [];
              var res = [];
              if (typeof msg !== 'string') {
                for (var i = 0; i < msg.length; i++)
                  res[i] = msg[i] | 0;
                return res;
              }
              if (enc === 'hex') {
                msg = msg.replace(/[^a-z0-9]+/ig, '');
                if (msg.length % 2 !== 0)
                  msg = '0' + msg;
                for (var i = 0; i < msg.length; i += 2)
                  res.push(parseInt(msg[i] + msg[i + 1], 16));
              } else {
                for (var i = 0; i < msg.length; i++) {
                  var c = msg.charCodeAt(i);
                  var hi = c >> 8;
                  var lo = c & 0xff;
                  if (hi)
                    res.push(hi, lo);
                  else
                    res.push(lo);
                }
              }
              return res;
            }
            utils.toArray = toArray;

            function zero2(word) {
              if (word.length === 1)
                return '0' + word;
              else
                return word;
            }
            utils.zero2 = zero2;

            function toHex(msg) {
              var res = '';
              for (var i = 0; i < msg.length; i++)
                res += zero2(msg[i].toString(16));
              return res;
            }
            utils.toHex = toHex;

            utils.encode = function encode(arr, enc) {
              if (enc === 'hex')
                return toHex(arr);
              else
                return arr;
            };
            });

            var utils_1$1 = createCommonjsModule$1(function (module, exports) {

            var utils = exports;




            utils.assert = minimalisticAssert;
            utils.toArray = utils_1.toArray;
            utils.zero2 = utils_1.zero2;
            utils.toHex = utils_1.toHex;
            utils.encode = utils_1.encode;

            // Represent num in a w-NAF form
            function getNAF(num, w, bits) {
              var naf = new Array(Math.max(num.bitLength(), bits) + 1);
              naf.fill(0);

              var ws = 1 << (w + 1);
              var k = num.clone();

              for (var i = 0; i < naf.length; i++) {
                var z;
                var mod = k.andln(ws - 1);
                if (k.isOdd()) {
                  if (mod > (ws >> 1) - 1)
                    z = (ws >> 1) - mod;
                  else
                    z = mod;
                  k.isubn(z);
                } else {
                  z = 0;
                }

                naf[i] = z;
                k.iushrn(1);
              }

              return naf;
            }
            utils.getNAF = getNAF;

            // Represent k1, k2 in a Joint Sparse Form
            function getJSF(k1, k2) {
              var jsf = [
                [],
                [],
              ];

              k1 = k1.clone();
              k2 = k2.clone();
              var d1 = 0;
              var d2 = 0;
              var m8;
              while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
                // First phase
                var m14 = (k1.andln(3) + d1) & 3;
                var m24 = (k2.andln(3) + d2) & 3;
                if (m14 === 3)
                  m14 = -1;
                if (m24 === 3)
                  m24 = -1;
                var u1;
                if ((m14 & 1) === 0) {
                  u1 = 0;
                } else {
                  m8 = (k1.andln(7) + d1) & 7;
                  if ((m8 === 3 || m8 === 5) && m24 === 2)
                    u1 = -m14;
                  else
                    u1 = m14;
                }
                jsf[0].push(u1);

                var u2;
                if ((m24 & 1) === 0) {
                  u2 = 0;
                } else {
                  m8 = (k2.andln(7) + d2) & 7;
                  if ((m8 === 3 || m8 === 5) && m14 === 2)
                    u2 = -m24;
                  else
                    u2 = m24;
                }
                jsf[1].push(u2);

                // Second phase
                if (2 * d1 === u1 + 1)
                  d1 = 1 - d1;
                if (2 * d2 === u2 + 1)
                  d2 = 1 - d2;
                k1.iushrn(1);
                k2.iushrn(1);
              }

              return jsf;
            }
            utils.getJSF = getJSF;

            function cachedProperty(obj, name, computer) {
              var key = '_' + name;
              obj.prototype[name] = function cachedProperty() {
                return this[key] !== undefined ? this[key] :
                  this[key] = computer.call(this);
              };
            }
            utils.cachedProperty = cachedProperty;

            function parseBytes(bytes) {
              return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
                bytes;
            }
            utils.parseBytes = parseBytes;

            function intFromLE(bytes) {
              return new BN$1(bytes, 'hex', 'le');
            }
            utils.intFromLE = intFromLE;
            });



            var getNAF = utils_1$1.getNAF;
            var getJSF = utils_1$1.getJSF;
            var assert$1 = utils_1$1.assert;

            function BaseCurve(type, conf) {
              this.type = type;
              this.p = new BN$1(conf.p, 16);

              // Use Montgomery, when there is no fast reduction for the prime
              this.red = conf.prime ? BN$1.red(conf.prime) : BN$1.mont(this.p);

              // Useful for many curves
              this.zero = new BN$1(0).toRed(this.red);
              this.one = new BN$1(1).toRed(this.red);
              this.two = new BN$1(2).toRed(this.red);

              // Curve configuration, optional
              this.n = conf.n && new BN$1(conf.n, 16);
              this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

              // Temporary arrays
              this._wnafT1 = new Array(4);
              this._wnafT2 = new Array(4);
              this._wnafT3 = new Array(4);
              this._wnafT4 = new Array(4);

              this._bitLength = this.n ? this.n.bitLength() : 0;

              // Generalized Greg Maxwell's trick
              var adjustCount = this.n && this.p.div(this.n);
              if (!adjustCount || adjustCount.cmpn(100) > 0) {
                this.redN = null;
              } else {
                this._maxwellTrick = true;
                this.redN = this.n.toRed(this.red);
              }
            }
            var base$3 = BaseCurve;

            BaseCurve.prototype.point = function point() {
              throw new Error('Not implemented');
            };

            BaseCurve.prototype.validate = function validate() {
              throw new Error('Not implemented');
            };

            BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
              assert$1(p.precomputed);
              var doubles = p._getDoubles();

              var naf = getNAF(k, 1, this._bitLength);
              var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
              I /= 3;

              // Translate into more windowed form
              var repr = [];
              var j;
              var nafW;
              for (j = 0; j < naf.length; j += doubles.step) {
                nafW = 0;
                for (var l = j + doubles.step - 1; l >= j; l--)
                  nafW = (nafW << 1) + naf[l];
                repr.push(nafW);
              }

              var a = this.jpoint(null, null, null);
              var b = this.jpoint(null, null, null);
              for (var i = I; i > 0; i--) {
                for (j = 0; j < repr.length; j++) {
                  nafW = repr[j];
                  if (nafW === i)
                    b = b.mixedAdd(doubles.points[j]);
                  else if (nafW === -i)
                    b = b.mixedAdd(doubles.points[j].neg());
                }
                a = a.add(b);
              }
              return a.toP();
            };

            BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
              var w = 4;

              // Precompute window
              var nafPoints = p._getNAFPoints(w);
              w = nafPoints.wnd;
              var wnd = nafPoints.points;

              // Get NAF form
              var naf = getNAF(k, w, this._bitLength);

              // Add `this`*(N+1) for every w-NAF index
              var acc = this.jpoint(null, null, null);
              for (var i = naf.length - 1; i >= 0; i--) {
                // Count zeroes
                for (var l = 0; i >= 0 && naf[i] === 0; i--)
                  l++;
                if (i >= 0)
                  l++;
                acc = acc.dblp(l);

                if (i < 0)
                  break;
                var z = naf[i];
                assert$1(z !== 0);
                if (p.type === 'affine') {
                  // J +- P
                  if (z > 0)
                    acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
                  else
                    acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
                } else {
                  // J +- J
                  if (z > 0)
                    acc = acc.add(wnd[(z - 1) >> 1]);
                  else
                    acc = acc.add(wnd[(-z - 1) >> 1].neg());
                }
              }
              return p.type === 'affine' ? acc.toP() : acc;
            };

            BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
              points,
              coeffs,
              len,
              jacobianResult) {
              var wndWidth = this._wnafT1;
              var wnd = this._wnafT2;
              var naf = this._wnafT3;

              // Fill all arrays
              var max = 0;
              var i;
              var j;
              var p;
              for (i = 0; i < len; i++) {
                p = points[i];
                var nafPoints = p._getNAFPoints(defW);
                wndWidth[i] = nafPoints.wnd;
                wnd[i] = nafPoints.points;
              }

              // Comb small window NAFs
              for (i = len - 1; i >= 1; i -= 2) {
                var a = i - 1;
                var b = i;
                if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                  naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                  naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                  max = Math.max(naf[a].length, max);
                  max = Math.max(naf[b].length, max);
                  continue;
                }

                var comb = [
                  points[a], /* 1 */
                  null, /* 3 */
                  null, /* 5 */
                  points[b], /* 7 */
                ];

                // Try to avoid Projective points, if possible
                if (points[a].y.cmp(points[b].y) === 0) {
                  comb[1] = points[a].add(points[b]);
                  comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                  comb[1] = points[a].toJ().mixedAdd(points[b]);
                  comb[2] = points[a].add(points[b].neg());
                } else {
                  comb[1] = points[a].toJ().mixedAdd(points[b]);
                  comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                }

                var index = [
                  -3, /* -1 -1 */
                  -1, /* -1 0 */
                  -5, /* -1 1 */
                  -7, /* 0 -1 */
                  0, /* 0 0 */
                  7, /* 0 1 */
                  5, /* 1 -1 */
                  1, /* 1 0 */
                  3,  /* 1 1 */
                ];

                var jsf = getJSF(coeffs[a], coeffs[b]);
                max = Math.max(jsf[0].length, max);
                naf[a] = new Array(max);
                naf[b] = new Array(max);
                for (j = 0; j < max; j++) {
                  var ja = jsf[0][j] | 0;
                  var jb = jsf[1][j] | 0;

                  naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                  naf[b][j] = 0;
                  wnd[a] = comb;
                }
              }

              var acc = this.jpoint(null, null, null);
              var tmp = this._wnafT4;
              for (i = max; i >= 0; i--) {
                var k = 0;

                while (i >= 0) {
                  var zero = true;
                  for (j = 0; j < len; j++) {
                    tmp[j] = naf[j][i] | 0;
                    if (tmp[j] !== 0)
                      zero = false;
                  }
                  if (!zero)
                    break;
                  k++;
                  i--;
                }
                if (i >= 0)
                  k++;
                acc = acc.dblp(k);
                if (i < 0)
                  break;

                for (j = 0; j < len; j++) {
                  var z = tmp[j];
                  if (z === 0)
                    continue;
                  else if (z > 0)
                    p = wnd[j][(z - 1) >> 1];
                  else if (z < 0)
                    p = wnd[j][(-z - 1) >> 1].neg();

                  if (p.type === 'affine')
                    acc = acc.mixedAdd(p);
                  else
                    acc = acc.add(p);
                }
              }
              // Zeroify references
              for (i = 0; i < len; i++)
                wnd[i] = null;

              if (jacobianResult)
                return acc;
              else
                return acc.toP();
            };

            function BasePoint(curve, type) {
              this.curve = curve;
              this.type = type;
              this.precomputed = null;
            }
            BaseCurve.BasePoint = BasePoint;

            BasePoint.prototype.eq = function eq(/*other*/) {
              throw new Error('Not implemented');
            };

            BasePoint.prototype.validate = function validate() {
              return this.curve.validate(this);
            };

            BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
              bytes = utils_1$1.toArray(bytes, enc);

              var len = this.p.byteLength();

              // uncompressed, hybrid-odd, hybrid-even
              if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
                  bytes.length - 1 === 2 * len) {
                if (bytes[0] === 0x06)
                  assert$1(bytes[bytes.length - 1] % 2 === 0);
                else if (bytes[0] === 0x07)
                  assert$1(bytes[bytes.length - 1] % 2 === 1);

                var res =  this.point(bytes.slice(1, 1 + len),
                  bytes.slice(1 + len, 1 + 2 * len));

                return res;
              } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                          bytes.length - 1 === len) {
                return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
              }
              throw new Error('Unknown point format');
            };

            BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
              return this.encode(enc, true);
            };

            BasePoint.prototype._encode = function _encode(compact) {
              var len = this.curve.p.byteLength();
              var x = this.getX().toArray('be', len);

              if (compact)
                return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

              return [ 0x04 ].concat(x, this.getY().toArray('be', len));
            };

            BasePoint.prototype.encode = function encode(enc, compact) {
              return utils_1$1.encode(this._encode(compact), enc);
            };

            BasePoint.prototype.precompute = function precompute(power) {
              if (this.precomputed)
                return this;

              var precomputed = {
                doubles: null,
                naf: null,
                beta: null,
              };
              precomputed.naf = this._getNAFPoints(8);
              precomputed.doubles = this._getDoubles(4, power);
              precomputed.beta = this._getBeta();
              this.precomputed = precomputed;

              return this;
            };

            BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
              if (!this.precomputed)
                return false;

              var doubles = this.precomputed.doubles;
              if (!doubles)
                return false;

              return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
            };

            BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
              if (this.precomputed && this.precomputed.doubles)
                return this.precomputed.doubles;

              var doubles = [ this ];
              var acc = this;
              for (var i = 0; i < power; i += step) {
                for (var j = 0; j < step; j++)
                  acc = acc.dbl();
                doubles.push(acc);
              }
              return {
                step: step,
                points: doubles,
              };
            };

            BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
              if (this.precomputed && this.precomputed.naf)
                return this.precomputed.naf;

              var res = [ this ];
              var max = (1 << wnd) - 1;
              var dbl = max === 1 ? null : this.dbl();
              for (var i = 1; i < max; i++)
                res[i] = res[i - 1].add(dbl);
              return {
                wnd: wnd,
                points: res,
              };
            };

            BasePoint.prototype._getBeta = function _getBeta() {
              return null;
            };

            BasePoint.prototype.dblp = function dblp(k) {
              var r = this;
              for (var i = 0; i < k; i++)
                r = r.dbl();
              return r;
            };

            var inherits_browser = createCommonjsModule$1(function (module) {
            if (typeof Object.create === 'function') {
              // implementation from standard node.js 'util' module
              module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;
                  ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                      value: ctor,
                      enumerable: false,
                      writable: true,
                      configurable: true
                    }
                  });
                }
              };
            } else {
              // old school shim for old browsers
              module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                  ctor.super_ = superCtor;
                  var TempCtor = function () {};
                  TempCtor.prototype = superCtor.prototype;
                  ctor.prototype = new TempCtor();
                  ctor.prototype.constructor = ctor;
                }
              };
            }
            });






            var assert$2 = utils_1$1.assert;

            function ShortCurve(conf) {
              base$3.call(this, 'short', conf);

              this.a = new BN$1(conf.a, 16).toRed(this.red);
              this.b = new BN$1(conf.b, 16).toRed(this.red);
              this.tinv = this.two.redInvm();

              this.zeroA = this.a.fromRed().cmpn(0) === 0;
              this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

              // If the curve is endomorphic, precalculate beta and lambda
              this.endo = this._getEndomorphism(conf);
              this._endoWnafT1 = new Array(4);
              this._endoWnafT2 = new Array(4);
            }
            inherits_browser(ShortCurve, base$3);
            var short_1 = ShortCurve;

            ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
              // No efficient endomorphism
              if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
                return;

              // Compute beta and lambda, that lambda * P = (beta * Px; Py)
              var beta;
              var lambda;
              if (conf.beta) {
                beta = new BN$1(conf.beta, 16).toRed(this.red);
              } else {
                var betas = this._getEndoRoots(this.p);
                // Choose the smallest beta
                beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                beta = beta.toRed(this.red);
              }
              if (conf.lambda) {
                lambda = new BN$1(conf.lambda, 16);
              } else {
                // Choose the lambda that is matching selected beta
                var lambdas = this._getEndoRoots(this.n);
                if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
                  lambda = lambdas[0];
                } else {
                  lambda = lambdas[1];
                  assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                }
              }

              // Get basis vectors, used for balanced length-two representation
              var basis;
              if (conf.basis) {
                basis = conf.basis.map(function(vec) {
                  return {
                    a: new BN$1(vec.a, 16),
                    b: new BN$1(vec.b, 16),
                  };
                });
              } else {
                basis = this._getEndoBasis(lambda);
              }

              return {
                beta: beta,
                lambda: lambda,
                basis: basis,
              };
            };

            ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
              // Find roots of for x^2 + x + 1 in F
              // Root = (-1 +- Sqrt(-3)) / 2
              //
              var red = num === this.p ? this.red : BN$1.mont(num);
              var tinv = new BN$1(2).toRed(red).redInvm();
              var ntinv = tinv.redNeg();

              var s = new BN$1(3).toRed(red).redNeg().redSqrt().redMul(tinv);

              var l1 = ntinv.redAdd(s).fromRed();
              var l2 = ntinv.redSub(s).fromRed();
              return [ l1, l2 ];
            };

            ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
              // aprxSqrt >= sqrt(this.n)
              var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

              // 3.74
              // Run EGCD, until r(L + 1) < aprxSqrt
              var u = lambda;
              var v = this.n.clone();
              var x1 = new BN$1(1);
              var y1 = new BN$1(0);
              var x2 = new BN$1(0);
              var y2 = new BN$1(1);

              // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
              var a0;
              var b0;
              // First vector
              var a1;
              var b1;
              // Second vector
              var a2;
              var b2;

              var prevR;
              var i = 0;
              var r;
              var x;
              while (u.cmpn(0) !== 0) {
                var q = v.div(u);
                r = v.sub(q.mul(u));
                x = x2.sub(q.mul(x1));
                var y = y2.sub(q.mul(y1));

                if (!a1 && r.cmp(aprxSqrt) < 0) {
                  a0 = prevR.neg();
                  b0 = x1;
                  a1 = r.neg();
                  b1 = x;
                } else if (a1 && ++i === 2) {
                  break;
                }
                prevR = r;

                v = u;
                u = r;
                x2 = x1;
                x1 = x;
                y2 = y1;
                y1 = y;
              }
              a2 = r.neg();
              b2 = x;

              var len1 = a1.sqr().add(b1.sqr());
              var len2 = a2.sqr().add(b2.sqr());
              if (len2.cmp(len1) >= 0) {
                a2 = a0;
                b2 = b0;
              }

              // Normalize signs
              if (a1.negative) {
                a1 = a1.neg();
                b1 = b1.neg();
              }
              if (a2.negative) {
                a2 = a2.neg();
                b2 = b2.neg();
              }

              return [
                { a: a1, b: b1 },
                { a: a2, b: b2 },
              ];
            };

            ShortCurve.prototype._endoSplit = function _endoSplit(k) {
              var basis = this.endo.basis;
              var v1 = basis[0];
              var v2 = basis[1];

              var c1 = v2.b.mul(k).divRound(this.n);
              var c2 = v1.b.neg().mul(k).divRound(this.n);

              var p1 = c1.mul(v1.a);
              var p2 = c2.mul(v2.a);
              var q1 = c1.mul(v1.b);
              var q2 = c2.mul(v2.b);

              // Calculate answer
              var k1 = k.sub(p1).sub(p2);
              var k2 = q1.add(q2).neg();
              return { k1: k1, k2: k2 };
            };

            ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
              x = new BN$1(x, 16);
              if (!x.red)
                x = x.toRed(this.red);

              var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
              var y = y2.redSqrt();
              if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
                throw new Error('invalid point');

              // XXX Is there any way to tell if the number is odd without converting it
              // to non-red form?
              var isOdd = y.fromRed().isOdd();
              if (odd && !isOdd || !odd && isOdd)
                y = y.redNeg();

              return this.point(x, y);
            };

            ShortCurve.prototype.validate = function validate(point) {
              if (point.inf)
                return true;

              var x = point.x;
              var y = point.y;

              var ax = this.a.redMul(x);
              var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
              return y.redSqr().redISub(rhs).cmpn(0) === 0;
            };

            ShortCurve.prototype._endoWnafMulAdd =
                function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                  var npoints = this._endoWnafT1;
                  var ncoeffs = this._endoWnafT2;
                  for (var i = 0; i < points.length; i++) {
                    var split = this._endoSplit(coeffs[i]);
                    var p = points[i];
                    var beta = p._getBeta();

                    if (split.k1.negative) {
                      split.k1.ineg();
                      p = p.neg(true);
                    }
                    if (split.k2.negative) {
                      split.k2.ineg();
                      beta = beta.neg(true);
                    }

                    npoints[i * 2] = p;
                    npoints[i * 2 + 1] = beta;
                    ncoeffs[i * 2] = split.k1;
                    ncoeffs[i * 2 + 1] = split.k2;
                  }
                  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

                  // Clean-up references to points and coefficients
                  for (var j = 0; j < i * 2; j++) {
                    npoints[j] = null;
                    ncoeffs[j] = null;
                  }
                  return res;
                };

            function Point(curve, x, y, isRed) {
              base$3.BasePoint.call(this, curve, 'affine');
              if (x === null && y === null) {
                this.x = null;
                this.y = null;
                this.inf = true;
              } else {
                this.x = new BN$1(x, 16);
                this.y = new BN$1(y, 16);
                // Force redgomery representation when loading from JSON
                if (isRed) {
                  this.x.forceRed(this.curve.red);
                  this.y.forceRed(this.curve.red);
                }
                if (!this.x.red)
                  this.x = this.x.toRed(this.curve.red);
                if (!this.y.red)
                  this.y = this.y.toRed(this.curve.red);
                this.inf = false;
              }
            }
            inherits_browser(Point, base$3.BasePoint);

            ShortCurve.prototype.point = function point(x, y, isRed) {
              return new Point(this, x, y, isRed);
            };

            ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
              return Point.fromJSON(this, obj, red);
            };

            Point.prototype._getBeta = function _getBeta() {
              if (!this.curve.endo)
                return;

              var pre = this.precomputed;
              if (pre && pre.beta)
                return pre.beta;

              var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
              if (pre) {
                var curve = this.curve;
                var endoMul = function(p) {
                  return curve.point(p.x.redMul(curve.endo.beta), p.y);
                };
                pre.beta = beta;
                beta.precomputed = {
                  beta: null,
                  naf: pre.naf && {
                    wnd: pre.naf.wnd,
                    points: pre.naf.points.map(endoMul),
                  },
                  doubles: pre.doubles && {
                    step: pre.doubles.step,
                    points: pre.doubles.points.map(endoMul),
                  },
                };
              }
              return beta;
            };

            Point.prototype.toJSON = function toJSON() {
              if (!this.precomputed)
                return [ this.x, this.y ];

              return [ this.x, this.y, this.precomputed && {
                doubles: this.precomputed.doubles && {
                  step: this.precomputed.doubles.step,
                  points: this.precomputed.doubles.points.slice(1),
                },
                naf: this.precomputed.naf && {
                  wnd: this.precomputed.naf.wnd,
                  points: this.precomputed.naf.points.slice(1),
                },
              } ];
            };

            Point.fromJSON = function fromJSON(curve, obj, red) {
              if (typeof obj === 'string')
                obj = JSON.parse(obj);
              var res = curve.point(obj[0], obj[1], red);
              if (!obj[2])
                return res;

              function obj2point(obj) {
                return curve.point(obj[0], obj[1], red);
              }

              var pre = obj[2];
              res.precomputed = {
                beta: null,
                doubles: pre.doubles && {
                  step: pre.doubles.step,
                  points: [ res ].concat(pre.doubles.points.map(obj2point)),
                },
                naf: pre.naf && {
                  wnd: pre.naf.wnd,
                  points: [ res ].concat(pre.naf.points.map(obj2point)),
                },
              };
              return res;
            };

            Point.prototype.inspect = function inspect() {
              if (this.isInfinity())
                return '<EC Point Infinity>';
              return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
                  ' y: ' + this.y.fromRed().toString(16, 2) + '>';
            };

            Point.prototype.isInfinity = function isInfinity() {
              return this.inf;
            };

            Point.prototype.add = function add(p) {
              // O + P = P
              if (this.inf)
                return p;

              // P + O = P
              if (p.inf)
                return this;

              // P + P = 2P
              if (this.eq(p))
                return this.dbl();

              // P + (-P) = O
              if (this.neg().eq(p))
                return this.curve.point(null, null);

              // P + Q = O
              if (this.x.cmp(p.x) === 0)
                return this.curve.point(null, null);

              var c = this.y.redSub(p.y);
              if (c.cmpn(0) !== 0)
                c = c.redMul(this.x.redSub(p.x).redInvm());
              var nx = c.redSqr().redISub(this.x).redISub(p.x);
              var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
              return this.curve.point(nx, ny);
            };

            Point.prototype.dbl = function dbl() {
              if (this.inf)
                return this;

              // 2P = O
              var ys1 = this.y.redAdd(this.y);
              if (ys1.cmpn(0) === 0)
                return this.curve.point(null, null);

              var a = this.curve.a;

              var x2 = this.x.redSqr();
              var dyinv = ys1.redInvm();
              var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

              var nx = c.redSqr().redISub(this.x.redAdd(this.x));
              var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
              return this.curve.point(nx, ny);
            };

            Point.prototype.getX = function getX() {
              return this.x.fromRed();
            };

            Point.prototype.getY = function getY() {
              return this.y.fromRed();
            };

            Point.prototype.mul = function mul(k) {
              k = new BN$1(k, 16);
              if (this.isInfinity())
                return this;
              else if (this._hasDoubles(k))
                return this.curve._fixedNafMul(this, k);
              else if (this.curve.endo)
                return this.curve._endoWnafMulAdd([ this ], [ k ]);
              else
                return this.curve._wnafMul(this, k);
            };

            Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
              var points = [ this, p2 ];
              var coeffs = [ k1, k2 ];
              if (this.curve.endo)
                return this.curve._endoWnafMulAdd(points, coeffs);
              else
                return this.curve._wnafMulAdd(1, points, coeffs, 2);
            };

            Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
              var points = [ this, p2 ];
              var coeffs = [ k1, k2 ];
              if (this.curve.endo)
                return this.curve._endoWnafMulAdd(points, coeffs, true);
              else
                return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
            };

            Point.prototype.eq = function eq(p) {
              return this === p ||
                     this.inf === p.inf &&
                         (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
            };

            Point.prototype.neg = function neg(_precompute) {
              if (this.inf)
                return this;

              var res = this.curve.point(this.x, this.y.redNeg());
              if (_precompute && this.precomputed) {
                var pre = this.precomputed;
                var negate = function(p) {
                  return p.neg();
                };
                res.precomputed = {
                  naf: pre.naf && {
                    wnd: pre.naf.wnd,
                    points: pre.naf.points.map(negate),
                  },
                  doubles: pre.doubles && {
                    step: pre.doubles.step,
                    points: pre.doubles.points.map(negate),
                  },
                };
              }
              return res;
            };

            Point.prototype.toJ = function toJ() {
              if (this.inf)
                return this.curve.jpoint(null, null, null);

              var res = this.curve.jpoint(this.x, this.y, this.curve.one);
              return res;
            };

            function JPoint(curve, x, y, z) {
              base$3.BasePoint.call(this, curve, 'jacobian');
              if (x === null && y === null && z === null) {
                this.x = this.curve.one;
                this.y = this.curve.one;
                this.z = new BN$1(0);
              } else {
                this.x = new BN$1(x, 16);
                this.y = new BN$1(y, 16);
                this.z = new BN$1(z, 16);
              }
              if (!this.x.red)
                this.x = this.x.toRed(this.curve.red);
              if (!this.y.red)
                this.y = this.y.toRed(this.curve.red);
              if (!this.z.red)
                this.z = this.z.toRed(this.curve.red);

              this.zOne = this.z === this.curve.one;
            }
            inherits_browser(JPoint, base$3.BasePoint);

            ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
              return new JPoint(this, x, y, z);
            };

            JPoint.prototype.toP = function toP() {
              if (this.isInfinity())
                return this.curve.point(null, null);

              var zinv = this.z.redInvm();
              var zinv2 = zinv.redSqr();
              var ax = this.x.redMul(zinv2);
              var ay = this.y.redMul(zinv2).redMul(zinv);

              return this.curve.point(ax, ay);
            };

            JPoint.prototype.neg = function neg() {
              return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
            };

            JPoint.prototype.add = function add(p) {
              // O + P = P
              if (this.isInfinity())
                return p;

              // P + O = P
              if (p.isInfinity())
                return this;

              // 12M + 4S + 7A
              var pz2 = p.z.redSqr();
              var z2 = this.z.redSqr();
              var u1 = this.x.redMul(pz2);
              var u2 = p.x.redMul(z2);
              var s1 = this.y.redMul(pz2.redMul(p.z));
              var s2 = p.y.redMul(z2.redMul(this.z));

              var h = u1.redSub(u2);
              var r = s1.redSub(s2);
              if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0)
                  return this.curve.jpoint(null, null, null);
                else
                  return this.dbl();
              }

              var h2 = h.redSqr();
              var h3 = h2.redMul(h);
              var v = u1.redMul(h2);

              var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
              var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
              var nz = this.z.redMul(p.z).redMul(h);

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.mixedAdd = function mixedAdd(p) {
              // O + P = P
              if (this.isInfinity())
                return p.toJ();

              // P + O = P
              if (p.isInfinity())
                return this;

              // 8M + 3S + 7A
              var z2 = this.z.redSqr();
              var u1 = this.x;
              var u2 = p.x.redMul(z2);
              var s1 = this.y;
              var s2 = p.y.redMul(z2).redMul(this.z);

              var h = u1.redSub(u2);
              var r = s1.redSub(s2);
              if (h.cmpn(0) === 0) {
                if (r.cmpn(0) !== 0)
                  return this.curve.jpoint(null, null, null);
                else
                  return this.dbl();
              }

              var h2 = h.redSqr();
              var h3 = h2.redMul(h);
              var v = u1.redMul(h2);

              var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
              var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
              var nz = this.z.redMul(h);

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.dblp = function dblp(pow) {
              if (pow === 0)
                return this;
              if (this.isInfinity())
                return this;
              if (!pow)
                return this.dbl();

              var i;
              if (this.curve.zeroA || this.curve.threeA) {
                var r = this;
                for (i = 0; i < pow; i++)
                  r = r.dbl();
                return r;
              }

              // 1M + 2S + 1A + N * (4S + 5M + 8A)
              // N = 1 => 6M + 6S + 9A
              var a = this.curve.a;
              var tinv = this.curve.tinv;

              var jx = this.x;
              var jy = this.y;
              var jz = this.z;
              var jz4 = jz.redSqr().redSqr();

              // Reuse results
              var jyd = jy.redAdd(jy);
              for (i = 0; i < pow; i++) {
                var jx2 = jx.redSqr();
                var jyd2 = jyd.redSqr();
                var jyd4 = jyd2.redSqr();
                var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

                var t1 = jx.redMul(jyd2);
                var nx = c.redSqr().redISub(t1.redAdd(t1));
                var t2 = t1.redISub(nx);
                var dny = c.redMul(t2);
                dny = dny.redIAdd(dny).redISub(jyd4);
                var nz = jyd.redMul(jz);
                if (i + 1 < pow)
                  jz4 = jz4.redMul(jyd4);

                jx = nx;
                jz = nz;
                jyd = dny;
              }

              return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
            };

            JPoint.prototype.dbl = function dbl() {
              if (this.isInfinity())
                return this;

              if (this.curve.zeroA)
                return this._zeroDbl();
              else if (this.curve.threeA)
                return this._threeDbl();
              else
                return this._dbl();
            };

            JPoint.prototype._zeroDbl = function _zeroDbl() {
              var nx;
              var ny;
              var nz;
              // Z = 1
              if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 14A

                // XX = X1^2
                var xx = this.x.redSqr();
                // YY = Y1^2
                var yy = this.y.redSqr();
                // YYYY = YY^2
                var yyyy = yy.redSqr();
                // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s);
                // M = 3 * XX + a; a = 0
                var m = xx.redAdd(xx).redIAdd(xx);
                // T = M ^ 2 - 2*S
                var t = m.redSqr().redISub(s).redISub(s);

                // 8 * YYYY
                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8);

                // X3 = T
                nx = t;
                // Y3 = M * (S - T) - 8 * YYYY
                ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                // Z3 = 2*Y1
                nz = this.y.redAdd(this.y);
              } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                //     #doubling-dbl-2009-l
                // 2M + 5S + 13A

                // A = X1^2
                var a = this.x.redSqr();
                // B = Y1^2
                var b = this.y.redSqr();
                // C = B^2
                var c = b.redSqr();
                // D = 2 * ((X1 + B)^2 - A - C)
                var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                d = d.redIAdd(d);
                // E = 3 * A
                var e = a.redAdd(a).redIAdd(a);
                // F = E^2
                var f = e.redSqr();

                // 8 * C
                var c8 = c.redIAdd(c);
                c8 = c8.redIAdd(c8);
                c8 = c8.redIAdd(c8);

                // X3 = F - 2 * D
                nx = f.redISub(d).redISub(d);
                // Y3 = E * (D - X3) - 8 * C
                ny = e.redMul(d.redISub(nx)).redISub(c8);
                // Z3 = 2 * Y1 * Z1
                nz = this.y.redMul(this.z);
                nz = nz.redIAdd(nz);
              }

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype._threeDbl = function _threeDbl() {
              var nx;
              var ny;
              var nz;
              // Z = 1
              if (this.zOne) {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                //     #doubling-mdbl-2007-bl
                // 1M + 5S + 15A

                // XX = X1^2
                var xx = this.x.redSqr();
                // YY = Y1^2
                var yy = this.y.redSqr();
                // YYYY = YY^2
                var yyyy = yy.redSqr();
                // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                s = s.redIAdd(s);
                // M = 3 * XX + a
                var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
                // T = M^2 - 2 * S
                var t = m.redSqr().redISub(s).redISub(s);
                // X3 = T
                nx = t;
                // Y3 = M * (S - T) - 8 * YYYY
                var yyyy8 = yyyy.redIAdd(yyyy);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                yyyy8 = yyyy8.redIAdd(yyyy8);
                ny = m.redMul(s.redISub(t)).redISub(yyyy8);
                // Z3 = 2 * Y1
                nz = this.y.redAdd(this.y);
              } else {
                // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                // 3M + 5S

                // delta = Z1^2
                var delta = this.z.redSqr();
                // gamma = Y1^2
                var gamma = this.y.redSqr();
                // beta = X1 * gamma
                var beta = this.x.redMul(gamma);
                // alpha = 3 * (X1 - delta) * (X1 + delta)
                var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                alpha = alpha.redAdd(alpha).redIAdd(alpha);
                // X3 = alpha^2 - 8 * beta
                var beta4 = beta.redIAdd(beta);
                beta4 = beta4.redIAdd(beta4);
                var beta8 = beta4.redAdd(beta4);
                nx = alpha.redSqr().redISub(beta8);
                // Z3 = (Y1 + Z1)^2 - gamma - delta
                nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
                // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                var ggamma8 = gamma.redSqr();
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ggamma8 = ggamma8.redIAdd(ggamma8);
                ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
              }

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype._dbl = function _dbl() {
              var a = this.curve.a;

              // 4M + 6S + 10A
              var jx = this.x;
              var jy = this.y;
              var jz = this.z;
              var jz4 = jz.redSqr().redSqr();

              var jx2 = jx.redSqr();
              var jy2 = jy.redSqr();

              var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

              var jxd4 = jx.redAdd(jx);
              jxd4 = jxd4.redIAdd(jxd4);
              var t1 = jxd4.redMul(jy2);
              var nx = c.redSqr().redISub(t1.redAdd(t1));
              var t2 = t1.redISub(nx);

              var jyd8 = jy2.redSqr();
              jyd8 = jyd8.redIAdd(jyd8);
              jyd8 = jyd8.redIAdd(jyd8);
              jyd8 = jyd8.redIAdd(jyd8);
              var ny = c.redMul(t2).redISub(jyd8);
              var nz = jy.redAdd(jy).redMul(jz);

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.trpl = function trpl() {
              if (!this.curve.zeroA)
                return this.dbl().add(this);

              // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
              // 5M + 10S + ...

              // XX = X1^2
              var xx = this.x.redSqr();
              // YY = Y1^2
              var yy = this.y.redSqr();
              // ZZ = Z1^2
              var zz = this.z.redSqr();
              // YYYY = YY^2
              var yyyy = yy.redSqr();
              // M = 3 * XX + a * ZZ2; a = 0
              var m = xx.redAdd(xx).redIAdd(xx);
              // MM = M^2
              var mm = m.redSqr();
              // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
              var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
              e = e.redIAdd(e);
              e = e.redAdd(e).redIAdd(e);
              e = e.redISub(mm);
              // EE = E^2
              var ee = e.redSqr();
              // T = 16*YYYY
              var t = yyyy.redIAdd(yyyy);
              t = t.redIAdd(t);
              t = t.redIAdd(t);
              t = t.redIAdd(t);
              // U = (M + E)^2 - MM - EE - T
              var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
              // X3 = 4 * (X1 * EE - 4 * YY * U)
              var yyu4 = yy.redMul(u);
              yyu4 = yyu4.redIAdd(yyu4);
              yyu4 = yyu4.redIAdd(yyu4);
              var nx = this.x.redMul(ee).redISub(yyu4);
              nx = nx.redIAdd(nx);
              nx = nx.redIAdd(nx);
              // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
              var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
              ny = ny.redIAdd(ny);
              ny = ny.redIAdd(ny);
              ny = ny.redIAdd(ny);
              // Z3 = (Z1 + E)^2 - ZZ - EE
              var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

              return this.curve.jpoint(nx, ny, nz);
            };

            JPoint.prototype.mul = function mul(k, kbase) {
              k = new BN$1(k, kbase);

              return this.curve._wnafMul(this, k);
            };

            JPoint.prototype.eq = function eq(p) {
              if (p.type === 'affine')
                return this.eq(p.toJ());

              if (this === p)
                return true;

              // x1 * z2^2 == x2 * z1^2
              var z2 = this.z.redSqr();
              var pz2 = p.z.redSqr();
              if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
                return false;

              // y1 * z2^3 == y2 * z1^3
              var z3 = z2.redMul(this.z);
              var pz3 = pz2.redMul(p.z);
              return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
            };

            JPoint.prototype.eqXToP = function eqXToP(x) {
              var zs = this.z.redSqr();
              var rx = x.toRed(this.curve.red).redMul(zs);
              if (this.x.cmp(rx) === 0)
                return true;

              var xc = x.clone();
              var t = this.curve.redN.redMul(zs);
              for (;;) {
                xc.iadd(this.curve.n);
                if (xc.cmp(this.curve.p) >= 0)
                  return false;

                rx.redIAdd(t);
                if (this.x.cmp(rx) === 0)
                  return true;
              }
            };

            JPoint.prototype.inspect = function inspect() {
              if (this.isInfinity())
                return '<EC JPoint Infinity>';
              return '<EC JPoint x: ' + this.x.toString(16, 2) +
                  ' y: ' + this.y.toString(16, 2) +
                  ' z: ' + this.z.toString(16, 2) + '>';
            };

            JPoint.prototype.isInfinity = function isInfinity() {
              // XXX This code assumes that zero is always zero in red
              return this.z.cmpn(0) === 0;
            };

            var curve_1 = createCommonjsModule$1(function (module, exports) {

            var curve = exports;

            curve.base = base$3;
            curve.short = short_1;
            curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
            curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
            });

            var curves_1 = createCommonjsModule$1(function (module, exports) {

            var curves = exports;





            var assert = utils_1$1.assert;

            function PresetCurve(options) {
              if (options.type === 'short')
                this.curve = new curve_1.short(options);
              else if (options.type === 'edwards')
                this.curve = new curve_1.edwards(options);
              else
                this.curve = new curve_1.mont(options);
              this.g = this.curve.g;
              this.n = this.curve.n;
              this.hash = options.hash;

              assert(this.g.validate(), 'Invalid curve');
              assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
            }
            curves.PresetCurve = PresetCurve;

            function defineCurve(name, options) {
              Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                get: function() {
                  var curve = new PresetCurve(options);
                  Object.defineProperty(curves, name, {
                    configurable: true,
                    enumerable: true,
                    value: curve,
                  });
                  return curve;
                },
              });
            }

            defineCurve('p192', {
              type: 'short',
              prime: 'p192',
              p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
              a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
              b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
              n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
              hash: hash.sha256,
              gRed: false,
              g: [
                '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
                '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
              ],
            });

            defineCurve('p224', {
              type: 'short',
              prime: 'p224',
              p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
              a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
              b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
              n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
              hash: hash.sha256,
              gRed: false,
              g: [
                'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
                'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
              ],
            });

            defineCurve('p256', {
              type: 'short',
              prime: null,
              p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
              a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
              b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
              n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
              hash: hash.sha256,
              gRed: false,
              g: [
                '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
                '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
              ],
            });

            defineCurve('p384', {
              type: 'short',
              prime: null,
              p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                 'fffffffe ffffffff 00000000 00000000 ffffffff',
              a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                 'fffffffe ffffffff 00000000 00000000 fffffffc',
              b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
                 '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
              n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
                 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
              hash: hash.sha384,
              gRed: false,
              g: [
                'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
                '5502f25d bf55296c 3a545e38 72760ab7',
                '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
                '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
              ],
            });

            defineCurve('p521', {
              type: 'short',
              prime: null,
              p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                 'ffffffff ffffffff ffffffff ffffffff ffffffff',
              a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                 'ffffffff ffffffff ffffffff ffffffff fffffffc',
              b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
                 '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
                 '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
              n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
                 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
                 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
              hash: hash.sha512,
              gRed: false,
              g: [
                '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
                '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
                'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
                '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
                '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
                '3fad0761 353c7086 a272c240 88be9476 9fd16650',
              ],
            });

            defineCurve('curve25519', {
              type: 'mont',
              prime: 'p25519',
              p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
              a: '76d06',
              b: '1',
              n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
              hash: hash.sha256,
              gRed: false,
              g: [
                '9',
              ],
            });

            defineCurve('ed25519', {
              type: 'edwards',
              prime: 'p25519',
              p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
              a: '-1',
              c: '1',
              // -121665 * (121666^(-1)) (mod P)
              d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
              n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
              hash: hash.sha256,
              gRed: false,
              g: [
                '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

                // 4/5
                '6666666666666666666666666666666666666666666666666666666666666658',
              ],
            });

            var pre;
            try {
              pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
            } catch (e) {
              pre = undefined;
            }

            defineCurve('secp256k1', {
              type: 'short',
              prime: 'k256',
              p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
              a: '0',
              b: '7',
              n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
              h: '1',
              hash: hash.sha256,

              // Precomputed endomorphism
              beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
              lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
              basis: [
                {
                  a: '3086d221a7d46bcde86c90e49284eb15',
                  b: '-e4437ed6010e88286f547fa90abfe4c3',
                },
                {
                  a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
                  b: '3086d221a7d46bcde86c90e49284eb15',
                },
              ],

              gRed: false,
              g: [
                '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
                '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
                pre,
              ],
            });
            });





            function HmacDRBG(options) {
              if (!(this instanceof HmacDRBG))
                return new HmacDRBG(options);
              this.hash = options.hash;
              this.predResist = !!options.predResist;

              this.outLen = this.hash.outSize;
              this.minEntropy = options.minEntropy || this.hash.hmacStrength;

              this._reseed = null;
              this.reseedInterval = null;
              this.K = null;
              this.V = null;

              var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
              var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
              var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
              minimalisticAssert(entropy.length >= (this.minEntropy / 8),
                     'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
              this._init(entropy, nonce, pers);
            }
            var hmacDrbg = HmacDRBG;

            HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
              var seed = entropy.concat(nonce).concat(pers);

              this.K = new Array(this.outLen / 8);
              this.V = new Array(this.outLen / 8);
              for (var i = 0; i < this.V.length; i++) {
                this.K[i] = 0x00;
                this.V[i] = 0x01;
              }

              this._update(seed);
              this._reseed = 1;
              this.reseedInterval = 0x1000000000000;  // 2^48
            };

            HmacDRBG.prototype._hmac = function hmac() {
              return new hash.hmac(this.hash, this.K);
            };

            HmacDRBG.prototype._update = function update(seed) {
              var kmac = this._hmac()
                             .update(this.V)
                             .update([ 0x00 ]);
              if (seed)
                kmac = kmac.update(seed);
              this.K = kmac.digest();
              this.V = this._hmac().update(this.V).digest();
              if (!seed)
                return;

              this.K = this._hmac()
                           .update(this.V)
                           .update([ 0x01 ])
                           .update(seed)
                           .digest();
              this.V = this._hmac().update(this.V).digest();
            };

            HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
              // Optional entropy enc
              if (typeof entropyEnc !== 'string') {
                addEnc = add;
                add = entropyEnc;
                entropyEnc = null;
              }

              entropy = utils_1.toArray(entropy, entropyEnc);
              add = utils_1.toArray(add, addEnc);

              minimalisticAssert(entropy.length >= (this.minEntropy / 8),
                     'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

              this._update(entropy.concat(add || []));
              this._reseed = 1;
            };

            HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
              if (this._reseed > this.reseedInterval)
                throw new Error('Reseed is required');

              // Optional encoding
              if (typeof enc !== 'string') {
                addEnc = add;
                add = enc;
                enc = null;
              }

              // Optional additional data
              if (add) {
                add = utils_1.toArray(add, addEnc || 'hex');
                this._update(add);
              }

              var temp = [];
              while (temp.length < len) {
                this.V = this._hmac().update(this.V).digest();
                temp = temp.concat(this.V);
              }

              var res = temp.slice(0, len);
              this._update(add);
              this._reseed++;
              return utils_1.encode(res, enc);
            };



            var assert$3 = utils_1$1.assert;

            function KeyPair(ec, options) {
              this.ec = ec;
              this.priv = null;
              this.pub = null;

              // KeyPair(ec, { priv: ..., pub: ... })
              if (options.priv)
                this._importPrivate(options.priv, options.privEnc);
              if (options.pub)
                this._importPublic(options.pub, options.pubEnc);
            }
            var key = KeyPair;

            KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
              if (pub instanceof KeyPair)
                return pub;

              return new KeyPair(ec, {
                pub: pub,
                pubEnc: enc,
              });
            };

            KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
              if (priv instanceof KeyPair)
                return priv;

              return new KeyPair(ec, {
                priv: priv,
                privEnc: enc,
              });
            };

            KeyPair.prototype.validate = function validate() {
              var pub = this.getPublic();

              if (pub.isInfinity())
                return { result: false, reason: 'Invalid public key' };
              if (!pub.validate())
                return { result: false, reason: 'Public key is not a point' };
              if (!pub.mul(this.ec.curve.n).isInfinity())
                return { result: false, reason: 'Public key * N != O' };

              return { result: true, reason: null };
            };

            KeyPair.prototype.getPublic = function getPublic(compact, enc) {
              // compact is optional argument
              if (typeof compact === 'string') {
                enc = compact;
                compact = null;
              }

              if (!this.pub)
                this.pub = this.ec.g.mul(this.priv);

              if (!enc)
                return this.pub;

              return this.pub.encode(enc, compact);
            };

            KeyPair.prototype.getPrivate = function getPrivate(enc) {
              if (enc === 'hex')
                return this.priv.toString(16, 2);
              else
                return this.priv;
            };

            KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
              this.priv = new BN$1(key, enc || 16);

              // Ensure that the priv won't be bigger than n, otherwise we may fail
              // in fixed multiplication method
              this.priv = this.priv.umod(this.ec.curve.n);
            };

            KeyPair.prototype._importPublic = function _importPublic(key, enc) {
              if (key.x || key.y) {
                // Montgomery points only have an `x` coordinate.
                // Weierstrass/Edwards points on the other hand have both `x` and
                // `y` coordinates.
                if (this.ec.curve.type === 'mont') {
                  assert$3(key.x, 'Need x coordinate');
                } else if (this.ec.curve.type === 'short' ||
                           this.ec.curve.type === 'edwards') {
                  assert$3(key.x && key.y, 'Need both x and y coordinate');
                }
                this.pub = this.ec.curve.point(key.x, key.y);
                return;
              }
              this.pub = this.ec.curve.decodePoint(key, enc);
            };

            // ECDH
            KeyPair.prototype.derive = function derive(pub) {
              if(!pub.validate()) {
                assert$3(pub.validate(), 'public point not validated');
              }
              return pub.mul(this.priv).getX();
            };

            // ECDSA
            KeyPair.prototype.sign = function sign(msg, enc, options) {
              return this.ec.sign(msg, this, enc, options);
            };

            KeyPair.prototype.verify = function verify(msg, signature) {
              return this.ec.verify(msg, signature, this);
            };

            KeyPair.prototype.inspect = function inspect() {
              return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
                     ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
            };




            var assert$4 = utils_1$1.assert;

            function Signature(options, enc) {
              if (options instanceof Signature)
                return options;

              if (this._importDER(options, enc))
                return;

              assert$4(options.r && options.s, 'Signature without r or s');
              this.r = new BN$1(options.r, 16);
              this.s = new BN$1(options.s, 16);
              if (options.recoveryParam === undefined)
                this.recoveryParam = null;
              else
                this.recoveryParam = options.recoveryParam;
            }
            var signature = Signature;

            function Position() {
              this.place = 0;
            }

            function getLength(buf, p) {
              var initial = buf[p.place++];
              if (!(initial & 0x80)) {
                return initial;
              }
              var octetLen = initial & 0xf;

              // Indefinite length or overflow
              if (octetLen === 0 || octetLen > 4) {
                return false;
              }

              var val = 0;
              for (var i = 0, off = p.place; i < octetLen; i++, off++) {
                val <<= 8;
                val |= buf[off];
                val >>>= 0;
              }

              // Leading zeroes
              if (val <= 0x7f) {
                return false;
              }

              p.place = off;
              return val;
            }

            function rmPadding(buf) {
              var i = 0;
              var len = buf.length - 1;
              while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
                i++;
              }
              if (i === 0) {
                return buf;
              }
              return buf.slice(i);
            }

            Signature.prototype._importDER = function _importDER(data, enc) {
              data = utils_1$1.toArray(data, enc);
              var p = new Position();
              if (data[p.place++] !== 0x30) {
                return false;
              }
              var len = getLength(data, p);
              if (len === false) {
                return false;
              }
              if ((len + p.place) !== data.length) {
                return false;
              }
              if (data[p.place++] !== 0x02) {
                return false;
              }
              var rlen = getLength(data, p);
              if (rlen === false) {
                return false;
              }
              var r = data.slice(p.place, rlen + p.place);
              p.place += rlen;
              if (data[p.place++] !== 0x02) {
                return false;
              }
              var slen = getLength(data, p);
              if (slen === false) {
                return false;
              }
              if (data.length !== slen + p.place) {
                return false;
              }
              var s = data.slice(p.place, slen + p.place);
              if (r[0] === 0) {
                if (r[1] & 0x80) {
                  r = r.slice(1);
                } else {
                  // Leading zeroes
                  return false;
                }
              }
              if (s[0] === 0) {
                if (s[1] & 0x80) {
                  s = s.slice(1);
                } else {
                  // Leading zeroes
                  return false;
                }
              }

              this.r = new BN$1(r);
              this.s = new BN$1(s);
              this.recoveryParam = null;

              return true;
            };

            function constructLength(arr, len) {
              if (len < 0x80) {
                arr.push(len);
                return;
              }
              var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
              arr.push(octets | 0x80);
              while (--octets) {
                arr.push((len >>> (octets << 3)) & 0xff);
              }
              arr.push(len);
            }

            Signature.prototype.toDER = function toDER(enc) {
              var r = this.r.toArray();
              var s = this.s.toArray();

              // Pad values
              if (r[0] & 0x80)
                r = [ 0 ].concat(r);
              // Pad values
              if (s[0] & 0x80)
                s = [ 0 ].concat(s);

              r = rmPadding(r);
              s = rmPadding(s);

              while (!s[0] && !(s[1] & 0x80)) {
                s = s.slice(1);
              }
              var arr = [ 0x02 ];
              constructLength(arr, r.length);
              arr = arr.concat(r);
              arr.push(0x02);
              constructLength(arr, s.length);
              var backHalf = arr.concat(s);
              var res = [ 0x30 ];
              constructLength(res, backHalf.length);
              res = res.concat(backHalf);
              return utils_1$1.encode(res, enc);
            };





            var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
            var assert$5 = utils_1$1.assert;




            function EC(options) {
              if (!(this instanceof EC))
                return new EC(options);

              // Shortcut `elliptic.ec(curve-name)`
              if (typeof options === 'string') {
                assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
                  'Unknown curve ' + options);

                options = curves_1[options];
              }

              // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
              if (options instanceof curves_1.PresetCurve)
                options = { curve: options };

              this.curve = options.curve.curve;
              this.n = this.curve.n;
              this.nh = this.n.ushrn(1);
              this.g = this.curve.g;

              // Point on curve
              this.g = options.curve.g;
              this.g.precompute(options.curve.n.bitLength() + 1);

              // Hash for function for DRBG
              this.hash = options.hash || options.curve.hash;
            }
            var ec = EC;

            EC.prototype.keyPair = function keyPair(options) {
              return new key(this, options);
            };

            EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
              return key.fromPrivate(this, priv, enc);
            };

            EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
              return key.fromPublic(this, pub, enc);
            };

            EC.prototype.genKeyPair = function genKeyPair(options) {
              if (!options)
                options = {};

              // Instantiate Hmac_DRBG
              var drbg = new hmacDrbg({
                hash: this.hash,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8',
                entropy: options.entropy || rand(this.hash.hmacStrength),
                entropyEnc: options.entropy && options.entropyEnc || 'utf8',
                nonce: this.n.toArray(),
              });

              var bytes = this.n.byteLength();
              var ns2 = this.n.sub(new BN$1(2));
              for (;;) {
                var priv = new BN$1(drbg.generate(bytes));
                if (priv.cmp(ns2) > 0)
                  continue;

                priv.iaddn(1);
                return this.keyFromPrivate(priv);
              }
            };

            EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
              var delta = msg.byteLength() * 8 - this.n.bitLength();
              if (delta > 0)
                msg = msg.ushrn(delta);
              if (!truncOnly && msg.cmp(this.n) >= 0)
                return msg.sub(this.n);
              else
                return msg;
            };

            EC.prototype.sign = function sign(msg, key, enc, options) {
              if (typeof enc === 'object') {
                options = enc;
                enc = null;
              }
              if (!options)
                options = {};

              key = this.keyFromPrivate(key, enc);
              msg = this._truncateToN(new BN$1(msg, 16));

              // Zero-extend key to provide enough entropy
              var bytes = this.n.byteLength();
              var bkey = key.getPrivate().toArray('be', bytes);

              // Zero-extend nonce to have the same byte size as N
              var nonce = msg.toArray('be', bytes);

              // Instantiate Hmac_DRBG
              var drbg = new hmacDrbg({
                hash: this.hash,
                entropy: bkey,
                nonce: nonce,
                pers: options.pers,
                persEnc: options.persEnc || 'utf8',
              });

              // Number of bytes to generate
              var ns1 = this.n.sub(new BN$1(1));

              for (var iter = 0; ; iter++) {
                var k = options.k ?
                  options.k(iter) :
                  new BN$1(drbg.generate(this.n.byteLength()));
                k = this._truncateToN(k, true);
                if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
                  continue;

                var kp = this.g.mul(k);
                if (kp.isInfinity())
                  continue;

                var kpX = kp.getX();
                var r = kpX.umod(this.n);
                if (r.cmpn(0) === 0)
                  continue;

                var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                s = s.umod(this.n);
                if (s.cmpn(0) === 0)
                  continue;

                var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                                    (kpX.cmp(r) !== 0 ? 2 : 0);

                // Use complement of `s`, if it is > `n / 2`
                if (options.canonical && s.cmp(this.nh) > 0) {
                  s = this.n.sub(s);
                  recoveryParam ^= 1;
                }

                return new signature({ r: r, s: s, recoveryParam: recoveryParam });
              }
            };

            EC.prototype.verify = function verify(msg, signature$1, key, enc) {
              msg = this._truncateToN(new BN$1(msg, 16));
              key = this.keyFromPublic(key, enc);
              signature$1 = new signature(signature$1, 'hex');

              // Perform primitive values validation
              var r = signature$1.r;
              var s = signature$1.s;
              if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
                return false;
              if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
                return false;

              // Validate signature
              var sinv = s.invm(this.n);
              var u1 = sinv.mul(msg).umod(this.n);
              var u2 = sinv.mul(r).umod(this.n);
              var p;

              if (!this.curve._maxwellTrick) {
                p = this.g.mulAdd(u1, key.getPublic(), u2);
                if (p.isInfinity())
                  return false;

                return p.getX().umod(this.n).cmp(r) === 0;
              }

              // NOTE: Greg Maxwell's trick, inspired by:
              // https://git.io/vad3K

              p = this.g.jmulAdd(u1, key.getPublic(), u2);
              if (p.isInfinity())
                return false;

              // Compare `p.x` of Jacobian point with `r`,
              // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
              // inverse of `p.z^2`
              return p.eqXToP(r);
            };

            EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
              assert$5((3 & j) === j, 'The recovery param is more than two bits');
              signature$1 = new signature(signature$1, enc);

              var n = this.n;
              var e = new BN$1(msg);
              var r = signature$1.r;
              var s = signature$1.s;

              // A set LSB signifies that the y-coordinate is odd
              var isYOdd = j & 1;
              var isSecondKey = j >> 1;
              if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
                throw new Error('Unable to find sencond key candinate');

              // 1.1. Let x = r + jn.
              if (isSecondKey)
                r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
              else
                r = this.curve.pointFromX(r, isYOdd);

              var rInv = signature$1.r.invm(n);
              var s1 = n.sub(e).mul(rInv).umod(n);
              var s2 = s.mul(rInv).umod(n);

              // 1.6.1 Compute Q = r^-1 (sR -  eG)
              //               Q = r^-1 (sR + -eG)
              return this.g.mulAdd(s1, r, s2);
            };

            EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
              signature$1 = new signature(signature$1, enc);
              if (signature$1.recoveryParam !== null)
                return signature$1.recoveryParam;

              for (var i = 0; i < 4; i++) {
                var Qprime;
                try {
                  Qprime = this.recoverPubKey(e, signature$1, i);
                } catch (e) {
                  continue;
                }

                if (Qprime.eq(Q))
                  return i;
              }
              throw new Error('Unable to find valid recovery factor');
            };

            var elliptic_1 = createCommonjsModule$1(function (module, exports) {

            var elliptic = exports;

            elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
            elliptic.utils = utils_1$1;
            elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
            elliptic.curve = curve_1;
            elliptic.curves = curves_1;

            // Protocols
            elliptic.ec = ec;
            elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
            });

            var EC$1 = elliptic_1.ec;

            const version$e = "signing-key/5.5.0";

            const logger$h = new Logger(version$e);
            let _curve = null;
            function getCurve() {
                if (!_curve) {
                    _curve = new EC$1("secp256k1");
                }
                return _curve;
            }
            class SigningKey {
                constructor(privateKey) {
                    defineReadOnly(this, "curve", "secp256k1");
                    defineReadOnly(this, "privateKey", hexlify(privateKey));
                    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
                    defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
                    defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
                    defineReadOnly(this, "_isSigningKey", true);
                }
                _addPoint(other) {
                    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
                    const p1 = getCurve().keyFromPublic(arrayify(other));
                    return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
                }
                signDigest(digest) {
                    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
                    const digestBytes = arrayify(digest);
                    if (digestBytes.length !== 32) {
                        logger$h.throwArgumentError("bad digest length", "digest", digest);
                    }
                    const signature = keyPair.sign(digestBytes, { canonical: true });
                    return splitSignature({
                        recoveryParam: signature.recoveryParam,
                        r: hexZeroPad("0x" + signature.r.toString(16), 32),
                        s: hexZeroPad("0x" + signature.s.toString(16), 32),
                    });
                }
                computeSharedSecret(otherKey) {
                    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
                    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
                    return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
                }
                static isSigningKey(value) {
                    return !!(value && value._isSigningKey);
                }
            }
            function recoverPublicKey(digest, signature) {
                const sig = splitSignature(signature);
                const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
                return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
            }
            function computePublicKey(key, compressed) {
                const bytes = arrayify(key);
                if (bytes.length === 32) {
                    const signingKey = new SigningKey(bytes);
                    if (compressed) {
                        return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
                    }
                    return signingKey.publicKey;
                }
                else if (bytes.length === 33) {
                    if (compressed) {
                        return hexlify(bytes);
                    }
                    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
                }
                else if (bytes.length === 65) {
                    if (!compressed) {
                        return hexlify(bytes);
                    }
                    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
                }
                return logger$h.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
            }

            var lib_esm$b = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        SigningKey: SigningKey,
                        recoverPublicKey: recoverPublicKey,
                        computePublicKey: computePublicKey
            });

            const version$d = "transactions/5.5.0";

            const logger$g = new Logger(version$d);
            var TransactionTypes;
            (function (TransactionTypes) {
                TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
                TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
                TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
            })(TransactionTypes || (TransactionTypes = {}));
            ///////////////////////////////
            function handleAddress(value) {
                if (value === "0x") {
                    return null;
                }
                return getAddress(value);
            }
            function handleNumber(value) {
                if (value === "0x") {
                    return Zero$1;
                }
                return BigNumber.from(value);
            }
            // Legacy Transaction Fields
            const transactionFields = [
                { name: "nonce", maxLength: 32, numeric: true },
                { name: "gasPrice", maxLength: 32, numeric: true },
                { name: "gasLimit", maxLength: 32, numeric: true },
                { name: "to", length: 20 },
                { name: "value", maxLength: 32, numeric: true },
                { name: "data" },
            ];
            const allowedTransactionKeys$1 = {
                chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
            };
            function computeAddress(key) {
                const publicKey = computePublicKey(key);
                return getAddress(hexDataSlice(keccak256$1(hexDataSlice(publicKey, 1)), 12));
            }
            function recoverAddress(digest, signature) {
                return computeAddress(recoverPublicKey(arrayify(digest), signature));
            }
            function formatNumber(value, name) {
                const result = stripZeros(BigNumber.from(value).toHexString());
                if (result.length > 32) {
                    logger$g.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
                }
                return result;
            }
            function accessSetify(addr, storageKeys) {
                return {
                    address: getAddress(addr),
                    storageKeys: (storageKeys || []).map((storageKey, index) => {
                        if (hexDataLength(storageKey) !== 32) {
                            logger$g.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
                        }
                        return storageKey.toLowerCase();
                    })
                };
            }
            function accessListify(value) {
                if (Array.isArray(value)) {
                    return value.map((set, index) => {
                        if (Array.isArray(set)) {
                            if (set.length > 2) {
                                logger$g.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                            }
                            return accessSetify(set[0], set[1]);
                        }
                        return accessSetify(set.address, set.storageKeys);
                    });
                }
                const result = Object.keys(value).map((addr) => {
                    const storageKeys = value[addr].reduce((accum, storageKey) => {
                        accum[storageKey] = true;
                        return accum;
                    }, {});
                    return accessSetify(addr, Object.keys(storageKeys).sort());
                });
                result.sort((a, b) => (a.address.localeCompare(b.address)));
                return result;
            }
            function formatAccessList(value) {
                return accessListify(value).map((set) => [set.address, set.storageKeys]);
            }
            function _serializeEip1559(transaction, signature) {
                // If there is an explicit gasPrice, make sure it matches the
                // EIP-1559 fees; otherwise they may not understand what they
                // think they are setting in terms of fee.
                if (transaction.gasPrice != null) {
                    const gasPrice = BigNumber.from(transaction.gasPrice);
                    const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
                    if (!gasPrice.eq(maxFeePerGas)) {
                        logger$g.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                            gasPrice, maxFeePerGas
                        });
                    }
                }
                const fields = [
                    formatNumber(transaction.chainId || 0, "chainId"),
                    formatNumber(transaction.nonce || 0, "nonce"),
                    formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
                    formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
                    formatNumber(transaction.gasLimit || 0, "gasLimit"),
                    ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
                    formatNumber(transaction.value || 0, "value"),
                    (transaction.data || "0x"),
                    (formatAccessList(transaction.accessList || []))
                ];
                if (signature) {
                    const sig = splitSignature(signature);
                    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
                    fields.push(stripZeros(sig.r));
                    fields.push(stripZeros(sig.s));
                }
                return hexConcat(["0x02", encode$9(fields)]);
            }
            function _serializeEip2930(transaction, signature) {
                const fields = [
                    formatNumber(transaction.chainId || 0, "chainId"),
                    formatNumber(transaction.nonce || 0, "nonce"),
                    formatNumber(transaction.gasPrice || 0, "gasPrice"),
                    formatNumber(transaction.gasLimit || 0, "gasLimit"),
                    ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
                    formatNumber(transaction.value || 0, "value"),
                    (transaction.data || "0x"),
                    (formatAccessList(transaction.accessList || []))
                ];
                if (signature) {
                    const sig = splitSignature(signature);
                    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
                    fields.push(stripZeros(sig.r));
                    fields.push(stripZeros(sig.s));
                }
                return hexConcat(["0x01", encode$9(fields)]);
            }
            // Legacy Transactions and EIP-155
            function _serialize(transaction, signature) {
                checkProperties(transaction, allowedTransactionKeys$1);
                const raw = [];
                transactionFields.forEach(function (fieldInfo) {
                    let value = transaction[fieldInfo.name] || ([]);
                    const options = {};
                    if (fieldInfo.numeric) {
                        options.hexPad = "left";
                    }
                    value = arrayify(hexlify(value, options));
                    // Fixed-width field
                    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
                        logger$g.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                    }
                    // Variable-width (with a maximum)
                    if (fieldInfo.maxLength) {
                        value = stripZeros(value);
                        if (value.length > fieldInfo.maxLength) {
                            logger$g.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                        }
                    }
                    raw.push(hexlify(value));
                });
                let chainId = 0;
                if (transaction.chainId != null) {
                    // A chainId was provided; if non-zero we'll use EIP-155
                    chainId = transaction.chainId;
                    if (typeof (chainId) !== "number") {
                        logger$g.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
                    }
                }
                else if (signature && !isBytesLike(signature) && signature.v > 28) {
                    // No chainId provided, but the signature is signing with EIP-155; derive chainId
                    chainId = Math.floor((signature.v - 35) / 2);
                }
                // We have an EIP-155 transaction (chainId was specified and non-zero)
                if (chainId !== 0) {
                    raw.push(hexlify(chainId)); // @TODO: hexValue?
                    raw.push("0x");
                    raw.push("0x");
                }
                // Requesting an unsigned transaction
                if (!signature) {
                    return encode$9(raw);
                }
                // The splitSignature will ensure the transaction has a recoveryParam in the
                // case that the signTransaction function only adds a v.
                const sig = splitSignature(signature);
                // We pushed a chainId and null r, s on for hashing only; remove those
                let v = 27 + sig.recoveryParam;
                if (chainId !== 0) {
                    raw.pop();
                    raw.pop();
                    raw.pop();
                    v += chainId * 2 + 8;
                    // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
                    if (sig.v > 28 && sig.v !== v) {
                        logger$g.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
                    }
                }
                else if (sig.v !== v) {
                    logger$g.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
                }
                raw.push(hexlify(v));
                raw.push(stripZeros(arrayify(sig.r)));
                raw.push(stripZeros(arrayify(sig.s)));
                return encode$9(raw);
            }
            function serialize(transaction, signature) {
                // Legacy and EIP-155 Transactions
                if (transaction.type == null || transaction.type === 0) {
                    if (transaction.accessList != null) {
                        logger$g.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
                    }
                    return _serialize(transaction, signature);
                }
                // Typed Transactions (EIP-2718)
                switch (transaction.type) {
                    case 1:
                        return _serializeEip2930(transaction, signature);
                    case 2:
                        return _serializeEip1559(transaction, signature);
                }
                return logger$g.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "serializeTransaction",
                    transactionType: transaction.type
                });
            }
            function _parseEipSignature(tx, fields, serialize) {
                try {
                    const recid = handleNumber(fields[0]).toNumber();
                    if (recid !== 0 && recid !== 1) {
                        throw new Error("bad recid");
                    }
                    tx.v = recid;
                }
                catch (error) {
                    logger$g.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
                }
                tx.r = hexZeroPad(fields[1], 32);
                tx.s = hexZeroPad(fields[2], 32);
                try {
                    const digest = keccak256$1(serialize(tx));
                    tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
                }
                catch (error) {
                    console.log(error);
                }
            }
            function _parseEip1559(payload) {
                const transaction = decode$8(payload.slice(1));
                if (transaction.length !== 9 && transaction.length !== 12) {
                    logger$g.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
                }
                const maxPriorityFeePerGas = handleNumber(transaction[2]);
                const maxFeePerGas = handleNumber(transaction[3]);
                const tx = {
                    type: 2,
                    chainId: handleNumber(transaction[0]).toNumber(),
                    nonce: handleNumber(transaction[1]).toNumber(),
                    maxPriorityFeePerGas: maxPriorityFeePerGas,
                    maxFeePerGas: maxFeePerGas,
                    gasPrice: null,
                    gasLimit: handleNumber(transaction[4]),
                    to: handleAddress(transaction[5]),
                    value: handleNumber(transaction[6]),
                    data: transaction[7],
                    accessList: accessListify(transaction[8]),
                };
                // Unsigned EIP-1559 Transaction
                if (transaction.length === 9) {
                    return tx;
                }
                tx.hash = keccak256$1(payload);
                _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
                return tx;
            }
            function _parseEip2930(payload) {
                const transaction = decode$8(payload.slice(1));
                if (transaction.length !== 8 && transaction.length !== 11) {
                    logger$g.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
                }
                const tx = {
                    type: 1,
                    chainId: handleNumber(transaction[0]).toNumber(),
                    nonce: handleNumber(transaction[1]).toNumber(),
                    gasPrice: handleNumber(transaction[2]),
                    gasLimit: handleNumber(transaction[3]),
                    to: handleAddress(transaction[4]),
                    value: handleNumber(transaction[5]),
                    data: transaction[6],
                    accessList: accessListify(transaction[7])
                };
                // Unsigned EIP-2930 Transaction
                if (transaction.length === 8) {
                    return tx;
                }
                tx.hash = keccak256$1(payload);
                _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
                return tx;
            }
            // Legacy Transactions and EIP-155
            function _parse(rawTransaction) {
                const transaction = decode$8(rawTransaction);
                if (transaction.length !== 9 && transaction.length !== 6) {
                    logger$g.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
                }
                const tx = {
                    nonce: handleNumber(transaction[0]).toNumber(),
                    gasPrice: handleNumber(transaction[1]),
                    gasLimit: handleNumber(transaction[2]),
                    to: handleAddress(transaction[3]),
                    value: handleNumber(transaction[4]),
                    data: transaction[5],
                    chainId: 0
                };
                // Legacy unsigned transaction
                if (transaction.length === 6) {
                    return tx;
                }
                try {
                    tx.v = BigNumber.from(transaction[6]).toNumber();
                }
                catch (error) {
                    console.log(error);
                    return tx;
                }
                tx.r = hexZeroPad(transaction[7], 32);
                tx.s = hexZeroPad(transaction[8], 32);
                if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
                    // EIP-155 unsigned transaction
                    tx.chainId = tx.v;
                    tx.v = 0;
                }
                else {
                    // Signed Transaction
                    tx.chainId = Math.floor((tx.v - 35) / 2);
                    if (tx.chainId < 0) {
                        tx.chainId = 0;
                    }
                    let recoveryParam = tx.v - 27;
                    const raw = transaction.slice(0, 6);
                    if (tx.chainId !== 0) {
                        raw.push(hexlify(tx.chainId));
                        raw.push("0x");
                        raw.push("0x");
                        recoveryParam -= tx.chainId * 2 + 8;
                    }
                    const digest = keccak256$1(encode$9(raw));
                    try {
                        tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });
                    }
                    catch (error) {
                        console.log(error);
                    }
                    tx.hash = keccak256$1(rawTransaction);
                }
                tx.type = null;
                return tx;
            }
            function parse(rawTransaction) {
                const payload = arrayify(rawTransaction);
                // Legacy and EIP-155 Transactions
                if (payload[0] > 0x7f) {
                    return _parse(payload);
                }
                // Typed Transaction (EIP-2718)
                switch (payload[0]) {
                    case 1:
                        return _parseEip2930(payload);
                    case 2:
                        return _parseEip1559(payload);
                }
                return logger$g.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "parseTransaction",
                    transactionType: payload[0]
                });
            }

            var lib_esm$a = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        get TransactionTypes () { return TransactionTypes; },
                        computeAddress: computeAddress,
                        recoverAddress: recoverAddress,
                        accessListify: accessListify,
                        serialize: serialize,
                        parse: parse
            });

            const version$c = "contracts/5.5.0";

            var __awaiter$6 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$f = new Logger(version$c);
            function resolveName(resolver, nameOrPromise) {
                return __awaiter$6(this, void 0, void 0, function* () {
                    const name = yield nameOrPromise;
                    if (typeof (name) !== "string") {
                        logger$f.throwArgumentError("invalid address or ENS name", "name", name);
                    }
                    // If it is already an address, just use it (after adding checksum)
                    try {
                        return getAddress(name);
                    }
                    catch (error) { }
                    if (!resolver) {
                        logger$f.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "resolveName"
                        });
                    }
                    const address = yield resolver.resolveName(name);
                    if (address == null) {
                        logger$f.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
                    }
                    return address;
                });
            }
            // Recursively replaces ENS names with promises to resolve the name and resolves all properties
            function resolveAddresses(resolver, value, paramType) {
                return __awaiter$6(this, void 0, void 0, function* () {
                    if (Array.isArray(paramType)) {
                        return yield Promise.all(paramType.map((paramType, index) => {
                            return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
                        }));
                    }
                    if (paramType.type === "address") {
                        return yield resolveName(resolver, value);
                    }
                    if (paramType.type === "tuple") {
                        return yield resolveAddresses(resolver, value, paramType.components);
                    }
                    if (paramType.baseType === "array") {
                        if (!Array.isArray(value)) {
                            return Promise.reject(logger$f.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
                                argument: "value",
                                value
                            }));
                        }
                        return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
                    }
                    return value;
                });
            }
            function populateTransaction(contract, fragment, args) {
                return __awaiter$6(this, void 0, void 0, function* () {
                    // If an extra argument is given, it is overrides
                    let overrides = {};
                    if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                        overrides = shallowCopy(args.pop());
                    }
                    // Make sure the parameter count matches
                    logger$f.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
                    // Populate "from" override (allow promises)
                    if (contract.signer) {
                        if (overrides.from) {
                            // Contracts with a Signer are from the Signer's frame-of-reference;
                            // but we allow overriding "from" if it matches the signer
                            overrides.from = resolveProperties({
                                override: resolveName(contract.signer, overrides.from),
                                signer: contract.signer.getAddress()
                            }).then((check) => __awaiter$6(this, void 0, void 0, function* () {
                                if (getAddress(check.signer) !== check.override) {
                                    logger$f.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
                                        operation: "overrides.from"
                                    });
                                }
                                return check.override;
                            }));
                        }
                        else {
                            overrides.from = contract.signer.getAddress();
                        }
                    }
                    else if (overrides.from) {
                        overrides.from = resolveName(contract.provider, overrides.from);
                        //} else {
                        // Contracts without a signer can override "from", and if
                        // unspecified the zero address is used
                        //overrides.from = AddressZero;
                    }
                    // Wait for all dependencies to be resolved (prefer the signer over the provider)
                    const resolved = yield resolveProperties({
                        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                        address: contract.resolvedAddress,
                        overrides: (resolveProperties(overrides) || {})
                    });
                    // The ABI coded transaction
                    const data = contract.interface.encodeFunctionData(fragment, resolved.args);
                    const tx = {
                        data: data,
                        to: resolved.address
                    };
                    // Resolved Overrides
                    const ro = resolved.overrides;
                    // Populate simple overrides
                    if (ro.nonce != null) {
                        tx.nonce = BigNumber.from(ro.nonce).toNumber();
                    }
                    if (ro.gasLimit != null) {
                        tx.gasLimit = BigNumber.from(ro.gasLimit);
                    }
                    if (ro.gasPrice != null) {
                        tx.gasPrice = BigNumber.from(ro.gasPrice);
                    }
                    if (ro.maxFeePerGas != null) {
                        tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
                    }
                    if (ro.maxPriorityFeePerGas != null) {
                        tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
                    }
                    if (ro.from != null) {
                        tx.from = ro.from;
                    }
                    if (ro.type != null) {
                        tx.type = ro.type;
                    }
                    if (ro.accessList != null) {
                        tx.accessList = accessListify(ro.accessList);
                    }
                    // If there was no "gasLimit" override, but the ABI specifies a default, use it
                    if (tx.gasLimit == null && fragment.gas != null) {
                        // Compute the intrinsic gas cost for this transaction
                        // @TODO: This is based on the yellow paper as of Petersburg; this is something
                        // we may wish to parameterize in v6 as part of the Network object. Since this
                        // is always a non-nil to address, we can ignore G_create, but may wish to add
                        // similar logic to the ContractFactory.
                        let intrinsic = 21000;
                        const bytes = arrayify(data);
                        for (let i = 0; i < bytes.length; i++) {
                            intrinsic += 4;
                            if (bytes[i]) {
                                intrinsic += 64;
                            }
                        }
                        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
                    }
                    // Populate "value" override
                    if (ro.value) {
                        const roValue = BigNumber.from(ro.value);
                        if (!roValue.isZero() && !fragment.payable) {
                            logger$f.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.value",
                                value: overrides.value
                            });
                        }
                        tx.value = roValue;
                    }
                    if (ro.customData) {
                        tx.customData = shallowCopy(ro.customData);
                    }
                    // Remove the overrides
                    delete overrides.nonce;
                    delete overrides.gasLimit;
                    delete overrides.gasPrice;
                    delete overrides.from;
                    delete overrides.value;
                    delete overrides.type;
                    delete overrides.accessList;
                    delete overrides.maxFeePerGas;
                    delete overrides.maxPriorityFeePerGas;
                    delete overrides.customData;
                    // Make sure there are no stray overrides, which may indicate a
                    // typo or using an unsupported key.
                    const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));
                    if (leftovers.length) {
                        logger$f.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "overrides",
                            overrides: leftovers
                        });
                    }
                    return tx;
                });
            }
            function buildPopulate(contract, fragment) {
                return function (...args) {
                    return populateTransaction(contract, fragment, args);
                };
            }
            function buildEstimate(contract, fragment) {
                const signerOrProvider = (contract.signer || contract.provider);
                return function (...args) {
                    return __awaiter$6(this, void 0, void 0, function* () {
                        if (!signerOrProvider) {
                            logger$f.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "estimateGas"
                            });
                        }
                        const tx = yield populateTransaction(contract, fragment, args);
                        return yield signerOrProvider.estimateGas(tx);
                    });
                };
            }
            function addContractWait(contract, tx) {
                const wait = tx.wait.bind(tx);
                tx.wait = (confirmations) => {
                    return wait(confirmations).then((receipt) => {
                        receipt.events = receipt.logs.map((log) => {
                            let event = deepCopy(log);
                            let parsed = null;
                            try {
                                parsed = contract.interface.parseLog(log);
                            }
                            catch (e) { }
                            // Successfully parsed the event log; include it
                            if (parsed) {
                                event.args = parsed.args;
                                event.decode = (data, topics) => {
                                    return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                                };
                                event.event = parsed.name;
                                event.eventSignature = parsed.signature;
                            }
                            // Useful operations
                            event.removeListener = () => { return contract.provider; };
                            event.getBlock = () => {
                                return contract.provider.getBlock(receipt.blockHash);
                            };
                            event.getTransaction = () => {
                                return contract.provider.getTransaction(receipt.transactionHash);
                            };
                            event.getTransactionReceipt = () => {
                                return Promise.resolve(receipt);
                            };
                            return event;
                        });
                        return receipt;
                    });
                };
            }
            function buildCall(contract, fragment, collapseSimple) {
                const signerOrProvider = (contract.signer || contract.provider);
                return function (...args) {
                    return __awaiter$6(this, void 0, void 0, function* () {
                        // Extract the "blockTag" override if present
                        let blockTag = undefined;
                        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                            const overrides = shallowCopy(args.pop());
                            if (overrides.blockTag != null) {
                                blockTag = yield overrides.blockTag;
                            }
                            delete overrides.blockTag;
                            args.push(overrides);
                        }
                        // If the contract was just deployed, wait until it is mined
                        if (contract.deployTransaction != null) {
                            yield contract._deployed(blockTag);
                        }
                        // Call a node and get the result
                        const tx = yield populateTransaction(contract, fragment, args);
                        const result = yield signerOrProvider.call(tx, blockTag);
                        try {
                            let value = contract.interface.decodeFunctionResult(fragment, result);
                            if (collapseSimple && fragment.outputs.length === 1) {
                                value = value[0];
                            }
                            return value;
                        }
                        catch (error) {
                            if (error.code === Logger.errors.CALL_EXCEPTION) {
                                error.address = contract.address;
                                error.args = args;
                                error.transaction = tx;
                            }
                            throw error;
                        }
                    });
                };
            }
            function buildSend(contract, fragment) {
                return function (...args) {
                    return __awaiter$6(this, void 0, void 0, function* () {
                        if (!contract.signer) {
                            logger$f.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "sendTransaction"
                            });
                        }
                        // If the contract was just deployed, wait until it is mined
                        if (contract.deployTransaction != null) {
                            yield contract._deployed();
                        }
                        const txRequest = yield populateTransaction(contract, fragment, args);
                        const tx = yield contract.signer.sendTransaction(txRequest);
                        // Tweak the tx.wait so the receipt has extra properties
                        addContractWait(contract, tx);
                        return tx;
                    });
                };
            }
            function buildDefault(contract, fragment, collapseSimple) {
                if (fragment.constant) {
                    return buildCall(contract, fragment, collapseSimple);
                }
                return buildSend(contract, fragment);
            }
            function getEventTag$1(filter) {
                if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
                    return "*";
                }
                return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
                    if (Array.isArray(topic)) {
                        return topic.join("|");
                    }
                    return topic;
                }).join(":") : "");
            }
            class RunningEvent {
                constructor(tag, filter) {
                    defineReadOnly(this, "tag", tag);
                    defineReadOnly(this, "filter", filter);
                    this._listeners = [];
                }
                addListener(listener, once) {
                    this._listeners.push({ listener: listener, once: once });
                }
                removeListener(listener) {
                    let done = false;
                    this._listeners = this._listeners.filter((item) => {
                        if (done || item.listener !== listener) {
                            return true;
                        }
                        done = true;
                        return false;
                    });
                }
                removeAllListeners() {
                    this._listeners = [];
                }
                listeners() {
                    return this._listeners.map((i) => i.listener);
                }
                listenerCount() {
                    return this._listeners.length;
                }
                run(args) {
                    const listenerCount = this.listenerCount();
                    this._listeners = this._listeners.filter((item) => {
                        const argsCopy = args.slice();
                        // Call the callback in the next event loop
                        setTimeout(() => {
                            item.listener.apply(this, argsCopy);
                        }, 0);
                        // Reschedule it if it not "once"
                        return !(item.once);
                    });
                    return listenerCount;
                }
                prepareEvent(event) {
                }
                // Returns the array that will be applied to an emit
                getEmit(event) {
                    return [event];
                }
            }
            class ErrorRunningEvent extends RunningEvent {
                constructor() {
                    super("error", null);
                }
            }
            // @TODO Fragment should inherit Wildcard? and just override getEmit?
            //       or have a common abstract super class, with enough constructor
            //       options to configure both.
            // A Fragment Event will populate all the properties that Wildcard
            // will, and additionally dereference the arguments when emitting
            class FragmentRunningEvent extends RunningEvent {
                constructor(address, contractInterface, fragment, topics) {
                    const filter = {
                        address: address
                    };
                    let topic = contractInterface.getEventTopic(fragment);
                    if (topics) {
                        if (topic !== topics[0]) {
                            logger$f.throwArgumentError("topic mismatch", "topics", topics);
                        }
                        filter.topics = topics.slice();
                    }
                    else {
                        filter.topics = [topic];
                    }
                    super(getEventTag$1(filter), filter);
                    defineReadOnly(this, "address", address);
                    defineReadOnly(this, "interface", contractInterface);
                    defineReadOnly(this, "fragment", fragment);
                }
                prepareEvent(event) {
                    super.prepareEvent(event);
                    event.event = this.fragment.name;
                    event.eventSignature = this.fragment.format();
                    event.decode = (data, topics) => {
                        return this.interface.decodeEventLog(this.fragment, data, topics);
                    };
                    try {
                        event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
                    }
                    catch (error) {
                        event.args = null;
                        event.decodeError = error;
                    }
                }
                getEmit(event) {
                    const errors = checkResultErrors(event.args);
                    if (errors.length) {
                        throw errors[0].error;
                    }
                    const args = (event.args || []).slice();
                    args.push(event);
                    return args;
                }
            }
            // A Wildcard Event will attempt to populate:
            //  - event            The name of the event name
            //  - eventSignature   The full signature of the event
            //  - decode           A function to decode data and topics
            //  - args             The decoded data and topics
            class WildcardRunningEvent extends RunningEvent {
                constructor(address, contractInterface) {
                    super("*", { address: address });
                    defineReadOnly(this, "address", address);
                    defineReadOnly(this, "interface", contractInterface);
                }
                prepareEvent(event) {
                    super.prepareEvent(event);
                    try {
                        const parsed = this.interface.parseLog(event);
                        event.event = parsed.name;
                        event.eventSignature = parsed.signature;
                        event.decode = (data, topics) => {
                            return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
                        };
                        event.args = parsed.args;
                    }
                    catch (error) {
                        // No matching event
                    }
                }
            }
            class BaseContract {
                constructor(addressOrName, contractInterface, signerOrProvider) {
                    logger$f.checkNew(new.target, Contract);
                    // @TODO: Maybe still check the addressOrName looks like a valid address or name?
                    //address = getAddress(address);
                    defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
                    if (signerOrProvider == null) {
                        defineReadOnly(this, "provider", null);
                        defineReadOnly(this, "signer", null);
                    }
                    else if (Signer.isSigner(signerOrProvider)) {
                        defineReadOnly(this, "provider", signerOrProvider.provider || null);
                        defineReadOnly(this, "signer", signerOrProvider);
                    }
                    else if (Provider$1.isProvider(signerOrProvider)) {
                        defineReadOnly(this, "provider", signerOrProvider);
                        defineReadOnly(this, "signer", null);
                    }
                    else {
                        logger$f.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
                    }
                    defineReadOnly(this, "callStatic", {});
                    defineReadOnly(this, "estimateGas", {});
                    defineReadOnly(this, "functions", {});
                    defineReadOnly(this, "populateTransaction", {});
                    defineReadOnly(this, "filters", {});
                    {
                        const uniqueFilters = {};
                        Object.keys(this.interface.events).forEach((eventSignature) => {
                            const event = this.interface.events[eventSignature];
                            defineReadOnly(this.filters, eventSignature, (...args) => {
                                return {
                                    address: this.address,
                                    topics: this.interface.encodeFilterTopics(event, args)
                                };
                            });
                            if (!uniqueFilters[event.name]) {
                                uniqueFilters[event.name] = [];
                            }
                            uniqueFilters[event.name].push(eventSignature);
                        });
                        Object.keys(uniqueFilters).forEach((name) => {
                            const filters = uniqueFilters[name];
                            if (filters.length === 1) {
                                defineReadOnly(this.filters, name, this.filters[filters[0]]);
                            }
                            else {
                                logger$f.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
                            }
                        });
                    }
                    defineReadOnly(this, "_runningEvents", {});
                    defineReadOnly(this, "_wrappedEmits", {});
                    if (addressOrName == null) {
                        logger$f.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
                    }
                    defineReadOnly(this, "address", addressOrName);
                    if (this.provider) {
                        defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
                    }
                    else {
                        try {
                            defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
                        }
                        catch (error) {
                            // Without a provider, we cannot use ENS names
                            logger$f.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "new Contract"
                            });
                        }
                    }
                    const uniqueNames = {};
                    const uniqueSignatures = {};
                    Object.keys(this.interface.functions).forEach((signature) => {
                        const fragment = this.interface.functions[signature];
                        // Check that the signature is unique; if not the ABI generation has
                        // not been cleaned or may be incorrectly generated
                        if (uniqueSignatures[signature]) {
                            logger$f.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                            return;
                        }
                        uniqueSignatures[signature] = true;
                        // Track unique names; we only expose bare named functions if they
                        // are ambiguous
                        {
                            const name = fragment.name;
                            if (!uniqueNames[`%${name}`]) {
                                uniqueNames[`%${name}`] = [];
                            }
                            uniqueNames[`%${name}`].push(signature);
                        }
                        if (this[signature] == null) {
                            defineReadOnly(this, signature, buildDefault(this, fragment, true));
                        }
                        // We do not collapse simple calls on this bucket, which allows
                        // frameworks to safely use this without introspection as well as
                        // allows decoding error recovery.
                        if (this.functions[signature] == null) {
                            defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));
                        }
                        if (this.callStatic[signature] == null) {
                            defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));
                        }
                        if (this.populateTransaction[signature] == null) {
                            defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));
                        }
                        if (this.estimateGas[signature] == null) {
                            defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));
                        }
                    });
                    Object.keys(uniqueNames).forEach((name) => {
                        // Ambiguous names to not get attached as bare names
                        const signatures = uniqueNames[name];
                        if (signatures.length > 1) {
                            return;
                        }
                        // Strip off the leading "%" used for prototype protection
                        name = name.substring(1);
                        const signature = signatures[0];
                        // If overwriting a member property that is null, swallow the error
                        try {
                            if (this[name] == null) {
                                defineReadOnly(this, name, this[signature]);
                            }
                        }
                        catch (e) { }
                        if (this.functions[name] == null) {
                            defineReadOnly(this.functions, name, this.functions[signature]);
                        }
                        if (this.callStatic[name] == null) {
                            defineReadOnly(this.callStatic, name, this.callStatic[signature]);
                        }
                        if (this.populateTransaction[name] == null) {
                            defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);
                        }
                        if (this.estimateGas[name] == null) {
                            defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);
                        }
                    });
                }
                static getContractAddress(transaction) {
                    return getContractAddress(transaction);
                }
                static getInterface(contractInterface) {
                    if (Interface.isInterface(contractInterface)) {
                        return contractInterface;
                    }
                    return new Interface(contractInterface);
                }
                // @TODO: Allow timeout?
                deployed() {
                    return this._deployed();
                }
                _deployed(blockTag) {
                    if (!this._deployedPromise) {
                        // If we were just deployed, we know the transaction we should occur in
                        if (this.deployTransaction) {
                            this._deployedPromise = this.deployTransaction.wait().then(() => {
                                return this;
                            });
                        }
                        else {
                            // @TODO: Once we allow a timeout to be passed in, we will wait
                            // up to that many blocks for getCode
                            // Otherwise, poll for our code to be deployed
                            this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
                                if (code === "0x") {
                                    logger$f.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                                        contractAddress: this.address,
                                        operation: "getDeployed"
                                    });
                                }
                                return this;
                            });
                        }
                    }
                    return this._deployedPromise;
                }
                // @TODO:
                // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
                // @TODO:
                // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
                fallback(overrides) {
                    if (!this.signer) {
                        logger$f.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
                    }
                    const tx = shallowCopy(overrides || {});
                    ["from", "to"].forEach(function (key) {
                        if (tx[key] == null) {
                            return;
                        }
                        logger$f.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
                    });
                    tx.to = this.resolvedAddress;
                    return this.deployed().then(() => {
                        return this.signer.sendTransaction(tx);
                    });
                }
                // Reconnect to a different signer or provider
                connect(signerOrProvider) {
                    if (typeof (signerOrProvider) === "string") {
                        signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
                    }
                    const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
                    if (this.deployTransaction) {
                        defineReadOnly(contract, "deployTransaction", this.deployTransaction);
                    }
                    return contract;
                }
                // Re-attach to a different on-chain instance of this contract
                attach(addressOrName) {
                    return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
                }
                static isIndexed(value) {
                    return Indexed.isIndexed(value);
                }
                _normalizeRunningEvent(runningEvent) {
                    // Already have an instance of this event running; we can re-use it
                    if (this._runningEvents[runningEvent.tag]) {
                        return this._runningEvents[runningEvent.tag];
                    }
                    return runningEvent;
                }
                _getRunningEvent(eventName) {
                    if (typeof (eventName) === "string") {
                        // Listen for "error" events (if your contract has an error event, include
                        // the full signature to bypass this special event keyword)
                        if (eventName === "error") {
                            return this._normalizeRunningEvent(new ErrorRunningEvent());
                        }
                        // Listen for any event that is registered
                        if (eventName === "event") {
                            return this._normalizeRunningEvent(new RunningEvent("event", null));
                        }
                        // Listen for any event
                        if (eventName === "*") {
                            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                        }
                        // Get the event Fragment (throws if ambiguous/unknown event)
                        const fragment = this.interface.getEvent(eventName);
                        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
                    }
                    // We have topics to filter by...
                    if (eventName.topics && eventName.topics.length > 0) {
                        // Is it a known topichash? (throws if no matching topichash)
                        try {
                            const topic = eventName.topics[0];
                            if (typeof (topic) !== "string") {
                                throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                            }
                            const fragment = this.interface.getEvent(topic);
                            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
                        }
                        catch (error) { }
                        // Filter by the unknown topichash
                        const filter = {
                            address: this.address,
                            topics: eventName.topics
                        };
                        return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
                    }
                    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                }
                _checkRunningEvents(runningEvent) {
                    if (runningEvent.listenerCount() === 0) {
                        delete this._runningEvents[runningEvent.tag];
                        // If we have a poller for this, remove it
                        const emit = this._wrappedEmits[runningEvent.tag];
                        if (emit && runningEvent.filter) {
                            this.provider.off(runningEvent.filter, emit);
                            delete this._wrappedEmits[runningEvent.tag];
                        }
                    }
                }
                // Subclasses can override this to gracefully recover
                // from parse errors if they wish
                _wrapEvent(runningEvent, log, listener) {
                    const event = deepCopy(log);
                    event.removeListener = () => {
                        if (!listener) {
                            return;
                        }
                        runningEvent.removeListener(listener);
                        this._checkRunningEvents(runningEvent);
                    };
                    event.getBlock = () => { return this.provider.getBlock(log.blockHash); };
                    event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };
                    event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };
                    // This may throw if the topics and data mismatch the signature
                    runningEvent.prepareEvent(event);
                    return event;
                }
                _addEventListener(runningEvent, listener, once) {
                    if (!this.provider) {
                        logger$f.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
                    }
                    runningEvent.addListener(listener, once);
                    // Track this running event and its listeners (may already be there; but no hard in updating)
                    this._runningEvents[runningEvent.tag] = runningEvent;
                    // If we are not polling the provider, start polling
                    if (!this._wrappedEmits[runningEvent.tag]) {
                        const wrappedEmit = (log) => {
                            let event = this._wrapEvent(runningEvent, log, listener);
                            // Try to emit the result for the parameterized event...
                            if (event.decodeError == null) {
                                try {
                                    const args = runningEvent.getEmit(event);
                                    this.emit(runningEvent.filter, ...args);
                                }
                                catch (error) {
                                    event.decodeError = error.error;
                                }
                            }
                            // Always emit "event" for fragment-base events
                            if (runningEvent.filter != null) {
                                this.emit("event", event);
                            }
                            // Emit "error" if there was an error
                            if (event.decodeError != null) {
                                this.emit("error", event.decodeError, event);
                            }
                        };
                        this._wrappedEmits[runningEvent.tag] = wrappedEmit;
                        // Special events, like "error" do not have a filter
                        if (runningEvent.filter != null) {
                            this.provider.on(runningEvent.filter, wrappedEmit);
                        }
                    }
                }
                queryFilter(event, fromBlockOrBlockhash, toBlock) {
                    const runningEvent = this._getRunningEvent(event);
                    const filter = shallowCopy(runningEvent.filter);
                    if (typeof (fromBlockOrBlockhash) === "string" && isHexString(fromBlockOrBlockhash, 32)) {
                        if (toBlock != null) {
                            logger$f.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
                        }
                        filter.blockHash = fromBlockOrBlockhash;
                    }
                    else {
                        filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
                        filter.toBlock = ((toBlock != null) ? toBlock : "latest");
                    }
                    return this.provider.getLogs(filter).then((logs) => {
                        return logs.map((log) => this._wrapEvent(runningEvent, log, null));
                    });
                }
                on(event, listener) {
                    this._addEventListener(this._getRunningEvent(event), listener, false);
                    return this;
                }
                once(event, listener) {
                    this._addEventListener(this._getRunningEvent(event), listener, true);
                    return this;
                }
                emit(eventName, ...args) {
                    if (!this.provider) {
                        return false;
                    }
                    const runningEvent = this._getRunningEvent(eventName);
                    const result = (runningEvent.run(args) > 0);
                    // May have drained all the "once" events; check for living events
                    this._checkRunningEvents(runningEvent);
                    return result;
                }
                listenerCount(eventName) {
                    if (!this.provider) {
                        return 0;
                    }
                    if (eventName == null) {
                        return Object.keys(this._runningEvents).reduce((accum, key) => {
                            return accum + this._runningEvents[key].listenerCount();
                        }, 0);
                    }
                    return this._getRunningEvent(eventName).listenerCount();
                }
                listeners(eventName) {
                    if (!this.provider) {
                        return [];
                    }
                    if (eventName == null) {
                        const result = [];
                        for (let tag in this._runningEvents) {
                            this._runningEvents[tag].listeners().forEach((listener) => {
                                result.push(listener);
                            });
                        }
                        return result;
                    }
                    return this._getRunningEvent(eventName).listeners();
                }
                removeAllListeners(eventName) {
                    if (!this.provider) {
                        return this;
                    }
                    if (eventName == null) {
                        for (const tag in this._runningEvents) {
                            const runningEvent = this._runningEvents[tag];
                            runningEvent.removeAllListeners();
                            this._checkRunningEvents(runningEvent);
                        }
                        return this;
                    }
                    // Delete any listeners
                    const runningEvent = this._getRunningEvent(eventName);
                    runningEvent.removeAllListeners();
                    this._checkRunningEvents(runningEvent);
                    return this;
                }
                off(eventName, listener) {
                    if (!this.provider) {
                        return this;
                    }
                    const runningEvent = this._getRunningEvent(eventName);
                    runningEvent.removeListener(listener);
                    this._checkRunningEvents(runningEvent);
                    return this;
                }
                removeListener(eventName, listener) {
                    return this.off(eventName, listener);
                }
            }
            class Contract extends BaseContract {
            }

            /**
             * var basex = require("base-x");
             *
             * This implementation is heavily based on base-x. The main reason to
             * deviate was to prevent the dependency of Buffer.
             *
             * Contributors:
             *
             * base-x encoding
             * Forked from https://github.com/cryptocoinjs/bs58
             * Originally written by Mike Hearn for BitcoinJ
             * Copyright (c) 2011 Google Inc
             * Ported to JavaScript by Stefan Thomas
             * Merged Buffer refactorings from base58-native by Stephen Pair
             * Copyright (c) 2013 BitPay Inc
             *
             * The MIT License (MIT)
             *
             * Copyright base-x contributors (c) 2016
             *
             * Permission is hereby granted, free of charge, to any person obtaining a
             * copy of this software and associated documentation files (the "Software"),
             * to deal in the Software without restriction, including without limitation
             * the rights to use, copy, modify, merge, publish, distribute, sublicense,
             * and/or sell copies of the Software, and to permit persons to whom the
             * Software is furnished to do so, subject to the following conditions:
             *
             * The above copyright notice and this permission notice shall be included in
             * all copies or substantial portions of the Software.

             * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
             * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
             * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
             * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
             * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
             * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
             * IN THE SOFTWARE.
             *
             */
            class BaseX {
                constructor(alphabet) {
                    defineReadOnly(this, "alphabet", alphabet);
                    defineReadOnly(this, "base", alphabet.length);
                    defineReadOnly(this, "_alphabetMap", {});
                    defineReadOnly(this, "_leader", alphabet.charAt(0));
                    // pre-compute lookup table
                    for (let i = 0; i < alphabet.length; i++) {
                        this._alphabetMap[alphabet.charAt(i)] = i;
                    }
                }
                encode(value) {
                    let source = arrayify(value);
                    if (source.length === 0) {
                        return "";
                    }
                    let digits = [0];
                    for (let i = 0; i < source.length; ++i) {
                        let carry = source[i];
                        for (let j = 0; j < digits.length; ++j) {
                            carry += digits[j] << 8;
                            digits[j] = carry % this.base;
                            carry = (carry / this.base) | 0;
                        }
                        while (carry > 0) {
                            digits.push(carry % this.base);
                            carry = (carry / this.base) | 0;
                        }
                    }
                    let string = "";
                    // deal with leading zeros
                    for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
                        string += this._leader;
                    }
                    // convert digits to a string
                    for (let q = digits.length - 1; q >= 0; --q) {
                        string += this.alphabet[digits[q]];
                    }
                    return string;
                }
                decode(value) {
                    if (typeof (value) !== "string") {
                        throw new TypeError("Expected String");
                    }
                    let bytes = [];
                    if (value.length === 0) {
                        return new Uint8Array(bytes);
                    }
                    bytes.push(0);
                    for (let i = 0; i < value.length; i++) {
                        let byte = this._alphabetMap[value[i]];
                        if (byte === undefined) {
                            throw new Error("Non-base" + this.base + " character");
                        }
                        let carry = byte;
                        for (let j = 0; j < bytes.length; ++j) {
                            carry += bytes[j] * this.base;
                            bytes[j] = carry & 0xff;
                            carry >>= 8;
                        }
                        while (carry > 0) {
                            bytes.push(carry & 0xff);
                            carry >>= 8;
                        }
                    }
                    // deal with leading zeros
                    for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
                        bytes.push(0);
                    }
                    return arrayify(new Uint8Array(bytes.reverse()));
                }
            }
            const Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
            const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
            //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
            //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

            var lib_esm$9 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        BaseX: BaseX,
                        Base32: Base32,
                        Base58: Base58
            });

            var SupportedAlgorithm;
            (function (SupportedAlgorithm) {
                SupportedAlgorithm["sha256"] = "sha256";
                SupportedAlgorithm["sha512"] = "sha512";
            })(SupportedAlgorithm || (SupportedAlgorithm = {}));

            const version$b = "sha2/5.5.0";

            const logger$e = new Logger(version$b);
            function ripemd160(data) {
                return "0x" + (hash.ripemd160().update(arrayify(data)).digest("hex"));
            }
            function sha256$2(data) {
                return "0x" + (hash.sha256().update(arrayify(data)).digest("hex"));
            }
            function sha512$1(data) {
                return "0x" + (hash.sha512().update(arrayify(data)).digest("hex"));
            }
            function computeHmac(algorithm, key, data) {
                if (!SupportedAlgorithm[algorithm]) {
                    logger$e.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "hmac",
                        algorithm: algorithm
                    });
                }
                return "0x" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
            }

            var lib_esm$8 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        computeHmac: computeHmac,
                        ripemd160: ripemd160,
                        sha256: sha256$2,
                        sha512: sha512$1,
                        get SupportedAlgorithm () { return SupportedAlgorithm; }
            });

            function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
                password = arrayify(password);
                salt = arrayify(salt);
                let hLen;
                let l = 1;
                const DK = new Uint8Array(keylen);
                const block1 = new Uint8Array(salt.length + 4);
                block1.set(salt);
                //salt.copy(block1, 0, 0, salt.length)
                let r;
                let T;
                for (let i = 1; i <= l; i++) {
                    //block1.writeUInt32BE(i, salt.length)
                    block1[salt.length] = (i >> 24) & 0xff;
                    block1[salt.length + 1] = (i >> 16) & 0xff;
                    block1[salt.length + 2] = (i >> 8) & 0xff;
                    block1[salt.length + 3] = i & 0xff;
                    //let U = createHmac(password).update(block1).digest();
                    let U = arrayify(computeHmac(hashAlgorithm, password, block1));
                    if (!hLen) {
                        hLen = U.length;
                        T = new Uint8Array(hLen);
                        l = Math.ceil(keylen / hLen);
                        r = keylen - (l - 1) * hLen;
                    }
                    //U.copy(T, 0, 0, hLen)
                    T.set(U);
                    for (let j = 1; j < iterations; j++) {
                        //U = createHmac(password).update(U).digest();
                        U = arrayify(computeHmac(hashAlgorithm, password, U));
                        for (let k = 0; k < hLen; k++)
                            T[k] ^= U[k];
                    }
                    const destPos = (i - 1) * hLen;
                    const len = (i === l ? r : hLen);
                    //T.copy(DK, destPos, 0, len)
                    DK.set(arrayify(T).slice(0, len), destPos);
                }
                return hexlify(DK);
            }

            const version$a = "wordlists/5.5.0";

            const logger$d = new Logger(version$a);
            class Wordlist {
                constructor(locale) {
                    logger$d.checkAbstract(new.target, Wordlist);
                    defineReadOnly(this, "locale", locale);
                }
                // Subclasses may override this
                split(mnemonic) {
                    return mnemonic.toLowerCase().split(/ +/g);
                }
                // Subclasses may override this
                join(words) {
                    return words.join(" ");
                }
                static check(wordlist) {
                    const words = [];
                    for (let i = 0; i < 2048; i++) {
                        const word = wordlist.getWord(i);
                        /* istanbul ignore if */
                        if (i !== wordlist.getWordIndex(word)) {
                            return "0x";
                        }
                        words.push(word);
                    }
                    return id$1(words.join("\n") + "\n");
                }
                static register(lang, name) {
                }
            }

            const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
            let wordlist = null;
            function loadWords(lang) {
                if (wordlist != null) {
                    return;
                }
                wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
                // Verify the computed list matches the official list
                /* istanbul ignore if */
                if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
                    wordlist = null;
                    throw new Error("BIP39 Wordlist for en (English) FAILED");
                }
            }
            class LangEn extends Wordlist {
                constructor() {
                    super("en");
                }
                getWord(index) {
                    loadWords(this);
                    return wordlist[index];
                }
                getWordIndex(word) {
                    loadWords(this);
                    return wordlist.indexOf(word);
                }
            }
            const langEn = new LangEn();
            Wordlist.register(langEn);

            const wordlists = {
                en: langEn
            };

            const version$9 = "hdnode/5.5.0";

            const logger$c = new Logger(version$9);
            const N$1 = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
            // "Bitcoin seed"
            const MasterSecret = toUtf8Bytes("Bitcoin seed");
            const HardenedBit = 0x80000000;
            // Returns a byte with the MSB bits set
            function getUpperMask(bits) {
                return ((1 << bits) - 1) << (8 - bits);
            }
            // Returns a byte with the LSB bits set
            function getLowerMask(bits) {
                return (1 << bits) - 1;
            }
            function bytes32(value) {
                return hexZeroPad(hexlify(value), 32);
            }
            function base58check(data) {
                return Base58.encode(concat$3([data, hexDataSlice(sha256$2(sha256$2(data)), 0, 4)]));
            }
            function getWordlist(wordlist) {
                if (wordlist == null) {
                    return wordlists["en"];
                }
                if (typeof (wordlist) === "string") {
                    const words = wordlists[wordlist];
                    if (words == null) {
                        logger$c.throwArgumentError("unknown locale", "wordlist", wordlist);
                    }
                    return words;
                }
                return wordlist;
            }
            const _constructorGuard$1 = {};
            const defaultPath = "m/44'/60'/0'/0/0";
            class HDNode {
                /**
                 *  This constructor should not be called directly.
                 *
                 *  Please use:
                 *   - fromMnemonic
                 *   - fromSeed
                 */
                constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
                    logger$c.checkNew(new.target, HDNode);
                    /* istanbul ignore if */
                    if (constructorGuard !== _constructorGuard$1) {
                        throw new Error("HDNode constructor cannot be called directly");
                    }
                    if (privateKey) {
                        const signingKey = new SigningKey(privateKey);
                        defineReadOnly(this, "privateKey", signingKey.privateKey);
                        defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
                    }
                    else {
                        defineReadOnly(this, "privateKey", null);
                        defineReadOnly(this, "publicKey", hexlify(publicKey));
                    }
                    defineReadOnly(this, "parentFingerprint", parentFingerprint);
                    defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$2(this.publicKey)), 0, 4));
                    defineReadOnly(this, "address", computeAddress(this.publicKey));
                    defineReadOnly(this, "chainCode", chainCode);
                    defineReadOnly(this, "index", index);
                    defineReadOnly(this, "depth", depth);
                    if (mnemonicOrPath == null) {
                        // From a source that does not preserve the path (e.g. extended keys)
                        defineReadOnly(this, "mnemonic", null);
                        defineReadOnly(this, "path", null);
                    }
                    else if (typeof (mnemonicOrPath) === "string") {
                        // From a source that does not preserve the mnemonic (e.g. neutered)
                        defineReadOnly(this, "mnemonic", null);
                        defineReadOnly(this, "path", mnemonicOrPath);
                    }
                    else {
                        // From a fully qualified source
                        defineReadOnly(this, "mnemonic", mnemonicOrPath);
                        defineReadOnly(this, "path", mnemonicOrPath.path);
                    }
                }
                get extendedKey() {
                    // We only support the mainnet values for now, but if anyone needs
                    // testnet values, let me know. I believe current sentiment is that
                    // we should always use mainnet, and use BIP-44 to derive the network
                    //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
                    //   - Testnet: public=0x043587CF, private=0x04358394
                    if (this.depth >= 256) {
                        throw new Error("Depth too large!");
                    }
                    return base58check(concat$3([
                        ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                        hexlify(this.depth),
                        this.parentFingerprint,
                        hexZeroPad(hexlify(this.index), 4),
                        this.chainCode,
                        ((this.privateKey != null) ? concat$3(["0x00", this.privateKey]) : this.publicKey),
                    ]));
                }
                neuter() {
                    return new HDNode(_constructorGuard$1, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
                }
                _derive(index) {
                    if (index > 0xffffffff) {
                        throw new Error("invalid index - " + String(index));
                    }
                    // Base path
                    let path = this.path;
                    if (path) {
                        path += "/" + (index & ~HardenedBit);
                    }
                    const data = new Uint8Array(37);
                    if (index & HardenedBit) {
                        if (!this.privateKey) {
                            throw new Error("cannot derive child of neutered node");
                        }
                        // Data = 0x00 || ser_256(k_par)
                        data.set(arrayify(this.privateKey), 1);
                        // Hardened path
                        if (path) {
                            path += "'";
                        }
                    }
                    else {
                        // Data = ser_p(point(k_par))
                        data.set(arrayify(this.publicKey));
                    }
                    // Data += ser_32(i)
                    for (let i = 24; i >= 0; i -= 8) {
                        data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
                    }
                    const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
                    const IL = I.slice(0, 32);
                    const IR = I.slice(32);
                    // The private key
                    let ki = null;
                    // The public key
                    let Ki = null;
                    if (this.privateKey) {
                        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N$1));
                    }
                    else {
                        const ek = new SigningKey(hexlify(IL));
                        Ki = ek._addPoint(this.publicKey);
                    }
                    let mnemonicOrPath = path;
                    const srcMnemonic = this.mnemonic;
                    if (srcMnemonic) {
                        mnemonicOrPath = Object.freeze({
                            phrase: srcMnemonic.phrase,
                            path: path,
                            locale: (srcMnemonic.locale || "en")
                        });
                    }
                    return new HDNode(_constructorGuard$1, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
                }
                derivePath(path) {
                    const components = path.split("/");
                    if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
                        throw new Error("invalid path - " + path);
                    }
                    if (components[0] === "m") {
                        components.shift();
                    }
                    let result = this;
                    for (let i = 0; i < components.length; i++) {
                        const component = components[i];
                        if (component.match(/^[0-9]+'$/)) {
                            const index = parseInt(component.substring(0, component.length - 1));
                            if (index >= HardenedBit) {
                                throw new Error("invalid path index - " + component);
                            }
                            result = result._derive(HardenedBit + index);
                        }
                        else if (component.match(/^[0-9]+$/)) {
                            const index = parseInt(component);
                            if (index >= HardenedBit) {
                                throw new Error("invalid path index - " + component);
                            }
                            result = result._derive(index);
                        }
                        else {
                            throw new Error("invalid path component - " + component);
                        }
                    }
                    return result;
                }
                static _fromSeed(seed, mnemonic) {
                    const seedArray = arrayify(seed);
                    if (seedArray.length < 16 || seedArray.length > 64) {
                        throw new Error("invalid seed");
                    }
                    const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
                    return new HDNode(_constructorGuard$1, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
                }
                static fromMnemonic(mnemonic, password, wordlist) {
                    // If a locale name was passed in, find the associated wordlist
                    wordlist = getWordlist(wordlist);
                    // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
                    mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
                    return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
                        phrase: mnemonic,
                        path: "m",
                        locale: wordlist.locale
                    });
                }
                static fromSeed(seed) {
                    return HDNode._fromSeed(seed, null);
                }
                static fromExtendedKey(extendedKey) {
                    const bytes = Base58.decode(extendedKey);
                    if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
                        logger$c.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
                    }
                    const depth = bytes[4];
                    const parentFingerprint = hexlify(bytes.slice(5, 9));
                    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
                    const chainCode = hexlify(bytes.slice(13, 45));
                    const key = bytes.slice(45, 78);
                    switch (hexlify(bytes.slice(0, 4))) {
                        // Public Key
                        case "0x0488b21e":
                        case "0x043587cf":
                            return new HDNode(_constructorGuard$1, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
                        // Private Key
                        case "0x0488ade4":
                        case "0x04358394 ":
                            if (key[0] !== 0) {
                                break;
                            }
                            return new HDNode(_constructorGuard$1, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
                    }
                    return logger$c.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
                }
            }
            function mnemonicToSeed(mnemonic, password) {
                if (!password) {
                    password = "";
                }
                const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
                return pbkdf2$1(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
            }
            function mnemonicToEntropy(mnemonic, wordlist) {
                wordlist = getWordlist(wordlist);
                logger$c.checkNormalize();
                const words = wordlist.split(mnemonic);
                if ((words.length % 3) !== 0) {
                    throw new Error("invalid mnemonic");
                }
                const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
                let offset = 0;
                for (let i = 0; i < words.length; i++) {
                    let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
                    if (index === -1) {
                        throw new Error("invalid mnemonic");
                    }
                    for (let bit = 0; bit < 11; bit++) {
                        if (index & (1 << (10 - bit))) {
                            entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                        }
                        offset++;
                    }
                }
                const entropyBits = 32 * words.length / 3;
                const checksumBits = words.length / 3;
                const checksumMask = getUpperMask(checksumBits);
                const checksum = arrayify(sha256$2(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
                if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
                    throw new Error("invalid checksum");
                }
                return hexlify(entropy.slice(0, entropyBits / 8));
            }
            function entropyToMnemonic(entropy, wordlist) {
                wordlist = getWordlist(wordlist);
                entropy = arrayify(entropy);
                if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
                    throw new Error("invalid entropy");
                }
                const indices = [0];
                let remainingBits = 11;
                for (let i = 0; i < entropy.length; i++) {
                    // Consume the whole byte (with still more to go)
                    if (remainingBits > 8) {
                        indices[indices.length - 1] <<= 8;
                        indices[indices.length - 1] |= entropy[i];
                        remainingBits -= 8;
                        // This byte will complete an 11-bit index
                    }
                    else {
                        indices[indices.length - 1] <<= remainingBits;
                        indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                        // Start the next word
                        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                        remainingBits += 3;
                    }
                }
                // Compute the checksum bits
                const checksumBits = entropy.length / 4;
                const checksum = arrayify(sha256$2(entropy))[0] & getUpperMask(checksumBits);
                // Shift the checksum into the word indices
                indices[indices.length - 1] <<= checksumBits;
                indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
                return wordlist.join(indices.map((index) => wordlist.getWord(index)));
            }
            function isValidMnemonic(mnemonic, wordlist) {
                try {
                    mnemonicToEntropy(mnemonic, wordlist);
                    return true;
                }
                catch (error) { }
                return false;
            }
            function getAccountPath(index) {
                if (typeof (index) !== "number" || index < 0 || index >= HardenedBit || index % 1) {
                    logger$c.throwArgumentError("invalid account index", "index", index);
                }
                return `m/44'/60'/${index}'/0/0`;
            }

            var lib_esm$7 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        defaultPath: defaultPath,
                        HDNode: HDNode,
                        mnemonicToSeed: mnemonicToSeed,
                        mnemonicToEntropy: mnemonicToEntropy,
                        entropyToMnemonic: entropyToMnemonic,
                        isValidMnemonic: isValidMnemonic,
                        getAccountPath: getAccountPath
            });

            const version$8 = "random/5.5.1";

            const logger$b = new Logger(version$8);
            // Debugging line for testing browser lib in node
            //const window = { crypto: { getRandomValues: () => { } } };
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
            function getGlobal() {
                if (typeof self !== 'undefined') {
                    return self;
                }
                if (typeof window !== 'undefined') {
                    return window;
                }
                if (typeof global$1 !== 'undefined') {
                    return global$1;
                }
                throw new Error('unable to locate global object');
            }
            const anyGlobal = getGlobal();
            let crypto$1 = anyGlobal.crypto || anyGlobal.msCrypto;
            if (!crypto$1 || !crypto$1.getRandomValues) {
                logger$b.warn("WARNING: Missing strong random number source");
                crypto$1 = {
                    getRandomValues: function (buffer) {
                        return logger$b.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "crypto.getRandomValues"
                        });
                    }
                };
            }
            function randomBytes(length) {
                if (length <= 0 || length > 1024 || (length % 1) || length != length) {
                    logger$b.throwArgumentError("invalid length", "length", length);
                }
                const result = new Uint8Array(length);
                crypto$1.getRandomValues(result);
                return arrayify(result);
            }

            function shuffled(array) {
                array = array.slice();
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    const tmp = array[i];
                    array[i] = array[j];
                    array[j] = tmp;
                }
                return array;
            }

            var lib_esm$6 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        randomBytes: randomBytes,
                        shuffled: shuffled
            });

            var aesJs = {exports: {}};

            (function (module, exports) {

            (function(root) {

                function checkInt(value) {
                    return (parseInt(value) === value);
                }

                function checkInts(arrayish) {
                    if (!checkInt(arrayish.length)) { return false; }

                    for (var i = 0; i < arrayish.length; i++) {
                        if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                            return false;
                        }
                    }

                    return true;
                }

                function coerceArray(arg, copy) {

                    // ArrayBuffer view
                    if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

                        if (copy) {
                            if (arg.slice) {
                                arg = arg.slice();
                            } else {
                                arg = Array.prototype.slice.call(arg);
                            }
                        }

                        return arg;
                    }

                    // It's an array; check it is a valid representation of a byte
                    if (Array.isArray(arg)) {
                        if (!checkInts(arg)) {
                            throw new Error('Array contains invalid value: ' + arg);
                        }

                        return new Uint8Array(arg);
                    }

                    // Something else, but behaves like an array (maybe a Buffer? Arguments?)
                    if (checkInt(arg.length) && checkInts(arg)) {
                        return new Uint8Array(arg);
                    }

                    throw new Error('unsupported array-like object');
                }

                function createArray(length) {
                    return new Uint8Array(length);
                }

                function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
                    if (sourceStart != null || sourceEnd != null) {
                        if (sourceArray.slice) {
                            sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                        } else {
                            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                        }
                    }
                    targetArray.set(sourceArray, targetStart);
                }



                var convertUtf8 = (function() {
                    function toBytes(text) {
                        var result = [], i = 0;
                        text = encodeURI(text);
                        while (i < text.length) {
                            var c = text.charCodeAt(i++);

                            // if it is a % sign, encode the following 2 bytes as a hex value
                            if (c === 37) {
                                result.push(parseInt(text.substr(i, 2), 16));
                                i += 2;

                            // otherwise, just the actual byte
                            } else {
                                result.push(c);
                            }
                        }

                        return coerceArray(result);
                    }

                    function fromBytes(bytes) {
                        var result = [], i = 0;

                        while (i < bytes.length) {
                            var c = bytes[i];

                            if (c < 128) {
                                result.push(String.fromCharCode(c));
                                i++;
                            } else if (c > 191 && c < 224) {
                                result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                                i += 2;
                            } else {
                                result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                                i += 3;
                            }
                        }

                        return result.join('');
                    }

                    return {
                        toBytes: toBytes,
                        fromBytes: fromBytes,
                    }
                })();

                var convertHex = (function() {
                    function toBytes(text) {
                        var result = [];
                        for (var i = 0; i < text.length; i += 2) {
                            result.push(parseInt(text.substr(i, 2), 16));
                        }

                        return result;
                    }

                    // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
                    var Hex = '0123456789abcdef';

                    function fromBytes(bytes) {
                            var result = [];
                            for (var i = 0; i < bytes.length; i++) {
                                var v = bytes[i];
                                result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                            }
                            return result.join('');
                    }

                    return {
                        toBytes: toBytes,
                        fromBytes: fromBytes,
                    }
                })();


                // Number of rounds by keysize
                var numberOfRounds = {16: 10, 24: 12, 32: 14};

                // Round constant words
                var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

                // S-box and Inverse S-box (S is for Substitution)
                var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
                var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

                // Transformations for encryption
                var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
                var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
                var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
                var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

                // Transformations for decryption
                var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
                var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
                var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
                var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

                // Transformations for decryption key expansion
                var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
                var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
                var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
                var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

                function convertToInt32(bytes) {
                    var result = [];
                    for (var i = 0; i < bytes.length; i += 4) {
                        result.push(
                            (bytes[i    ] << 24) |
                            (bytes[i + 1] << 16) |
                            (bytes[i + 2] <<  8) |
                             bytes[i + 3]
                        );
                    }
                    return result;
                }

                var AES = function(key) {
                    if (!(this instanceof AES)) {
                        throw Error('AES must be instanitated with `new`');
                    }

                    Object.defineProperty(this, 'key', {
                        value: coerceArray(key, true)
                    });

                    this._prepare();
                };


                AES.prototype._prepare = function() {

                    var rounds = numberOfRounds[this.key.length];
                    if (rounds == null) {
                        throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
                    }

                    // encryption round keys
                    this._Ke = [];

                    // decryption round keys
                    this._Kd = [];

                    for (var i = 0; i <= rounds; i++) {
                        this._Ke.push([0, 0, 0, 0]);
                        this._Kd.push([0, 0, 0, 0]);
                    }

                    var roundKeyCount = (rounds + 1) * 4;
                    var KC = this.key.length / 4;

                    // convert the key into ints
                    var tk = convertToInt32(this.key);

                    // copy values into round key arrays
                    var index;
                    for (var i = 0; i < KC; i++) {
                        index = i >> 2;
                        this._Ke[index][i % 4] = tk[i];
                        this._Kd[rounds - index][i % 4] = tk[i];
                    }

                    // key expansion (fips-197 section 5.2)
                    var rconpointer = 0;
                    var t = KC, tt;
                    while (t < roundKeyCount) {
                        tt = tk[KC - 1];
                        tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                                  (S[(tt >>  8) & 0xFF] << 16) ^
                                  (S[ tt        & 0xFF] <<  8) ^
                                   S[(tt >> 24) & 0xFF]        ^
                                  (rcon[rconpointer] << 24));
                        rconpointer += 1;

                        // key expansion (for non-256 bit)
                        if (KC != 8) {
                            for (var i = 1; i < KC; i++) {
                                tk[i] ^= tk[i - 1];
                            }

                        // key expansion for 256-bit keys is "slightly different" (fips-197)
                        } else {
                            for (var i = 1; i < (KC / 2); i++) {
                                tk[i] ^= tk[i - 1];
                            }
                            tt = tk[(KC / 2) - 1];

                            tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                                          (S[(tt >>  8) & 0xFF] <<  8) ^
                                          (S[(tt >> 16) & 0xFF] << 16) ^
                                          (S[(tt >> 24) & 0xFF] << 24));

                            for (var i = (KC / 2) + 1; i < KC; i++) {
                                tk[i] ^= tk[i - 1];
                            }
                        }

                        // copy values into round key arrays
                        var i = 0, r, c;
                        while (i < KC && t < roundKeyCount) {
                            r = t >> 2;
                            c = t % 4;
                            this._Ke[r][c] = tk[i];
                            this._Kd[rounds - r][c] = tk[i++];
                            t++;
                        }
                    }

                    // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
                    for (var r = 1; r < rounds; r++) {
                        for (var c = 0; c < 4; c++) {
                            tt = this._Kd[r][c];
                            this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                              U2[(tt >> 16) & 0xFF] ^
                                              U3[(tt >>  8) & 0xFF] ^
                                              U4[ tt        & 0xFF]);
                        }
                    }
                };

                AES.prototype.encrypt = function(plaintext) {
                    if (plaintext.length != 16) {
                        throw new Error('invalid plaintext size (must be 16 bytes)');
                    }

                    var rounds = this._Ke.length - 1;
                    var a = [0, 0, 0, 0];

                    // convert plaintext to (ints ^ key)
                    var t = convertToInt32(plaintext);
                    for (var i = 0; i < 4; i++) {
                        t[i] ^= this._Ke[0][i];
                    }

                    // apply round transforms
                    for (var r = 1; r < rounds; r++) {
                        for (var i = 0; i < 4; i++) {
                            a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                                    T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                                    T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                                    T4[ t[(i + 3) % 4]        & 0xff] ^
                                    this._Ke[r][i]);
                        }
                        t = a.slice();
                    }

                    // the last round is special
                    var result = createArray(16), tt;
                    for (var i = 0; i < 4; i++) {
                        tt = this._Ke[rounds][i];
                        result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                        result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                        result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                        result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
                    }

                    return result;
                };

                AES.prototype.decrypt = function(ciphertext) {
                    if (ciphertext.length != 16) {
                        throw new Error('invalid ciphertext size (must be 16 bytes)');
                    }

                    var rounds = this._Kd.length - 1;
                    var a = [0, 0, 0, 0];

                    // convert plaintext to (ints ^ key)
                    var t = convertToInt32(ciphertext);
                    for (var i = 0; i < 4; i++) {
                        t[i] ^= this._Kd[0][i];
                    }

                    // apply round transforms
                    for (var r = 1; r < rounds; r++) {
                        for (var i = 0; i < 4; i++) {
                            a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                                    T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                                    T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                                    T8[ t[(i + 1) % 4]        & 0xff] ^
                                    this._Kd[r][i]);
                        }
                        t = a.slice();
                    }

                    // the last round is special
                    var result = createArray(16), tt;
                    for (var i = 0; i < 4; i++) {
                        tt = this._Kd[rounds][i];
                        result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                        result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                        result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                        result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
                    }

                    return result;
                };


                /**
                 *  Mode Of Operation - Electonic Codebook (ECB)
                 */
                var ModeOfOperationECB = function(key) {
                    if (!(this instanceof ModeOfOperationECB)) {
                        throw Error('AES must be instanitated with `new`');
                    }

                    this.description = "Electronic Code Block";
                    this.name = "ecb";

                    this._aes = new AES(key);
                };

                ModeOfOperationECB.prototype.encrypt = function(plaintext) {
                    plaintext = coerceArray(plaintext);

                    if ((plaintext.length % 16) !== 0) {
                        throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
                    }

                    var ciphertext = createArray(plaintext.length);
                    var block = createArray(16);

                    for (var i = 0; i < plaintext.length; i += 16) {
                        copyArray(plaintext, block, 0, i, i + 16);
                        block = this._aes.encrypt(block);
                        copyArray(block, ciphertext, i);
                    }

                    return ciphertext;
                };

                ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
                    ciphertext = coerceArray(ciphertext);

                    if ((ciphertext.length % 16) !== 0) {
                        throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
                    }

                    var plaintext = createArray(ciphertext.length);
                    var block = createArray(16);

                    for (var i = 0; i < ciphertext.length; i += 16) {
                        copyArray(ciphertext, block, 0, i, i + 16);
                        block = this._aes.decrypt(block);
                        copyArray(block, plaintext, i);
                    }

                    return plaintext;
                };


                /**
                 *  Mode Of Operation - Cipher Block Chaining (CBC)
                 */
                var ModeOfOperationCBC = function(key, iv) {
                    if (!(this instanceof ModeOfOperationCBC)) {
                        throw Error('AES must be instanitated with `new`');
                    }

                    this.description = "Cipher Block Chaining";
                    this.name = "cbc";

                    if (!iv) {
                        iv = createArray(16);

                    } else if (iv.length != 16) {
                        throw new Error('invalid initialation vector size (must be 16 bytes)');
                    }

                    this._lastCipherblock = coerceArray(iv, true);

                    this._aes = new AES(key);
                };

                ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
                    plaintext = coerceArray(plaintext);

                    if ((plaintext.length % 16) !== 0) {
                        throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
                    }

                    var ciphertext = createArray(plaintext.length);
                    var block = createArray(16);

                    for (var i = 0; i < plaintext.length; i += 16) {
                        copyArray(plaintext, block, 0, i, i + 16);

                        for (var j = 0; j < 16; j++) {
                            block[j] ^= this._lastCipherblock[j];
                        }

                        this._lastCipherblock = this._aes.encrypt(block);
                        copyArray(this._lastCipherblock, ciphertext, i);
                    }

                    return ciphertext;
                };

                ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
                    ciphertext = coerceArray(ciphertext);

                    if ((ciphertext.length % 16) !== 0) {
                        throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
                    }

                    var plaintext = createArray(ciphertext.length);
                    var block = createArray(16);

                    for (var i = 0; i < ciphertext.length; i += 16) {
                        copyArray(ciphertext, block, 0, i, i + 16);
                        block = this._aes.decrypt(block);

                        for (var j = 0; j < 16; j++) {
                            plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                        }

                        copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
                    }

                    return plaintext;
                };


                /**
                 *  Mode Of Operation - Cipher Feedback (CFB)
                 */
                var ModeOfOperationCFB = function(key, iv, segmentSize) {
                    if (!(this instanceof ModeOfOperationCFB)) {
                        throw Error('AES must be instanitated with `new`');
                    }

                    this.description = "Cipher Feedback";
                    this.name = "cfb";

                    if (!iv) {
                        iv = createArray(16);

                    } else if (iv.length != 16) {
                        throw new Error('invalid initialation vector size (must be 16 size)');
                    }

                    if (!segmentSize) { segmentSize = 1; }

                    this.segmentSize = segmentSize;

                    this._shiftRegister = coerceArray(iv, true);

                    this._aes = new AES(key);
                };

                ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
                    if ((plaintext.length % this.segmentSize) != 0) {
                        throw new Error('invalid plaintext size (must be segmentSize bytes)');
                    }

                    var encrypted = coerceArray(plaintext, true);

                    var xorSegment;
                    for (var i = 0; i < encrypted.length; i += this.segmentSize) {
                        xorSegment = this._aes.encrypt(this._shiftRegister);
                        for (var j = 0; j < this.segmentSize; j++) {
                            encrypted[i + j] ^= xorSegment[j];
                        }

                        // Shift the register
                        copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                        copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
                    }

                    return encrypted;
                };

                ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
                    if ((ciphertext.length % this.segmentSize) != 0) {
                        throw new Error('invalid ciphertext size (must be segmentSize bytes)');
                    }

                    var plaintext = coerceArray(ciphertext, true);

                    var xorSegment;
                    for (var i = 0; i < plaintext.length; i += this.segmentSize) {
                        xorSegment = this._aes.encrypt(this._shiftRegister);

                        for (var j = 0; j < this.segmentSize; j++) {
                            plaintext[i + j] ^= xorSegment[j];
                        }

                        // Shift the register
                        copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                        copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
                    }

                    return plaintext;
                };

                /**
                 *  Mode Of Operation - Output Feedback (OFB)
                 */
                var ModeOfOperationOFB = function(key, iv) {
                    if (!(this instanceof ModeOfOperationOFB)) {
                        throw Error('AES must be instanitated with `new`');
                    }

                    this.description = "Output Feedback";
                    this.name = "ofb";

                    if (!iv) {
                        iv = createArray(16);

                    } else if (iv.length != 16) {
                        throw new Error('invalid initialation vector size (must be 16 bytes)');
                    }

                    this._lastPrecipher = coerceArray(iv, true);
                    this._lastPrecipherIndex = 16;

                    this._aes = new AES(key);
                };

                ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
                    var encrypted = coerceArray(plaintext, true);

                    for (var i = 0; i < encrypted.length; i++) {
                        if (this._lastPrecipherIndex === 16) {
                            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                            this._lastPrecipherIndex = 0;
                        }
                        encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
                    }

                    return encrypted;
                };

                // Decryption is symetric
                ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


                /**
                 *  Counter object for CTR common mode of operation
                 */
                var Counter = function(initialValue) {
                    if (!(this instanceof Counter)) {
                        throw Error('Counter must be instanitated with `new`');
                    }

                    // We allow 0, but anything false-ish uses the default 1
                    if (initialValue !== 0 && !initialValue) { initialValue = 1; }

                    if (typeof(initialValue) === 'number') {
                        this._counter = createArray(16);
                        this.setValue(initialValue);

                    } else {
                        this.setBytes(initialValue);
                    }
                };

                Counter.prototype.setValue = function(value) {
                    if (typeof(value) !== 'number' || parseInt(value) != value) {
                        throw new Error('invalid counter value (must be an integer)');
                    }

                    for (var index = 15; index >= 0; --index) {
                        this._counter[index] = value % 256;
                        value = value >> 8;
                    }
                };

                Counter.prototype.setBytes = function(bytes) {
                    bytes = coerceArray(bytes, true);

                    if (bytes.length != 16) {
                        throw new Error('invalid counter bytes size (must be 16 bytes)');
                    }

                    this._counter = bytes;
                };

                Counter.prototype.increment = function() {
                    for (var i = 15; i >= 0; i--) {
                        if (this._counter[i] === 255) {
                            this._counter[i] = 0;
                        } else {
                            this._counter[i]++;
                            break;
                        }
                    }
                };


                /**
                 *  Mode Of Operation - Counter (CTR)
                 */
                var ModeOfOperationCTR = function(key, counter) {
                    if (!(this instanceof ModeOfOperationCTR)) {
                        throw Error('AES must be instanitated with `new`');
                    }

                    this.description = "Counter";
                    this.name = "ctr";

                    if (!(counter instanceof Counter)) {
                        counter = new Counter(counter);
                    }

                    this._counter = counter;

                    this._remainingCounter = null;
                    this._remainingCounterIndex = 16;

                    this._aes = new AES(key);
                };

                ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
                    var encrypted = coerceArray(plaintext, true);

                    for (var i = 0; i < encrypted.length; i++) {
                        if (this._remainingCounterIndex === 16) {
                            this._remainingCounter = this._aes.encrypt(this._counter._counter);
                            this._remainingCounterIndex = 0;
                            this._counter.increment();
                        }
                        encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
                    }

                    return encrypted;
                };

                // Decryption is symetric
                ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


                ///////////////////////
                // Padding

                // See:https://tools.ietf.org/html/rfc2315
                function pkcs7pad(data) {
                    data = coerceArray(data, true);
                    var padder = 16 - (data.length % 16);
                    var result = createArray(data.length + padder);
                    copyArray(data, result);
                    for (var i = data.length; i < result.length; i++) {
                        result[i] = padder;
                    }
                    return result;
                }

                function pkcs7strip(data) {
                    data = coerceArray(data, true);
                    if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

                    var padder = data[data.length - 1];
                    if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

                    var length = data.length - padder;
                    for (var i = 0; i < padder; i++) {
                        if (data[length + i] !== padder) {
                            throw new Error('PKCS#7 invalid padding byte');
                        }
                    }

                    var result = createArray(length);
                    copyArray(data, result, 0, 0, length);
                    return result;
                }

                ///////////////////////
                // Exporting


                // The block cipher
                var aesjs = {
                    AES: AES,
                    Counter: Counter,

                    ModeOfOperation: {
                        ecb: ModeOfOperationECB,
                        cbc: ModeOfOperationCBC,
                        cfb: ModeOfOperationCFB,
                        ofb: ModeOfOperationOFB,
                        ctr: ModeOfOperationCTR
                    },

                    utils: {
                        hex: convertHex,
                        utf8: convertUtf8
                    },

                    padding: {
                        pkcs7: {
                            pad: pkcs7pad,
                            strip: pkcs7strip
                        }
                    },

                    _arrayTest: {
                        coerceArray: coerceArray,
                        createArray: createArray,
                        copyArray: copyArray,
                    }
                };


                // node.js
                {
                    module.exports = aesjs;

                // RequireJS/AMD
                // http://www.requirejs.org/docs/api.html
                // https://github.com/amdjs/amdjs-api/wiki/AMD
                }


            })();
            }(aesJs));

            var aes = aesJs.exports;

            const version$7 = "json-wallets/5.5.0";

            function looseArrayify(hexString) {
                if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
                    hexString = '0x' + hexString;
                }
                return arrayify(hexString);
            }
            function zpad(value, length) {
                value = String(value);
                while (value.length < length) {
                    value = '0' + value;
                }
                return value;
            }
            function getPassword(password) {
                if (typeof (password) === 'string') {
                    return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
                }
                return arrayify(password);
            }
            function searchPath(object, path) {
                let currentChild = object;
                const comps = path.toLowerCase().split('/');
                for (let i = 0; i < comps.length; i++) {
                    // Search for a child object with a case-insensitive matching key
                    let matchingChild = null;
                    for (const key in currentChild) {
                        if (key.toLowerCase() === comps[i]) {
                            matchingChild = currentChild[key];
                            break;
                        }
                    }
                    // Didn't find one. :'(
                    if (matchingChild === null) {
                        return null;
                    }
                    // Now check this child...
                    currentChild = matchingChild;
                }
                return currentChild;
            }
            // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
            function uuidV4(randomBytes) {
                const bytes = arrayify(randomBytes);
                // Section: 4.1.3:
                // - time_hi_and_version[12:16] = 0b0100
                bytes[6] = (bytes[6] & 0x0f) | 0x40;
                // Section 4.4
                // - clock_seq_hi_and_reserved[6] = 0b0
                // - clock_seq_hi_and_reserved[7] = 0b1
                bytes[8] = (bytes[8] & 0x3f) | 0x80;
                const value = hexlify(bytes);
                return [
                    value.substring(2, 10),
                    value.substring(10, 14),
                    value.substring(14, 18),
                    value.substring(18, 22),
                    value.substring(22, 34),
                ].join("-");
            }

            const logger$a = new Logger(version$7);
            class CrowdsaleAccount extends Description {
                isCrowdsaleAccount(value) {
                    return !!(value && value._isCrowdsaleAccount);
                }
            }
            // See: https://github.com/ethereum/pyethsaletool
            function decrypt$1(json, password) {
                const data = JSON.parse(json);
                password = getPassword(password);
                // Ethereum Address
                const ethaddr = getAddress(searchPath(data, "ethaddr"));
                // Encrypted Seed
                const encseed = looseArrayify(searchPath(data, "encseed"));
                if (!encseed || (encseed.length % 16) !== 0) {
                    logger$a.throwArgumentError("invalid encseed", "json", json);
                }
                const key = arrayify(pbkdf2$1(password, password, 2000, 32, "sha256")).slice(0, 16);
                const iv = encseed.slice(0, 16);
                const encryptedSeed = encseed.slice(16);
                // Decrypt the seed
                const aesCbc = new aes.ModeOfOperation.cbc(key, iv);
                const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
                // This wallet format is weird... Convert the binary encoded hex to a string.
                let seedHex = "";
                for (let i = 0; i < seed.length; i++) {
                    seedHex += String.fromCharCode(seed[i]);
                }
                const seedHexBytes = toUtf8Bytes(seedHex);
                const privateKey = keccak256$1(seedHexBytes);
                return new CrowdsaleAccount({
                    _isCrowdsaleAccount: true,
                    address: ethaddr,
                    privateKey: privateKey
                });
            }

            function isCrowdsaleWallet(json) {
                let data = null;
                try {
                    data = JSON.parse(json);
                }
                catch (error) {
                    return false;
                }
                return (data.encseed && data.ethaddr);
            }
            function isKeystoreWallet(json) {
                let data = null;
                try {
                    data = JSON.parse(json);
                }
                catch (error) {
                    return false;
                }
                if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
                    return false;
                }
                // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
                return true;
            }
            //export function isJsonWallet(json: string): boolean {
            //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
            //}
            function getJsonWalletAddress(json) {
                if (isCrowdsaleWallet(json)) {
                    try {
                        return getAddress(JSON.parse(json).ethaddr);
                    }
                    catch (error) {
                        return null;
                    }
                }
                if (isKeystoreWallet(json)) {
                    try {
                        return getAddress(JSON.parse(json).address);
                    }
                    catch (error) {
                        return null;
                    }
                }
                return null;
            }

            var scrypt$1 = {exports: {}};

            (function (module, exports) {

            (function(root) {
                const MAX_VALUE = 0x7fffffff;

                // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
                // See: https://github.com/dchest/scrypt-async-js
                function SHA256(m) {
                    const K = new Uint32Array([
                       0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
                       0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
                       0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
                       0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
                       0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
                       0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
                       0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
                       0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
                       0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
                       0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
                       0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
                       0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
                       0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
                   ]);

                    let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
                    let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
                    const w = new Uint32Array(64);

                    function blocks(p) {
                        let off = 0, len = p.length;
                        while (len >= 64) {
                            let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                            for (i = 0; i < 16; i++) {
                                j = off + i*4;
                                w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                                ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                            }

                            for (i = 16; i < 64; i++) {
                                u = w[i-2];
                                t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                                u = w[i-15];
                                t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                                w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                            }

                            for (i = 0; i < 64; i++) {
                                t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                                         ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                                      ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                                t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                                       ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                                h = g;
                                g = f;
                                f = e;
                                e = (d + t1) | 0;
                                d = c;
                                c = b;
                                b = a;
                                a = (t1 + t2) | 0;
                            }

                            h0 = (h0 + a) | 0;
                            h1 = (h1 + b) | 0;
                            h2 = (h2 + c) | 0;
                            h3 = (h3 + d) | 0;
                            h4 = (h4 + e) | 0;
                            h5 = (h5 + f) | 0;
                            h6 = (h6 + g) | 0;
                            h7 = (h7 + h) | 0;

                            off += 64;
                            len -= 64;
                        }
                    }

                    blocks(m);

                    let i, bytesLeft = m.length % 64,
                    bitLenHi = (m.length / 0x20000000) | 0,
                    bitLenLo = m.length << 3,
                    numZeros = (bytesLeft < 56) ? 56 : 120,
                    p = m.slice(m.length - bytesLeft, m.length);

                    p.push(0x80);
                    for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
                    p.push((bitLenHi >>> 24) & 0xff);
                    p.push((bitLenHi >>> 16) & 0xff);
                    p.push((bitLenHi >>> 8)  & 0xff);
                    p.push((bitLenHi >>> 0)  & 0xff);
                    p.push((bitLenLo >>> 24) & 0xff);
                    p.push((bitLenLo >>> 16) & 0xff);
                    p.push((bitLenLo >>> 8)  & 0xff);
                    p.push((bitLenLo >>> 0)  & 0xff);

                    blocks(p);

                    return [
                        (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                        (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                        (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                        (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                        (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                        (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                        (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                        (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
                    ];
                }

                function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
                    // compress password if it's longer than hash block length
                    password = (password.length <= 64) ? password : SHA256(password);

                    const innerLen = 64 + salt.length + 4;
                    const inner = new Array(innerLen);
                    const outerKey = new Array(64);

                    let i;
                    let dk = [];

                    // inner = (password ^ ipad) || salt || counter
                    for (i = 0; i < 64; i++) { inner[i] = 0x36; }
                    for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
                    for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
                    for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

                    // outerKey = password ^ opad
                    for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
                    for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

                    // increments counter inside inner
                    function incrementCounter() {
                        for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                            inner[i]++;
                            if (inner[i] <= 0xff) return;
                            inner[i] = 0;
                        }
                    }

                    // output blocks = SHA256(outerKey || SHA256(inner)) ...
                    while (dkLen >= 32) {
                        incrementCounter();
                        dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                        dkLen -= 32;
                    }
                    if (dkLen > 0) {
                        incrementCounter();
                        dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
                    }

                    return dk;
                }

                // The following is an adaptation of scryptsy
                // See: https://www.npmjs.com/package/scryptsy
                function blockmix_salsa8(BY, Yi, r, x, _X) {
                    let i;

                    arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
                    for (i = 0; i < 2 * r; i++) {
                        blockxor(BY, i * 16, _X, 16);
                        salsa20_8(_X, x);
                        arraycopy(_X, 0, BY, Yi + (i * 16), 16);
                    }

                    for (i = 0; i < r; i++) {
                        arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
                    }

                    for (i = 0; i < r; i++) {
                        arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
                    }
                }

                function R(a, b) {
                    return (a << b) | (a >>> (32 - b));
                }

                function salsa20_8(B, x) {
                    arraycopy(B, 0, x, 0, 16);

                    for (let i = 8; i > 0; i -= 2) {
                        x[ 4] ^= R(x[ 0] + x[12], 7);
                        x[ 8] ^= R(x[ 4] + x[ 0], 9);
                        x[12] ^= R(x[ 8] + x[ 4], 13);
                        x[ 0] ^= R(x[12] + x[ 8], 18);
                        x[ 9] ^= R(x[ 5] + x[ 1], 7);
                        x[13] ^= R(x[ 9] + x[ 5], 9);
                        x[ 1] ^= R(x[13] + x[ 9], 13);
                        x[ 5] ^= R(x[ 1] + x[13], 18);
                        x[14] ^= R(x[10] + x[ 6], 7);
                        x[ 2] ^= R(x[14] + x[10], 9);
                        x[ 6] ^= R(x[ 2] + x[14], 13);
                        x[10] ^= R(x[ 6] + x[ 2], 18);
                        x[ 3] ^= R(x[15] + x[11], 7);
                        x[ 7] ^= R(x[ 3] + x[15], 9);
                        x[11] ^= R(x[ 7] + x[ 3], 13);
                        x[15] ^= R(x[11] + x[ 7], 18);
                        x[ 1] ^= R(x[ 0] + x[ 3], 7);
                        x[ 2] ^= R(x[ 1] + x[ 0], 9);
                        x[ 3] ^= R(x[ 2] + x[ 1], 13);
                        x[ 0] ^= R(x[ 3] + x[ 2], 18);
                        x[ 6] ^= R(x[ 5] + x[ 4], 7);
                        x[ 7] ^= R(x[ 6] + x[ 5], 9);
                        x[ 4] ^= R(x[ 7] + x[ 6], 13);
                        x[ 5] ^= R(x[ 4] + x[ 7], 18);
                        x[11] ^= R(x[10] + x[ 9], 7);
                        x[ 8] ^= R(x[11] + x[10], 9);
                        x[ 9] ^= R(x[ 8] + x[11], 13);
                        x[10] ^= R(x[ 9] + x[ 8], 18);
                        x[12] ^= R(x[15] + x[14], 7);
                        x[13] ^= R(x[12] + x[15], 9);
                        x[14] ^= R(x[13] + x[12], 13);
                        x[15] ^= R(x[14] + x[13], 18);
                    }

                    for (let i = 0; i < 16; ++i) {
                        B[i] += x[i];
                    }
                }

                // naive approach... going back to loop unrolling may yield additional performance
                function blockxor(S, Si, D, len) {
                    for (let i = 0; i < len; i++) {
                        D[i] ^= S[Si + i];
                    }
                }

                function arraycopy(src, srcPos, dest, destPos, length) {
                    while (length--) {
                        dest[destPos++] = src[srcPos++];
                    }
                }

                function checkBufferish(o) {
                    if (!o || typeof(o.length) !== 'number') { return false; }

                    for (let i = 0; i < o.length; i++) {
                        const v = o[i];
                        if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                            return false;
                        }
                    }

                    return true;
                }

                function ensureInteger(value, name) {
                    if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
                    return value;
                }

                // N = Cpu cost, r = Memory cost, p = parallelization cost
                // callback(error, progress, key)
                function _scrypt(password, salt, N, r, p, dkLen, callback) {

                    N = ensureInteger(N, 'N');
                    r = ensureInteger(r, 'r');
                    p = ensureInteger(p, 'p');

                    dkLen = ensureInteger(dkLen, 'dkLen');

                    if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

                    if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
                    if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

                    if (!checkBufferish(password)) {
                        throw new Error('password must be an array or buffer');
                    }
                    password = Array.prototype.slice.call(password);

                    if (!checkBufferish(salt)) {
                        throw new Error('salt must be an array or buffer');
                    }
                    salt = Array.prototype.slice.call(salt);

                    let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
                    const B = new Uint32Array(p * 32 * r);
                    for (let i = 0; i < B.length; i++) {
                        const j = i * 4;
                        B[i] = ((b[j + 3] & 0xff) << 24) |
                               ((b[j + 2] & 0xff) << 16) |
                               ((b[j + 1] & 0xff) << 8) |
                               ((b[j + 0] & 0xff) << 0);
                    }

                    const XY = new Uint32Array(64 * r);
                    const V = new Uint32Array(32 * r * N);

                    const Yi = 32 * r;

                    // scratch space
                    const x = new Uint32Array(16);       // salsa20_8
                    const _X = new Uint32Array(16);      // blockmix_salsa8

                    const totalOps = p * N * 2;
                    let currentOp = 0;
                    let lastPercent10 = null;

                    // Set this to true to abandon the scrypt on the next step
                    let stop = false;

                    // State information
                    let state = 0;
                    let i0 = 0, i1;
                    let Bi;

                    // How many blockmix_salsa8 can we do per step?
                    const limit = callback ? parseInt(1000 / r): 0xffffffff;

                    // Trick from scrypt-async; if there is a setImmediate shim in place, use it
                    const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

                    // This is really all I changed; making scryptsy a state machine so we occasionally
                    // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
                    const incrementalSMix = function() {
                        if (stop) {
                            return callback(new Error('cancelled'), currentOp / totalOps);
                        }

                        let steps;

                        switch (state) {
                            case 0:
                                // for (var i = 0; i < p; i++)...
                                Bi = i0 * 32 * r;

                                arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                                state = 1;                                         // Move to ROMix 2
                                i1 = 0;

                                // Fall through

                            case 1:

                                // Run up to 1000 steps of the first inner smix loop
                                steps = N - i1;
                                if (steps > limit) { steps = limit; }
                                for (let i = 0; i < steps; i++) {                  // ROMix - 2
                                    arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
                                    blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                                }

                                // for (var i = 0; i < N; i++)
                                i1 += steps;
                                currentOp += steps;

                                if (callback) {
                                    // Call the callback with the progress (optionally stopping us)
                                    const percent10 = parseInt(1000 * currentOp / totalOps);
                                    if (percent10 !== lastPercent10) {
                                        stop = callback(null, currentOp / totalOps);
                                        if (stop) { break; }
                                        lastPercent10 = percent10;
                                    }
                                }

                                if (i1 < N) { break; }

                                i1 = 0;                                          // Move to ROMix 6
                                state = 2;

                                // Fall through

                            case 2:

                                // Run up to 1000 steps of the second inner smix loop
                                steps = N - i1;
                                if (steps > limit) { steps = limit; }
                                for (let i = 0; i < steps; i++) {                // ROMix - 6
                                    const offset = (2 * r - 1) * 16;             // ROMix - 7
                                    const j = XY[offset] & (N - 1);
                                    blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                                    blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                                }

                                // for (var i = 0; i < N; i++)...
                                i1 += steps;
                                currentOp += steps;

                                // Call the callback with the progress (optionally stopping us)
                                if (callback) {
                                    const percent10 = parseInt(1000 * currentOp / totalOps);
                                    if (percent10 !== lastPercent10) {
                                        stop = callback(null, currentOp / totalOps);
                                        if (stop) { break; }
                                        lastPercent10 = percent10;
                                    }
                                }

                                if (i1 < N) { break; }

                                arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                                // for (var i = 0; i < p; i++)...
                                i0++;
                                if (i0 < p) {
                                    state = 0;
                                    break;
                                }

                                b = [];
                                for (let i = 0; i < B.length; i++) {
                                    b.push((B[i] >>  0) & 0xff);
                                    b.push((B[i] >>  8) & 0xff);
                                    b.push((B[i] >> 16) & 0xff);
                                    b.push((B[i] >> 24) & 0xff);
                                }

                                const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                                // Send the result to the callback
                                if (callback) { callback(null, 1.0, derivedKey); }

                                // Done; don't break (which would reschedule)
                                return derivedKey;
                        }

                        // Schedule the next steps
                        if (callback) { nextTick(incrementalSMix); }
                    };

                    // Run the smix state machine until completion
                    if (!callback) {
                        while (true) {
                            const derivedKey = incrementalSMix();
                            if (derivedKey != undefined) { return derivedKey; }
                        }
                    }

                    // Bootstrap the async incremental smix
                    incrementalSMix();
                }

                const lib = {
                    scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                        return new Promise(function(resolve, reject) {
                            let lastProgress = 0;
                            if (progressCallback) { progressCallback(0); }
                            _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                                if (error) {
                                    reject(error);
                                } else if (key) {
                                    if (progressCallback && lastProgress !== 1) {
                                        progressCallback(1);
                                    }
                                    resolve(new Uint8Array(key));
                                } else if (progressCallback && progress !== lastProgress) {
                                    lastProgress = progress;
                                    return progressCallback(progress);
                                }
                            });
                        });
                    },
                    syncScrypt: function(password, salt, N, r, p, dkLen) {
                        return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
                    }
                };

                // node.js
                {
                   module.exports = lib;

                // RequireJS/AMD
                // http://www.requirejs.org/docs/api.html
                // https://github.com/amdjs/amdjs-api/wiki/AMD
                }

            })();
            }(scrypt$1));

            var scrypt = scrypt$1.exports;

            var __awaiter$5 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$9 = new Logger(version$7);
            // Exported Types
            function hasMnemonic$1(value) {
                return (value != null && value.mnemonic && value.mnemonic.phrase);
            }
            class KeystoreAccount extends Description {
                isKeystoreAccount(value) {
                    return !!(value && value._isKeystoreAccount);
                }
            }
            function _decrypt(data, key, ciphertext) {
                const cipher = searchPath(data, "crypto/cipher");
                if (cipher === "aes-128-ctr") {
                    const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
                    const counter = new aes.Counter(iv);
                    const aesCtr = new aes.ModeOfOperation.ctr(key, counter);
                    return arrayify(aesCtr.decrypt(ciphertext));
                }
                return null;
            }
            function _getAccount(data, key) {
                const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
                const computedMAC = hexlify(keccak256$1(concat$3([key.slice(16, 32), ciphertext]))).substring(2);
                if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
                    throw new Error("invalid password");
                }
                const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
                if (!privateKey) {
                    logger$9.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "decrypt"
                    });
                }
                const mnemonicKey = key.slice(32, 64);
                const address = computeAddress(privateKey);
                if (data.address) {
                    let check = data.address.toLowerCase();
                    if (check.substring(0, 2) !== "0x") {
                        check = "0x" + check;
                    }
                    if (getAddress(check) !== address) {
                        throw new Error("address mismatch");
                    }
                }
                const account = {
                    _isKeystoreAccount: true,
                    address: address,
                    privateKey: hexlify(privateKey)
                };
                // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
                if (searchPath(data, "x-ethers/version") === "0.1") {
                    const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
                    const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
                    const mnemonicCounter = new aes.Counter(mnemonicIv);
                    const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                    const path = searchPath(data, "x-ethers/path") || defaultPath;
                    const locale = searchPath(data, "x-ethers/locale") || "en";
                    const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
                    try {
                        const mnemonic = entropyToMnemonic(entropy, locale);
                        const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
                        if (node.privateKey != account.privateKey) {
                            throw new Error("mnemonic mismatch");
                        }
                        account.mnemonic = node.mnemonic;
                    }
                    catch (error) {
                        // If we don't have the locale wordlist installed to
                        // read this mnemonic, just bail and don't set the
                        // mnemonic
                        if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                            throw error;
                        }
                    }
                }
                return new KeystoreAccount(account);
            }
            function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
                return arrayify(pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc));
            }
            function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
                return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
            }
            function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
                const passwordBytes = getPassword(password);
                const kdf = searchPath(data, "crypto/kdf");
                if (kdf && typeof (kdf) === "string") {
                    const throwError = function (name, value) {
                        return logger$9.throwArgumentError("invalid key-derivation function parameters", name, value);
                    };
                    if (kdf.toLowerCase() === "scrypt") {
                        const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                        const N = parseInt(searchPath(data, "crypto/kdfparams/n"));
                        const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
                        const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
                        // Check for all required parameters
                        if (!N || !r || !p) {
                            throwError("kdf", kdf);
                        }
                        // Make sure N is a power of 2
                        if ((N & (N - 1)) !== 0) {
                            throwError("N", N);
                        }
                        const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                        if (dkLen !== 32) {
                            throwError("dklen", dkLen);
                        }
                        return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
                    }
                    else if (kdf.toLowerCase() === "pbkdf2") {
                        const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                        let prfFunc = null;
                        const prf = searchPath(data, "crypto/kdfparams/prf");
                        if (prf === "hmac-sha256") {
                            prfFunc = "sha256";
                        }
                        else if (prf === "hmac-sha512") {
                            prfFunc = "sha512";
                        }
                        else {
                            throwError("prf", prf);
                        }
                        const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
                        const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                        if (dkLen !== 32) {
                            throwError("dklen", dkLen);
                        }
                        return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
                    }
                }
                return logger$9.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
            }
            function decryptSync(json, password) {
                const data = JSON.parse(json);
                const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);
                return _getAccount(data, key);
            }
            function decrypt(json, password, progressCallback) {
                return __awaiter$5(this, void 0, void 0, function* () {
                    const data = JSON.parse(json);
                    const key = yield _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);
                    return _getAccount(data, key);
                });
            }
            function encrypt(account, password, options, progressCallback) {
                try {
                    // Check the address matches the private key
                    if (getAddress(account.address) !== computeAddress(account.privateKey)) {
                        throw new Error("address/privateKey mismatch");
                    }
                    // Check the mnemonic (if any) matches the private key
                    if (hasMnemonic$1(account)) {
                        const mnemonic = account.mnemonic;
                        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
                        if (node.privateKey != account.privateKey) {
                            throw new Error("mnemonic mismatch");
                        }
                    }
                }
                catch (e) {
                    return Promise.reject(e);
                }
                // The options are optional, so adjust the call as needed
                if (typeof (options) === "function" && !progressCallback) {
                    progressCallback = options;
                    options = {};
                }
                if (!options) {
                    options = {};
                }
                const privateKey = arrayify(account.privateKey);
                const passwordBytes = getPassword(password);
                let entropy = null;
                let path = null;
                let locale = null;
                if (hasMnemonic$1(account)) {
                    const srcMnemonic = account.mnemonic;
                    entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
                    path = srcMnemonic.path || defaultPath;
                    locale = srcMnemonic.locale || "en";
                }
                let client = options.client;
                if (!client) {
                    client = "ethers.js";
                }
                // Check/generate the salt
                let salt = null;
                if (options.salt) {
                    salt = arrayify(options.salt);
                }
                else {
                    salt = randomBytes(32);
                }
                // Override initialization vector
                let iv = null;
                if (options.iv) {
                    iv = arrayify(options.iv);
                    if (iv.length !== 16) {
                        throw new Error("invalid iv");
                    }
                }
                else {
                    iv = randomBytes(16);
                }
                // Override the uuid
                let uuidRandom = null;
                if (options.uuid) {
                    uuidRandom = arrayify(options.uuid);
                    if (uuidRandom.length !== 16) {
                        throw new Error("invalid uuid");
                    }
                }
                else {
                    uuidRandom = randomBytes(16);
                }
                // Override the scrypt password-based key derivation function parameters
                let N = (1 << 17), r = 8, p = 1;
                if (options.scrypt) {
                    if (options.scrypt.N) {
                        N = options.scrypt.N;
                    }
                    if (options.scrypt.r) {
                        r = options.scrypt.r;
                    }
                    if (options.scrypt.p) {
                        p = options.scrypt.p;
                    }
                }
                // We take 64 bytes:
                //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
                //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
                return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {
                    key = arrayify(key);
                    // This will be used to encrypt the wallet (as per Web3 secret storage)
                    const derivedKey = key.slice(0, 16);
                    const macPrefix = key.slice(16, 32);
                    // This will be used to encrypt the mnemonic phrase (if any)
                    const mnemonicKey = key.slice(32, 64);
                    // Encrypt the private key
                    const counter = new aes.Counter(iv);
                    const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);
                    const ciphertext = arrayify(aesCtr.encrypt(privateKey));
                    // Compute the message authentication code, used to check the password
                    const mac = keccak256$1(concat$3([macPrefix, ciphertext]));
                    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
                    const data = {
                        address: account.address.substring(2).toLowerCase(),
                        id: uuidV4(uuidRandom),
                        version: 3,
                        Crypto: {
                            cipher: "aes-128-ctr",
                            cipherparams: {
                                iv: hexlify(iv).substring(2),
                            },
                            ciphertext: hexlify(ciphertext).substring(2),
                            kdf: "scrypt",
                            kdfparams: {
                                salt: hexlify(salt).substring(2),
                                n: N,
                                dklen: 32,
                                p: p,
                                r: r
                            },
                            mac: mac.substring(2)
                        }
                    };
                    // If we have a mnemonic, encrypt it into the JSON wallet
                    if (entropy) {
                        const mnemonicIv = randomBytes(16);
                        const mnemonicCounter = new aes.Counter(mnemonicIv);
                        const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                        const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
                        const now = new Date();
                        const timestamp = (now.getUTCFullYear() + "-" +
                            zpad(now.getUTCMonth() + 1, 2) + "-" +
                            zpad(now.getUTCDate(), 2) + "T" +
                            zpad(now.getUTCHours(), 2) + "-" +
                            zpad(now.getUTCMinutes(), 2) + "-" +
                            zpad(now.getUTCSeconds(), 2) + ".0Z");
                        data["x-ethers"] = {
                            client: client,
                            gethFilename: ("UTC--" + timestamp + "--" + data.address),
                            mnemonicCounter: hexlify(mnemonicIv).substring(2),
                            mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
                            path: path,
                            locale: locale,
                            version: "0.1"
                        };
                    }
                    return JSON.stringify(data);
                });
            }

            function decryptJsonWallet(json, password, progressCallback) {
                if (isCrowdsaleWallet(json)) {
                    if (progressCallback) {
                        progressCallback(0);
                    }
                    const account = decrypt$1(json, password);
                    if (progressCallback) {
                        progressCallback(1);
                    }
                    return Promise.resolve(account);
                }
                if (isKeystoreWallet(json)) {
                    return decrypt(json, password, progressCallback);
                }
                return Promise.reject(new Error("invalid JSON wallet"));
            }
            function decryptJsonWalletSync(json, password) {
                if (isCrowdsaleWallet(json)) {
                    return decrypt$1(json, password);
                }
                if (isKeystoreWallet(json)) {
                    return decryptSync(json, password);
                }
                throw new Error("invalid JSON wallet");
            }

            var lib_esm$5 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        decryptCrowdsale: decrypt$1,
                        decryptKeystore: decrypt,
                        decryptKeystoreSync: decryptSync,
                        encryptKeystore: encrypt,
                        isCrowdsaleWallet: isCrowdsaleWallet,
                        isKeystoreWallet: isKeystoreWallet,
                        getJsonWalletAddress: getJsonWalletAddress,
                        decryptJsonWallet: decryptJsonWallet,
                        decryptJsonWalletSync: decryptJsonWalletSync
            });

            const version$6 = "wallet/5.5.0";

            var __awaiter$4 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$8 = new Logger(version$6);
            function isAccount(value) {
                return (value != null && isHexString(value.privateKey, 32) && value.address != null);
            }
            function hasMnemonic(value) {
                const mnemonic = value.mnemonic;
                return (mnemonic && mnemonic.phrase);
            }
            class Wallet$1 extends Signer {
                constructor(privateKey, provider) {
                    logger$8.checkNew(new.target, Wallet$1);
                    super();
                    if (isAccount(privateKey)) {
                        const signingKey = new SigningKey(privateKey.privateKey);
                        defineReadOnly(this, "_signingKey", () => signingKey);
                        defineReadOnly(this, "address", computeAddress(this.publicKey));
                        if (this.address !== getAddress(privateKey.address)) {
                            logger$8.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
                        }
                        if (hasMnemonic(privateKey)) {
                            const srcMnemonic = privateKey.mnemonic;
                            defineReadOnly(this, "_mnemonic", () => ({
                                phrase: srcMnemonic.phrase,
                                path: srcMnemonic.path || defaultPath,
                                locale: srcMnemonic.locale || "en"
                            }));
                            const mnemonic = this.mnemonic;
                            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                            if (computeAddress(node.privateKey) !== this.address) {
                                logger$8.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                            }
                        }
                        else {
                            defineReadOnly(this, "_mnemonic", () => null);
                        }
                    }
                    else {
                        if (SigningKey.isSigningKey(privateKey)) {
                            /* istanbul ignore if */
                            if (privateKey.curve !== "secp256k1") {
                                logger$8.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                            }
                            defineReadOnly(this, "_signingKey", () => privateKey);
                        }
                        else {
                            // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                            if (typeof (privateKey) === "string") {
                                if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                                    privateKey = "0x" + privateKey;
                                }
                            }
                            const signingKey = new SigningKey(privateKey);
                            defineReadOnly(this, "_signingKey", () => signingKey);
                        }
                        defineReadOnly(this, "_mnemonic", () => null);
                        defineReadOnly(this, "address", computeAddress(this.publicKey));
                    }
                    /* istanbul ignore if */
                    if (provider && !Provider$1.isProvider(provider)) {
                        logger$8.throwArgumentError("invalid provider", "provider", provider);
                    }
                    defineReadOnly(this, "provider", provider || null);
                }
                get mnemonic() { return this._mnemonic(); }
                get privateKey() { return this._signingKey().privateKey; }
                get publicKey() { return this._signingKey().publicKey; }
                getAddress() {
                    return Promise.resolve(this.address);
                }
                connect(provider) {
                    return new Wallet$1(this, provider);
                }
                signTransaction(transaction) {
                    return resolveProperties(transaction).then((tx) => {
                        if (tx.from != null) {
                            if (getAddress(tx.from) !== this.address) {
                                logger$8.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                            }
                            delete tx.from;
                        }
                        const signature = this._signingKey().signDigest(keccak256$1(serialize(tx)));
                        return serialize(tx, signature);
                    });
                }
                signMessage(message) {
                    return __awaiter$4(this, void 0, void 0, function* () {
                        return joinSignature(this._signingKey().signDigest(hashMessage(message)));
                    });
                }
                _signTypedData(domain, types, value) {
                    return __awaiter$4(this, void 0, void 0, function* () {
                        // Populate any ENS names
                        const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                            if (this.provider == null) {
                                logger$8.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "resolveName",
                                    value: name
                                });
                            }
                            return this.provider.resolveName(name);
                        });
                        return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
                    });
                }
                encrypt(password, options, progressCallback) {
                    if (typeof (options) === "function" && !progressCallback) {
                        progressCallback = options;
                        options = {};
                    }
                    if (progressCallback && typeof (progressCallback) !== "function") {
                        throw new Error("invalid callback");
                    }
                    if (!options) {
                        options = {};
                    }
                    return encrypt(this, password, options, progressCallback);
                }
                /**
                 *  Static methods to create Wallet instances.
                 */
                static createRandom(options) {
                    let entropy = randomBytes(16);
                    if (!options) {
                        options = {};
                    }
                    if (options.extraEntropy) {
                        entropy = arrayify(hexDataSlice(keccak256$1(concat$3([entropy, options.extraEntropy])), 0, 16));
                    }
                    const mnemonic = entropyToMnemonic(entropy, options.locale);
                    return Wallet$1.fromMnemonic(mnemonic, options.path, options.locale);
                }
                static fromEncryptedJson(json, password, progressCallback) {
                    return decryptJsonWallet(json, password, progressCallback).then((account) => {
                        return new Wallet$1(account);
                    });
                }
                static fromEncryptedJsonSync(json, password) {
                    return new Wallet$1(decryptJsonWalletSync(json, password));
                }
                static fromMnemonic(mnemonic, path, wordlist) {
                    if (!path) {
                        path = defaultPath;
                    }
                    return new Wallet$1(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
                }
            }
            function verifyMessage(message, signature) {
                return recoverAddress(hashMessage(message), signature);
            }
            function verifyTypedData(domain, types, value, signature) {
                return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
            }

            var lib_esm$4 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        Wallet: Wallet$1,
                        verifyMessage: verifyMessage,
                        verifyTypedData: verifyTypedData
            });

            const version$5 = "networks/5.5.2";

            const logger$7 = new Logger(version$5);
            function isRenetworkable(value) {
                return (value && typeof (value.renetwork) === "function");
            }
            function ethDefaultProvider(network) {
                const func = function (providers, options) {
                    if (options == null) {
                        options = {};
                    }
                    const providerList = [];
                    if (providers.InfuraProvider) {
                        try {
                            providerList.push(new providers.InfuraProvider(network, options.infura));
                        }
                        catch (error) { }
                    }
                    if (providers.EtherscanProvider) {
                        try {
                            providerList.push(new providers.EtherscanProvider(network, options.etherscan));
                        }
                        catch (error) { }
                    }
                    if (providers.AlchemyProvider) {
                        try {
                            providerList.push(new providers.AlchemyProvider(network, options.alchemy));
                        }
                        catch (error) { }
                    }
                    if (providers.PocketProvider) {
                        // These networks are currently faulty on Pocket as their
                        // network does not handle the Berlin hardfork, which is
                        // live on these ones.
                        // @TODO: This goes away once Pocket has upgraded their nodes
                        const skip = ["goerli", "ropsten", "rinkeby"];
                        try {
                            const provider = new providers.PocketProvider(network);
                            if (provider.network && skip.indexOf(provider.network.name) === -1) {
                                providerList.push(provider);
                            }
                        }
                        catch (error) { }
                    }
                    if (providers.CloudflareProvider) {
                        try {
                            providerList.push(new providers.CloudflareProvider(network));
                        }
                        catch (error) { }
                    }
                    if (providerList.length === 0) {
                        return null;
                    }
                    if (providers.FallbackProvider) {
                        let quorum = 1;
                        if (options.quorum != null) {
                            quorum = options.quorum;
                        }
                        else if (network === "homestead") {
                            quorum = 2;
                        }
                        return new providers.FallbackProvider(providerList, quorum);
                    }
                    return providerList[0];
                };
                func.renetwork = function (network) {
                    return ethDefaultProvider(network);
                };
                return func;
            }
            function etcDefaultProvider(url, network) {
                const func = function (providers, options) {
                    if (providers.JsonRpcProvider) {
                        return new providers.JsonRpcProvider(url, network);
                    }
                    return null;
                };
                func.renetwork = function (network) {
                    return etcDefaultProvider(url, network);
                };
                return func;
            }
            const homestead = {
                chainId: 1,
                ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                name: "homestead",
                _defaultProvider: ethDefaultProvider("homestead")
            };
            const ropsten = {
                chainId: 3,
                ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                name: "ropsten",
                _defaultProvider: ethDefaultProvider("ropsten")
            };
            const classicMordor = {
                chainId: 63,
                name: "classicMordor",
                _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
            };
            // See: https://chainlist.org
            const networks = {
                unspecified: { chainId: 0, name: "unspecified" },
                homestead: homestead,
                mainnet: homestead,
                morden: { chainId: 2, name: "morden" },
                ropsten: ropsten,
                testnet: ropsten,
                rinkeby: {
                    chainId: 4,
                    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                    name: "rinkeby",
                    _defaultProvider: ethDefaultProvider("rinkeby")
                },
                kovan: {
                    chainId: 42,
                    name: "kovan",
                    _defaultProvider: ethDefaultProvider("kovan")
                },
                goerli: {
                    chainId: 5,
                    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                    name: "goerli",
                    _defaultProvider: ethDefaultProvider("goerli")
                },
                kintsugi: { chainId: 1337702, name: "kintsugi" },
                // ETC (See: #351)
                classic: {
                    chainId: 61,
                    name: "classic",
                    _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
                },
                classicMorden: { chainId: 62, name: "classicMorden" },
                classicMordor: classicMordor,
                classicTestnet: classicMordor,
                classicKotti: {
                    chainId: 6,
                    name: "classicKotti",
                    _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
                },
                xdai: { chainId: 100, name: "xdai" },
                matic: { chainId: 137, name: "matic" },
                maticmum: { chainId: 80001, name: "maticmum" },
                optimism: { chainId: 10, name: "optimism" },
                "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
                "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
                arbitrum: { chainId: 42161, name: "arbitrum" },
                "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
                bnb: { chainId: 56, name: "bnb" },
                bnbt: { chainId: 97, name: "bnbt" },
            };
            /**
             *  getNetwork
             *
             *  Converts a named common networks or chain ID (network ID) to a Network
             *  and verifies a network is a valid Network..
             */
            function getNetwork(network) {
                // No network (null)
                if (network == null) {
                    return null;
                }
                if (typeof (network) === "number") {
                    for (const name in networks) {
                        const standard = networks[name];
                        if (standard.chainId === network) {
                            return {
                                name: standard.name,
                                chainId: standard.chainId,
                                ensAddress: (standard.ensAddress || null),
                                _defaultProvider: (standard._defaultProvider || null)
                            };
                        }
                    }
                    return {
                        chainId: network,
                        name: "unknown"
                    };
                }
                if (typeof (network) === "string") {
                    const standard = networks[network];
                    if (standard == null) {
                        return null;
                    }
                    return {
                        name: standard.name,
                        chainId: standard.chainId,
                        ensAddress: standard.ensAddress,
                        _defaultProvider: (standard._defaultProvider || null)
                    };
                }
                const standard = networks[network.name];
                // Not a standard network; check that it is a valid network in general
                if (!standard) {
                    if (typeof (network.chainId) !== "number") {
                        logger$7.throwArgumentError("invalid network chainId", "network", network);
                    }
                    return network;
                }
                // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
                if (network.chainId !== 0 && network.chainId !== standard.chainId) {
                    logger$7.throwArgumentError("network chainId mismatch", "network", network);
                }
                // @TODO: In the next major version add an attach function to a defaultProvider
                // class and move the _defaultProvider internal to this file (extend Network)
                let defaultProvider = network._defaultProvider || null;
                if (defaultProvider == null && standard._defaultProvider) {
                    if (isRenetworkable(standard._defaultProvider)) {
                        defaultProvider = standard._defaultProvider.renetwork(network);
                    }
                    else {
                        defaultProvider = standard._defaultProvider;
                    }
                }
                // Standard Network (allow overriding the ENS address)
                return {
                    name: network.name,
                    chainId: standard.chainId,
                    ensAddress: (network.ensAddress || standard.ensAddress || null),
                    _defaultProvider: defaultProvider
                };
            }

            function decode$7(textData) {
                textData = atob(textData);
                const data = [];
                for (let i = 0; i < textData.length; i++) {
                    data.push(textData.charCodeAt(i));
                }
                return arrayify(data);
            }
            function encode$8(data) {
                data = arrayify(data);
                let textData = "";
                for (let i = 0; i < data.length; i++) {
                    textData += String.fromCharCode(data[i]);
                }
                return btoa(textData);
            }

            var lib_esm$3 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        decode: decode$7,
                        encode: encode$8
            });

            const version$4 = "web/5.5.1";

            var __awaiter$3 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            function getUrl(href, options) {
                return __awaiter$3(this, void 0, void 0, function* () {
                    if (options == null) {
                        options = {};
                    }
                    const request = {
                        method: (options.method || "GET"),
                        headers: (options.headers || {}),
                        body: (options.body || undefined),
                    };
                    if (options.skipFetchSetup !== true) {
                        request.mode = "cors"; // no-cors, cors, *same-origin
                        request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
                        request.credentials = "same-origin"; // include, *same-origin, omit
                        request.redirect = "follow"; // manual, *follow, error
                        request.referrer = "client"; // no-referrer, *client
                    }
                    const response = yield fetch(href, request);
                    const body = yield response.arrayBuffer();
                    const headers = {};
                    if (response.headers.forEach) {
                        response.headers.forEach((value, key) => {
                            headers[key.toLowerCase()] = value;
                        });
                    }
                    else {
                        ((response.headers).keys)().forEach((key) => {
                            headers[key.toLowerCase()] = response.headers.get(key);
                        });
                    }
                    return {
                        headers: headers,
                        statusCode: response.status,
                        statusMessage: response.statusText,
                        body: arrayify(new Uint8Array(body)),
                    };
                });
            }

            var __awaiter$2 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$6 = new Logger(version$4);
            function staller(duration) {
                return new Promise((resolve) => {
                    setTimeout(resolve, duration);
                });
            }
            function bodyify(value, type) {
                if (value == null) {
                    return null;
                }
                if (typeof (value) === "string") {
                    return value;
                }
                if (isBytesLike(value)) {
                    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
                        try {
                            return toUtf8String(value);
                        }
                        catch (error) { }
                    }
                    return hexlify(value);
                }
                return value;
            }
            // This API is still a work in progress; the future changes will likely be:
            // - ConnectionInfo => FetchDataRequest<T = any>
            // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
            //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
            // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
            // For this reason, it should be considered internal until the API is finalized
            function _fetchData(connection, body, processFunc) {
                // How many times to retry in the event of a throttle
                const attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
                logger$6.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
                const throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
                const throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
                logger$6.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
                const headers = {};
                let url = null;
                // @TODO: Allow ConnectionInfo to override some of these values
                const options = {
                    method: "GET",
                };
                let allow304 = false;
                let timeout = 2 * 60 * 1000;
                if (typeof (connection) === "string") {
                    url = connection;
                }
                else if (typeof (connection) === "object") {
                    if (connection == null || connection.url == null) {
                        logger$6.throwArgumentError("missing URL", "connection.url", connection);
                    }
                    url = connection.url;
                    if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
                        timeout = connection.timeout;
                    }
                    if (connection.headers) {
                        for (const key in connection.headers) {
                            headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                            if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                                allow304 = true;
                            }
                        }
                    }
                    options.allowGzip = !!connection.allowGzip;
                    if (connection.user != null && connection.password != null) {
                        if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                            logger$6.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
                        }
                        const authorization = connection.user + ":" + connection.password;
                        headers["authorization"] = {
                            key: "Authorization",
                            value: "Basic " + encode$8(toUtf8Bytes(authorization))
                        };
                    }
                }
                const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
                const dataMatch = ((url) ? url.match(reData) : null);
                if (dataMatch) {
                    try {
                        const response = {
                            statusCode: 200,
                            statusMessage: "OK",
                            headers: { "content-type": dataMatch[1] },
                            body: decode$7(dataMatch[2])
                        };
                        let result = response.body;
                        if (processFunc) {
                            result = processFunc(response.body, response);
                        }
                        return Promise.resolve(result);
                    }
                    catch (error) {
                        logger$6.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                            body: bodyify(dataMatch[1], dataMatch[2]),
                            error: error,
                            requestBody: null,
                            requestMethod: "GET",
                            url: url
                        });
                    }
                }
                if (body) {
                    options.method = "POST";
                    options.body = body;
                    if (headers["content-type"] == null) {
                        headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
                    }
                    if (headers["content-length"] == null) {
                        headers["content-length"] = { key: "Content-Length", value: String(body.length) };
                    }
                }
                const flatHeaders = {};
                Object.keys(headers).forEach((key) => {
                    const header = headers[key];
                    flatHeaders[header.key] = header.value;
                });
                options.headers = flatHeaders;
                const runningTimeout = (function () {
                    let timer = null;
                    const promise = new Promise(function (resolve, reject) {
                        if (timeout) {
                            timer = setTimeout(() => {
                                if (timer == null) {
                                    return;
                                }
                                timer = null;
                                reject(logger$6.makeError("timeout", Logger.errors.TIMEOUT, {
                                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                    requestMethod: options.method,
                                    timeout: timeout,
                                    url: url
                                }));
                            }, timeout);
                        }
                    });
                    const cancel = function () {
                        if (timer == null) {
                            return;
                        }
                        clearTimeout(timer);
                        timer = null;
                    };
                    return { promise, cancel };
                })();
                const runningFetch = (function () {
                    return __awaiter$2(this, void 0, void 0, function* () {
                        for (let attempt = 0; attempt < attemptLimit; attempt++) {
                            let response = null;
                            try {
                                response = yield getUrl(url, options);
                                if (attempt < attemptLimit) {
                                    if (response.statusCode === 301 || response.statusCode === 302) {
                                        // Redirection; for now we only support absolute locataions
                                        const location = response.headers.location || "";
                                        if (options.method === "GET" && location.match(/^https:/)) {
                                            url = response.headers.location;
                                            continue;
                                        }
                                    }
                                    else if (response.statusCode === 429) {
                                        // Exponential back-off throttling
                                        let tryAgain = true;
                                        if (throttleCallback) {
                                            tryAgain = yield throttleCallback(attempt, url);
                                        }
                                        if (tryAgain) {
                                            let stall = 0;
                                            const retryAfter = response.headers["retry-after"];
                                            if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                                stall = parseInt(retryAfter) * 1000;
                                            }
                                            else {
                                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                            }
                                            //console.log("Stalling 429");
                                            yield staller(stall);
                                            continue;
                                        }
                                    }
                                }
                            }
                            catch (error) {
                                response = error.response;
                                if (response == null) {
                                    runningTimeout.cancel();
                                    logger$6.throwError("missing response", Logger.errors.SERVER_ERROR, {
                                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                        requestMethod: options.method,
                                        serverError: error,
                                        url: url
                                    });
                                }
                            }
                            let body = response.body;
                            if (allow304 && response.statusCode === 304) {
                                body = null;
                            }
                            else if (response.statusCode < 200 || response.statusCode >= 300) {
                                runningTimeout.cancel();
                                logger$6.throwError("bad response", Logger.errors.SERVER_ERROR, {
                                    status: response.statusCode,
                                    headers: response.headers,
                                    body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                    requestMethod: options.method,
                                    url: url
                                });
                            }
                            if (processFunc) {
                                try {
                                    const result = yield processFunc(body, response);
                                    runningTimeout.cancel();
                                    return result;
                                }
                                catch (error) {
                                    // Allow the processFunc to trigger a throttle
                                    if (error.throttleRetry && attempt < attemptLimit) {
                                        let tryAgain = true;
                                        if (throttleCallback) {
                                            tryAgain = yield throttleCallback(attempt, url);
                                        }
                                        if (tryAgain) {
                                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                            //console.log("Stalling callback");
                                            yield staller(timeout);
                                            continue;
                                        }
                                    }
                                    runningTimeout.cancel();
                                    logger$6.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                                        body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                                        error: error,
                                        requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                        requestMethod: options.method,
                                        url: url
                                    });
                                }
                            }
                            runningTimeout.cancel();
                            // If we had a processFunc, it either returned a T or threw above.
                            // The "body" is now a Uint8Array.
                            return body;
                        }
                        return logger$6.throwError("failed response", Logger.errors.SERVER_ERROR, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            url: url
                        });
                    });
                })();
                return Promise.race([runningTimeout.promise, runningFetch]);
            }
            function fetchJson(connection, json, processFunc) {
                let processJsonFunc = (value, response) => {
                    let result = null;
                    if (value != null) {
                        try {
                            result = JSON.parse(toUtf8String(value));
                        }
                        catch (error) {
                            logger$6.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
                                body: value,
                                error: error
                            });
                        }
                    }
                    if (processFunc) {
                        result = processFunc(result, response);
                    }
                    return result;
                };
                // If we have json to send, we must
                // - add content-type of application/json (unless already overridden)
                // - convert the json to bytes
                let body = null;
                if (json != null) {
                    body = toUtf8Bytes(json);
                    // Create a connection with the content-type set for JSON
                    const updated = (typeof (connection) === "string") ? ({ url: connection }) : shallowCopy(connection);
                    if (updated.headers) {
                        const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === "content-type")).length) !== 0;
                        if (!hasContentType) {
                            updated.headers = shallowCopy(updated.headers);
                            updated.headers["content-type"] = "application/json";
                        }
                    }
                    else {
                        updated.headers = { "content-type": "application/json" };
                    }
                    connection = updated;
                }
                return _fetchData(connection, body, processJsonFunc);
            }
            function poll(func, options) {
                if (!options) {
                    options = {};
                }
                options = shallowCopy(options);
                if (options.floor == null) {
                    options.floor = 0;
                }
                if (options.ceiling == null) {
                    options.ceiling = 10000;
                }
                if (options.interval == null) {
                    options.interval = 250;
                }
                return new Promise(function (resolve, reject) {
                    let timer = null;
                    let done = false;
                    // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
                    const cancel = () => {
                        if (done) {
                            return false;
                        }
                        done = true;
                        if (timer) {
                            clearTimeout(timer);
                        }
                        return true;
                    };
                    if (options.timeout) {
                        timer = setTimeout(() => {
                            if (cancel()) {
                                reject(new Error("timeout"));
                            }
                        }, options.timeout);
                    }
                    const retryLimit = options.retryLimit;
                    let attempt = 0;
                    function check() {
                        return func().then(function (result) {
                            // If we have a result, or are allowed null then we're done
                            if (result !== undefined) {
                                if (cancel()) {
                                    resolve(result);
                                }
                            }
                            else if (options.oncePoll) {
                                options.oncePoll.once("poll", check);
                            }
                            else if (options.onceBlock) {
                                options.onceBlock.once("block", check);
                                // Otherwise, exponential back-off (up to 10s) our next request
                            }
                            else if (!done) {
                                attempt++;
                                if (attempt > retryLimit) {
                                    if (cancel()) {
                                        reject(new Error("retry limit reached"));
                                    }
                                    return;
                                }
                                let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                if (timeout < options.floor) {
                                    timeout = options.floor;
                                }
                                if (timeout > options.ceiling) {
                                    timeout = options.ceiling;
                                }
                                setTimeout(check, timeout);
                            }
                            return null;
                        }, function (error) {
                            if (cancel()) {
                                reject(error);
                            }
                        });
                    }
                    check();
                });
            }

            var lib_esm$2 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        _fetchData: _fetchData,
                        fetchJson: fetchJson,
                        poll: poll
            });

            var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

            // pre-compute lookup table
            var ALPHABET_MAP = {};
            for (var z$1 = 0; z$1 < ALPHABET.length; z$1++) {
              var x$1 = ALPHABET.charAt(z$1);

              if (ALPHABET_MAP[x$1] !== undefined) throw new TypeError(x$1 + ' is ambiguous')
              ALPHABET_MAP[x$1] = z$1;
            }

            function polymodStep (pre) {
              var b = pre >> 25;
              return ((pre & 0x1FFFFFF) << 5) ^
                (-((b >> 0) & 1) & 0x3b6a57b2) ^
                (-((b >> 1) & 1) & 0x26508e6d) ^
                (-((b >> 2) & 1) & 0x1ea119fa) ^
                (-((b >> 3) & 1) & 0x3d4233dd) ^
                (-((b >> 4) & 1) & 0x2a1462b3)
            }

            function prefixChk (prefix) {
              var chk = 1;
              for (var i = 0; i < prefix.length; ++i) {
                var c = prefix.charCodeAt(i);
                if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

                chk = polymodStep(chk) ^ (c >> 5);
              }
              chk = polymodStep(chk);

              for (i = 0; i < prefix.length; ++i) {
                var v = prefix.charCodeAt(i);
                chk = polymodStep(chk) ^ (v & 0x1f);
              }
              return chk
            }

            function encode$7 (prefix, words, LIMIT) {
              LIMIT = LIMIT || 90;
              if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

              prefix = prefix.toLowerCase();

              // determine chk mod
              var chk = prefixChk(prefix);
              if (typeof chk === 'string') throw new Error(chk)

              var result = prefix + '1';
              for (var i = 0; i < words.length; ++i) {
                var x = words[i];
                if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

                chk = polymodStep(chk) ^ x;
                result += ALPHABET.charAt(x);
              }

              for (i = 0; i < 6; ++i) {
                chk = polymodStep(chk);
              }
              chk ^= 1;

              for (i = 0; i < 6; ++i) {
                var v = (chk >> ((5 - i) * 5)) & 0x1f;
                result += ALPHABET.charAt(v);
              }

              return result
            }

            function __decode (str, LIMIT) {
              LIMIT = LIMIT || 90;
              if (str.length < 8) return str + ' too short'
              if (str.length > LIMIT) return 'Exceeds length limit'

              // don't allow mixed case
              var lowered = str.toLowerCase();
              var uppered = str.toUpperCase();
              if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
              str = lowered;

              var split = str.lastIndexOf('1');
              if (split === -1) return 'No separator character for ' + str
              if (split === 0) return 'Missing prefix for ' + str

              var prefix = str.slice(0, split);
              var wordChars = str.slice(split + 1);
              if (wordChars.length < 6) return 'Data too short'

              var chk = prefixChk(prefix);
              if (typeof chk === 'string') return chk

              var words = [];
              for (var i = 0; i < wordChars.length; ++i) {
                var c = wordChars.charAt(i);
                var v = ALPHABET_MAP[c];
                if (v === undefined) return 'Unknown character ' + c
                chk = polymodStep(chk) ^ v;

                // not in the checksum?
                if (i + 6 >= wordChars.length) continue
                words.push(v);
              }

              if (chk !== 1) return 'Invalid checksum for ' + str
              return { prefix: prefix, words: words }
            }

            function decodeUnsafe () {
              var res = __decode.apply(null, arguments);
              if (typeof res === 'object') return res
            }

            function decode$6 (str) {
              var res = __decode.apply(null, arguments);
              if (typeof res === 'object') return res

              throw new Error(res)
            }

            function convert (data, inBits, outBits, pad) {
              var value = 0;
              var bits = 0;
              var maxV = (1 << outBits) - 1;

              var result = [];
              for (var i = 0; i < data.length; ++i) {
                value = (value << inBits) | data[i];
                bits += inBits;

                while (bits >= outBits) {
                  bits -= outBits;
                  result.push((value >> bits) & maxV);
                }
              }

              if (pad) {
                if (bits > 0) {
                  result.push((value << (outBits - bits)) & maxV);
                }
              } else {
                if (bits >= inBits) return 'Excess padding'
                if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
              }

              return result
            }

            function toWordsUnsafe (bytes) {
              var res = convert(bytes, 8, 5, true);
              if (Array.isArray(res)) return res
            }

            function toWords (bytes) {
              var res = convert(bytes, 8, 5, true);
              if (Array.isArray(res)) return res

              throw new Error(res)
            }

            function fromWordsUnsafe (words) {
              var res = convert(words, 5, 8, false);
              if (Array.isArray(res)) return res
            }

            function fromWords (words) {
              var res = convert(words, 5, 8, false);
              if (Array.isArray(res)) return res

              throw new Error(res)
            }

            var bech32 = {
              decodeUnsafe: decodeUnsafe,
              decode: decode$6,
              encode: encode$7,
              toWordsUnsafe: toWordsUnsafe,
              toWords: toWords,
              fromWordsUnsafe: fromWordsUnsafe,
              fromWords: fromWords
            };

            const version$3 = "providers/5.5.2";

            const logger$5 = new Logger(version$3);
            class Formatter {
                constructor() {
                    logger$5.checkNew(new.target, Formatter);
                    this.formats = this.getDefaultFormats();
                }
                getDefaultFormats() {
                    const formats = ({});
                    const address = this.address.bind(this);
                    const bigNumber = this.bigNumber.bind(this);
                    const blockTag = this.blockTag.bind(this);
                    const data = this.data.bind(this);
                    const hash = this.hash.bind(this);
                    const hex = this.hex.bind(this);
                    const number = this.number.bind(this);
                    const type = this.type.bind(this);
                    const strictData = (v) => { return this.data(v, true); };
                    formats.transaction = {
                        hash: hash,
                        type: type,
                        accessList: Formatter.allowNull(this.accessList.bind(this), null),
                        blockHash: Formatter.allowNull(hash, null),
                        blockNumber: Formatter.allowNull(number, null),
                        transactionIndex: Formatter.allowNull(number, null),
                        confirmations: Formatter.allowNull(number, null),
                        from: address,
                        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
                        // must be set
                        gasPrice: Formatter.allowNull(bigNumber),
                        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                        maxFeePerGas: Formatter.allowNull(bigNumber),
                        gasLimit: bigNumber,
                        to: Formatter.allowNull(address, null),
                        value: bigNumber,
                        nonce: number,
                        data: data,
                        r: Formatter.allowNull(this.uint256),
                        s: Formatter.allowNull(this.uint256),
                        v: Formatter.allowNull(number),
                        creates: Formatter.allowNull(address, null),
                        raw: Formatter.allowNull(data),
                    };
                    formats.transactionRequest = {
                        from: Formatter.allowNull(address),
                        nonce: Formatter.allowNull(number),
                        gasLimit: Formatter.allowNull(bigNumber),
                        gasPrice: Formatter.allowNull(bigNumber),
                        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                        maxFeePerGas: Formatter.allowNull(bigNumber),
                        to: Formatter.allowNull(address),
                        value: Formatter.allowNull(bigNumber),
                        data: Formatter.allowNull(strictData),
                        type: Formatter.allowNull(number),
                        accessList: Formatter.allowNull(this.accessList.bind(this), null),
                    };
                    formats.receiptLog = {
                        transactionIndex: number,
                        blockNumber: number,
                        transactionHash: hash,
                        address: address,
                        topics: Formatter.arrayOf(hash),
                        data: data,
                        logIndex: number,
                        blockHash: hash,
                    };
                    formats.receipt = {
                        to: Formatter.allowNull(this.address, null),
                        from: Formatter.allowNull(this.address, null),
                        contractAddress: Formatter.allowNull(address, null),
                        transactionIndex: number,
                        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
                        root: Formatter.allowNull(hex),
                        gasUsed: bigNumber,
                        logsBloom: Formatter.allowNull(data),
                        blockHash: hash,
                        transactionHash: hash,
                        logs: Formatter.arrayOf(this.receiptLog.bind(this)),
                        blockNumber: number,
                        confirmations: Formatter.allowNull(number, null),
                        cumulativeGasUsed: bigNumber,
                        effectiveGasPrice: Formatter.allowNull(bigNumber),
                        status: Formatter.allowNull(number),
                        type: type
                    };
                    formats.block = {
                        hash: hash,
                        parentHash: hash,
                        number: number,
                        timestamp: number,
                        nonce: Formatter.allowNull(hex),
                        difficulty: this.difficulty.bind(this),
                        gasLimit: bigNumber,
                        gasUsed: bigNumber,
                        miner: address,
                        extraData: data,
                        transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
                        baseFeePerGas: Formatter.allowNull(bigNumber)
                    };
                    formats.blockWithTransactions = shallowCopy(formats.block);
                    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
                    formats.filter = {
                        fromBlock: Formatter.allowNull(blockTag, undefined),
                        toBlock: Formatter.allowNull(blockTag, undefined),
                        blockHash: Formatter.allowNull(hash, undefined),
                        address: Formatter.allowNull(address, undefined),
                        topics: Formatter.allowNull(this.topics.bind(this), undefined),
                    };
                    formats.filterLog = {
                        blockNumber: Formatter.allowNull(number),
                        blockHash: Formatter.allowNull(hash),
                        transactionIndex: number,
                        removed: Formatter.allowNull(this.boolean.bind(this)),
                        address: address,
                        data: Formatter.allowFalsish(data, "0x"),
                        topics: Formatter.arrayOf(hash),
                        transactionHash: hash,
                        logIndex: number,
                    };
                    return formats;
                }
                accessList(accessList) {
                    return accessListify(accessList || []);
                }
                // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
                // Strict! Used on input.
                number(number) {
                    if (number === "0x") {
                        return 0;
                    }
                    return BigNumber.from(number).toNumber();
                }
                type(number) {
                    if (number === "0x" || number == null) {
                        return 0;
                    }
                    return BigNumber.from(number).toNumber();
                }
                // Strict! Used on input.
                bigNumber(value) {
                    return BigNumber.from(value);
                }
                // Requires a boolean, "true" or  "false"; returns a boolean
                boolean(value) {
                    if (typeof (value) === "boolean") {
                        return value;
                    }
                    if (typeof (value) === "string") {
                        value = value.toLowerCase();
                        if (value === "true") {
                            return true;
                        }
                        if (value === "false") {
                            return false;
                        }
                    }
                    throw new Error("invalid boolean - " + value);
                }
                hex(value, strict) {
                    if (typeof (value) === "string") {
                        if (!strict && value.substring(0, 2) !== "0x") {
                            value = "0x" + value;
                        }
                        if (isHexString(value)) {
                            return value.toLowerCase();
                        }
                    }
                    return logger$5.throwArgumentError("invalid hash", "value", value);
                }
                data(value, strict) {
                    const result = this.hex(value, strict);
                    if ((result.length % 2) !== 0) {
                        throw new Error("invalid data; odd-length - " + value);
                    }
                    return result;
                }
                // Requires an address
                // Strict! Used on input.
                address(value) {
                    return getAddress(value);
                }
                callAddress(value) {
                    if (!isHexString(value, 32)) {
                        return null;
                    }
                    const address = getAddress(hexDataSlice(value, 12));
                    return (address === AddressZero) ? null : address;
                }
                contractAddress(value) {
                    return getContractAddress(value);
                }
                // Strict! Used on input.
                blockTag(blockTag) {
                    if (blockTag == null) {
                        return "latest";
                    }
                    if (blockTag === "earliest") {
                        return "0x0";
                    }
                    if (blockTag === "latest" || blockTag === "pending") {
                        return blockTag;
                    }
                    if (typeof (blockTag) === "number" || isHexString(blockTag)) {
                        return hexValue(blockTag);
                    }
                    throw new Error("invalid blockTag");
                }
                // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
                hash(value, strict) {
                    const result = this.hex(value, strict);
                    if (hexDataLength(result) !== 32) {
                        return logger$5.throwArgumentError("invalid hash", "value", value);
                    }
                    return result;
                }
                // Returns the difficulty as a number, or if too large (i.e. PoA network) null
                difficulty(value) {
                    if (value == null) {
                        return null;
                    }
                    const v = BigNumber.from(value);
                    try {
                        return v.toNumber();
                    }
                    catch (error) { }
                    return null;
                }
                uint256(value) {
                    if (!isHexString(value)) {
                        throw new Error("invalid uint256");
                    }
                    return hexZeroPad(value, 32);
                }
                _block(value, format) {
                    if (value.author != null && value.miner == null) {
                        value.miner = value.author;
                    }
                    // The difficulty may need to come from _difficulty in recursed blocks
                    const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
                    const result = Formatter.check(format, value);
                    result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));
                    return result;
                }
                block(value) {
                    return this._block(value, this.formats.block);
                }
                blockWithTransactions(value) {
                    return this._block(value, this.formats.blockWithTransactions);
                }
                // Strict! Used on input.
                transactionRequest(value) {
                    return Formatter.check(this.formats.transactionRequest, value);
                }
                transactionResponse(transaction) {
                    // Rename gas to gasLimit
                    if (transaction.gas != null && transaction.gasLimit == null) {
                        transaction.gasLimit = transaction.gas;
                    }
                    // Some clients (TestRPC) do strange things like return 0x0 for the
                    // 0 address; correct this to be a real address
                    if (transaction.to && BigNumber.from(transaction.to).isZero()) {
                        transaction.to = "0x0000000000000000000000000000000000000000";
                    }
                    // Rename input to data
                    if (transaction.input != null && transaction.data == null) {
                        transaction.data = transaction.input;
                    }
                    // If to and creates are empty, populate the creates from the transaction
                    if (transaction.to == null && transaction.creates == null) {
                        transaction.creates = this.contractAddress(transaction);
                    }
                    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
                        transaction.accessList = [];
                    }
                    const result = Formatter.check(this.formats.transaction, transaction);
                    if (transaction.chainId != null) {
                        let chainId = transaction.chainId;
                        if (isHexString(chainId)) {
                            chainId = BigNumber.from(chainId).toNumber();
                        }
                        result.chainId = chainId;
                    }
                    else {
                        let chainId = transaction.networkId;
                        // geth-etc returns chainId
                        if (chainId == null && result.v == null) {
                            chainId = transaction.chainId;
                        }
                        if (isHexString(chainId)) {
                            chainId = BigNumber.from(chainId).toNumber();
                        }
                        if (typeof (chainId) !== "number" && result.v != null) {
                            chainId = (result.v - 35) / 2;
                            if (chainId < 0) {
                                chainId = 0;
                            }
                            chainId = parseInt(chainId);
                        }
                        if (typeof (chainId) !== "number") {
                            chainId = 0;
                        }
                        result.chainId = chainId;
                    }
                    // 0x0000... should actually be null
                    if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
                        result.blockHash = null;
                    }
                    return result;
                }
                transaction(value) {
                    return parse(value);
                }
                receiptLog(value) {
                    return Formatter.check(this.formats.receiptLog, value);
                }
                receipt(value) {
                    const result = Formatter.check(this.formats.receipt, value);
                    // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
                    if (result.root != null) {
                        if (result.root.length <= 4) {
                            // Could be 0x00, 0x0, 0x01 or 0x1
                            const value = BigNumber.from(result.root).toNumber();
                            if (value === 0 || value === 1) {
                                // Make sure if both are specified, they match
                                if (result.status != null && (result.status !== value)) {
                                    logger$5.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                                }
                                result.status = value;
                                delete result.root;
                            }
                            else {
                                logger$5.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                            }
                        }
                        else if (result.root.length !== 66) {
                            // Must be a valid bytes32
                            logger$5.throwArgumentError("invalid root hash", "value.root", result.root);
                        }
                    }
                    if (result.status != null) {
                        result.byzantium = true;
                    }
                    return result;
                }
                topics(value) {
                    if (Array.isArray(value)) {
                        return value.map((v) => this.topics(v));
                    }
                    else if (value != null) {
                        return this.hash(value, true);
                    }
                    return null;
                }
                filter(value) {
                    return Formatter.check(this.formats.filter, value);
                }
                filterLog(value) {
                    return Formatter.check(this.formats.filterLog, value);
                }
                static check(format, object) {
                    const result = {};
                    for (const key in format) {
                        try {
                            const value = format[key](object[key]);
                            if (value !== undefined) {
                                result[key] = value;
                            }
                        }
                        catch (error) {
                            error.checkKey = key;
                            error.checkValue = object[key];
                            throw error;
                        }
                    }
                    return result;
                }
                // if value is null-ish, nullValue is returned
                static allowNull(format, nullValue) {
                    return (function (value) {
                        if (value == null) {
                            return nullValue;
                        }
                        return format(value);
                    });
                }
                // If value is false-ish, replaceValue is returned
                static allowFalsish(format, replaceValue) {
                    return (function (value) {
                        if (!value) {
                            return replaceValue;
                        }
                        return format(value);
                    });
                }
                // Requires an Array satisfying check
                static arrayOf(format) {
                    return (function (array) {
                        if (!Array.isArray(array)) {
                            throw new Error("not an array");
                        }
                        const result = [];
                        array.forEach(function (value) {
                            result.push(format(value));
                        });
                        return result;
                    });
                }
            }

            var __awaiter$1 = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$4 = new Logger(version$3);
            //////////////////////////////
            // Event Serializeing
            function checkTopic(topic) {
                if (topic == null) {
                    return "null";
                }
                if (hexDataLength(topic) !== 32) {
                    logger$4.throwArgumentError("invalid topic", "topic", topic);
                }
                return topic.toLowerCase();
            }
            function serializeTopics(topics) {
                // Remove trailing null AND-topics; they are redundant
                topics = topics.slice();
                while (topics.length > 0 && topics[topics.length - 1] == null) {
                    topics.pop();
                }
                return topics.map((topic) => {
                    if (Array.isArray(topic)) {
                        // Only track unique OR-topics
                        const unique = {};
                        topic.forEach((topic) => {
                            unique[checkTopic(topic)] = true;
                        });
                        // The order of OR-topics does not matter
                        const sorted = Object.keys(unique);
                        sorted.sort();
                        return sorted.join("|");
                    }
                    else {
                        return checkTopic(topic);
                    }
                }).join("&");
            }
            function deserializeTopics(data) {
                if (data === "") {
                    return [];
                }
                return data.split(/&/g).map((topic) => {
                    if (topic === "") {
                        return [];
                    }
                    const comps = topic.split("|").map((topic) => {
                        return ((topic === "null") ? null : topic);
                    });
                    return ((comps.length === 1) ? comps[0] : comps);
                });
            }
            function getEventTag(eventName) {
                if (typeof (eventName) === "string") {
                    eventName = eventName.toLowerCase();
                    if (hexDataLength(eventName) === 32) {
                        return "tx:" + eventName;
                    }
                    if (eventName.indexOf(":") === -1) {
                        return eventName;
                    }
                }
                else if (Array.isArray(eventName)) {
                    return "filter:*:" + serializeTopics(eventName);
                }
                else if (ForkEvent.isForkEvent(eventName)) {
                    logger$4.warn("not implemented");
                    throw new Error("not implemented");
                }
                else if (eventName && typeof (eventName) === "object") {
                    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
                }
                throw new Error("invalid event - " + eventName);
            }
            //////////////////////////////
            // Helper Object
            function getTime() {
                return (new Date()).getTime();
            }
            function stall(duration) {
                return new Promise((resolve) => {
                    setTimeout(resolve, duration);
                });
            }
            //////////////////////////////
            // Provider Object
            /**
             *  EventType
             *   - "block"
             *   - "poll"
             *   - "didPoll"
             *   - "pending"
             *   - "error"
             *   - "network"
             *   - filter
             *   - topics array
             *   - transaction hash
             */
            const PollableEvents = ["block", "network", "pending", "poll"];
            class Event {
                constructor(tag, listener, once) {
                    defineReadOnly(this, "tag", tag);
                    defineReadOnly(this, "listener", listener);
                    defineReadOnly(this, "once", once);
                }
                get event() {
                    switch (this.type) {
                        case "tx":
                            return this.hash;
                        case "filter":
                            return this.filter;
                    }
                    return this.tag;
                }
                get type() {
                    return this.tag.split(":")[0];
                }
                get hash() {
                    const comps = this.tag.split(":");
                    if (comps[0] !== "tx") {
                        return null;
                    }
                    return comps[1];
                }
                get filter() {
                    const comps = this.tag.split(":");
                    if (comps[0] !== "filter") {
                        return null;
                    }
                    const address = comps[1];
                    const topics = deserializeTopics(comps[2]);
                    const filter = {};
                    if (topics.length > 0) {
                        filter.topics = topics;
                    }
                    if (address && address !== "*") {
                        filter.address = address;
                    }
                    return filter;
                }
                pollable() {
                    return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
                }
            }
            // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
            const coinInfos = {
                "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
                "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
                "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
                "60": { symbol: "eth", ilk: "eth" },
                "61": { symbol: "etc", ilk: "eth" },
                "700": { symbol: "xdai", ilk: "eth" },
            };
            function bytes32ify(value) {
                return hexZeroPad(BigNumber.from(value).toHexString(), 32);
            }
            // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
            function base58Encode(data) {
                return Base58.encode(concat$3([data, hexDataSlice(sha256$2(sha256$2(data)), 0, 4)]));
            }
            const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
            const matchers = [
                new RegExp("^(https):/\/(.*)$", "i"),
                new RegExp("^(data):(.*)$", "i"),
                matcherIpfs,
                new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
            ];
            function _parseString(result) {
                try {
                    return toUtf8String(_parseBytes(result));
                }
                catch (error) { }
                return null;
            }
            function _parseBytes(result) {
                if (result === "0x") {
                    return null;
                }
                const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();
                const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
                return hexDataSlice(result, offset + 32, offset + 32 + length);
            }
            // Trim off the ipfs:// prefix and return the default gateway URL
            function getIpfsLink(link) {
                return `https:/\/gateway.ipfs.io/ipfs/${link.substring(7)}`;
            }
            class Resolver {
                // The resolvedAddress is only for creating a ReverseLookup resolver
                constructor(provider, address, name, resolvedAddress) {
                    defineReadOnly(this, "provider", provider);
                    defineReadOnly(this, "name", name);
                    defineReadOnly(this, "address", provider.formatter.address(address));
                    defineReadOnly(this, "_resolvedAddress", resolvedAddress);
                }
                _fetchBytes(selector, parameters) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        // e.g. keccak256("addr(bytes32,uint256)")
                        const tx = {
                            to: this.address,
                            data: hexConcat([selector, namehash(this.name), (parameters || "0x")])
                        };
                        try {
                            return _parseBytes(yield this.provider.call(tx));
                        }
                        catch (error) {
                            if (error.code === Logger.errors.CALL_EXCEPTION) {
                                return null;
                            }
                            return null;
                        }
                    });
                }
                _getAddress(coinType, hexBytes) {
                    const coinInfo = coinInfos[String(coinType)];
                    if (coinInfo == null) {
                        logger$4.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: `getAddress(${coinType})`
                        });
                    }
                    if (coinInfo.ilk === "eth") {
                        return this.provider.formatter.address(hexBytes);
                    }
                    const bytes = arrayify(hexBytes);
                    // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
                    if (coinInfo.p2pkh != null) {
                        const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                        if (p2pkh) {
                            const length = parseInt(p2pkh[1], 16);
                            if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
                                return base58Encode(concat$3([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                            }
                        }
                    }
                    // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
                    if (coinInfo.p2sh != null) {
                        const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                        if (p2sh) {
                            const length = parseInt(p2sh[1], 16);
                            if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
                                return base58Encode(concat$3([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                            }
                        }
                    }
                    // Bech32
                    if (coinInfo.prefix != null) {
                        const length = bytes[1];
                        // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
                        let version = bytes[0];
                        if (version === 0x00) {
                            if (length !== 20 && length !== 32) {
                                version = -1;
                            }
                        }
                        else {
                            version = -1;
                        }
                        if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                            const words = bech32.toWords(bytes.slice(2));
                            words.unshift(version);
                            return bech32.encode(coinInfo.prefix, words);
                        }
                    }
                    return null;
                }
                getAddress(coinType) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        if (coinType == null) {
                            coinType = 60;
                        }
                        // If Ethereum, use the standard `addr(bytes32)`
                        if (coinType === 60) {
                            try {
                                // keccak256("addr(bytes32)")
                                const transaction = {
                                    to: this.address,
                                    data: ("0x3b3b57de" + namehash(this.name).substring(2))
                                };
                                const hexBytes = yield this.provider.call(transaction);
                                // No address
                                if (hexBytes === "0x" || hexBytes === HashZero) {
                                    return null;
                                }
                                return this.provider.formatter.callAddress(hexBytes);
                            }
                            catch (error) {
                                if (error.code === Logger.errors.CALL_EXCEPTION) {
                                    return null;
                                }
                                throw error;
                            }
                        }
                        // keccak256("addr(bytes32,uint256")
                        const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
                        // No address
                        if (hexBytes == null || hexBytes === "0x") {
                            return null;
                        }
                        // Compute the address
                        const address = this._getAddress(coinType, hexBytes);
                        if (address == null) {
                            logger$4.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: `getAddress(${coinType})`,
                                coinType: coinType,
                                data: hexBytes
                            });
                        }
                        return address;
                    });
                }
                getAvatar() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        const linkage = [{ type: "name", content: this.name }];
                        try {
                            // test data for ricmoo.eth
                            //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                            const avatar = yield this.getText("avatar");
                            if (avatar == null) {
                                return null;
                            }
                            for (let i = 0; i < matchers.length; i++) {
                                const match = avatar.match(matchers[i]);
                                if (match == null) {
                                    continue;
                                }
                                const scheme = match[1].toLowerCase();
                                switch (scheme) {
                                    case "https":
                                        linkage.push({ type: "url", content: avatar });
                                        return { linkage, url: avatar };
                                    case "data":
                                        linkage.push({ type: "data", content: avatar });
                                        return { linkage, url: avatar };
                                    case "ipfs":
                                        linkage.push({ type: "ipfs", content: avatar });
                                        return { linkage, url: getIpfsLink(avatar) };
                                    case "erc721":
                                    case "erc1155": {
                                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                                        const selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                                        linkage.push({ type: scheme, content: avatar });
                                        // The owner of this name
                                        const owner = (this._resolvedAddress || (yield this.getAddress()));
                                        const comps = (match[2] || "").split("/");
                                        if (comps.length !== 2) {
                                            return null;
                                        }
                                        const addr = yield this.provider.formatter.address(comps[0]);
                                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                                        // Check that this account owns the token
                                        if (scheme === "erc721") {
                                            // ownerOf(uint256 tokenId)
                                            const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                                                to: addr, data: hexConcat(["0x6352211e", tokenId])
                                            }));
                                            if (owner !== tokenOwner) {
                                                return null;
                                            }
                                            linkage.push({ type: "owner", content: tokenOwner });
                                        }
                                        else if (scheme === "erc1155") {
                                            // balanceOf(address owner, uint256 tokenId)
                                            const balance = BigNumber.from(yield this.provider.call({
                                                to: addr, data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                                            }));
                                            if (balance.isZero()) {
                                                return null;
                                            }
                                            linkage.push({ type: "balance", content: balance.toString() });
                                        }
                                        // Call the token contract for the metadata URL
                                        const tx = {
                                            to: this.provider.formatter.address(comps[0]),
                                            data: hexConcat([selector, tokenId])
                                        };
                                        let metadataUrl = _parseString(yield this.provider.call(tx));
                                        if (metadataUrl == null) {
                                            return null;
                                        }
                                        linkage.push({ type: "metadata-url", content: metadataUrl });
                                        // ERC-1155 allows a generic {id} in the URL
                                        if (scheme === "erc1155") {
                                            metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                            linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                                        }
                                        // Get the token metadata
                                        const metadata = yield fetchJson(metadataUrl);
                                        if (!metadata) {
                                            return null;
                                        }
                                        linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                                        // Pull the image URL out
                                        let imageUrl = metadata.image;
                                        if (typeof (imageUrl) !== "string") {
                                            return null;
                                        }
                                        if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                                            // Allow
                                        }
                                        else {
                                            // Transform IPFS link to gateway
                                            const ipfs = imageUrl.match(matcherIpfs);
                                            if (ipfs == null) {
                                                return null;
                                            }
                                            linkage.push({ type: "url-ipfs", content: imageUrl });
                                            imageUrl = getIpfsLink(imageUrl);
                                        }
                                        linkage.push({ type: "url", content: imageUrl });
                                        return { linkage, url: imageUrl };
                                    }
                                }
                            }
                        }
                        catch (error) { }
                        return null;
                    });
                }
                getContentHash() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        // keccak256("contenthash()")
                        const hexBytes = yield this._fetchBytes("0xbc1c58d1");
                        // No contenthash
                        if (hexBytes == null || hexBytes === "0x") {
                            return null;
                        }
                        // IPFS (CID: 1, Type: DAG-PB)
                        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                        if (ipfs) {
                            const length = parseInt(ipfs[3], 16);
                            if (ipfs[4].length === length * 2) {
                                return "ipfs:/\/" + Base58.encode("0x" + ipfs[1]);
                            }
                        }
                        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
                        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                        if (swarm) {
                            if (swarm[1].length === (32 * 2)) {
                                return "bzz:/\/" + swarm[1];
                            }
                        }
                        return logger$4.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "getContentHash()",
                            data: hexBytes
                        });
                    });
                }
                getText(key) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        // The key encoded as parameter to fetchBytes
                        let keyBytes = toUtf8Bytes(key);
                        // The nodehash consumes the first slot, so the string pointer targets
                        // offset 64, with the length at offset 64 and data starting at offset 96
                        keyBytes = concat$3([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                        // Pad to word-size (32 bytes)
                        if ((keyBytes.length % 32) !== 0) {
                            keyBytes = concat$3([keyBytes, hexZeroPad("0x", 32 - (key.length % 32))]);
                        }
                        const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
                        if (hexBytes == null || hexBytes === "0x") {
                            return null;
                        }
                        return toUtf8String(hexBytes);
                    });
                }
            }
            let defaultFormatter = null;
            let nextPollId = 1;
            class BaseProvider extends Provider$1 {
                /**
                 *  ready
                 *
                 *  A Promise<Network> that resolves only once the provider is ready.
                 *
                 *  Sub-classes that call the super with a network without a chainId
                 *  MUST set this. Standard named networks have a known chainId.
                 *
                 */
                constructor(network) {
                    logger$4.checkNew(new.target, Provider$1);
                    super();
                    // Events being listened to
                    this._events = [];
                    this._emitted = { block: -2 };
                    this.formatter = new.target.getFormatter();
                    // If network is any, this Provider allows the underlying
                    // network to change dynamically, and we auto-detect the
                    // current network
                    defineReadOnly(this, "anyNetwork", (network === "any"));
                    if (this.anyNetwork) {
                        network = this.detectNetwork();
                    }
                    if (network instanceof Promise) {
                        this._networkPromise = network;
                        // Squash any "unhandled promise" errors; that do not need to be handled
                        network.catch((error) => { });
                        // Trigger initial network setting (async)
                        this._ready().catch((error) => { });
                    }
                    else {
                        const knownNetwork = getStatic(new.target, "getNetwork")(network);
                        if (knownNetwork) {
                            defineReadOnly(this, "_network", knownNetwork);
                            this.emit("network", knownNetwork, null);
                        }
                        else {
                            logger$4.throwArgumentError("invalid network", "network", network);
                        }
                    }
                    this._maxInternalBlockNumber = -1024;
                    this._lastBlockNumber = -2;
                    this._pollingInterval = 4000;
                    this._fastQueryDate = 0;
                }
                _ready() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        if (this._network == null) {
                            let network = null;
                            if (this._networkPromise) {
                                try {
                                    network = yield this._networkPromise;
                                }
                                catch (error) { }
                            }
                            // Try the Provider's network detection (this MUST throw if it cannot)
                            if (network == null) {
                                network = yield this.detectNetwork();
                            }
                            // This should never happen; every Provider sub-class should have
                            // suggested a network by here (or have thrown).
                            if (!network) {
                                logger$4.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                            }
                            // Possible this call stacked so do not call defineReadOnly again
                            if (this._network == null) {
                                if (this.anyNetwork) {
                                    this._network = network;
                                }
                                else {
                                    defineReadOnly(this, "_network", network);
                                }
                                this.emit("network", network, null);
                            }
                        }
                        return this._network;
                    });
                }
                // This will always return the most recently established network.
                // For "any", this can change (a "network" event is emitted before
                // any change is reflected); otherwise this cannot change
                get ready() {
                    return poll(() => {
                        return this._ready().then((network) => {
                            return network;
                        }, (error) => {
                            // If the network isn't running yet, we will wait
                            if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                                return undefined;
                            }
                            throw error;
                        });
                    });
                }
                // @TODO: Remove this and just create a singleton formatter
                static getFormatter() {
                    if (defaultFormatter == null) {
                        defaultFormatter = new Formatter();
                    }
                    return defaultFormatter;
                }
                // @TODO: Remove this and just use getNetwork
                static getNetwork(network) {
                    return getNetwork((network == null) ? "homestead" : network);
                }
                // Fetches the blockNumber, but will reuse any result that is less
                // than maxAge old or has been requested since the last request
                _getInternalBlockNumber(maxAge) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this._ready();
                        // Allowing stale data up to maxAge old
                        if (maxAge > 0) {
                            // While there are pending internal block requests...
                            while (this._internalBlockNumber) {
                                // ..."remember" which fetch we started with
                                const internalBlockNumber = this._internalBlockNumber;
                                try {
                                    // Check the result is not too stale
                                    const result = yield internalBlockNumber;
                                    if ((getTime() - result.respTime) <= maxAge) {
                                        return result.blockNumber;
                                    }
                                    // Too old; fetch a new value
                                    break;
                                }
                                catch (error) {
                                    // The fetch rejected; if we are the first to get the
                                    // rejection, drop through so we replace it with a new
                                    // fetch; all others blocked will then get that fetch
                                    // which won't match the one they "remembered" and loop
                                    if (this._internalBlockNumber === internalBlockNumber) {
                                        break;
                                    }
                                }
                            }
                        }
                        const reqTime = getTime();
                        const checkInternalBlockNumber = resolveProperties({
                            blockNumber: this.perform("getBlockNumber", {}),
                            networkError: this.getNetwork().then((network) => (null), (error) => (error))
                        }).then(({ blockNumber, networkError }) => {
                            if (networkError) {
                                // Unremember this bad internal block number
                                if (this._internalBlockNumber === checkInternalBlockNumber) {
                                    this._internalBlockNumber = null;
                                }
                                throw networkError;
                            }
                            const respTime = getTime();
                            blockNumber = BigNumber.from(blockNumber).toNumber();
                            if (blockNumber < this._maxInternalBlockNumber) {
                                blockNumber = this._maxInternalBlockNumber;
                            }
                            this._maxInternalBlockNumber = blockNumber;
                            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                            return { blockNumber, reqTime, respTime };
                        });
                        this._internalBlockNumber = checkInternalBlockNumber;
                        // Swallow unhandled exceptions; if needed they are handled else where
                        checkInternalBlockNumber.catch((error) => {
                            // Don't null the dead (rejected) fetch, if it has already been updated
                            if (this._internalBlockNumber === checkInternalBlockNumber) {
                                this._internalBlockNumber = null;
                            }
                        });
                        return (yield checkInternalBlockNumber).blockNumber;
                    });
                }
                poll() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        const pollId = nextPollId++;
                        // Track all running promises, so we can trigger a post-poll once they are complete
                        const runners = [];
                        let blockNumber = null;
                        try {
                            blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
                        }
                        catch (error) {
                            this.emit("error", error);
                            return;
                        }
                        this._setFastBlockNumber(blockNumber);
                        // Emit a poll event after we have the latest (fast) block number
                        this.emit("poll", pollId, blockNumber);
                        // If the block has not changed, meh.
                        if (blockNumber === this._lastBlockNumber) {
                            this.emit("didPoll", pollId);
                            return;
                        }
                        // First polling cycle, trigger a "block" events
                        if (this._emitted.block === -2) {
                            this._emitted.block = blockNumber - 1;
                        }
                        if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                            logger$4.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                            this.emit("error", logger$4.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
                                blockNumber: blockNumber,
                                event: "blockSkew",
                                previousBlockNumber: this._emitted.block
                            }));
                            this.emit("block", blockNumber);
                        }
                        else {
                            // Notify all listener for each block that has passed
                            for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
                                this.emit("block", i);
                            }
                        }
                        // The emitted block was updated, check for obsolete events
                        if (this._emitted.block !== blockNumber) {
                            this._emitted.block = blockNumber;
                            Object.keys(this._emitted).forEach((key) => {
                                // The block event does not expire
                                if (key === "block") {
                                    return;
                                }
                                // The block we were at when we emitted this event
                                const eventBlockNumber = this._emitted[key];
                                // We cannot garbage collect pending transactions or blocks here
                                // They should be garbage collected by the Provider when setting
                                // "pending" events
                                if (eventBlockNumber === "pending") {
                                    return;
                                }
                                // Evict any transaction hashes or block hashes over 12 blocks
                                // old, since they should not return null anyways
                                if (blockNumber - eventBlockNumber > 12) {
                                    delete this._emitted[key];
                                }
                            });
                        }
                        // First polling cycle
                        if (this._lastBlockNumber === -2) {
                            this._lastBlockNumber = blockNumber - 1;
                        }
                        // Find all transaction hashes we are waiting on
                        this._events.forEach((event) => {
                            switch (event.type) {
                                case "tx": {
                                    const hash = event.hash;
                                    let runner = this.getTransactionReceipt(hash).then((receipt) => {
                                        if (!receipt || receipt.blockNumber == null) {
                                            return null;
                                        }
                                        this._emitted["t:" + hash] = receipt.blockNumber;
                                        this.emit(hash, receipt);
                                        return null;
                                    }).catch((error) => { this.emit("error", error); });
                                    runners.push(runner);
                                    break;
                                }
                                case "filter": {
                                    const filter = event.filter;
                                    filter.fromBlock = this._lastBlockNumber + 1;
                                    filter.toBlock = blockNumber;
                                    const runner = this.getLogs(filter).then((logs) => {
                                        if (logs.length === 0) {
                                            return;
                                        }
                                        logs.forEach((log) => {
                                            this._emitted["b:" + log.blockHash] = log.blockNumber;
                                            this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                            this.emit(filter, log);
                                        });
                                    }).catch((error) => { this.emit("error", error); });
                                    runners.push(runner);
                                    break;
                                }
                            }
                        });
                        this._lastBlockNumber = blockNumber;
                        // Once all events for this loop have been processed, emit "didPoll"
                        Promise.all(runners).then(() => {
                            this.emit("didPoll", pollId);
                        }).catch((error) => { this.emit("error", error); });
                        return;
                    });
                }
                // Deprecated; do not use this
                resetEventsBlock(blockNumber) {
                    this._lastBlockNumber = blockNumber - 1;
                    if (this.polling) {
                        this.poll();
                    }
                }
                get network() {
                    return this._network;
                }
                // This method should query the network if the underlying network
                // can change, such as when connected to a JSON-RPC backend
                detectNetwork() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        return logger$4.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "provider.detectNetwork"
                        });
                    });
                }
                getNetwork() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        const network = yield this._ready();
                        // Make sure we are still connected to the same network; this is
                        // only an external call for backends which can have the underlying
                        // network change spontaneously
                        const currentNetwork = yield this.detectNetwork();
                        if (network.chainId !== currentNetwork.chainId) {
                            // We are allowing network changes, things can get complex fast;
                            // make sure you know what you are doing if you use "any"
                            if (this.anyNetwork) {
                                this._network = currentNetwork;
                                // Reset all internal block number guards and caches
                                this._lastBlockNumber = -2;
                                this._fastBlockNumber = null;
                                this._fastBlockNumberPromise = null;
                                this._fastQueryDate = 0;
                                this._emitted.block = -2;
                                this._maxInternalBlockNumber = -1024;
                                this._internalBlockNumber = null;
                                // The "network" event MUST happen before this method resolves
                                // so any events have a chance to unregister, so we stall an
                                // additional event loop before returning from /this/ call
                                this.emit("network", currentNetwork, network);
                                yield stall(0);
                                return this._network;
                            }
                            const error = logger$4.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
                                event: "changed",
                                network: network,
                                detectedNetwork: currentNetwork
                            });
                            this.emit("error", error);
                            throw error;
                        }
                        return network;
                    });
                }
                get blockNumber() {
                    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
                        this._setFastBlockNumber(blockNumber);
                    }, (error) => { });
                    return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
                }
                get polling() {
                    return (this._poller != null);
                }
                set polling(value) {
                    if (value && !this._poller) {
                        this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);
                        if (!this._bootstrapPoll) {
                            this._bootstrapPoll = setTimeout(() => {
                                this.poll();
                                // We block additional polls until the polling interval
                                // is done, to prevent overwhelming the poll function
                                this._bootstrapPoll = setTimeout(() => {
                                    // If polling was disabled, something may require a poke
                                    // since starting the bootstrap poll and it was disabled
                                    if (!this._poller) {
                                        this.poll();
                                    }
                                    // Clear out the bootstrap so we can do another
                                    this._bootstrapPoll = null;
                                }, this.pollingInterval);
                            }, 0);
                        }
                    }
                    else if (!value && this._poller) {
                        clearInterval(this._poller);
                        this._poller = null;
                    }
                }
                get pollingInterval() {
                    return this._pollingInterval;
                }
                set pollingInterval(value) {
                    if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
                        throw new Error("invalid polling interval");
                    }
                    this._pollingInterval = value;
                    if (this._poller) {
                        clearInterval(this._poller);
                        this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);
                    }
                }
                _getFastBlockNumber() {
                    const now = getTime();
                    // Stale block number, request a newer value
                    if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
                        this._fastQueryDate = now;
                        this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
                            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                                this._fastBlockNumber = blockNumber;
                            }
                            return this._fastBlockNumber;
                        });
                    }
                    return this._fastBlockNumberPromise;
                }
                _setFastBlockNumber(blockNumber) {
                    // Older block, maybe a stale request
                    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
                        return;
                    }
                    // Update the time we updated the blocknumber
                    this._fastQueryDate = getTime();
                    // Newer block number, use  it
                    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                        this._fastBlockNumber = blockNumber;
                        this._fastBlockNumberPromise = Promise.resolve(blockNumber);
                    }
                }
                waitForTransaction(transactionHash, confirmations, timeout) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);
                    });
                }
                _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        const receipt = yield this.getTransactionReceipt(transactionHash);
                        // Receipt is already good
                        if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                            return receipt;
                        }
                        // Poll until the receipt is good...
                        return new Promise((resolve, reject) => {
                            const cancelFuncs = [];
                            let done = false;
                            const alreadyDone = function () {
                                if (done) {
                                    return true;
                                }
                                done = true;
                                cancelFuncs.forEach((func) => { func(); });
                                return false;
                            };
                            const minedHandler = (receipt) => {
                                if (receipt.confirmations < confirmations) {
                                    return;
                                }
                                if (alreadyDone()) {
                                    return;
                                }
                                resolve(receipt);
                            };
                            this.on(transactionHash, minedHandler);
                            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });
                            if (replaceable) {
                                let lastBlockNumber = replaceable.startBlock;
                                let scannedBlock = null;
                                const replaceHandler = (blockNumber) => __awaiter$1(this, void 0, void 0, function* () {
                                    if (done) {
                                        return;
                                    }
                                    // Wait 1 second; this is only used in the case of a fault, so
                                    // we will trade off a little bit of latency for more consistent
                                    // results and fewer JSON-RPC calls
                                    yield stall(1000);
                                    this.getTransactionCount(replaceable.from).then((nonce) => __awaiter$1(this, void 0, void 0, function* () {
                                        if (done) {
                                            return;
                                        }
                                        if (nonce <= replaceable.nonce) {
                                            lastBlockNumber = blockNumber;
                                        }
                                        else {
                                            // First check if the transaction was mined
                                            {
                                                const mined = yield this.getTransaction(transactionHash);
                                                if (mined && mined.blockNumber != null) {
                                                    return;
                                                }
                                            }
                                            // First time scanning. We start a little earlier for some
                                            // wiggle room here to handle the eventually consistent nature
                                            // of blockchain (e.g. the getTransactionCount was for a
                                            // different block)
                                            if (scannedBlock == null) {
                                                scannedBlock = lastBlockNumber - 3;
                                                if (scannedBlock < replaceable.startBlock) {
                                                    scannedBlock = replaceable.startBlock;
                                                }
                                            }
                                            while (scannedBlock <= blockNumber) {
                                                if (done) {
                                                    return;
                                                }
                                                const block = yield this.getBlockWithTransactions(scannedBlock);
                                                for (let ti = 0; ti < block.transactions.length; ti++) {
                                                    const tx = block.transactions[ti];
                                                    // Successfully mined!
                                                    if (tx.hash === transactionHash) {
                                                        return;
                                                    }
                                                    // Matches our transaction from and nonce; its a replacement
                                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                        if (done) {
                                                            return;
                                                        }
                                                        // Get the receipt of the replacement
                                                        const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                                                        // Already resolved or rejected (prolly a timeout)
                                                        if (alreadyDone()) {
                                                            return;
                                                        }
                                                        // The reason we were replaced
                                                        let reason = "replaced";
                                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                            reason = "repriced";
                                                        }
                                                        else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                            reason = "cancelled";
                                                        }
                                                        // Explain why we were replaced
                                                        reject(logger$4.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                                                            cancelled: (reason === "replaced" || reason === "cancelled"),
                                                            reason,
                                                            replacement: this._wrapTransaction(tx),
                                                            hash: transactionHash,
                                                            receipt
                                                        }));
                                                        return;
                                                    }
                                                }
                                                scannedBlock++;
                                            }
                                        }
                                        if (done) {
                                            return;
                                        }
                                        this.once("block", replaceHandler);
                                    }), (error) => {
                                        if (done) {
                                            return;
                                        }
                                        this.once("block", replaceHandler);
                                    });
                                });
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                                cancelFuncs.push(() => {
                                    this.removeListener("block", replaceHandler);
                                });
                            }
                            if (typeof (timeout) === "number" && timeout > 0) {
                                const timer = setTimeout(() => {
                                    if (alreadyDone()) {
                                        return;
                                    }
                                    reject(logger$4.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout: timeout }));
                                }, timeout);
                                if (timer.unref) {
                                    timer.unref();
                                }
                                cancelFuncs.push(() => { clearTimeout(timer); });
                            }
                        });
                    });
                }
                getBlockNumber() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        return this._getInternalBlockNumber(0);
                    });
                }
                getGasPrice() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const result = yield this.perform("getGasPrice", {});
                        try {
                            return BigNumber.from(result);
                        }
                        catch (error) {
                            return logger$4.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                                method: "getGasPrice",
                                result, error
                            });
                        }
                    });
                }
                getBalance(addressOrName, blockTag) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const params = yield resolveProperties({
                            address: this._getAddress(addressOrName),
                            blockTag: this._getBlockTag(blockTag)
                        });
                        const result = yield this.perform("getBalance", params);
                        try {
                            return BigNumber.from(result);
                        }
                        catch (error) {
                            return logger$4.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                                method: "getBalance",
                                params, result, error
                            });
                        }
                    });
                }
                getTransactionCount(addressOrName, blockTag) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const params = yield resolveProperties({
                            address: this._getAddress(addressOrName),
                            blockTag: this._getBlockTag(blockTag)
                        });
                        const result = yield this.perform("getTransactionCount", params);
                        try {
                            return BigNumber.from(result).toNumber();
                        }
                        catch (error) {
                            return logger$4.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                                method: "getTransactionCount",
                                params, result, error
                            });
                        }
                    });
                }
                getCode(addressOrName, blockTag) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const params = yield resolveProperties({
                            address: this._getAddress(addressOrName),
                            blockTag: this._getBlockTag(blockTag)
                        });
                        const result = yield this.perform("getCode", params);
                        try {
                            return hexlify(result);
                        }
                        catch (error) {
                            return logger$4.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                                method: "getCode",
                                params, result, error
                            });
                        }
                    });
                }
                getStorageAt(addressOrName, position, blockTag) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const params = yield resolveProperties({
                            address: this._getAddress(addressOrName),
                            blockTag: this._getBlockTag(blockTag),
                            position: Promise.resolve(position).then((p) => hexValue(p))
                        });
                        const result = yield this.perform("getStorageAt", params);
                        try {
                            return hexlify(result);
                        }
                        catch (error) {
                            return logger$4.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                                method: "getStorageAt",
                                params, result, error
                            });
                        }
                    });
                }
                // This should be called by any subclass wrapping a TransactionResponse
                _wrapTransaction(tx, hash, startBlock) {
                    if (hash != null && hexDataLength(hash) !== 32) {
                        throw new Error("invalid response - sendTransaction");
                    }
                    const result = tx;
                    // Check the hash we expect is the same as the hash the server reported
                    if (hash != null && tx.hash !== hash) {
                        logger$4.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
                    }
                    result.wait = (confirms, timeout) => __awaiter$1(this, void 0, void 0, function* () {
                        if (confirms == null) {
                            confirms = 1;
                        }
                        if (timeout == null) {
                            timeout = 0;
                        }
                        // Get the details to detect replacement
                        let replacement = undefined;
                        if (confirms !== 0 && startBlock != null) {
                            replacement = {
                                data: tx.data,
                                from: tx.from,
                                nonce: tx.nonce,
                                to: tx.to,
                                value: tx.value,
                                startBlock
                            };
                        }
                        const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                        if (receipt == null && confirms === 0) {
                            return null;
                        }
                        // No longer pending, allow the polling loop to garbage collect this
                        this._emitted["t:" + tx.hash] = receipt.blockNumber;
                        if (receipt.status === 0) {
                            logger$4.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
                                transactionHash: tx.hash,
                                transaction: tx,
                                receipt: receipt
                            });
                        }
                        return receipt;
                    });
                    return result;
                }
                sendTransaction(signedTransaction) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));
                        const tx = this.formatter.transaction(signedTransaction);
                        if (tx.confirmations == null) {
                            tx.confirmations = 0;
                        }
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        try {
                            const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
                            return this._wrapTransaction(tx, hash, blockNumber);
                        }
                        catch (error) {
                            error.transaction = tx;
                            error.transactionHash = tx.hash;
                            throw error;
                        }
                    });
                }
                _getTransactionRequest(transaction) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        const values = yield transaction;
                        const tx = {};
                        ["from", "to"].forEach((key) => {
                            if (values[key] == null) {
                                return;
                            }
                            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));
                        });
                        ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key) => {
                            if (values[key] == null) {
                                return;
                            }
                            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));
                        });
                        ["type"].forEach((key) => {
                            if (values[key] == null) {
                                return;
                            }
                            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));
                        });
                        if (values.accessList) {
                            tx.accessList = this.formatter.accessList(values.accessList);
                        }
                        ["data"].forEach((key) => {
                            if (values[key] == null) {
                                return;
                            }
                            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));
                        });
                        return this.formatter.transactionRequest(yield resolveProperties(tx));
                    });
                }
                _getFilter(filter) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        filter = yield filter;
                        const result = {};
                        if (filter.address != null) {
                            result.address = this._getAddress(filter.address);
                        }
                        ["blockHash", "topics"].forEach((key) => {
                            if (filter[key] == null) {
                                return;
                            }
                            result[key] = filter[key];
                        });
                        ["fromBlock", "toBlock"].forEach((key) => {
                            if (filter[key] == null) {
                                return;
                            }
                            result[key] = this._getBlockTag(filter[key]);
                        });
                        return this.formatter.filter(yield resolveProperties(result));
                    });
                }
                call(transaction, blockTag) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const params = yield resolveProperties({
                            transaction: this._getTransactionRequest(transaction),
                            blockTag: this._getBlockTag(blockTag)
                        });
                        const result = yield this.perform("call", params);
                        try {
                            return hexlify(result);
                        }
                        catch (error) {
                            return logger$4.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                                method: "call",
                                params, result, error
                            });
                        }
                    });
                }
                estimateGas(transaction) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const params = yield resolveProperties({
                            transaction: this._getTransactionRequest(transaction)
                        });
                        const result = yield this.perform("estimateGas", params);
                        try {
                            return BigNumber.from(result);
                        }
                        catch (error) {
                            return logger$4.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                                method: "estimateGas",
                                params, result, error
                            });
                        }
                    });
                }
                _getAddress(addressOrName) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        addressOrName = yield addressOrName;
                        if (typeof (addressOrName) !== "string") {
                            logger$4.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                        }
                        const address = yield this.resolveName(addressOrName);
                        if (address == null) {
                            logger$4.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: `resolveName(${JSON.stringify(addressOrName)})`
                            });
                        }
                        return address;
                    });
                }
                _getBlock(blockHashOrBlockTag, includeTransactions) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        blockHashOrBlockTag = yield blockHashOrBlockTag;
                        // If blockTag is a number (not "latest", etc), this is the block number
                        let blockNumber = -128;
                        const params = {
                            includeTransactions: !!includeTransactions
                        };
                        if (isHexString(blockHashOrBlockTag, 32)) {
                            params.blockHash = blockHashOrBlockTag;
                        }
                        else {
                            try {
                                params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                                if (isHexString(params.blockTag)) {
                                    blockNumber = parseInt(params.blockTag.substring(2), 16);
                                }
                            }
                            catch (error) {
                                logger$4.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                            }
                        }
                        return poll(() => __awaiter$1(this, void 0, void 0, function* () {
                            const block = yield this.perform("getBlock", params);
                            // Block was not found
                            if (block == null) {
                                // For blockhashes, if we didn't say it existed, that blockhash may
                                // not exist. If we did see it though, perhaps from a log, we know
                                // it exists, and this node is just not caught up yet.
                                if (params.blockHash != null) {
                                    if (this._emitted["b:" + params.blockHash] == null) {
                                        return null;
                                    }
                                }
                                // For block tags, if we are asking for a future block, we return null
                                if (params.blockTag != null) {
                                    if (blockNumber > this._emitted.block) {
                                        return null;
                                    }
                                }
                                // Retry on the next block
                                return undefined;
                            }
                            // Add transactions
                            if (includeTransactions) {
                                let blockNumber = null;
                                for (let i = 0; i < block.transactions.length; i++) {
                                    const tx = block.transactions[i];
                                    if (tx.blockNumber == null) {
                                        tx.confirmations = 0;
                                    }
                                    else if (tx.confirmations == null) {
                                        if (blockNumber == null) {
                                            blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                        }
                                        // Add the confirmations using the fast block number (pessimistic)
                                        let confirmations = (blockNumber - tx.blockNumber) + 1;
                                        if (confirmations <= 0) {
                                            confirmations = 1;
                                        }
                                        tx.confirmations = confirmations;
                                    }
                                }
                                const blockWithTxs = this.formatter.blockWithTransactions(block);
                                blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
                                return blockWithTxs;
                            }
                            return this.formatter.block(block);
                        }), { oncePoll: this });
                    });
                }
                getBlock(blockHashOrBlockTag) {
                    return (this._getBlock(blockHashOrBlockTag, false));
                }
                getBlockWithTransactions(blockHashOrBlockTag) {
                    return (this._getBlock(blockHashOrBlockTag, true));
                }
                getTransaction(transactionHash) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        transactionHash = yield transactionHash;
                        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                        return poll(() => __awaiter$1(this, void 0, void 0, function* () {
                            const result = yield this.perform("getTransaction", params);
                            if (result == null) {
                                if (this._emitted["t:" + transactionHash] == null) {
                                    return null;
                                }
                                return undefined;
                            }
                            const tx = this.formatter.transactionResponse(result);
                            if (tx.blockNumber == null) {
                                tx.confirmations = 0;
                            }
                            else if (tx.confirmations == null) {
                                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                // Add the confirmations using the fast block number (pessimistic)
                                let confirmations = (blockNumber - tx.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                tx.confirmations = confirmations;
                            }
                            return this._wrapTransaction(tx);
                        }), { oncePoll: this });
                    });
                }
                getTransactionReceipt(transactionHash) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        transactionHash = yield transactionHash;
                        const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                        return poll(() => __awaiter$1(this, void 0, void 0, function* () {
                            const result = yield this.perform("getTransactionReceipt", params);
                            if (result == null) {
                                if (this._emitted["t:" + transactionHash] == null) {
                                    return null;
                                }
                                return undefined;
                            }
                            // "geth-etc" returns receipts before they are ready
                            if (result.blockHash == null) {
                                return undefined;
                            }
                            const receipt = this.formatter.receipt(result);
                            if (receipt.blockNumber == null) {
                                receipt.confirmations = 0;
                            }
                            else if (receipt.confirmations == null) {
                                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                // Add the confirmations using the fast block number (pessimistic)
                                let confirmations = (blockNumber - receipt.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                receipt.confirmations = confirmations;
                            }
                            return receipt;
                        }), { oncePoll: this });
                    });
                }
                getLogs(filter) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        const params = yield resolveProperties({ filter: this._getFilter(filter) });
                        const logs = yield this.perform("getLogs", params);
                        logs.forEach((log) => {
                            if (log.removed == null) {
                                log.removed = false;
                            }
                        });
                        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
                    });
                }
                getEtherPrice() {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        yield this.getNetwork();
                        return this.perform("getEtherPrice", {});
                    });
                }
                _getBlockTag(blockTag) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        blockTag = yield blockTag;
                        if (typeof (blockTag) === "number" && blockTag < 0) {
                            if (blockTag % 1) {
                                logger$4.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                            }
                            let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                            blockNumber += blockTag;
                            if (blockNumber < 0) {
                                blockNumber = 0;
                            }
                            return this.formatter.blockTag(blockNumber);
                        }
                        return this.formatter.blockTag(blockTag);
                    });
                }
                getResolver(name) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        try {
                            const address = yield this._getResolver(name);
                            if (address == null) {
                                return null;
                            }
                            return new Resolver(this, address, name);
                        }
                        catch (error) {
                            if (error.code === Logger.errors.CALL_EXCEPTION) {
                                return null;
                            }
                            throw error;
                        }
                    });
                }
                _getResolver(name) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        // Get the resolver from the blockchain
                        const network = yield this.getNetwork();
                        // No ENS...
                        if (!network.ensAddress) {
                            logger$4.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation: "ENS", network: network.name });
                        }
                        // keccak256("resolver(bytes32)")
                        const transaction = {
                            to: network.ensAddress,
                            data: ("0x0178b8bf" + namehash(name).substring(2))
                        };
                        try {
                            return this.formatter.callAddress(yield this.call(transaction));
                        }
                        catch (error) {
                            if (error.code === Logger.errors.CALL_EXCEPTION) {
                                return null;
                            }
                            throw error;
                        }
                    });
                }
                resolveName(name) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        name = yield name;
                        // If it is already an address, nothing to resolve
                        try {
                            return Promise.resolve(this.formatter.address(name));
                        }
                        catch (error) {
                            // If is is a hexstring, the address is bad (See #694)
                            if (isHexString(name)) {
                                throw error;
                            }
                        }
                        if (typeof (name) !== "string") {
                            logger$4.throwArgumentError("invalid ENS name", "name", name);
                        }
                        // Get the addr from the resovler
                        const resolver = yield this.getResolver(name);
                        if (!resolver) {
                            return null;
                        }
                        return yield resolver.getAddress();
                    });
                }
                lookupAddress(address) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        address = yield address;
                        address = this.formatter.address(address);
                        const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
                        const resolverAddress = yield this._getResolver(reverseName);
                        if (!resolverAddress) {
                            return null;
                        }
                        // keccak("name(bytes32)")
                        let bytes = arrayify(yield this.call({
                            to: resolverAddress,
                            data: ("0x691f3431" + namehash(reverseName).substring(2))
                        }));
                        // Strip off the dynamic string pointer (0x20)
                        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {
                            return null;
                        }
                        bytes = bytes.slice(32);
                        // Not a length-prefixed string
                        if (bytes.length < 32) {
                            return null;
                        }
                        // Get the length of the string (from the length-prefix)
                        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();
                        bytes = bytes.slice(32);
                        // Length longer than available data
                        if (length > bytes.length) {
                            return null;
                        }
                        const name = toUtf8String(bytes.slice(0, length));
                        // Make sure the reverse record matches the foward record
                        const addr = yield this.resolveName(name);
                        if (addr != address) {
                            return null;
                        }
                        return name;
                    });
                }
                getAvatar(nameOrAddress) {
                    return __awaiter$1(this, void 0, void 0, function* () {
                        let resolver = null;
                        if (isHexString(nameOrAddress)) {
                            // Address; reverse lookup
                            const address = this.formatter.address(nameOrAddress);
                            const reverseName = address.substring(2).toLowerCase() + ".addr.reverse";
                            const resolverAddress = yield this._getResolver(reverseName);
                            if (!resolverAddress) {
                                return null;
                            }
                            resolver = new Resolver(this, resolverAddress, "_", address);
                        }
                        else {
                            // ENS name; forward lookup
                            resolver = yield this.getResolver(nameOrAddress);
                            if (!resolver) {
                                return null;
                            }
                        }
                        const avatar = yield resolver.getAvatar();
                        if (avatar == null) {
                            return null;
                        }
                        return avatar.url;
                    });
                }
                perform(method, params) {
                    return logger$4.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
                }
                _startEvent(event) {
                    this.polling = (this._events.filter((e) => e.pollable()).length > 0);
                }
                _stopEvent(event) {
                    this.polling = (this._events.filter((e) => e.pollable()).length > 0);
                }
                _addEventListener(eventName, listener, once) {
                    const event = new Event(getEventTag(eventName), listener, once);
                    this._events.push(event);
                    this._startEvent(event);
                    return this;
                }
                on(eventName, listener) {
                    return this._addEventListener(eventName, listener, false);
                }
                once(eventName, listener) {
                    return this._addEventListener(eventName, listener, true);
                }
                emit(eventName, ...args) {
                    let result = false;
                    let stopped = [];
                    let eventTag = getEventTag(eventName);
                    this._events = this._events.filter((event) => {
                        if (event.tag !== eventTag) {
                            return true;
                        }
                        setTimeout(() => {
                            event.listener.apply(this, args);
                        }, 0);
                        result = true;
                        if (event.once) {
                            stopped.push(event);
                            return false;
                        }
                        return true;
                    });
                    stopped.forEach((event) => { this._stopEvent(event); });
                    return result;
                }
                listenerCount(eventName) {
                    if (!eventName) {
                        return this._events.length;
                    }
                    let eventTag = getEventTag(eventName);
                    return this._events.filter((event) => {
                        return (event.tag === eventTag);
                    }).length;
                }
                listeners(eventName) {
                    if (eventName == null) {
                        return this._events.map((event) => event.listener);
                    }
                    let eventTag = getEventTag(eventName);
                    return this._events
                        .filter((event) => (event.tag === eventTag))
                        .map((event) => event.listener);
                }
                off(eventName, listener) {
                    if (listener == null) {
                        return this.removeAllListeners(eventName);
                    }
                    const stopped = [];
                    let found = false;
                    let eventTag = getEventTag(eventName);
                    this._events = this._events.filter((event) => {
                        if (event.tag !== eventTag || event.listener != listener) {
                            return true;
                        }
                        if (found) {
                            return true;
                        }
                        found = true;
                        stopped.push(event);
                        return false;
                    });
                    stopped.forEach((event) => { this._stopEvent(event); });
                    return this;
                }
                removeAllListeners(eventName) {
                    let stopped = [];
                    if (eventName == null) {
                        stopped = this._events;
                        this._events = [];
                    }
                    else {
                        const eventTag = getEventTag(eventName);
                        this._events = this._events.filter((event) => {
                            if (event.tag !== eventTag) {
                                return true;
                            }
                            stopped.push(event);
                            return false;
                        });
                    }
                    stopped.forEach((event) => { this._stopEvent(event); });
                    return this;
                }
            }

            var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                    function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            const logger$3 = new Logger(version$3);
            const errorGas = ["call", "estimateGas"];
            function checkError(method, error, params) {
                // Undo the "convenience" some nodes are attempting to prevent backwards
                // incompatibility; maybe for v6 consider forwarding reverts as errors
                if (method === "call" && error.code === Logger.errors.SERVER_ERROR) {
                    const e = error.error;
                    if (e && e.message.match("reverted") && isHexString(e.data)) {
                        return e.data;
                    }
                    logger$3.throwError("missing revert data in call exception", Logger.errors.CALL_EXCEPTION, {
                        error, data: "0x"
                    });
                }
                let message = error.message;
                if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
                    message = error.error.message;
                }
                else if (typeof (error.body) === "string") {
                    message = error.body;
                }
                else if (typeof (error.responseText) === "string") {
                    message = error.responseText;
                }
                message = (message || "").toLowerCase();
                const transaction = params.transaction || params.signedTransaction;
                // "insufficient funds for gas * price + value + cost(data)"
                if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
                    logger$3.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                        error, method, transaction
                    });
                }
                // "nonce too low"
                if (message.match(/nonce too low/)) {
                    logger$3.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                        error, method, transaction
                    });
                }
                // "replacement transaction underpriced"
                if (message.match(/replacement transaction underpriced/)) {
                    logger$3.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                        error, method, transaction
                    });
                }
                // "replacement transaction underpriced"
                if (message.match(/only replay-protected/)) {
                    logger$3.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
                        error, method, transaction
                    });
                }
                if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
                    logger$3.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                        error, method, transaction
                    });
                }
                throw error;
            }
            function timer(timeout) {
                return new Promise(function (resolve) {
                    setTimeout(resolve, timeout);
                });
            }
            function getResult(payload) {
                if (payload.error) {
                    // @TODO: not any
                    const error = new Error(payload.error.message);
                    error.code = payload.error.code;
                    error.data = payload.error.data;
                    throw error;
                }
                return payload.result;
            }
            function getLowerCase(value) {
                if (value) {
                    return value.toLowerCase();
                }
                return value;
            }
            const _constructorGuard = {};
            class JsonRpcSigner extends Signer {
                constructor(constructorGuard, provider, addressOrIndex) {
                    logger$3.checkNew(new.target, JsonRpcSigner);
                    super();
                    if (constructorGuard !== _constructorGuard) {
                        throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
                    }
                    defineReadOnly(this, "provider", provider);
                    if (addressOrIndex == null) {
                        addressOrIndex = 0;
                    }
                    if (typeof (addressOrIndex) === "string") {
                        defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
                        defineReadOnly(this, "_index", null);
                    }
                    else if (typeof (addressOrIndex) === "number") {
                        defineReadOnly(this, "_index", addressOrIndex);
                        defineReadOnly(this, "_address", null);
                    }
                    else {
                        logger$3.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
                    }
                }
                connect(provider) {
                    return logger$3.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "connect"
                    });
                }
                connectUnchecked() {
                    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
                }
                getAddress() {
                    if (this._address) {
                        return Promise.resolve(this._address);
                    }
                    return this.provider.send("eth_accounts", []).then((accounts) => {
                        if (accounts.length <= this._index) {
                            logger$3.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "getAddress"
                            });
                        }
                        return this.provider.formatter.address(accounts[this._index]);
                    });
                }
                sendUncheckedTransaction(transaction) {
                    transaction = shallowCopy(transaction);
                    const fromAddress = this.getAddress().then((address) => {
                        if (address) {
                            address = address.toLowerCase();
                        }
                        return address;
                    });
                    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
                    // wishes to use this, it is easy to specify explicitly, otherwise
                    // we look it up for them.
                    if (transaction.gasLimit == null) {
                        const estimate = shallowCopy(transaction);
                        estimate.from = fromAddress;
                        transaction.gasLimit = this.provider.estimateGas(estimate);
                    }
                    if (transaction.to != null) {
                        transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter(this, void 0, void 0, function* () {
                            if (to == null) {
                                return null;
                            }
                            const address = yield this.provider.resolveName(to);
                            if (address == null) {
                                logger$3.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                            }
                            return address;
                        }));
                    }
                    return resolveProperties({
                        tx: resolveProperties(transaction),
                        sender: fromAddress
                    }).then(({ tx, sender }) => {
                        if (tx.from != null) {
                            if (tx.from.toLowerCase() !== sender) {
                                logger$3.throwArgumentError("from address mismatch", "transaction", transaction);
                            }
                        }
                        else {
                            tx.from = sender;
                        }
                        const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
                        return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
                            return hash;
                        }, (error) => {
                            return checkError("sendTransaction", error, hexTx);
                        });
                    });
                }
                signTransaction(transaction) {
                    return logger$3.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "signTransaction"
                    });
                }
                sendTransaction(transaction) {
                    return __awaiter(this, void 0, void 0, function* () {
                        // This cannot be mined any earlier than any recent block
                        const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
                        // Send the transaction
                        const hash = yield this.sendUncheckedTransaction(transaction);
                        try {
                            // Unfortunately, JSON-RPC only provides and opaque transaction hash
                            // for a response, and we need the actual transaction, so we poll
                            // for it; it should show up very quickly
                            return yield poll(() => __awaiter(this, void 0, void 0, function* () {
                                const tx = yield this.provider.getTransaction(hash);
                                if (tx === null) {
                                    return undefined;
                                }
                                return this.provider._wrapTransaction(tx, hash, blockNumber);
                            }), { oncePoll: this.provider });
                        }
                        catch (error) {
                            error.transactionHash = hash;
                            throw error;
                        }
                    });
                }
                signMessage(message) {
                    return __awaiter(this, void 0, void 0, function* () {
                        const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                        const address = yield this.getAddress();
                        return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
                    });
                }
                _legacySignMessage(message) {
                    return __awaiter(this, void 0, void 0, function* () {
                        const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                        const address = yield this.getAddress();
                        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                        return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
                    });
                }
                _signTypedData(domain, types, value) {
                    return __awaiter(this, void 0, void 0, function* () {
                        // Populate any ENS names (in-place)
                        const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                            return this.provider.resolveName(name);
                        });
                        const address = yield this.getAddress();
                        return yield this.provider.send("eth_signTypedData_v4", [
                            address.toLowerCase(),
                            JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                        ]);
                    });
                }
                unlock(password) {
                    return __awaiter(this, void 0, void 0, function* () {
                        const provider = this.provider;
                        const address = yield this.getAddress();
                        return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
                    });
                }
            }
            class UncheckedJsonRpcSigner extends JsonRpcSigner {
                sendTransaction(transaction) {
                    return this.sendUncheckedTransaction(transaction).then((hash) => {
                        return {
                            hash: hash,
                            nonce: null,
                            gasLimit: null,
                            gasPrice: null,
                            data: null,
                            value: null,
                            chainId: null,
                            confirmations: 0,
                            from: null,
                            wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }
                        };
                    });
                }
            }
            const allowedTransactionKeys = {
                chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
                type: true, accessList: true,
                maxFeePerGas: true, maxPriorityFeePerGas: true
            };
            class JsonRpcProvider extends BaseProvider {
                constructor(url, network) {
                    logger$3.checkNew(new.target, JsonRpcProvider);
                    let networkOrReady = network;
                    // The network is unknown, query the JSON-RPC for it
                    if (networkOrReady == null) {
                        networkOrReady = new Promise((resolve, reject) => {
                            setTimeout(() => {
                                this.detectNetwork().then((network) => {
                                    resolve(network);
                                }, (error) => {
                                    reject(error);
                                });
                            }, 0);
                        });
                    }
                    super(networkOrReady);
                    // Default URL
                    if (!url) {
                        url = getStatic(this.constructor, "defaultUrl")();
                    }
                    if (typeof (url) === "string") {
                        defineReadOnly(this, "connection", Object.freeze({
                            url: url
                        }));
                    }
                    else {
                        defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
                    }
                    this._nextId = 42;
                }
                get _cache() {
                    if (this._eventLoopCache == null) {
                        this._eventLoopCache = {};
                    }
                    return this._eventLoopCache;
                }
                static defaultUrl() {
                    return "http:/\/localhost:8545";
                }
                detectNetwork() {
                    if (!this._cache["detectNetwork"]) {
                        this._cache["detectNetwork"] = this._uncachedDetectNetwork();
                        // Clear this cache at the beginning of the next event loop
                        setTimeout(() => {
                            this._cache["detectNetwork"] = null;
                        }, 0);
                    }
                    return this._cache["detectNetwork"];
                }
                _uncachedDetectNetwork() {
                    return __awaiter(this, void 0, void 0, function* () {
                        yield timer(0);
                        let chainId = null;
                        try {
                            chainId = yield this.send("eth_chainId", []);
                        }
                        catch (error) {
                            try {
                                chainId = yield this.send("net_version", []);
                            }
                            catch (error) { }
                        }
                        if (chainId != null) {
                            const getNetwork = getStatic(this.constructor, "getNetwork");
                            try {
                                return getNetwork(BigNumber.from(chainId).toNumber());
                            }
                            catch (error) {
                                return logger$3.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                                    chainId: chainId,
                                    event: "invalidNetwork",
                                    serverError: error
                                });
                            }
                        }
                        return logger$3.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                            event: "noNetwork"
                        });
                    });
                }
                getSigner(addressOrIndex) {
                    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
                }
                getUncheckedSigner(addressOrIndex) {
                    return this.getSigner(addressOrIndex).connectUnchecked();
                }
                listAccounts() {
                    return this.send("eth_accounts", []).then((accounts) => {
                        return accounts.map((a) => this.formatter.address(a));
                    });
                }
                send(method, params) {
                    const request = {
                        method: method,
                        params: params,
                        id: (this._nextId++),
                        jsonrpc: "2.0"
                    };
                    this.emit("debug", {
                        action: "request",
                        request: deepCopy(request),
                        provider: this
                    });
                    // We can expand this in the future to any call, but for now these
                    // are the biggest wins and do not require any serializing parameters.
                    const cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
                    if (cache && this._cache[method]) {
                        return this._cache[method];
                    }
                    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {
                        this.emit("debug", {
                            action: "response",
                            request: request,
                            response: result,
                            provider: this
                        });
                        return result;
                    }, (error) => {
                        this.emit("debug", {
                            action: "response",
                            error: error,
                            request: request,
                            provider: this
                        });
                        throw error;
                    });
                    // Cache the fetch, but clear it on the next event loop
                    if (cache) {
                        this._cache[method] = result;
                        setTimeout(() => {
                            this._cache[method] = null;
                        }, 0);
                    }
                    return result;
                }
                prepareRequest(method, params) {
                    switch (method) {
                        case "getBlockNumber":
                            return ["eth_blockNumber", []];
                        case "getGasPrice":
                            return ["eth_gasPrice", []];
                        case "getBalance":
                            return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
                        case "getTransactionCount":
                            return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
                        case "getCode":
                            return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
                        case "getStorageAt":
                            return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];
                        case "sendTransaction":
                            return ["eth_sendRawTransaction", [params.signedTransaction]];
                        case "getBlock":
                            if (params.blockTag) {
                                return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                            }
                            else if (params.blockHash) {
                                return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                            }
                            return null;
                        case "getTransaction":
                            return ["eth_getTransactionByHash", [params.transactionHash]];
                        case "getTransactionReceipt":
                            return ["eth_getTransactionReceipt", [params.transactionHash]];
                        case "call": {
                            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                            return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
                        }
                        case "estimateGas": {
                            const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                            return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
                        }
                        case "getLogs":
                            if (params.filter && params.filter.address != null) {
                                params.filter.address = getLowerCase(params.filter.address);
                            }
                            return ["eth_getLogs", [params.filter]];
                    }
                    return null;
                }
                perform(method, params) {
                    return __awaiter(this, void 0, void 0, function* () {
                        // Legacy networks do not like the type field being passed along (which
                        // is fair), so we delete type if it is 0 and a non-EIP-1559 network
                        if (method === "call" || method === "estimateGas") {
                            const tx = params.transaction;
                            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
                                // If there are no EIP-1559 properties, it might be non-EIP-a559
                                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                                    const feeData = yield this.getFeeData();
                                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                                        // Network doesn't know about EIP-1559 (and hence type)
                                        params = shallowCopy(params);
                                        params.transaction = shallowCopy(tx);
                                        delete params.transaction.type;
                                    }
                                }
                            }
                        }
                        const args = this.prepareRequest(method, params);
                        if (args == null) {
                            logger$3.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
                        }
                        try {
                            return yield this.send(args[0], args[1]);
                        }
                        catch (error) {
                            return checkError(method, error, params);
                        }
                    });
                }
                _startEvent(event) {
                    if (event.tag === "pending") {
                        this._startPending();
                    }
                    super._startEvent(event);
                }
                _startPending() {
                    if (this._pendingFilter != null) {
                        return;
                    }
                    const self = this;
                    const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
                    this._pendingFilter = pendingFilter;
                    pendingFilter.then(function (filterId) {
                        function poll() {
                            self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                                if (self._pendingFilter != pendingFilter) {
                                    return null;
                                }
                                let seq = Promise.resolve();
                                hashes.forEach(function (hash) {
                                    // @TODO: This should be garbage collected at some point... How? When?
                                    self._emitted["t:" + hash.toLowerCase()] = "pending";
                                    seq = seq.then(function () {
                                        return self.getTransaction(hash).then(function (tx) {
                                            self.emit("pending", tx);
                                            return null;
                                        });
                                    });
                                });
                                return seq.then(function () {
                                    return timer(1000);
                                });
                            }).then(function () {
                                if (self._pendingFilter != pendingFilter) {
                                    self.send("eth_uninstallFilter", [filterId]);
                                    return;
                                }
                                setTimeout(function () { poll(); }, 0);
                                return null;
                            }).catch((error) => { });
                        }
                        poll();
                        return filterId;
                    }).catch((error) => { });
                }
                _stopEvent(event) {
                    if (event.tag === "pending" && this.listenerCount("pending") === 0) {
                        this._pendingFilter = null;
                    }
                    super._stopEvent(event);
                }
                // Convert an ethers.js transaction into a JSON-RPC transaction
                //  - gasLimit => gas
                //  - All values hexlified
                //  - All numeric values zero-striped
                //  - All addresses are lowercased
                // NOTE: This allows a TransactionRequest, but all values should be resolved
                //       before this is called
                // @TODO: This will likely be removed in future versions and prepareRequest
                //        will be the preferred method for this.
                static hexlifyTransaction(transaction, allowExtra) {
                    // Check only allowed properties are given
                    const allowed = shallowCopy(allowedTransactionKeys);
                    if (allowExtra) {
                        for (const key in allowExtra) {
                            if (allowExtra[key]) {
                                allowed[key] = true;
                            }
                        }
                    }
                    checkProperties(transaction, allowed);
                    const result = {};
                    // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.
                    ["gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
                        if (transaction[key] == null) {
                            return;
                        }
                        const value = hexValue(transaction[key]);
                        if (key === "gasLimit") {
                            key = "gas";
                        }
                        result[key] = value;
                    });
                    ["from", "to", "data"].forEach(function (key) {
                        if (transaction[key] == null) {
                            return;
                        }
                        result[key] = hexlify(transaction[key]);
                    });
                    if (transaction.accessList) {
                        result["accessList"] = accessListify(transaction.accessList);
                    }
                    return result;
                }
            }

            const logger$2 = new Logger(version$3);
            let _nextId = 1;
            function buildWeb3LegacyFetcher(provider, sendFunc) {
                const fetcher = "Web3LegacyFetcher";
                return function (method, params) {
                    const request = {
                        method: method,
                        params: params,
                        id: (_nextId++),
                        jsonrpc: "2.0"
                    };
                    return new Promise((resolve, reject) => {
                        this.emit("debug", {
                            action: "request",
                            fetcher,
                            request: deepCopy(request),
                            provider: this
                        });
                        sendFunc(request, (error, response) => {
                            if (error) {
                                this.emit("debug", {
                                    action: "response",
                                    fetcher,
                                    error,
                                    request,
                                    provider: this
                                });
                                return reject(error);
                            }
                            this.emit("debug", {
                                action: "response",
                                fetcher,
                                request,
                                response,
                                provider: this
                            });
                            if (response.error) {
                                const error = new Error(response.error.message);
                                error.code = response.error.code;
                                error.data = response.error.data;
                                return reject(error);
                            }
                            resolve(response.result);
                        });
                    });
                };
            }
            function buildEip1193Fetcher(provider) {
                return function (method, params) {
                    if (params == null) {
                        params = [];
                    }
                    const request = { method, params };
                    this.emit("debug", {
                        action: "request",
                        fetcher: "Eip1193Fetcher",
                        request: deepCopy(request),
                        provider: this
                    });
                    return provider.request(request).then((response) => {
                        this.emit("debug", {
                            action: "response",
                            fetcher: "Eip1193Fetcher",
                            request,
                            response,
                            provider: this
                        });
                        return response;
                    }, (error) => {
                        this.emit("debug", {
                            action: "response",
                            fetcher: "Eip1193Fetcher",
                            request,
                            error,
                            provider: this
                        });
                        throw error;
                    });
                };
            }
            class Web3Provider extends JsonRpcProvider {
                constructor(provider, network) {
                    logger$2.checkNew(new.target, Web3Provider);
                    if (provider == null) {
                        logger$2.throwArgumentError("missing provider", "provider", provider);
                    }
                    let path = null;
                    let jsonRpcFetchFunc = null;
                    let subprovider = null;
                    if (typeof (provider) === "function") {
                        path = "unknown:";
                        jsonRpcFetchFunc = provider;
                    }
                    else {
                        path = provider.host || provider.path || "";
                        if (!path && provider.isMetaMask) {
                            path = "metamask";
                        }
                        subprovider = provider;
                        if (provider.request) {
                            if (path === "") {
                                path = "eip-1193:";
                            }
                            jsonRpcFetchFunc = buildEip1193Fetcher(provider);
                        }
                        else if (provider.sendAsync) {
                            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
                        }
                        else if (provider.send) {
                            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
                        }
                        else {
                            logger$2.throwArgumentError("unsupported provider", "provider", provider);
                        }
                        if (!path) {
                            path = "unknown:";
                        }
                    }
                    super(path, network);
                    defineReadOnly(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
                    defineReadOnly(this, "provider", subprovider);
                }
                send(method, params) {
                    return this.jsonRpcFetchFunc(method, params);
                }
            }

            new Logger(version$3);

            const version$2 = "solidity/5.5.0";

            const regexBytes = new RegExp("^bytes([0-9]+)$");
            const regexNumber = new RegExp("^(u?int)([0-9]*)$");
            const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
            const Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
            const logger$1 = new Logger(version$2);
            function _pack(type, value, isArray) {
                switch (type) {
                    case "address":
                        if (isArray) {
                            return zeroPad(value, 32);
                        }
                        return arrayify(value);
                    case "string":
                        return toUtf8Bytes(value);
                    case "bytes":
                        return arrayify(value);
                    case "bool":
                        value = (value ? "0x01" : "0x00");
                        if (isArray) {
                            return zeroPad(value, 32);
                        }
                        return arrayify(value);
                }
                let match = type.match(regexNumber);
                if (match) {
                    //let signed = (match[1] === "int")
                    let size = parseInt(match[2] || "256");
                    if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {
                        logger$1.throwArgumentError("invalid number type", "type", type);
                    }
                    if (isArray) {
                        size = 256;
                    }
                    value = BigNumber.from(value).toTwos(size);
                    return zeroPad(value, size / 8);
                }
                match = type.match(regexBytes);
                if (match) {
                    const size = parseInt(match[1]);
                    if (String(size) !== match[1] || size === 0 || size > 32) {
                        logger$1.throwArgumentError("invalid bytes type", "type", type);
                    }
                    if (arrayify(value).byteLength !== size) {
                        logger$1.throwArgumentError(`invalid value for ${type}`, "value", value);
                    }
                    if (isArray) {
                        return arrayify((value + Zeros).substring(0, 66));
                    }
                    return value;
                }
                match = type.match(regexArray);
                if (match && Array.isArray(value)) {
                    const baseType = match[1];
                    const count = parseInt(match[2] || String(value.length));
                    if (count != value.length) {
                        logger$1.throwArgumentError(`invalid array length for ${type}`, "value", value);
                    }
                    const result = [];
                    value.forEach(function (value) {
                        result.push(_pack(baseType, value, true));
                    });
                    return concat$3(result);
                }
                return logger$1.throwArgumentError("invalid type", "type", type);
            }
            // @TODO: Array Enum
            function pack(types, values) {
                if (types.length != values.length) {
                    logger$1.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
                }
                const tight = [];
                types.forEach(function (type, index) {
                    tight.push(_pack(type, values[index]));
                });
                return hexlify(concat$3(tight));
            }
            function keccak256(types, values) {
                return keccak256$1(pack(types, values));
            }
            function sha256$1(types, values) {
                return sha256$2(pack(types, values));
            }

            var lib_esm$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        pack: pack,
                        keccak256: keccak256,
                        sha256: sha256$1
            });

            const version$1 = "units/5.5.0";

            const logger = new Logger(version$1);
            const names$3 = [
                "wei",
                "kwei",
                "mwei",
                "gwei",
                "szabo",
                "finney",
                "ether",
            ];
            // Some environments have issues with RegEx that contain back-tracking, so we cannot
            // use them.
            function commify(value) {
                const comps = String(value).split(".");
                if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === "." || value === "-.") {
                    logger.throwArgumentError("invalid value", "value", value);
                }
                // Make sure we have at least one whole digit (0 if none)
                let whole = comps[0];
                let negative = "";
                if (whole.substring(0, 1) === "-") {
                    negative = "-";
                    whole = whole.substring(1);
                }
                // Make sure we have at least 1 whole digit with no leading zeros
                while (whole.substring(0, 1) === "0") {
                    whole = whole.substring(1);
                }
                if (whole === "") {
                    whole = "0";
                }
                let suffix = "";
                if (comps.length === 2) {
                    suffix = "." + (comps[1] || "0");
                }
                while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
                    suffix = suffix.substring(0, suffix.length - 1);
                }
                const formatted = [];
                while (whole.length) {
                    if (whole.length <= 3) {
                        formatted.unshift(whole);
                        break;
                    }
                    else {
                        const index = whole.length - 3;
                        formatted.unshift(whole.substring(index));
                        whole = whole.substring(0, index);
                    }
                }
                return negative + formatted.join(",") + suffix;
            }
            function formatUnits(value, unitName) {
                if (typeof (unitName) === "string") {
                    const index = names$3.indexOf(unitName);
                    if (index !== -1) {
                        unitName = 3 * index;
                    }
                }
                return formatFixed(value, (unitName != null) ? unitName : 18);
            }
            function parseUnits(value, unitName) {
                if (typeof (value) !== "string") {
                    logger.throwArgumentError("value must be a string", "value", value);
                }
                if (typeof (unitName) === "string") {
                    const index = names$3.indexOf(unitName);
                    if (index !== -1) {
                        unitName = 3 * index;
                    }
                }
                return parseFixed(value, (unitName != null) ? unitName : 18);
            }
            function formatEther(wei) {
                return formatUnits(wei, 18);
            }
            function parseEther(ether) {
                return parseUnits(ether, 18);
            }

            var lib_esm = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        commify: commify,
                        formatUnits: formatUnits,
                        parseUnits: parseUnits,
                        formatEther: formatEther,
                        parseEther: parseEther
            });

            const version = "ethers/5.5.3";

            new Logger(version);

            function n$2(n){for(var r=arguments.length,t=Array(r>1?r-1:0),e=1;e<r;e++)t[e-1]=arguments[e];throw Error("[Immer] minified error nr: "+n+(t.length?" "+t.map((function(n){return "'"+n+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function r$3(n){return !!n&&!!n[Q]}function t$2(n){return !!n&&(function(n){if(!n||"object"!=typeof n)return !1;var r=Object.getPrototypeOf(n);if(null===r)return !0;var t=Object.hasOwnProperty.call(r,"constructor")&&r.constructor;return t===Object||"function"==typeof t&&Function.toString.call(t)===Z}(n)||Array.isArray(n)||!!n[L]||!!n.constructor[L]||s$1(n)||v$2(n))}function i$2(n,r,t){void 0===t&&(t=!1),0===o(n)?(t?Object.keys:nn)(n).forEach((function(e){t&&"symbol"==typeof e||r(e,n[e],n);})):n.forEach((function(t,e){return r(e,t,n)}));}function o(n){var r=n[Q];return r?r.i>3?r.i-4:r.i:Array.isArray(n)?1:s$1(n)?2:v$2(n)?3:0}function u$3(n,r){return 2===o(n)?n.has(r):Object.prototype.hasOwnProperty.call(n,r)}function a$1(n,r){return 2===o(n)?n.get(r):n[r]}function f$1(n,r,t){var e=o(n);2===e?n.set(r,t):3===e?(n.delete(r),n.add(t)):n[r]=t;}function c$2(n,r){return n===r?0!==n||1/n==1/r:n!=n&&r!=r}function s$1(n){return X&&n instanceof Map}function v$2(n){return q$2&&n instanceof Set}function p$3(n){return n.o||n.t}function l$1(n){if(Array.isArray(n))return Array.prototype.slice.call(n);var r=rn(n);delete r[Q];for(var t=nn(r),e=0;e<t.length;e++){var i=t[e],o=r[i];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(r[i]={configurable:!0,writable:!0,enumerable:o.enumerable,value:n[i]});}return Object.create(Object.getPrototypeOf(n),r)}function d$2(n,e){return void 0===e&&(e=!1),y$1(n)||r$3(n)||!t$2(n)?n:(o(n)>1&&(n.set=n.add=n.clear=n.delete=h$3),Object.freeze(n),e&&i$2(n,(function(n,r){return d$2(r,!0)}),!0),n)}function h$3(){n$2(2);}function y$1(n){return null==n||"object"!=typeof n||Object.isFrozen(n)}function b$1(r){var t=tn[r];return t||n$2(18,r),t}function m$1(n,r){tn[n]||(tn[n]=r);}function _$1(){return U}function j(n,r){r&&(b$1("Patches"),n.u=[],n.s=[],n.v=r);}function O(n){g$1(n),n.p.forEach(S),n.p=null;}function g$1(n){n===U&&(U=n.l);}function w$1(n){return U={p:[],l:U,h:n,m:!0,_:0}}function S(n){var r=n[Q];0===r.i||1===r.i?r.j():r.O=!0;}function P(r,e){e._=e.p.length;var i=e.p[0],o=void 0!==r&&r!==i;return e.h.g||b$1("ES5").S(e,r,o),o?(i[Q].P&&(O(e),n$2(4)),t$2(r)&&(r=M(e,r),e.l||x(e,r)),e.u&&b$1("Patches").M(i[Q].t,r,e.u,e.s)):r=M(e,i,[]),O(e),e.u&&e.v(e.u,e.s),r!==H?r:void 0}function M(n,r,t){if(y$1(r))return r;var e=r[Q];if(!e)return i$2(r,(function(i,o){return A(n,e,r,i,o,t)}),!0),r;if(e.A!==n)return r;if(!e.P)return x(n,e.t,!0),e.t;if(!e.I){e.I=!0,e.A._--;var o=4===e.i||5===e.i?e.o=l$1(e.k):e.o;i$2(3===e.i?new Set(o):o,(function(r,i){return A(n,e,o,r,i,t)})),x(n,o,!1),t&&n.u&&b$1("Patches").R(e,t,n.u,n.s);}return e.o}function A(e,i,o,a,c,s){if(r$3(c)){var v=M(e,c,s&&i&&3!==i.i&&!u$3(i.D,a)?s.concat(a):void 0);if(f$1(o,a,v),!r$3(v))return;e.m=!1;}if(t$2(c)&&!y$1(c)){if(!e.h.F&&e._<1)return;M(e,c),i&&i.A.l||x(e,c);}}function x(n,r,t){void 0===t&&(t=!1),n.h.F&&n.m&&d$2(r,t);}function z(n,r){var t=n[Q];return (t?p$3(t):n)[r]}function I(n,r){if(r in n)for(var t=Object.getPrototypeOf(n);t;){var e=Object.getOwnPropertyDescriptor(t,r);if(e)return e;t=Object.getPrototypeOf(t);}}function k$2(n){n.P||(n.P=!0,n.l&&k$2(n.l));}function E(n){n.o||(n.o=l$1(n.t));}function R(n,r,t){var e=s$1(r)?b$1("MapSet").N(r,t):v$2(r)?b$1("MapSet").T(r,t):n.g?function(n,r){var t=Array.isArray(n),e={i:t?1:0,A:r?r.A:_$1(),P:!1,I:!1,D:{},l:r,t:n,k:null,o:null,j:null,C:!1},i=e,o=en$1;t&&(i=[e],o=on);var u=Proxy.revocable(i,o),a=u.revoke,f=u.proxy;return e.k=f,e.j=a,f}(r,t):b$1("ES5").J(r,t);return (t?t.A:_$1()).p.push(e),e}function D$1(e){return r$3(e)||n$2(22,e),function n(r){if(!t$2(r))return r;var e,u=r[Q],c=o(r);if(u){if(!u.P&&(u.i<4||!b$1("ES5").K(u)))return u.t;u.I=!0,e=F(r,c),u.I=!1;}else e=F(r,c);return i$2(e,(function(r,t){u&&a$1(u.t,r)===t||f$1(e,r,n(t));})),3===c?new Set(e):e}(e)}function F(n,r){switch(r){case 2:return new Map(n);case 3:return Array.from(n)}return l$1(n)}function N(){function t(n,r){var t=s[n];return t?t.enumerable=r:s[n]=t={configurable:!0,enumerable:r,get:function(){var r=this[Q];return en$1.get(r,n)},set:function(r){var t=this[Q];en$1.set(t,n,r);}},t}function e(n){for(var r=n.length-1;r>=0;r--){var t=n[r][Q];if(!t.P)switch(t.i){case 5:a(t)&&k$2(t);break;case 4:o(t)&&k$2(t);}}}function o(n){for(var r=n.t,t=n.k,e=nn(t),i=e.length-1;i>=0;i--){var o=e[i];if(o!==Q){var a=r[o];if(void 0===a&&!u$3(r,o))return !0;var f=t[o],s=f&&f[Q];if(s?s.t!==a:!c$2(f,a))return !0}}var v=!!r[Q];return e.length!==nn(r).length+(v?0:1)}function a(n){var r=n.k;if(r.length!==n.t.length)return !0;var t=Object.getOwnPropertyDescriptor(r,r.length-1);if(t&&!t.get)return !0;for(var e=0;e<r.length;e++)if(!r.hasOwnProperty(e))return !0;return !1}var s={};m$1("ES5",{J:function(n,r){var e=Array.isArray(n),i=function(n,r){if(n){for(var e=Array(r.length),i=0;i<r.length;i++)Object.defineProperty(e,""+i,t(i,!0));return e}var o=rn(r);delete o[Q];for(var u=nn(o),a=0;a<u.length;a++){var f=u[a];o[f]=t(f,n||!!o[f].enumerable);}return Object.create(Object.getPrototypeOf(r),o)}(e,n),o={i:e?5:4,A:r?r.A:_$1(),P:!1,I:!1,D:{},l:r,t:n,k:i,o:null,O:!1,C:!1};return Object.defineProperty(i,Q,{value:o,writable:!0}),i},S:function(n,t,o){o?r$3(t)&&t[Q].A===n&&e(n.p):(n.u&&function n(r){if(r&&"object"==typeof r){var t=r[Q];if(t){var e=t.t,o=t.k,f=t.D,c=t.i;if(4===c)i$2(o,(function(r){r!==Q&&(void 0!==e[r]||u$3(e,r)?f[r]||n(o[r]):(f[r]=!0,k$2(t)));})),i$2(e,(function(n){void 0!==o[n]||u$3(o,n)||(f[n]=!1,k$2(t));}));else if(5===c){if(a(t)&&(k$2(t),f.length=!0),o.length<e.length)for(var s=o.length;s<e.length;s++)f[s]=!1;else for(var v=e.length;v<o.length;v++)f[v]=!0;for(var p=Math.min(o.length,e.length),l=0;l<p;l++)o.hasOwnProperty(l)||(f[l]=!0),void 0===f[l]&&n(o[l]);}}}}(n.p[0]),e(n.p));},K:function(n){return 4===n.i?o(n):a(n)}});}var G,U,W="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),X="undefined"!=typeof Map,q$2="undefined"!=typeof Set,B="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,H=W?Symbol.for("immer-nothing"):((G={})["immer-nothing"]=!0,G),L=W?Symbol.for("immer-draftable"):"__$immer_draftable",Q=W?Symbol.for("immer-state"):"__$immer_state",Z=""+Object.prototype.constructor,nn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(n){return Object.getOwnPropertyNames(n).concat(Object.getOwnPropertySymbols(n))}:Object.getOwnPropertyNames,rn=Object.getOwnPropertyDescriptors||function(n){var r={};return nn(n).forEach((function(t){r[t]=Object.getOwnPropertyDescriptor(n,t);})),r},tn={},en$1={get:function(n,r){if(r===Q)return n;var e=p$3(n);if(!u$3(e,r))return function(n,r,t){var e,i=I(r,t);return i?"value"in i?i.value:null===(e=i.get)||void 0===e?void 0:e.call(n.k):void 0}(n,e,r);var i=e[r];return n.I||!t$2(i)?i:i===z(n.t,r)?(E(n),n.o[r]=R(n.A.h,i,n)):i},has:function(n,r){return r in p$3(n)},ownKeys:function(n){return Reflect.ownKeys(p$3(n))},set:function(n,r,t){var e=I(p$3(n),r);if(null==e?void 0:e.set)return e.set.call(n.k,t),!0;if(!n.P){var i=z(p$3(n),r),o=null==i?void 0:i[Q];if(o&&o.t===t)return n.o[r]=t,n.D[r]=!1,!0;if(c$2(t,i)&&(void 0!==t||u$3(n.t,r)))return !0;E(n),k$2(n);}return n.o[r]===t&&"number"!=typeof t&&(void 0!==t||r in n.o)||(n.o[r]=t,n.D[r]=!0,!0)},deleteProperty:function(n,r){return void 0!==z(n.t,r)||r in n.t?(n.D[r]=!1,E(n),k$2(n)):delete n.D[r],n.o&&delete n.o[r],!0},getOwnPropertyDescriptor:function(n,r){var t=p$3(n),e=Reflect.getOwnPropertyDescriptor(t,r);return e?{writable:!0,configurable:1!==n.i||"length"!==r,enumerable:e.enumerable,value:t[r]}:e},defineProperty:function(){n$2(11);},getPrototypeOf:function(n){return Object.getPrototypeOf(n.t)},setPrototypeOf:function(){n$2(12);}},on={};i$2(en$1,(function(n,r){on[n]=function(){return arguments[0]=arguments[0][0],r.apply(this,arguments)};})),on.deleteProperty=function(r,t){return on.set.call(this,r,t,void 0)},on.set=function(r,t,e){return en$1.set.call(this,r[0],t,e,r[0])};var un=function(){function e(r){var e=this;this.g=B,this.F=!0,this.produce=function(r,i,o){if("function"==typeof r&&"function"!=typeof i){var u=i;i=r;var a=e;return function(n){var r=this;void 0===n&&(n=u);for(var t=arguments.length,e=Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];return a.produce(n,(function(n){var t;return (t=i).call.apply(t,[r,n].concat(e))}))}}var f;if("function"!=typeof i&&n$2(6),void 0!==o&&"function"!=typeof o&&n$2(7),t$2(r)){var c=w$1(e),s=R(e,r,void 0),v=!0;try{f=i(s),v=!1;}finally{v?O(c):g$1(c);}return "undefined"!=typeof Promise&&f instanceof Promise?f.then((function(n){return j(c,o),P(n,c)}),(function(n){throw O(c),n})):(j(c,o),P(f,c))}if(!r||"object"!=typeof r){if(void 0===(f=i(r))&&(f=r),f===H&&(f=void 0),e.F&&d$2(f,!0),o){var p=[],l=[];b$1("Patches").M(r,f,p,l),o(p,l);}return f}n$2(21,r);},this.produceWithPatches=function(n,r){if("function"==typeof n)return function(r){for(var t=arguments.length,i=Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return e.produceWithPatches(r,(function(r){return n.apply(void 0,[r].concat(i))}))};var t,i,o=e.produce(n,r,(function(n,r){t=n,i=r;}));return "undefined"!=typeof Promise&&o instanceof Promise?o.then((function(n){return [n,t,i]})):[o,t,i]},"boolean"==typeof(null==r?void 0:r.useProxies)&&this.setUseProxies(r.useProxies),"boolean"==typeof(null==r?void 0:r.autoFreeze)&&this.setAutoFreeze(r.autoFreeze);}var i=e.prototype;return i.createDraft=function(e){t$2(e)||n$2(8),r$3(e)&&(e=D$1(e));var i=w$1(this),o=R(this,e,void 0);return o[Q].C=!0,g$1(i),o},i.finishDraft=function(r,t){var e=r&&r[Q];var i=e.A;return j(i,t),P(void 0,i)},i.setAutoFreeze=function(n){this.F=n;},i.setUseProxies=function(r){r&&!B&&n$2(20),this.g=r;},i.applyPatches=function(n,t){var e;for(e=t.length-1;e>=0;e--){var i=t[e];if(0===i.path.length&&"replace"===i.op){n=i.value;break}}e>-1&&(t=t.slice(e+1));var o=b$1("Patches").$;return r$3(n)?o(n,t):this.produce(n,(function(n){return o(n,t)}))},e}(),an=new un,fn=an.produce;an.produceWithPatches.bind(an);an.setAutoFreeze.bind(an);an.setUseProxies.bind(an);an.applyPatches.bind(an);an.createDraft.bind(an);an.finishDraft.bind(an);var createNextState2 = fn;

            /**
             * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
             *
             * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
             * during build.
             * @param {number} code
             */
            function formatProdErrorMessage(code) {
              return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
            }

            // Inlined version of the `symbol-observable` polyfill
            var $$observable = (function () {
              return typeof Symbol === 'function' && Symbol.observable || '@@observable';
            })();

            /**
             * These are private action types reserved by Redux.
             * For any unknown actions, you must return the current state.
             * If the current state is undefined, you must return the initial state.
             * Do not reference these action types directly in your code.
             */
            var randomString = function randomString() {
              return Math.random().toString(36).substring(7).split('').join('.');
            };

            var ActionTypes = {
              INIT: "@@redux/INIT" + randomString(),
              REPLACE: "@@redux/REPLACE" + randomString(),
              PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
                return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
              }
            };

            /**
             * @param {any} obj The object to inspect.
             * @returns {boolean} True if the argument appears to be a plain object.
             */
            function isPlainObject(obj) {
              if (typeof obj !== 'object' || obj === null) return false;
              var proto = obj;

              while (Object.getPrototypeOf(proto) !== null) {
                proto = Object.getPrototypeOf(proto);
              }

              return Object.getPrototypeOf(obj) === proto;
            }

            /**
             * Creates a Redux store that holds the state tree.
             * The only way to change the data in the store is to call `dispatch()` on it.
             *
             * There should only be a single store in your app. To specify how different
             * parts of the state tree respond to actions, you may combine several reducers
             * into a single reducer function by using `combineReducers`.
             *
             * @param {Function} reducer A function that returns the next state tree, given
             * the current state tree and the action to handle.
             *
             * @param {any} [preloadedState] The initial state. You may optionally specify it
             * to hydrate the state from the server in universal apps, or to restore a
             * previously serialized user session.
             * If you use `combineReducers` to produce the root reducer function, this must be
             * an object with the same shape as `combineReducers` keys.
             *
             * @param {Function} [enhancer] The store enhancer. You may optionally specify it
             * to enhance the store with third-party capabilities such as middleware,
             * time travel, persistence, etc. The only store enhancer that ships with Redux
             * is `applyMiddleware()`.
             *
             * @returns {Store} A Redux store that lets you read the state, dispatch actions
             * and subscribe to changes.
             */

            function createStore$2(reducer, preloadedState, enhancer) {
              var _ref2;

              if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
                throw new Error(formatProdErrorMessage(0) );
              }

              if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
                enhancer = preloadedState;
                preloadedState = undefined;
              }

              if (typeof enhancer !== 'undefined') {
                if (typeof enhancer !== 'function') {
                  throw new Error(formatProdErrorMessage(1) );
                }

                return enhancer(createStore$2)(reducer, preloadedState);
              }

              if (typeof reducer !== 'function') {
                throw new Error(formatProdErrorMessage(2) );
              }

              var currentReducer = reducer;
              var currentState = preloadedState;
              var currentListeners = [];
              var nextListeners = currentListeners;
              var isDispatching = false;
              /**
               * This makes a shallow copy of currentListeners so we can use
               * nextListeners as a temporary list while dispatching.
               *
               * This prevents any bugs around consumers calling
               * subscribe/unsubscribe in the middle of a dispatch.
               */

              function ensureCanMutateNextListeners() {
                if (nextListeners === currentListeners) {
                  nextListeners = currentListeners.slice();
                }
              }
              /**
               * Reads the state tree managed by the store.
               *
               * @returns {any} The current state tree of your application.
               */


              function getState() {
                if (isDispatching) {
                  throw new Error(formatProdErrorMessage(3) );
                }

                return currentState;
              }
              /**
               * Adds a change listener. It will be called any time an action is dispatched,
               * and some part of the state tree may potentially have changed. You may then
               * call `getState()` to read the current state tree inside the callback.
               *
               * You may call `dispatch()` from a change listener, with the following
               * caveats:
               *
               * 1. The subscriptions are snapshotted just before every `dispatch()` call.
               * If you subscribe or unsubscribe while the listeners are being invoked, this
               * will not have any effect on the `dispatch()` that is currently in progress.
               * However, the next `dispatch()` call, whether nested or not, will use a more
               * recent snapshot of the subscription list.
               *
               * 2. The listener should not expect to see all state changes, as the state
               * might have been updated multiple times during a nested `dispatch()` before
               * the listener is called. It is, however, guaranteed that all subscribers
               * registered before the `dispatch()` started will be called with the latest
               * state by the time it exits.
               *
               * @param {Function} listener A callback to be invoked on every dispatch.
               * @returns {Function} A function to remove this change listener.
               */


              function subscribe(listener) {
                if (typeof listener !== 'function') {
                  throw new Error(formatProdErrorMessage(4) );
                }

                if (isDispatching) {
                  throw new Error(formatProdErrorMessage(5) );
                }

                var isSubscribed = true;
                ensureCanMutateNextListeners();
                nextListeners.push(listener);
                return function unsubscribe() {
                  if (!isSubscribed) {
                    return;
                  }

                  if (isDispatching) {
                    throw new Error(formatProdErrorMessage(6) );
                  }

                  isSubscribed = false;
                  ensureCanMutateNextListeners();
                  var index = nextListeners.indexOf(listener);
                  nextListeners.splice(index, 1);
                  currentListeners = null;
                };
              }
              /**
               * Dispatches an action. It is the only way to trigger a state change.
               *
               * The `reducer` function, used to create the store, will be called with the
               * current state tree and the given `action`. Its return value will
               * be considered the **next** state of the tree, and the change listeners
               * will be notified.
               *
               * The base implementation only supports plain object actions. If you want to
               * dispatch a Promise, an Observable, a thunk, or something else, you need to
               * wrap your store creating function into the corresponding middleware. For
               * example, see the documentation for the `redux-thunk` package. Even the
               * middleware will eventually dispatch plain object actions using this method.
               *
               * @param {Object} action A plain object representing “what changed”. It is
               * a good idea to keep actions serializable so you can record and replay user
               * sessions, or use the time travelling `redux-devtools`. An action must have
               * a `type` property which may not be `undefined`. It is a good idea to use
               * string constants for action types.
               *
               * @returns {Object} For convenience, the same action object you dispatched.
               *
               * Note that, if you use a custom middleware, it may wrap `dispatch()` to
               * return something else (for example, a Promise you can await).
               */


              function dispatch(action) {
                if (!isPlainObject(action)) {
                  throw new Error(formatProdErrorMessage(7) );
                }

                if (typeof action.type === 'undefined') {
                  throw new Error(formatProdErrorMessage(8) );
                }

                if (isDispatching) {
                  throw new Error(formatProdErrorMessage(9) );
                }

                try {
                  isDispatching = true;
                  currentState = currentReducer(currentState, action);
                } finally {
                  isDispatching = false;
                }

                var listeners = currentListeners = nextListeners;

                for (var i = 0; i < listeners.length; i++) {
                  var listener = listeners[i];
                  listener();
                }

                return action;
              }
              /**
               * Replaces the reducer currently used by the store to calculate the state.
               *
               * You might need this if your app implements code splitting and you want to
               * load some of the reducers dynamically. You might also need this if you
               * implement a hot reloading mechanism for Redux.
               *
               * @param {Function} nextReducer The reducer for the store to use instead.
               * @returns {void}
               */


              function replaceReducer(nextReducer) {
                if (typeof nextReducer !== 'function') {
                  throw new Error(formatProdErrorMessage(10) );
                }

                currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
                // Any reducers that existed in both the new and old rootReducer
                // will receive the previous state. This effectively populates
                // the new state tree with any relevant data from the old one.

                dispatch({
                  type: ActionTypes.REPLACE
                });
              }
              /**
               * Interoperability point for observable/reactive libraries.
               * @returns {observable} A minimal observable of state changes.
               * For more information, see the observable proposal:
               * https://github.com/tc39/proposal-observable
               */


              function observable() {
                var _ref;

                var outerSubscribe = subscribe;
                return _ref = {
                  /**
                   * The minimal observable subscription method.
                   * @param {Object} observer Any object that can be used as an observer.
                   * The observer object should have a `next` method.
                   * @returns {subscription} An object with an `unsubscribe` method that can
                   * be used to unsubscribe the observable from the store, and prevent further
                   * emission of values from the observable.
                   */
                  subscribe: function subscribe(observer) {
                    if (typeof observer !== 'object' || observer === null) {
                      throw new Error(formatProdErrorMessage(11) );
                    }

                    function observeState() {
                      if (observer.next) {
                        observer.next(getState());
                      }
                    }

                    observeState();
                    var unsubscribe = outerSubscribe(observeState);
                    return {
                      unsubscribe: unsubscribe
                    };
                  }
                }, _ref[$$observable] = function () {
                  return this;
                }, _ref;
              } // When a store is created, an "INIT" action is dispatched so that every
              // reducer returns their initial state. This effectively populates
              // the initial state tree.


              dispatch({
                type: ActionTypes.INIT
              });
              return _ref2 = {
                dispatch: dispatch,
                subscribe: subscribe,
                getState: getState,
                replaceReducer: replaceReducer
              }, _ref2[$$observable] = observable, _ref2;
            }

            var __extends = (undefined && undefined.__extends) || (function () {
                var extendStatics = function (d, b) {
                    extendStatics = Object.setPrototypeOf ||
                        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
                    return extendStatics(d, b);
                };
                return function (d, b) {
                    if (typeof b !== "function" && b !== null)
                        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                    extendStatics(d, b);
                    function __() { this.constructor = d; }
                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                };
            })();
            (undefined && undefined.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f) throw new TypeError("Generator is already executing.");
                    while (_) try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                        if (y = 0, t) op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0: case 1: t = op; break;
                            case 4: _.label++; return { value: op[1], done: false };
                            case 5: _.label++; y = op[1]; op = [0]; continue;
                            case 7: op = _.ops.pop(); _.trys.pop(); continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                if (t[2]) _.ops.pop();
                                _.trys.pop(); continue;
                        }
                        op = body.call(thisArg, _);
                    } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                    if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
                for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
                    to[j] = from[i];
                return to;
            };
            var __defProp = Object.defineProperty;
            var __getOwnPropSymbols = Object.getOwnPropertySymbols;
            var __hasOwnProp = Object.prototype.hasOwnProperty;
            var __propIsEnum = Object.prototype.propertyIsEnumerable;
            var __defNormalProp = function (obj, key, value) { return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value: value }) : obj[key] = value; };
            var __spreadValues = function (a, b) {
                for (var prop in b || (b = {}))
                    if (__hasOwnProp.call(b, prop))
                        __defNormalProp(a, prop, b[prop]);
                if (__getOwnPropSymbols)
                    for (var _i = 0, _c = __getOwnPropSymbols(b); _i < _c.length; _i++) {
                        var prop = _c[_i];
                        if (__propIsEnum.call(b, prop))
                            __defNormalProp(a, prop, b[prop]);
                    }
                return a;
            };
            /** @class */ ((function (_super) {
                __extends(MiddlewareArray, _super);
                function MiddlewareArray() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var _this = _super.apply(this, args) || this;
                    Object.setPrototypeOf(_this, MiddlewareArray.prototype);
                    return _this;
                }
                Object.defineProperty(MiddlewareArray, Symbol.species, {
                    get: function () {
                        return MiddlewareArray;
                    },
                    enumerable: false,
                    configurable: true
                });
                MiddlewareArray.prototype.concat = function () {
                    var arr = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        arr[_i] = arguments[_i];
                    }
                    return _super.prototype.concat.apply(this, arr);
                };
                MiddlewareArray.prototype.prepend = function () {
                    var arr = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        arr[_i] = arguments[_i];
                    }
                    if (arr.length === 1 && Array.isArray(arr[0])) {
                        return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr[0].concat(this))))();
                    }
                    return new (MiddlewareArray.bind.apply(MiddlewareArray, __spreadArray([void 0], arr.concat(this))))();
                };
                return MiddlewareArray;
            })(Array));
            // src/createAction.ts
            function createAction(type, prepareAction) {
                function actionCreator() {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    if (prepareAction) {
                        var prepared = prepareAction.apply(void 0, args);
                        if (!prepared) {
                            throw new Error("prepareAction did not return an object");
                        }
                        return __spreadValues(__spreadValues({
                            type: type,
                            payload: prepared.payload
                        }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
                    }
                    return { type: type, payload: args[0] };
                }
                actionCreator.toString = function () { return "" + type; };
                actionCreator.type = type;
                actionCreator.match = function (action) { return action.type === type; };
                return actionCreator;
            }
            // src/mapBuilders.ts
            function executeReducerBuilderCallback(builderCallback) {
                var actionsMap = {};
                var actionMatchers = [];
                var defaultCaseReducer;
                var builder = {
                    addCase: function (typeOrActionCreator, reducer) {
                        var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
                        if (type in actionsMap) {
                            throw new Error("addCase cannot be called with two reducers for the same action type");
                        }
                        actionsMap[type] = reducer;
                        return builder;
                    },
                    addMatcher: function (matcher, reducer) {
                        actionMatchers.push({ matcher: matcher, reducer: reducer });
                        return builder;
                    },
                    addDefaultCase: function (reducer) {
                        defaultCaseReducer = reducer;
                        return builder;
                    }
                };
                builderCallback(builder);
                return [actionsMap, actionMatchers, defaultCaseReducer];
            }
            // src/createReducer.ts
            function isStateFunction(x) {
                return typeof x === "function";
            }
            function createReducer(initialState, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
                if (actionMatchers === void 0) { actionMatchers = []; }
                var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
                var getInitialState;
                if (isStateFunction(initialState)) {
                    getInitialState = function () { return createNextState2(initialState(), function () {
                    }); };
                }
                else {
                    var frozenInitialState_1 = createNextState2(initialState, function () {
                    });
                    getInitialState = function () { return frozenInitialState_1; };
                }
                function reducer(state, action) {
                    if (state === void 0) { state = getInitialState(); }
                    var caseReducers = __spreadArray([
                        actionsMap[action.type]
                    ], finalActionMatchers.filter(function (_c) {
                        var matcher = _c.matcher;
                        return matcher(action);
                    }).map(function (_c) {
                        var reducer2 = _c.reducer;
                        return reducer2;
                    }));
                    if (caseReducers.filter(function (cr) { return !!cr; }).length === 0) {
                        caseReducers = [finalDefaultCaseReducer];
                    }
                    return caseReducers.reduce(function (previousState, caseReducer) {
                        if (caseReducer) {
                            if (r$3(previousState)) {
                                var draft = previousState;
                                var result = caseReducer(draft, action);
                                if (typeof result === "undefined") {
                                    return previousState;
                                }
                                return result;
                            }
                            else if (!t$2(previousState)) {
                                var result = caseReducer(previousState, action);
                                if (typeof result === "undefined") {
                                    if (previousState === null) {
                                        return previousState;
                                    }
                                    throw Error("A case reducer on a non-draftable value must not return undefined");
                                }
                                return result;
                            }
                            else {
                                return createNextState2(previousState, function (draft) {
                                    return caseReducer(draft, action);
                                });
                            }
                        }
                        return previousState;
                    }, state);
                }
                reducer.getInitialState = getInitialState;
                return reducer;
            }
            // src/createSlice.ts
            function getType2(slice, actionKey) {
                return slice + "/" + actionKey;
            }
            function createSlice(options) {
                var name = options.name;
                if (!name) {
                    throw new Error("`name` is a required option for createSlice");
                }
                var initialState = typeof options.initialState == "function" ? options.initialState : createNextState2(options.initialState, function () {
                });
                var reducers = options.reducers || {};
                var reducerNames = Object.keys(reducers);
                var sliceCaseReducersByName = {};
                var sliceCaseReducersByType = {};
                var actionCreators = {};
                reducerNames.forEach(function (reducerName) {
                    var maybeReducerWithPrepare = reducers[reducerName];
                    var type = getType2(name, reducerName);
                    var caseReducer;
                    var prepareCallback;
                    if ("reducer" in maybeReducerWithPrepare) {
                        caseReducer = maybeReducerWithPrepare.reducer;
                        prepareCallback = maybeReducerWithPrepare.prepare;
                    }
                    else {
                        caseReducer = maybeReducerWithPrepare;
                    }
                    sliceCaseReducersByName[reducerName] = caseReducer;
                    sliceCaseReducersByType[type] = caseReducer;
                    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
                });
                function buildReducer() {
                    var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
                    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
                    return createReducer(initialState, finalCaseReducers, actionMatchers, defaultCaseReducer);
                }
                var _reducer;
                return {
                    name: name,
                    reducer: function (state, action) {
                        if (!_reducer)
                            _reducer = buildReducer();
                        return _reducer(state, action);
                    },
                    actions: actionCreators,
                    caseReducers: sliceCaseReducersByName,
                    getInitialState: function () {
                        if (!_reducer)
                            _reducer = buildReducer();
                        return _reducer.getInitialState();
                    }
                };
            }
            // src/index.ts
            N();

            var DEFAULT_CALL_GAS_REQUIRED = 1000000;
            var DEFAULT_CHUNK_GAS_REQUIRED = 200000;
            var CHUNK_GAS_LIMIT = 100000000;
            // Consts for hooks

            var INVALID_RESULT = {
              valid: false,
              blockNumber: undefined,
              data: undefined
            };
            var INVALID_CALL_STATE = {
              valid: false,
              result: undefined,
              loading: false,
              syncing: false,
              error: false
            };
            var LOADING_CALL_STATE = {
              valid: true,
              result: undefined,
              loading: true,
              syncing: true,
              error: false
            };

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }

              if (info.done) {
                resolve(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }

            function _asyncToGenerator(fn) {
              return function () {
                var self = this,
                    args = arguments;
                return new Promise(function (resolve, reject) {
                  var gen = fn.apply(self, args);

                  function _next(value) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                  }

                  function _throw(err) {
                    asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                  }

                  _next(undefined);
                });
              };
            }

            function _extends() {
              _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];

                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }

                return target;
              };

              return _extends.apply(this, arguments);
            }

            function _inheritsLoose(subClass, superClass) {
              subClass.prototype = Object.create(superClass.prototype);
              subClass.prototype.constructor = subClass;

              _setPrototypeOf$1(subClass, superClass);
            }

            function _getPrototypeOf$1(o) {
              _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
              return _getPrototypeOf$1(o);
            }

            function _setPrototypeOf$1(o, p) {
              _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

              return _setPrototypeOf$1(o, p);
            }

            function _isNativeReflectConstruct() {
              if (typeof Reflect === "undefined" || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if (typeof Proxy === "function") return true;

              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                return true;
              } catch (e) {
                return false;
              }
            }

            function _construct(Parent, args, Class) {
              if (_isNativeReflectConstruct()) {
                _construct = Reflect.construct;
              } else {
                _construct = function _construct(Parent, args, Class) {
                  var a = [null];
                  a.push.apply(a, args);
                  var Constructor = Function.bind.apply(Parent, a);
                  var instance = new Constructor();
                  if (Class) _setPrototypeOf$1(instance, Class.prototype);
                  return instance;
                };
              }

              return _construct.apply(null, arguments);
            }

            function _isNativeFunction(fn) {
              return Function.toString.call(fn).indexOf("[native code]") !== -1;
            }

            function _wrapNativeSuper(Class) {
              var _cache = typeof Map === "function" ? new Map() : undefined;

              _wrapNativeSuper = function _wrapNativeSuper(Class) {
                if (Class === null || !_isNativeFunction(Class)) return Class;

                if (typeof Class !== "function") {
                  throw new TypeError("Super expression must either be null or a function");
                }

                if (typeof _cache !== "undefined") {
                  if (_cache.has(Class)) return _cache.get(Class);

                  _cache.set(Class, Wrapper);
                }

                function Wrapper() {
                  return _construct(Class, arguments, _getPrototypeOf$1(this).constructor);
                }

                Wrapper.prototype = Object.create(Class.prototype, {
                  constructor: {
                    value: Wrapper,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                });
                return _setPrototypeOf$1(Wrapper, Class);
              };

              return _wrapNativeSuper(Class);
            }

            function _unsupportedIterableToArray$2(o, minLen) {
              if (!o) return;
              if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor) n = o.constructor.name;
              if (n === "Map" || n === "Set") return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
            }

            function _arrayLikeToArray$2(arr, len) {
              if (len == null || len > arr.length) len = arr.length;

              for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

              return arr2;
            }

            function _createForOfIteratorHelperLoose(o, allowArrayLike) {
              var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
              if (it) return (it = it.call(o)).next.bind(it);

              if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") {
                if (it) o = it;
                var i = 0;
                return function () {
                  if (i >= o.length) return {
                    done: true
                  };
                  return {
                    done: false,
                    value: o[i++]
                  };
                };
              }

              throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function toCallKey(call) {
              var key = call.address + "-" + call.callData;

              if (call.gasRequired) {
                if (!Number.isSafeInteger(call.gasRequired)) {
                  throw new Error("Invalid number: " + call.gasRequired);
                }

                key += "-" + call.gasRequired;
              }

              return key;
            }
            function parseCallKey(callKey) {
              var pcs = callKey.split('-');

              if (![2, 3].includes(pcs.length)) {
                throw new Error("Invalid call key: " + callKey);
              }

              return _extends({
                address: pcs[0],
                callData: pcs[1]
              }, pcs[2] ? {
                gasRequired: Number.parseInt(pcs[2])
              } : {});
            }
            function callsToCallKeys(calls) {
              var _calls$filter$map$sor, _calls$filter, _calls$filter$map;

              return (_calls$filter$map$sor = calls == null ? void 0 : (_calls$filter = calls.filter(function (c) {
                return Boolean(c);
              })) == null ? void 0 : (_calls$filter$map = _calls$filter.map(toCallKey)) == null ? void 0 : _calls$filter$map.sort()) != null ? _calls$filter$map$sor : [];
            }
            function callKeysToCalls(callKeys) {
              if (!(callKeys != null && callKeys.length)) return null;
              return callKeys.map(function (key) {
                return parseCallKey(key);
              });
            }

            function toCallState(callResult, contractInterface, fragment, latestBlockNumber) {
              if (!callResult) return INVALID_CALL_STATE;
              var valid = callResult.valid,
                  data = callResult.data,
                  blockNumber = callResult.blockNumber;
              if (!valid) return INVALID_CALL_STATE;
              if (valid && !blockNumber) return LOADING_CALL_STATE;
              if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE;
              var success = data && data.length > 2;
              var syncing = (blockNumber != null ? blockNumber : 0) < latestBlockNumber;
              var result = undefined;

              if (success && data) {
                try {
                  result = contractInterface.decodeFunctionResult(fragment, data);
                } catch (error) {
                  console.debug('Result data parsing failed', fragment, data);
                  return {
                    valid: true,
                    loading: false,
                    error: true,
                    syncing: syncing,
                    result: result
                  };
                }
              }

              return {
                valid: true,
                loading: false,
                syncing: syncing,
                result: result,
                error: !success
              };
            }

            function isMethodArg(x) {
              return BigNumber.isBigNumber(x) || ['string', 'number'].indexOf(typeof x) !== -1;
            }
            function isValidMethodArgs(x) {
              return x === undefined || Array.isArray(x) && x.every(function (xi) {
                return isMethodArg(xi) || Array.isArray(xi) && xi.every(isMethodArg);
              });
            }

            function useCallsDataSubscription(context, chainId, calls, blocksPerFetch) {
              if (blocksPerFetch === void 0) {
                blocksPerFetch = 1;
              }

              var reducerPath = context.reducerPath,
                  actions = context.actions;
              var callResults = useSelector(function (state) {
                return state[reducerPath].callResults;
              });
              var dispatch = useDispatch();
              var serializedCallKeys = React.useMemo(function () {
                return JSON.stringify(callsToCallKeys(calls));
              }, [calls]); // update listeners when there is an actual change that persists for at least 100ms

              React.useEffect(function () {
                var callKeys = JSON.parse(serializedCallKeys);
                var calls = callKeysToCalls(callKeys);
                if (!chainId || !calls) return;
                dispatch(actions.addMulticallListeners({
                  chainId: chainId,
                  calls: calls,
                  options: {
                    blocksPerFetch: blocksPerFetch
                  }
                }));
                return function () {
                  dispatch(actions.removeMulticallListeners({
                    chainId: chainId,
                    calls: calls,
                    options: {
                      blocksPerFetch: blocksPerFetch
                    }
                  }));
                };
              }, [actions, chainId, dispatch, blocksPerFetch, serializedCallKeys]);
              return React.useMemo(function () {
                return calls.map(function (call) {
                  var _callResults$chainId;

                  if (!chainId || !call) return INVALID_RESULT;
                  var result = (_callResults$chainId = callResults[chainId]) == null ? void 0 : _callResults$chainId[toCallKey(call)];
                  var data = result != null && result.data && result.data !== '0x' ? result.data : undefined;
                  return {
                    valid: true,
                    data: data,
                    blockNumber: result == null ? void 0 : result.blockNumber
                  };
                });
              }, [callResults, calls, chainId]);
            } // Similar to useCallsDataSubscription above but for subscribing to
            // calls to multiple chains at once


            function useMultichainCallsDataSubscription(context, chainToCalls, blocksPerFetch) {
              if (blocksPerFetch === void 0) {
                blocksPerFetch = 1;
              }

              var reducerPath = context.reducerPath,
                  actions = context.actions;
              var callResults = useSelector(function (state) {
                return state[reducerPath].callResults;
              });
              var dispatch = useDispatch();
              var serializedCallKeys = React.useMemo(function () {
                var sortedChainIds = getChainIds(chainToCalls).sort();
                var chainCallKeysTuple = sortedChainIds.map(function (chainId) {
                  var calls = chainToCalls[chainId];
                  var callKeys = callsToCallKeys(calls); // Note, using a tuple to ensure consistent order when serialized

                  return [chainId, callKeys];
                });
                return JSON.stringify(chainCallKeysTuple);
              }, [chainToCalls]);
              React.useEffect(function () {
                var chainCallKeysTuples = JSON.parse(serializedCallKeys);
                if (!(chainCallKeysTuples != null && chainCallKeysTuples.length)) return;
                reactDom.exports.unstable_batchedUpdates(function () {
                  for (var _iterator = _createForOfIteratorHelperLoose(chainCallKeysTuples), _step; !(_step = _iterator()).done;) {
                    var _step$value = _step.value,
                        chainId = _step$value[0],
                        callKeys = _step$value[1];
                    var calls = callKeysToCalls(callKeys);
                    if (!(calls != null && calls.length)) continue;
                    dispatch(actions.addMulticallListeners({
                      chainId: chainId,
                      calls: calls,
                      options: {
                        blocksPerFetch: blocksPerFetch
                      }
                    }));
                  }
                });
                return function () {
                  reactDom.exports.unstable_batchedUpdates(function () {
                    for (var _iterator2 = _createForOfIteratorHelperLoose(chainCallKeysTuples), _step2; !(_step2 = _iterator2()).done;) {
                      var _step2$value = _step2.value,
                          chainId = _step2$value[0],
                          callKeys = _step2$value[1];
                      var calls = callKeysToCalls(callKeys);
                      if (!(calls != null && calls.length)) continue;
                      dispatch(actions.removeMulticallListeners({
                        chainId: chainId,
                        calls: calls,
                        options: {
                          blocksPerFetch: blocksPerFetch
                        }
                      }));
                    }
                  });
                };
              }, [actions, dispatch, blocksPerFetch, serializedCallKeys]);
              return React.useMemo(function () {
                return getChainIds(chainToCalls).reduce(function (result, chainId) {
                  var calls = chainToCalls[chainId];
                  result[chainId] = calls.map(function (call) {
                    var _callResults$chainId2;

                    if (!chainId || !call) return INVALID_RESULT;
                    var result = (_callResults$chainId2 = callResults[chainId]) == null ? void 0 : _callResults$chainId2[toCallKey(call)];
                    var data = result != null && result.data && result.data !== '0x' ? result.data : undefined;
                    return {
                      valid: true,
                      data: data,
                      blockNumber: result == null ? void 0 : result.blockNumber
                    };
                  });
                  return result;
                }, {});
              }, [callResults, chainToCalls]);
            } // formats many calls to a single function on a single contract, with the function name and inputs specified


            function useSingleContractMultipleData(context, chainId, latestBlockNumber, contract, methodName, callInputs, options) {
              var _ref = options != null ? options : {},
                  gasRequired = _ref.gasRequired,
                  blocksPerFetch = _ref.blocksPerFetch; // Create ethers function fragment


              var fragment = React.useMemo(function () {
                var _contract$interface;

                return contract == null ? void 0 : (_contract$interface = contract["interface"]) == null ? void 0 : _contract$interface.getFunction(methodName);
              }, [contract, methodName]); // Get encoded call data. Note can't use useCallData below b.c. this is  for a list of CallInputs

              var callDatas = React.useMemo(function () {
                if (!contract || !fragment) return [];
                return callInputs.map(function (callInput) {
                  return isValidMethodArgs(callInput) ? contract["interface"].encodeFunctionData(fragment, callInput) : undefined;
                });
              }, [callInputs, contract, fragment]); // Create call objects

              var calls = React.useMemo(function () {
                if (!contract) return [];
                return callDatas.map(function (callData) {
                  if (!callData) return undefined;
                  return {
                    address: contract.address,
                    callData: callData,
                    gasRequired: gasRequired
                  };
                });
              }, [contract, callDatas, gasRequired]); // Subscribe to call data

              var results = useCallsDataSubscription(context, chainId, calls, blocksPerFetch);
              return React.useMemo(function () {
                return results.map(function (result) {
                  return toCallState(result, contract == null ? void 0 : contract["interface"], fragment, latestBlockNumber);
                });
              }, [results, contract, fragment, latestBlockNumber]);
            }
            function useMultipleContractSingleData(context, chainId, latestBlockNumber, addresses, contractInterface, methodName, callInputs, options) {
              var _ref2 = options != null ? options : {},
                  gasRequired = _ref2.gasRequired,
                  blocksPerFetch = _ref2.blocksPerFetch;

              var _useCallData = useCallData(methodName, contractInterface, callInputs),
                  fragment = _useCallData.fragment,
                  callData = _useCallData.callData; // Create call objects


              var calls = React.useMemo(function () {
                if (!callData) return [];
                return addresses.map(function (address) {
                  if (!address) return undefined;
                  return {
                    address: address,
                    callData: callData,
                    gasRequired: gasRequired
                  };
                });
              }, [addresses, callData, gasRequired]); // Subscribe to call data

              var results = useCallsDataSubscription(context, chainId, calls, blocksPerFetch);
              return React.useMemo(function () {
                return results.map(function (result) {
                  return toCallState(result, contractInterface, fragment, latestBlockNumber);
                });
              }, [fragment, results, contractInterface, latestBlockNumber]);
            }
            function useSingleCallResult(context, chainId, latestBlockNumber, contract, methodName, inputs, options) {
              var _useSingleContractMul;

              return (_useSingleContractMul = useSingleContractMultipleData(context, chainId, latestBlockNumber, contract, methodName, [inputs], options)[0]) != null ? _useSingleContractMul : INVALID_CALL_STATE;
            } // formats many calls to any number of functions on a single contract, with only the calldata specified

            function useSingleContractWithCallData(context, chainId, latestBlockNumber, contract, callDatas, options) {
              var _ref3 = options != null ? options : {},
                  gasRequired = _ref3.gasRequired,
                  blocksPerFetch = _ref3.blocksPerFetch; // Create call objects


              var calls = React.useMemo(function () {
                if (!contract) return [];
                return callDatas.map(function (callData) {
                  return {
                    address: contract.address,
                    callData: callData,
                    gasRequired: gasRequired
                  };
                });
              }, [contract, callDatas, gasRequired]); // Subscribe to call data

              var results = useCallsDataSubscription(context, chainId, calls, blocksPerFetch);
              return React.useMemo(function () {
                return results.map(function (result, i) {
                  var _contract$interface2;

                  return toCallState(result, contract == null ? void 0 : contract["interface"], contract == null ? void 0 : (_contract$interface2 = contract["interface"]) == null ? void 0 : _contract$interface2.getFunction(callDatas[i].substring(0, 10)), latestBlockNumber);
                });
              }, [results, contract, callDatas, latestBlockNumber]);
            } // Similar to useMultipleContractSingleData but instead of multiple contracts on one chain,
            // this is for querying compatible contracts on multiple chains

            function useMultiChainMultiContractSingleData(context, chainToBlockNumber, chainToAddresses, contractInterface, methodName, callInputs, options) {
              var _ref4 = options != null ? options : {},
                  gasRequired = _ref4.gasRequired,
                  blocksPerFetch = _ref4.blocksPerFetch;

              var _useCallData2 = useCallData(methodName, contractInterface, callInputs),
                  fragment = _useCallData2.fragment,
                  callData = _useCallData2.callData; // Create call objects


              var chainToCalls = React.useMemo(function () {
                if (!callData || !chainToAddresses) return {};
                return getChainIds(chainToAddresses).reduce(function (result, chainId) {
                  var addresses = chainToAddresses[chainId];
                  var calls = addresses.map(function (address) {
                    if (!address) return undefined;
                    return {
                      address: address,
                      callData: callData,
                      gasRequired: gasRequired
                    };
                  });
                  result[chainId] = calls;
                  return result;
                }, {});
              }, [chainToAddresses, callData, gasRequired]); // Subscribe to call data

              var chainIdToResults = useMultichainCallsDataSubscription(context, chainToCalls, blocksPerFetch);
              return React.useMemo(function () {
                return getChainIds(chainIdToResults).reduce(function (combinedResults, chainId) {
                  var latestBlockNumber = chainToBlockNumber == null ? void 0 : chainToBlockNumber[chainId];
                  var results = chainIdToResults[chainId];
                  combinedResults[chainId] = results.map(function (result) {
                    return toCallState(result, contractInterface, fragment, latestBlockNumber);
                  });
                  return combinedResults;
                }, {});
              }, [fragment, contractInterface, chainIdToResults, chainToBlockNumber]);
            } // Similar to useSingleCallResult but instead of one contract on one chain,
            // this is for querying a contract on multiple chains

            function useMultiChainSingleContractSingleData(context, chainToBlockNumber, chainToAddress, contractInterface, methodName, callInputs, options) {
              // This hook uses the more flexible useMultiChainMultiContractSingleData internally,
              // but transforms the inputs and outputs for convenience
              var chainIdToAddresses = React.useMemo(function () {
                return getChainIds(chainToAddress).reduce(function (result, chainId) {
                  result[chainId] = [chainToAddress[chainId]];
                  return result;
                }, {});
              }, [chainToAddress]);
              var multiContractResults = useMultiChainMultiContractSingleData(context, chainToBlockNumber, chainIdToAddresses, contractInterface, methodName, callInputs, options);
              return React.useMemo(function () {
                return getChainIds(chainToAddress).reduce(function (result, chainId) {
                  var _multiContractResults, _multiContractResults2;

                  result[chainId] = (_multiContractResults = (_multiContractResults2 = multiContractResults[chainId]) == null ? void 0 : _multiContractResults2[0]) != null ? _multiContractResults : INVALID_CALL_STATE;
                  return result;
                }, {});
              }, [chainToAddress, multiContractResults]);
            }

            function useCallData(methodName, contractInterface, callInputs) {
              // Create ethers function fragment
              var fragment = React.useMemo(function () {
                return contractInterface == null ? void 0 : contractInterface.getFunction(methodName);
              }, [contractInterface, methodName]); // Get encoded call data

              var callData = React.useMemo(function () {
                return fragment && isValidMethodArgs(callInputs) ? contractInterface == null ? void 0 : contractInterface.encodeFunctionData(fragment, callInputs) : undefined;
              }, [callInputs, contractInterface, fragment]);
              return {
                fragment: fragment,
                callData: callData
              };
            }

            function getChainIds(chainIdMap) {
              return Object.keys(chainIdMap).map(function (c) {
                return parseInt(c, 10);
              });
            }

            var initialState = {
              callResults: {}
            };
            function createMulticallSlice(reducerPath) {
              return createSlice({
                name: reducerPath,
                initialState: initialState,
                reducers: {
                  addMulticallListeners: function addMulticallListeners(state, action) {
                    var _listeners$chainId;

                    var _action$payload = action.payload,
                        calls = _action$payload.calls,
                        chainId = _action$payload.chainId,
                        blocksPerFetch = _action$payload.options.blocksPerFetch;
                    var listeners = state.callListeners ? state.callListeners : state.callListeners = {};
                    listeners[chainId] = (_listeners$chainId = listeners[chainId]) != null ? _listeners$chainId : {};
                    calls.forEach(function (call) {
                      var _listeners$chainId$ca, _listeners$chainId$ca2;

                      var callKey = toCallKey(call);
                      listeners[chainId][callKey] = (_listeners$chainId$ca = listeners[chainId][callKey]) != null ? _listeners$chainId$ca : {};
                      listeners[chainId][callKey][blocksPerFetch] = ((_listeners$chainId$ca2 = listeners[chainId][callKey][blocksPerFetch]) != null ? _listeners$chainId$ca2 : 0) + 1;
                    });
                  },
                  removeMulticallListeners: function removeMulticallListeners(state, action) {
                    var _action$payload2 = action.payload,
                        calls = _action$payload2.calls,
                        chainId = _action$payload2.chainId,
                        blocksPerFetch = _action$payload2.options.blocksPerFetch;
                    var listeners = state.callListeners ? state.callListeners : state.callListeners = {};
                    if (!listeners[chainId]) return;
                    calls.forEach(function (call) {
                      var callKey = toCallKey(call);
                      if (!listeners[chainId][callKey]) return;
                      if (!listeners[chainId][callKey][blocksPerFetch]) return;

                      if (listeners[chainId][callKey][blocksPerFetch] === 1) {
                        delete listeners[chainId][callKey][blocksPerFetch];
                      } else {
                        listeners[chainId][callKey][blocksPerFetch]--;
                      }
                    });
                  },
                  fetchingMulticallResults: function fetchingMulticallResults(state, action) {
                    var _state$callResults$ch;

                    var _action$payload3 = action.payload,
                        chainId = _action$payload3.chainId,
                        fetchingBlockNumber = _action$payload3.fetchingBlockNumber,
                        calls = _action$payload3.calls;
                    state.callResults[chainId] = (_state$callResults$ch = state.callResults[chainId]) != null ? _state$callResults$ch : {};
                    calls.forEach(function (call) {
                      var callKey = toCallKey(call);
                      var current = state.callResults[chainId][callKey];

                      if (!current) {
                        state.callResults[chainId][callKey] = {
                          fetchingBlockNumber: fetchingBlockNumber
                        };
                      } else {
                        var _current$fetchingBloc;

                        if (((_current$fetchingBloc = current.fetchingBlockNumber) != null ? _current$fetchingBloc : 0) >= fetchingBlockNumber) return;
                        state.callResults[chainId][callKey].fetchingBlockNumber = fetchingBlockNumber;
                      }
                    });
                  },
                  errorFetchingMulticallResults: function errorFetchingMulticallResults(state, action) {
                    var _state$callResults$ch2;

                    var _action$payload4 = action.payload,
                        chainId = _action$payload4.chainId,
                        fetchingBlockNumber = _action$payload4.fetchingBlockNumber,
                        calls = _action$payload4.calls;
                    state.callResults[chainId] = (_state$callResults$ch2 = state.callResults[chainId]) != null ? _state$callResults$ch2 : {};
                    calls.forEach(function (call) {
                      var callKey = toCallKey(call);
                      var current = state.callResults[chainId][callKey];
                      if (!current || typeof current.fetchingBlockNumber !== 'number') return; // only should be dispatched if we are already fetching

                      if (current.fetchingBlockNumber <= fetchingBlockNumber) {
                        delete current.fetchingBlockNumber;
                        current.data = null;
                        current.blockNumber = fetchingBlockNumber;
                      }
                    });
                  },
                  updateMulticallResults: function updateMulticallResults(state, action) {
                    var _state$callResults$ch3;

                    var _action$payload5 = action.payload,
                        chainId = _action$payload5.chainId,
                        results = _action$payload5.results,
                        blockNumber = _action$payload5.blockNumber;
                    state.callResults[chainId] = (_state$callResults$ch3 = state.callResults[chainId]) != null ? _state$callResults$ch3 : {};
                    Object.keys(results).forEach(function (callKey) {
                      var _current$blockNumber;

                      var current = state.callResults[chainId][callKey];
                      if (((_current$blockNumber = current == null ? void 0 : current.blockNumber) != null ? _current$blockNumber : 0) > blockNumber) return;
                      state.callResults[chainId][callKey] = {
                        data: results[callKey],
                        blockNumber: blockNumber
                      };
                    });
                  }
                }
              });
            }

            function createCommonjsModule(fn, module) {
            	return module = { exports: {} }, fn(module, module.exports), module.exports;
            }

            var runtime_1 = createCommonjsModule(function (module) {
            /**
             * Copyright (c) 2014-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            var runtime = (function (exports) {

              var Op = Object.prototype;
              var hasOwn = Op.hasOwnProperty;
              var undefined$1; // More compressible than void 0.
              var $Symbol = typeof Symbol === "function" ? Symbol : {};
              var iteratorSymbol = $Symbol.iterator || "@@iterator";
              var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
              var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

              function define(obj, key, value) {
                Object.defineProperty(obj, key, {
                  value: value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
                return obj[key];
              }
              try {
                // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                define({}, "");
              } catch (err) {
                define = function(obj, key, value) {
                  return obj[key] = value;
                };
              }

              function wrap(innerFn, outerFn, self, tryLocsList) {
                // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);

                // The ._invoke method unifies the implementations of the .next,
                // .throw, and .return methods.
                generator._invoke = makeInvokeMethod(innerFn, self, context);

                return generator;
              }
              exports.wrap = wrap;

              // Try/catch helper to minimize deoptimizations. Returns a completion
              // record like context.tryEntries[i].completion. This interface could
              // have been (and was previously) designed to take a closure to be
              // invoked without arguments, but in all the cases we care about we
              // already have an existing method we want to call, so there's no need
              // to create a new function object. We can even get away with assuming
              // the method takes exactly one argument, since that happens to be true
              // in every case, so we don't have to touch the arguments object. The
              // only additional allocation required is the completion record, which
              // has a stable shape and so hopefully should be cheap to allocate.
              function tryCatch(fn, obj, arg) {
                try {
                  return { type: "normal", arg: fn.call(obj, arg) };
                } catch (err) {
                  return { type: "throw", arg: err };
                }
              }

              var GenStateSuspendedStart = "suspendedStart";
              var GenStateSuspendedYield = "suspendedYield";
              var GenStateExecuting = "executing";
              var GenStateCompleted = "completed";

              // Returning this object from the innerFn has the same effect as
              // breaking out of the dispatch switch statement.
              var ContinueSentinel = {};

              // Dummy constructor functions that we use as the .constructor and
              // .constructor.prototype properties for functions that return Generator
              // objects. For full spec compliance, you may wish to configure your
              // minifier not to mangle the names of these two functions.
              function Generator() {}
              function GeneratorFunction() {}
              function GeneratorFunctionPrototype() {}

              // This is a polyfill for %IteratorPrototype% for environments that
              // don't natively support it.
              var IteratorPrototype = {};
              define(IteratorPrototype, iteratorSymbol, function () {
                return this;
              });

              var getProto = Object.getPrototypeOf;
              var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
              if (NativeIteratorPrototype &&
                  NativeIteratorPrototype !== Op &&
                  hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                // This environment has a native %IteratorPrototype%; use it instead
                // of the polyfill.
                IteratorPrototype = NativeIteratorPrototype;
              }

              var Gp = GeneratorFunctionPrototype.prototype =
                Generator.prototype = Object.create(IteratorPrototype);
              GeneratorFunction.prototype = GeneratorFunctionPrototype;
              define(Gp, "constructor", GeneratorFunctionPrototype);
              define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
              GeneratorFunction.displayName = define(
                GeneratorFunctionPrototype,
                toStringTagSymbol,
                "GeneratorFunction"
              );

              // Helper for defining the .next, .throw, and .return methods of the
              // Iterator interface in terms of a single ._invoke method.
              function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                  define(prototype, method, function(arg) {
                    return this._invoke(method, arg);
                  });
                });
              }

              exports.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor
                  ? ctor === GeneratorFunction ||
                    // For the native GeneratorFunction constructor, the best we can
                    // do is to check its .name property.
                    (ctor.displayName || ctor.name) === "GeneratorFunction"
                  : false;
              };

              exports.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                  Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                  genFun.__proto__ = GeneratorFunctionPrototype;
                  define(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
              };

              // Within the body of any async function, `await x` is transformed to
              // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
              // `hasOwn.call(value, "__await")` to determine if the yielded value is
              // meant to be awaited.
              exports.awrap = function(arg) {
                return { __await: arg };
              };

              function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                  var record = tryCatch(generator[method], generator, arg);
                  if (record.type === "throw") {
                    reject(record.arg);
                  } else {
                    var result = record.arg;
                    var value = result.value;
                    if (value &&
                        typeof value === "object" &&
                        hasOwn.call(value, "__await")) {
                      return PromiseImpl.resolve(value.__await).then(function(value) {
                        invoke("next", value, resolve, reject);
                      }, function(err) {
                        invoke("throw", err, resolve, reject);
                      });
                    }

                    return PromiseImpl.resolve(value).then(function(unwrapped) {
                      // When a yielded Promise is resolved, its final value becomes
                      // the .value of the Promise<{value,done}> result for the
                      // current iteration.
                      result.value = unwrapped;
                      resolve(result);
                    }, function(error) {
                      // If a rejected Promise was yielded, throw the rejection back
                      // into the async generator function so it can be handled there.
                      return invoke("throw", error, resolve, reject);
                    });
                  }
                }

                var previousPromise;

                function enqueue(method, arg) {
                  function callInvokeWithMethodAndArg() {
                    return new PromiseImpl(function(resolve, reject) {
                      invoke(method, arg, resolve, reject);
                    });
                  }

                  return previousPromise =
                    // If enqueue has been called before, then we want to wait until
                    // all previous Promises have been resolved before calling invoke,
                    // so that results are always delivered in the correct order. If
                    // enqueue has not been called before, then it is important to
                    // call invoke immediately, without waiting on a callback to fire,
                    // so that the async generator function has the opportunity to do
                    // any necessary setup in a predictable way. This predictability
                    // is why the Promise constructor synchronously invokes its
                    // executor callback, and why async functions synchronously
                    // execute code before the first await. Since we implement simple
                    // async functions in terms of async generators, it is especially
                    // important to get this right, even though it requires care.
                    previousPromise ? previousPromise.then(
                      callInvokeWithMethodAndArg,
                      // Avoid propagating failures to Promises returned by later
                      // invocations of the iterator.
                      callInvokeWithMethodAndArg
                    ) : callInvokeWithMethodAndArg();
                }

                // Define the unified helper method that is used to implement .next,
                // .throw, and .return (see defineIteratorMethods).
                this._invoke = enqueue;
              }

              defineIteratorMethods(AsyncIterator.prototype);
              define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
                return this;
              });
              exports.AsyncIterator = AsyncIterator;

              // Note that simple async functions are implemented on top of
              // AsyncIterator objects; they just return a Promise for the value of
              // the final result produced by the iterator.
              exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0) PromiseImpl = Promise;

                var iter = new AsyncIterator(
                  wrap(innerFn, outerFn, self, tryLocsList),
                  PromiseImpl
                );

                return exports.isGeneratorFunction(outerFn)
                  ? iter // If outerFn is a generator, return the full iterator.
                  : iter.next().then(function(result) {
                      return result.done ? result.value : iter.next();
                    });
              };

              function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;

                return function invoke(method, arg) {
                  if (state === GenStateExecuting) {
                    throw new Error("Generator is already running");
                  }

                  if (state === GenStateCompleted) {
                    if (method === "throw") {
                      throw arg;
                    }

                    // Be forgiving, per 25.3.3.3.3 of the spec:
                    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                    return doneResult();
                  }

                  context.method = method;
                  context.arg = arg;

                  while (true) {
                    var delegate = context.delegate;
                    if (delegate) {
                      var delegateResult = maybeInvokeDelegate(delegate, context);
                      if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                      }
                    }

                    if (context.method === "next") {
                      // Setting context._sent for legacy support of Babel's
                      // function.sent implementation.
                      context.sent = context._sent = context.arg;

                    } else if (context.method === "throw") {
                      if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                      }

                      context.dispatchException(context.arg);

                    } else if (context.method === "return") {
                      context.abrupt("return", context.arg);
                    }

                    state = GenStateExecuting;

                    var record = tryCatch(innerFn, self, context);
                    if (record.type === "normal") {
                      // If an exception is thrown from innerFn, we leave state ===
                      // GenStateExecuting and loop back for another invocation.
                      state = context.done
                        ? GenStateCompleted
                        : GenStateSuspendedYield;

                      if (record.arg === ContinueSentinel) {
                        continue;
                      }

                      return {
                        value: record.arg,
                        done: context.done
                      };

                    } else if (record.type === "throw") {
                      state = GenStateCompleted;
                      // Dispatch the exception by looping back around to the
                      // context.dispatchException(context.arg) call above.
                      context.method = "throw";
                      context.arg = record.arg;
                    }
                  }
                };
              }

              // Call delegate.iterator[context.method](context.arg) and handle the
              // result, either by returning a { value, done } result from the
              // delegate iterator, or by modifying context.method and context.arg,
              // setting context.delegate to null, and returning the ContinueSentinel.
              function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined$1) {
                  // A .throw or .return when the delegate iterator has no .throw
                  // method always terminates the yield* loop.
                  context.delegate = null;

                  if (context.method === "throw") {
                    // Note: ["return"] must be used for ES3 parsing compatibility.
                    if (delegate.iterator["return"]) {
                      // If the delegate iterator has a return method, give it a
                      // chance to clean up.
                      context.method = "return";
                      context.arg = undefined$1;
                      maybeInvokeDelegate(delegate, context);

                      if (context.method === "throw") {
                        // If maybeInvokeDelegate(context) changed context.method from
                        // "return" to "throw", let that override the TypeError below.
                        return ContinueSentinel;
                      }
                    }

                    context.method = "throw";
                    context.arg = new TypeError(
                      "The iterator does not provide a 'throw' method");
                  }

                  return ContinueSentinel;
                }

                var record = tryCatch(method, delegate.iterator, context.arg);

                if (record.type === "throw") {
                  context.method = "throw";
                  context.arg = record.arg;
                  context.delegate = null;
                  return ContinueSentinel;
                }

                var info = record.arg;

                if (! info) {
                  context.method = "throw";
                  context.arg = new TypeError("iterator result is not an object");
                  context.delegate = null;
                  return ContinueSentinel;
                }

                if (info.done) {
                  // Assign the result of the finished delegate to the temporary
                  // variable specified by delegate.resultName (see delegateYield).
                  context[delegate.resultName] = info.value;

                  // Resume execution at the desired location (see delegateYield).
                  context.next = delegate.nextLoc;

                  // If context.method was "throw" but the delegate handled the
                  // exception, let the outer generator proceed normally. If
                  // context.method was "next", forget context.arg since it has been
                  // "consumed" by the delegate iterator. If context.method was
                  // "return", allow the original .return call to continue in the
                  // outer generator.
                  if (context.method !== "return") {
                    context.method = "next";
                    context.arg = undefined$1;
                  }

                } else {
                  // Re-yield the result returned by the delegate method.
                  return info;
                }

                // The delegate iterator is finished, so forget it and continue with
                // the outer generator.
                context.delegate = null;
                return ContinueSentinel;
              }

              // Define Generator.prototype.{next,throw,return} in terms of the
              // unified ._invoke helper method.
              defineIteratorMethods(Gp);

              define(Gp, toStringTagSymbol, "Generator");

              // A Generator should always return itself as the iterator object when the
              // @@iterator function is called on it. Some browsers' implementations of the
              // iterator prototype chain incorrectly implement this, causing the Generator
              // object to not be returned from this call. This ensures that doesn't happen.
              // See https://github.com/facebook/regenerator/issues/274 for more details.
              define(Gp, iteratorSymbol, function() {
                return this;
              });

              define(Gp, "toString", function() {
                return "[object Generator]";
              });

              function pushTryEntry(locs) {
                var entry = { tryLoc: locs[0] };

                if (1 in locs) {
                  entry.catchLoc = locs[1];
                }

                if (2 in locs) {
                  entry.finallyLoc = locs[2];
                  entry.afterLoc = locs[3];
                }

                this.tryEntries.push(entry);
              }

              function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
              }

              function Context(tryLocsList) {
                // The root entry object (effectively a try statement without a catch
                // or a finally block) gives us a place to store values thrown from
                // locations where there is no enclosing try statement.
                this.tryEntries = [{ tryLoc: "root" }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
              }

              exports.keys = function(object) {
                var keys = [];
                for (var key in object) {
                  keys.push(key);
                }
                keys.reverse();

                // Rather than returning an object with a next method, we keep
                // things simple and return the next function itself.
                return function next() {
                  while (keys.length) {
                    var key = keys.pop();
                    if (key in object) {
                      next.value = key;
                      next.done = false;
                      return next;
                    }
                  }

                  // To avoid creating an additional object, we just hang the .value
                  // and .done properties off the next function object itself. This
                  // also ensures that the minifier will not anonymize the function.
                  next.done = true;
                  return next;
                };
              };

              function values(iterable) {
                if (iterable) {
                  var iteratorMethod = iterable[iteratorSymbol];
                  if (iteratorMethod) {
                    return iteratorMethod.call(iterable);
                  }

                  if (typeof iterable.next === "function") {
                    return iterable;
                  }

                  if (!isNaN(iterable.length)) {
                    var i = -1, next = function next() {
                      while (++i < iterable.length) {
                        if (hasOwn.call(iterable, i)) {
                          next.value = iterable[i];
                          next.done = false;
                          return next;
                        }
                      }

                      next.value = undefined$1;
                      next.done = true;

                      return next;
                    };

                    return next.next = next;
                  }
                }

                // Return an iterator with no values.
                return { next: doneResult };
              }
              exports.values = values;

              function doneResult() {
                return { value: undefined$1, done: true };
              }

              Context.prototype = {
                constructor: Context,

                reset: function(skipTempReset) {
                  this.prev = 0;
                  this.next = 0;
                  // Resetting context._sent for legacy support of Babel's
                  // function.sent implementation.
                  this.sent = this._sent = undefined$1;
                  this.done = false;
                  this.delegate = null;

                  this.method = "next";
                  this.arg = undefined$1;

                  this.tryEntries.forEach(resetTryEntry);

                  if (!skipTempReset) {
                    for (var name in this) {
                      // Not sure about the optimal order of these conditions:
                      if (name.charAt(0) === "t" &&
                          hasOwn.call(this, name) &&
                          !isNaN(+name.slice(1))) {
                        this[name] = undefined$1;
                      }
                    }
                  }
                },

                stop: function() {
                  this.done = true;

                  var rootEntry = this.tryEntries[0];
                  var rootRecord = rootEntry.completion;
                  if (rootRecord.type === "throw") {
                    throw rootRecord.arg;
                  }

                  return this.rval;
                },

                dispatchException: function(exception) {
                  if (this.done) {
                    throw exception;
                  }

                  var context = this;
                  function handle(loc, caught) {
                    record.type = "throw";
                    record.arg = exception;
                    context.next = loc;

                    if (caught) {
                      // If the dispatched exception was caught by a catch block,
                      // then let that catch block handle the exception normally.
                      context.method = "next";
                      context.arg = undefined$1;
                    }

                    return !! caught;
                  }

                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    var record = entry.completion;

                    if (entry.tryLoc === "root") {
                      // Exception thrown outside of any try block that could handle
                      // it, so set the completion value of the entire function to
                      // throw the exception.
                      return handle("end");
                    }

                    if (entry.tryLoc <= this.prev) {
                      var hasCatch = hasOwn.call(entry, "catchLoc");
                      var hasFinally = hasOwn.call(entry, "finallyLoc");

                      if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }

                      } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        }

                      } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }

                      } else {
                        throw new Error("try statement without catch or finally");
                      }
                    }
                  }
                },

                abrupt: function(type, arg) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc <= this.prev &&
                        hasOwn.call(entry, "finallyLoc") &&
                        this.prev < entry.finallyLoc) {
                      var finallyEntry = entry;
                      break;
                    }
                  }

                  if (finallyEntry &&
                      (type === "break" ||
                       type === "continue") &&
                      finallyEntry.tryLoc <= arg &&
                      arg <= finallyEntry.finallyLoc) {
                    // Ignore the finally entry if control is not jumping to a
                    // location outside the try/catch block.
                    finallyEntry = null;
                  }

                  var record = finallyEntry ? finallyEntry.completion : {};
                  record.type = type;
                  record.arg = arg;

                  if (finallyEntry) {
                    this.method = "next";
                    this.next = finallyEntry.finallyLoc;
                    return ContinueSentinel;
                  }

                  return this.complete(record);
                },

                complete: function(record, afterLoc) {
                  if (record.type === "throw") {
                    throw record.arg;
                  }

                  if (record.type === "break" ||
                      record.type === "continue") {
                    this.next = record.arg;
                  } else if (record.type === "return") {
                    this.rval = this.arg = record.arg;
                    this.method = "return";
                    this.next = "end";
                  } else if (record.type === "normal" && afterLoc) {
                    this.next = afterLoc;
                  }

                  return ContinueSentinel;
                },

                finish: function(finallyLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.finallyLoc === finallyLoc) {
                      this.complete(entry.completion, entry.afterLoc);
                      resetTryEntry(entry);
                      return ContinueSentinel;
                    }
                  }
                },

                "catch": function(tryLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc === tryLoc) {
                      var record = entry.completion;
                      if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                      }
                      return thrown;
                    }
                  }

                  // The context.catch method must only be called with a location
                  // argument that corresponds to a known catch block.
                  throw new Error("illegal catch attempt");
                },

                delegateYield: function(iterable, resultName, nextLoc) {
                  this.delegate = {
                    iterator: values(iterable),
                    resultName: resultName,
                    nextLoc: nextLoc
                  };

                  if (this.method === "next") {
                    // Deliberately forget the last sent value so that we don't
                    // accidentally pass it on to the delegate.
                    this.arg = undefined$1;
                  }

                  return ContinueSentinel;
                }
              };

              // Regardless of whether this script is executing as a CommonJS module
              // or not, return the runtime object so that we can declare the variable
              // regeneratorRuntime in the outer scope, which allows this module to be
              // injected easily by `bin/regenerator --include-runtime script.js`.
              return exports;

            }(
              // If this script is executing as a CommonJS module, use module.exports
              // as the regeneratorRuntime namespace. Otherwise create a new empty
              // object. Either way, the resulting object will be used to initialize
              // the regeneratorRuntime variable at the top of this file.
               module.exports 
            ));

            try {
              regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
              // This module should not be running in strict mode, so the above
              // assignment should always work unless something is misconfigured. Just
              // in case runtime.js accidentally runs in strict mode, in modern engines
              // we can explicitly access globalThis. In older engines we can escape
              // strict mode using a global Function call. This could conceivably fail
              // if a Content Security Policy forbids using Function, but in that case
              // the proper solution is to fix the accidental strict mode problem. If
              // you've misconfigured your bundler to force strict mode and applied a
              // CSP to forbid Function, and you're not willing to fix either of those
              // problems, please detail your unique predicament in a GitHub issue.
              if (typeof globalThis === "object") {
                globalThis.regeneratorRuntime = runtime;
              } else {
                Function("r", "regeneratorRuntime = r")(runtime);
              }
            }
            });

            /**
             * Tries to pack a list of items into as few bins as possible using the first-fit bin packing algorithm
             * @param calls the calls to chunk
             * @param chunkGasLimit the gas limit of any one chunk of calls, i.e. bin capacity
             * @param defaultGasRequired the default amount of gas an individual call should cost if not specified
             */

            function chunkCalls(calls, chunkGasLimit, defaultGasRequired) {
              if (defaultGasRequired === void 0) {
                defaultGasRequired = DEFAULT_CHUNK_GAS_REQUIRED;
              }

              return calls // first sort by gas required
              .sort(function (c1, c2) {
                var _c2$gasRequired, _c1$gasRequired;

                return ((_c2$gasRequired = c2.gasRequired) != null ? _c2$gasRequired : defaultGasRequired) - ((_c1$gasRequired = c1.gasRequired) != null ? _c1$gasRequired : defaultGasRequired);
              }) // then bin the calls according to the first fit algorithm
              .reduce(function (bins, call) {
                var _call$gasRequired;

                var gas = (_call$gasRequired = call.gasRequired) != null ? _call$gasRequired : defaultGasRequired;

                for (var _iterator = _createForOfIteratorHelperLoose(bins), _step; !(_step = _iterator()).done;) {
                  var bin = _step.value;

                  if (bin.cumulativeGasLimit + gas <= chunkGasLimit) {
                    bin.calls.push(call);
                    bin.cumulativeGasLimit += gas;
                    return bins;
                  }
                } // didn't find a bin for the call, make a new bin


                bins.push({
                  calls: [call],
                  cumulativeGasLimit: gas
                });
                return bins;
              }, []) // pull out just the calls from each bin
              .map(function (b) {
                return b.calls;
              });
            }

            // TODO de-duplicate this file with web interface
            // https://github.com/Uniswap/interface/blob/main/src/utils/retry.ts
            function wait(ms) {
              return new Promise(function (resolve) {
                return setTimeout(resolve, ms);
              });
            }

            function waitRandom(min, max) {
              return wait(min + Math.round(Math.random() * Math.max(0, max - min)));
            }
            /**
             * This error is thrown if the function is cancelled before completing
             */


            var CancelledError = /*#__PURE__*/function (_Error) {
              _inheritsLoose(CancelledError, _Error);

              function CancelledError() {
                var _this;

                _this = _Error.call(this, 'Cancelled') || this;
                _this.isCancelledError = true;
                return _this;
              }

              return CancelledError;
            }( /*#__PURE__*/_wrapNativeSuper(Error));
            /**
             * Throw this error if the function should retry
             */


            var RetryableError = /*#__PURE__*/function (_Error2) {
              _inheritsLoose(RetryableError, _Error2);

              function RetryableError() {
                var _this2;

                _this2 = _Error2.apply(this, arguments) || this;
                _this2.isRetryableError = true;
                return _this2;
              }

              return RetryableError;
            }( /*#__PURE__*/_wrapNativeSuper(Error));
            /**
             * Retries the function that returns the promise until the promise successfully resolves up to n retries
             * @param fn function to retry
             * @param n how many times to retry
             * @param minWait min wait between retries in ms
             * @param maxWait max wait between retries in ms
             */

            function retry(fn, _ref) {
              var n = _ref.n,
                  minWait = _ref.minWait,
                  maxWait = _ref.maxWait;
              var completed = false;
              var rejectCancelled;
              var promise = new Promise( /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(resolve, reject) {
                  var result;
                  return runtime_1.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          rejectCancelled = reject;

                        case 1:

                          result = void 0;
                          _context.prev = 3;
                          _context.next = 6;
                          return fn();

                        case 6:
                          result = _context.sent;

                          if (!completed) {
                            resolve(result);
                            completed = true;
                          }

                          return _context.abrupt("break", 24);

                        case 11:
                          _context.prev = 11;
                          _context.t0 = _context["catch"](3);

                          if (!completed) {
                            _context.next = 15;
                            break;
                          }

                          return _context.abrupt("break", 24);

                        case 15:
                          if (!(n <= 0 || !_context.t0.isRetryableError)) {
                            _context.next = 19;
                            break;
                          }

                          reject(_context.t0);
                          completed = true;
                          return _context.abrupt("break", 24);

                        case 19:
                          n--;

                        case 20:
                          _context.next = 22;
                          return waitRandom(minWait, maxWait);

                        case 22:
                          _context.next = 1;
                          break;

                        case 24:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, null, [[3, 11]]);
                }));

                return function (_x, _x2) {
                  return _ref2.apply(this, arguments);
                };
              }());
              return {
                promise: promise,
                cancel: function cancel() {
                  if (completed) return;
                  completed = true;
                  rejectCancelled(new CancelledError());
                }
              };
            }

            // TODO de-duplicate this file with web interface

            function useDebounce(value, delay) {
              var _useState = React.useState(value),
                  debouncedValue = _useState[0],
                  setDebouncedValue = _useState[1];

              React.useEffect(function () {
                // Update debounced value after delay
                var handler = setTimeout(function () {
                  setDebouncedValue(value);
                }, delay); // Cancel the timeout if value changes (also on delay change or unmount)
                // This is how we prevent debounced value from updating if value is changed ...
                // .. within the delay period. Timeout gets cleared and restarted.

                return function () {
                  clearTimeout(handler);
                };
              }, [value, delay]);
              return debouncedValue;
            }

            var FETCH_RETRY_CONFIG = {
              n: Infinity,
              minWait: 1000,
              maxWait: 2500
            };
            /**
             * Fetches a chunk of calls, enforcing a minimum block number constraint
             * @param multicall multicall contract to fetch against
             * @param chunk chunk of calls to make
             * @param blockNumber block number passed as the block tag in the eth_call
             */

            function fetchChunk(_x, _x2, _x3, _x4) {
              return _fetchChunk.apply(this, arguments);
            }
            /**
             * From the current all listeners state, return each call key mapped to the
             * minimum number of blocks per fetch. This is how often each key must be fetched.
             * @param allListeners the all listeners state
             * @param chainId the current chain id
             */


            function _fetchChunk() {
              _fetchChunk = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(multicall, chunk, blockNumber, isDebug) {
                var _yield$multicall$call, returnData, _error$message, _error$message2, error, half, _yield$Promise$all, c0, c1;

                return runtime_1.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        console.debug('Fetching chunk', chunk, blockNumber);
                        _context.prev = 1;
                        _context.next = 4;
                        return multicall.callStatic.multicall(chunk.map(function (obj) {
                          var _obj$gasRequired;

                          return {
                            target: obj.address,
                            callData: obj.callData,
                            gasLimit: (_obj$gasRequired = obj.gasRequired) != null ? _obj$gasRequired : DEFAULT_CALL_GAS_REQUIRED
                          };
                        }), // we aren't passing through the block gas limit we used to create the chunk, because it causes a problem with the integ tests
                        {
                          blockTag: blockNumber
                        });

                      case 4:
                        _yield$multicall$call = _context.sent;
                        returnData = _yield$multicall$call.returnData;

                        if (isDebug) {
                          returnData.forEach(function (_ref, i) {
                            var _chunk$i$gasRequired;

                            var gasUsed = _ref.gasUsed,
                                returnData = _ref.returnData,
                                success = _ref.success;

                            if (!success && returnData.length === 2 && gasUsed.gte(Math.floor(((_chunk$i$gasRequired = chunk[i].gasRequired) != null ? _chunk$i$gasRequired : DEFAULT_CALL_GAS_REQUIRED) * 0.95))) {
                              var _chunk$i$gasRequired2;

                              console.warn("A call failed due to requiring " + gasUsed.toString() + " vs. allowed " + ((_chunk$i$gasRequired2 = chunk[i].gasRequired) != null ? _chunk$i$gasRequired2 : DEFAULT_CALL_GAS_REQUIRED), chunk[i]);
                            }
                          });
                        }

                        return _context.abrupt("return", returnData);

                      case 10:
                        _context.prev = 10;
                        _context.t0 = _context["catch"](1);
                        error = _context.t0;

                        if (!(error.code === -32000 || ((_error$message = error.message) == null ? void 0 : _error$message.indexOf('header not found')) !== -1)) {
                          _context.next = 17;
                          break;
                        }

                        throw new RetryableError("header not found for block number " + blockNumber);

                      case 17:
                        if (!(error.code === -32603 || ((_error$message2 = error.message) == null ? void 0 : _error$message2.indexOf('execution ran out of gas')) !== -1)) {
                          _context.next = 27;
                          break;
                        }

                        if (!(chunk.length > 1)) {
                          _context.next = 27;
                          break;
                        }

                        half = Math.floor(chunk.length / 2);
                        _context.next = 23;
                        return Promise.all([fetchChunk(multicall, chunk.slice(0, half), blockNumber), fetchChunk(multicall, chunk.slice(half, chunk.length), blockNumber)]);

                      case 23:
                        _yield$Promise$all = _context.sent;
                        c0 = _yield$Promise$all[0];
                        c1 = _yield$Promise$all[1];
                        return _context.abrupt("return", c0.concat(c1));

                      case 27:
                        console.error('Failed to fetch chunk', error);
                        throw error;

                      case 29:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[1, 10]]);
              }));
              return _fetchChunk.apply(this, arguments);
            }

            function activeListeningKeys(allListeners, chainId) {
              if (!allListeners || !chainId) return {};
              var listeners = allListeners[chainId];
              if (!listeners) return {};
              return Object.keys(listeners).reduce(function (memo, callKey) {
                var keyListeners = listeners[callKey];
                memo[callKey] = Object.keys(keyListeners).filter(function (key) {
                  var blocksPerFetch = parseInt(key);
                  if (blocksPerFetch <= 0) return false;
                  return keyListeners[blocksPerFetch] > 0;
                }).reduce(function (previousMin, current) {
                  return Math.min(previousMin, parseInt(current));
                }, Infinity);
                return memo;
              }, {});
            }
            /**
             * Return the keys that need to be refetched
             * @param callResults current call result state
             * @param listeningKeys each call key mapped to how old the data can be in blocks
             * @param chainId the current chain id
             * @param latestBlockNumber the latest block number
             */

            function outdatedListeningKeys(callResults, listeningKeys, chainId, latestBlockNumber) {
              if (!chainId || !latestBlockNumber) return [];
              var results = callResults[chainId]; // no results at all, load everything

              if (!results) return Object.keys(listeningKeys);
              return Object.keys(listeningKeys).filter(function (callKey) {
                var blocksPerFetch = listeningKeys[callKey];
                var data = callResults[chainId][callKey]; // no data, must fetch

                if (!data) return true;
                var minDataBlockNumber = latestBlockNumber - (blocksPerFetch - 1); // already fetching it for a recent enough block, don't refetch it

                if (data.fetchingBlockNumber && data.fetchingBlockNumber >= minDataBlockNumber) return false; // if data is older than minDataBlockNumber, fetch it

                return !data.blockNumber || data.blockNumber < minDataBlockNumber;
              });
            }

            function onFetchChunkSuccess(context, chunk, result) {
              var actions = context.actions,
                  dispatch = context.dispatch,
                  chainId = context.chainId,
                  latestBlockNumber = context.latestBlockNumber,
                  isDebug = context.isDebug; // split the returned slice into errors and results

              var _chunk$reduce = chunk.reduce(function (memo, call, i) {
                if (result[i].success) {
                  var _result$i$returnData;

                  memo.results[toCallKey(call)] = (_result$i$returnData = result[i].returnData) != null ? _result$i$returnData : null;
                } else {
                  memo.erroredCalls.push(call);
                }

                return memo;
              }, {
                erroredCalls: [],
                results: {}
              }),
                  erroredCalls = _chunk$reduce.erroredCalls,
                  results = _chunk$reduce.results; // dispatch any new results


              if (Object.keys(results).length > 0) dispatch(actions.updateMulticallResults({
                chainId: chainId,
                results: results,
                blockNumber: latestBlockNumber
              })); // dispatch any errored calls

              if (erroredCalls.length > 0) {
                if (isDebug) {
                  result.forEach(function (returnData, ix) {
                    if (!returnData.success) {
                      console.debug('Call failed', chunk[ix], returnData);
                    }
                  });
                } else {
                  console.debug('Calls errored in fetch', erroredCalls);
                }

                dispatch(actions.errorFetchingMulticallResults({
                  calls: erroredCalls,
                  chainId: chainId,
                  fetchingBlockNumber: latestBlockNumber
                }));
              }
            }

            function onFetchChunkFailure(context, chunk, error) {
              var actions = context.actions,
                  dispatch = context.dispatch,
                  chainId = context.chainId,
                  latestBlockNumber = context.latestBlockNumber;

              if (error.isCancelledError) {
                console.debug('Cancelled fetch for blockNumber', latestBlockNumber, chunk, chainId);
                return;
              }

              console.error('Failed to fetch multicall chunk', chunk, chainId, error);
              dispatch(actions.errorFetchingMulticallResults({
                calls: chunk,
                chainId: chainId,
                fetchingBlockNumber: latestBlockNumber
              }));
            }

            function Updater(props) {
              var context = props.context,
                  chainId = props.chainId,
                  latestBlockNumber = props.latestBlockNumber,
                  contract = props.contract,
                  isDebug = props.isDebug;
              var actions = context.actions,
                  reducerPath = context.reducerPath;
              var dispatch = useDispatch();
              var state = useSelector(function (state) {
                return state[reducerPath];
              }); // wait for listeners to settle before triggering updates

              var debouncedListeners = useDebounce(state.callListeners, 100);
              var cancellations = React.useRef();
              var listeningKeys = React.useMemo(function () {
                return activeListeningKeys(debouncedListeners, chainId);
              }, [debouncedListeners, chainId]);
              var serializedOutdatedCallKeys = React.useMemo(function () {
                var outdatedCallKeys = outdatedListeningKeys(state.callResults, listeningKeys, chainId, latestBlockNumber);
                return JSON.stringify(outdatedCallKeys.sort());
              }, [chainId, state.callResults, listeningKeys, latestBlockNumber]);
              React.useEffect(function () {
                if (!latestBlockNumber || !chainId || !contract) return;
                var outdatedCallKeys = JSON.parse(serializedOutdatedCallKeys);
                if (outdatedCallKeys.length === 0) return;
                var calls = outdatedCallKeys.map(function (key) {
                  return parseCallKey(key);
                });
                var chunkedCalls = chunkCalls(calls, CHUNK_GAS_LIMIT);

                if (cancellations.current && cancellations.current.blockNumber !== latestBlockNumber) {
                  cancellations.current.cancellations.forEach(function (c) {
                    return c();
                  });
                }

                dispatch(actions.fetchingMulticallResults({
                  calls: calls,
                  chainId: chainId,
                  fetchingBlockNumber: latestBlockNumber
                }));
                var fetchChunkContext = {
                  actions: actions,
                  dispatch: dispatch,
                  chainId: chainId,
                  latestBlockNumber: latestBlockNumber,
                  isDebug: isDebug
                }; // Execute fetches and gather cancellation callbacks

                var newCancellations = chunkedCalls.map(function (chunk) {
                  var _retry = retry(function () {
                    return fetchChunk(contract, chunk, latestBlockNumber, isDebug);
                  }, FETCH_RETRY_CONFIG),
                      cancel = _retry.cancel,
                      promise = _retry.promise;

                  promise.then(function (result) {
                    return onFetchChunkSuccess(fetchChunkContext, chunk, result);
                  })["catch"](function (error) {
                    return onFetchChunkFailure(fetchChunkContext, chunk, error);
                  });
                  return cancel;
                });
                cancellations.current = {
                  blockNumber: latestBlockNumber,
                  cancellations: newCancellations
                };
              }, [actions, chainId, contract, dispatch, serializedOutdatedCallKeys, latestBlockNumber, isDebug]);
              return null;
            }

            function createUpdater(context) {
              var UpdaterContextBound = function UpdaterContextBound(props) {
                return React__default['default'].createElement(Updater, Object.assign({
                  context: context
                }, props));
              };

              return UpdaterContextBound;
            }

            function createMulticall(options) {
              var _options$reducerPath;

              var reducerPath = (_options$reducerPath = options == null ? void 0 : options.reducerPath) != null ? _options$reducerPath : 'multicall';
              var slice = createMulticallSlice(reducerPath);
              var actions = slice.actions,
                  reducer = slice.reducer;
              var context = {
                reducerPath: reducerPath,
                actions: actions
              };

              var useMultipleContractSingleData$1 = function useMultipleContractSingleData$1() {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return useMultipleContractSingleData.apply(void 0, [context].concat(args));
              };

              var useSingleContractMultipleData$1 = function useSingleContractMultipleData$1() {
                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                return useSingleContractMultipleData.apply(void 0, [context].concat(args));
              };

              var useSingleContractWithCallData$1 = function useSingleContractWithCallData$1() {
                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                  args[_key3] = arguments[_key3];
                }

                return useSingleContractWithCallData.apply(void 0, [context].concat(args));
              };

              var useSingleCallResult$1 = function useSingleCallResult$1() {
                for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                  args[_key4] = arguments[_key4];
                }

                return useSingleCallResult.apply(void 0, [context].concat(args));
              };

              var useMultiChainMultiContractSingleData$1 = function useMultiChainMultiContractSingleData$1() {
                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                  args[_key5] = arguments[_key5];
                }

                return useMultiChainMultiContractSingleData.apply(void 0, [context].concat(args));
              };

              var useMultiChainSingleContractSingleData$1 = function useMultiChainSingleContractSingleData$1() {
                for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                  args[_key6] = arguments[_key6];
                }

                return useMultiChainSingleContractSingleData.apply(void 0, [context].concat(args));
              };

              var hooks = {
                useMultipleContractSingleData: useMultipleContractSingleData$1,
                useSingleContractMultipleData: useSingleContractMultipleData$1,
                useSingleContractWithCallData: useSingleContractWithCallData$1,
                useSingleCallResult: useSingleCallResult$1,
                useMultiChainMultiContractSingleData: useMultiChainMultiContractSingleData$1,
                useMultiChainSingleContractSingleData: useMultiChainSingleContractSingleData$1
              };
              var Updater = createUpdater(context);
              return {
                reducerPath: reducerPath,
                reducer: reducer,
                actions: actions,
                hooks: hooks,
                Updater: Updater
              };
            }

            function atomWithStore(store) {
              const baseAtom = atom(store.getState());
              baseAtom.onMount = (setValue) => {
                const callback = () => {
                  setValue(store.getState());
                };
                const unsub = store.subscribe(callback);
                callback();
                return unsub;
              };
              const derivedAtom = atom((get) => get(baseAtom), (_get, _set, action) => {
                store.dispatch(action);
              });
              return derivedAtom;
            }

            function createStore$1(createState) {
              let state;
              const listeners = new Set();
              const setState = (partial, replace) => {
                const nextState = typeof partial === "function" ? partial(state) : partial;
                if (nextState !== state) {
                  const previousState = state;
                  state = replace ? nextState : Object.assign({}, state, nextState);
                  listeners.forEach((listener) => listener(state, previousState));
                }
              };
              const getState = () => state;
              const subscribe = (listener) => {
                listeners.add(listener);
                return () => listeners.delete(listener);
              };
              const destroy = () => listeners.clear();
              const api = { setState, getState, subscribe, destroy };
              state = createState(setState, getState, api);
              return api;
            }

            function validateChainId(chainId) {
                if (!Number.isInteger(chainId) || chainId <= 0 || chainId > Number.MAX_SAFE_INTEGER) {
                    throw new Error(`Invalid chainId ${chainId}`);
                }
            }
            class ChainIdNotAllowedError extends Error {
                constructor(chainId, allowedChainIds) {
                    super(`chainId ${chainId} not included in ${allowedChainIds.toString()}`);
                    this.chainId = chainId;
                    this.name = ChainIdNotAllowedError.name;
                    Object.setPrototypeOf(this, ChainIdNotAllowedError.prototype);
                }
            }
            function ensureChainIdIsAllowed(chainId, allowedChainIds) {
                return allowedChainIds.some((allowedChainId) => chainId === allowedChainId)
                    ? undefined
                    : new ChainIdNotAllowedError(chainId, allowedChainIds);
            }
            function validateAccount(account) {
                return getAddress(account);
            }
            const DEFAULT_STATE = {
                chainId: undefined,
                accounts: undefined,
                activating: false,
                error: undefined,
            };
            function createWeb3ReactStoreAndActions(allowedChainIds) {
                if ((allowedChainIds === null || allowedChainIds === void 0 ? void 0 : allowedChainIds.length) === 0) {
                    throw new Error(`allowedChainIds is length 0`);
                }
                const store = createStore$1(() => DEFAULT_STATE);
                // flag for tracking updates so we don't clobber data when cancelling activation
                let nullifier = 0;
                function startActivation() {
                    const nullifierCached = ++nullifier;
                    store.setState(Object.assign(Object.assign({}, DEFAULT_STATE), { activating: true }));
                    // return a function that cancels the activation iff nothing else has happened
                    return () => {
                        if (nullifier === nullifierCached) {
                            store.setState(Object.assign(Object.assign({}, DEFAULT_STATE), { activating: false }));
                        }
                    };
                }
                function update(stateUpdate) {
                    // validate chainId statically, independent of existing state
                    if (stateUpdate.chainId !== undefined) {
                        validateChainId(stateUpdate.chainId);
                    }
                    // validate accounts statically, independent of existing state
                    if (stateUpdate.accounts !== undefined) {
                        for (let i = 0; i < stateUpdate.accounts.length; i++) {
                            stateUpdate.accounts[i] = validateAccount(stateUpdate.accounts[i]);
                        }
                    }
                    nullifier++;
                    store.setState((existingState) => {
                        var _a, _b;
                        // determine the next chainId and accounts
                        const chainId = (_a = stateUpdate.chainId) !== null && _a !== void 0 ? _a : existingState.chainId;
                        const accounts = (_b = stateUpdate.accounts) !== null && _b !== void 0 ? _b : existingState.accounts;
                        // determine the next error
                        let error = existingState.error;
                        if (chainId && allowedChainIds) {
                            // if we have a chainId allowlist and a chainId, we need to ensure it's allowed
                            const chainIdError = ensureChainIdIsAllowed(chainId, allowedChainIds);
                            // warn if we're going to clobber existing error
                            if (chainIdError && error) {
                                if (!(error instanceof ChainIdNotAllowedError) || error.chainId !== chainIdError.chainId) {
                                    console.debug(`${error.name} is being clobbered by ${chainIdError.name}`);
                                }
                            }
                            error = chainIdError;
                        }
                        // ensure that the error is cleared when appropriate
                        if (error && !(error instanceof ChainIdNotAllowedError) && chainId && accounts) {
                            error = undefined;
                        }
                        // ensure that the activating flag is cleared when appropriate
                        let activating = existingState.activating;
                        if (activating && (error || (chainId && accounts))) {
                            activating = false;
                        }
                        return { chainId, accounts, activating, error };
                    });
                }
                function reportError(error) {
                    nullifier++;
                    store.setState(() => (Object.assign(Object.assign({}, DEFAULT_STATE), { error })));
                }
                return [store, { startActivation, update, reportError }];
            }

            var withSelector = {exports: {}};

            var withSelector_production_min = {};

            var shim = {exports: {}};

            var useSyncExternalStoreShim_production_min = {};

            /** @license React vundefined
             * use-sync-external-store-shim.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var e=React__default['default'];function h$2(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k$1="function"===typeof Object.is?Object.is:h$2,l=e.useState,m=e.useEffect,n$1=e.useLayoutEffect,p$2=e.useDebugValue;function q$1(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n$1(function(){c.value=d;c.getSnapshot=b;r$2(c)&&g({inst:c});},[a,d,b]);m(function(){r$2(c)&&g({inst:c});return a(function(){r$2(c)&&g({inst:c});})},[a]);p$2(d);return d}
            function r$2(a){var b=a.getSnapshot;a=a.value;try{var d=b();return !k$1(a,d)}catch(f){return !0}}function t$1(a,b){return b()}var u$2="undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement?t$1:q$1;useSyncExternalStoreShim_production_min.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u$2;

            {
              shim.exports = useSyncExternalStoreShim_production_min;
            }

            /** @license React vundefined
             * use-sync-external-store-shim/with-selector.production.min.js
             *
             * Copyright (c) Facebook, Inc. and its affiliates.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */
            var h$1=React__default['default'],n=shim.exports;function p$1(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var q="function"===typeof Object.is?Object.is:p$1,r$1=n.useSyncExternalStore,t=h$1.useRef,u$1=h$1.useEffect,v$1=h$1.useMemo,w=h$1.useDebugValue;
            withSelector_production_min.useSyncExternalStoreWithSelector=function(a,b,e,l,g){var c=t(null);if(null===c.current){var f={hasValue:!1,value:null};c.current=f;}else f=c.current;c=v$1(function(){function a(a){if(!c){c=!0;d=a;a=l(a);if(void 0!==g&&f.hasValue){var b=f.value;if(g(b,a))return k=b}return k=a}b=k;if(q(d,a))return b;var e=l(a);if(void 0!==g&&g(b,e))return b;d=a;return k=e}var c=!1,d,k,m=void 0===e?null:e;return [function(){return a(b())},null===m?void 0:function(){return a(m())}]},[b,e,l,g]);var d=r$1(a,c[0],c[1]);
            u$1(function(){f.hasValue=!0;f.value=d;},[d]);w(d);return d};

            {
              withSelector.exports = withSelector_production_min;
            }

            function createStore(createState) {
              let state;
              const listeners = new Set();
              const setState = (partial, replace) => {
                const nextState = typeof partial === "function" ? partial(state) : partial;
                if (nextState !== state) {
                  const previousState = state;
                  state = replace ? nextState : Object.assign({}, state, nextState);
                  listeners.forEach((listener) => listener(state, previousState));
                }
              };
              const getState = () => state;
              const subscribe = (listener) => {
                listeners.add(listener);
                return () => listeners.delete(listener);
              };
              const destroy = () => listeners.clear();
              const api = { setState, getState, subscribe, destroy };
              state = createState(setState, getState, api);
              return api;
            }

            function useStore(api, selector = api.getState, equalityFn = Object.is) {
              const slice = withSelector.exports.useSyncExternalStoreWithSelector(api.subscribe, api.getState, null, selector, equalityFn);
              React.useDebugValue(slice);
              return slice;
            }
            function create$1(createState) {
              const api = typeof createState === "function" ? createStore(createState) : createState;
              const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);
              Object.assign(useBoundStore, api);
              return useBoundStore;
            }

            function initializeConnector(f, allowedChainIds) {
                const [store, actions] = createWeb3ReactStoreAndActions(allowedChainIds);
                const connector = f(actions);
                const useConnector = create$1(store);
                const stateHooks = getStateHooks(useConnector);
                const derivedHooks = getDerivedHooks(stateHooks);
                const augmentedHooks = getAugmentedHooks(connector, stateHooks, derivedHooks);
                return [connector, Object.assign(Object.assign(Object.assign({}, stateHooks), derivedHooks), augmentedHooks)];
            }
            const CHAIN_ID = (state) => state.chainId;
            const ACCOUNTS = (state) => state.accounts;
            const ACCOUNTS_EQUALITY_CHECKER = (oldAccounts, newAccounts) => (oldAccounts === undefined && newAccounts === undefined) ||
                (oldAccounts !== undefined &&
                    newAccounts !== undefined &&
                    oldAccounts.length === newAccounts.length &&
                    oldAccounts.every((oldAccount, i) => oldAccount === newAccounts[i]));
            const ACTIVATING = (state) => state.activating;
            const ERROR = (state) => state.error;
            function getStateHooks(useConnector) {
                function useChainId() {
                    return useConnector(CHAIN_ID);
                }
                function useAccounts() {
                    return useConnector(ACCOUNTS, ACCOUNTS_EQUALITY_CHECKER);
                }
                function useIsActivating() {
                    return useConnector(ACTIVATING);
                }
                function useError() {
                    return useConnector(ERROR);
                }
                return { useChainId, useAccounts, useIsActivating, useError };
            }
            function getDerivedHooks({ useChainId, useAccounts, useIsActivating, useError }) {
                function useAccount() {
                    var _a;
                    return (_a = useAccounts()) === null || _a === void 0 ? void 0 : _a[0];
                }
                function useIsActive() {
                    const chainId = useChainId();
                    const accounts = useAccounts();
                    const activating = useIsActivating();
                    const error = useError();
                    return Boolean(chainId && accounts && !activating && !error);
                }
                return { useAccount, useIsActive };
            }
            function useENS(provider, accounts) {
                const [ENSNames, setENSNames] = React.useState();
                React.useEffect(() => {
                    if (provider && (accounts === null || accounts === void 0 ? void 0 : accounts.length)) {
                        let stale = false;
                        Promise.all(accounts.map((account) => provider.lookupAddress(account)))
                            .then((ENSNames) => {
                            if (!stale) {
                                setENSNames(ENSNames);
                            }
                        })
                            .catch((error) => {
                            console.debug('Could not fetch ENS names', error);
                        });
                        return () => {
                            stale = true;
                            setENSNames(undefined);
                        };
                    }
                }, [provider, accounts]);
                return ENSNames;
            }
            function getAugmentedHooks(connector, { useChainId, useAccounts, useError }, { useAccount, useIsActive }) {
                function useProvider(network) {
                    const isActive = useIsActive();
                    const chainId = useChainId();
                    const accounts = useAccounts();
                    return React.useMemo(() => {
                        // we use chainId and accounts to re-render in case connector.provider changes in place
                        if (isActive && connector.provider && chainId && accounts) {
                            return new Web3Provider(connector.provider, network);
                        }
                    }, [isActive, network, chainId, accounts]);
                }
                function useENSNames(provider) {
                    const accounts = useAccounts();
                    return useENS(provider, accounts);
                }
                function useENSName(provider) {
                    var _a;
                    const account = useAccount();
                    return (_a = useENS(provider, account === undefined ? undefined : [account])) === null || _a === void 0 ? void 0 : _a[0];
                }
                // for backwards compatibility only
                function useWeb3React(provider) {
                    const chainId = useChainId();
                    const error = useError();
                    const account = useAccount();
                    const isActive = useIsActive();
                    return React.useMemo(() => ({
                        connector,
                        library: provider,
                        chainId,
                        account,
                        active: isActive,
                        error,
                    }), [provider, chainId, account, isActive, error]);
                }
                return { useProvider, useENSNames, useENSName, useWeb3React };
            }

            class Connector {
                constructor(actions) {
                    this.actions = actions;
                }
            }

            class Empty extends Connector {
                // eslint-disable-next-line @typescript-eslint/no-empty-function
                activate() { }
            }
            // @ts-expect-error this is okay because actions aren't ever validated,
            // and they're only used to set a protected property
            const EMPTY = new Empty();

            const EMPTY_CONNECTOR = initializeConnector(() => EMPTY);
            const urlAtom = atomWithDefault(() => EMPTY_CONNECTOR);
            const injectedAtom = atomWithDefault(() => EMPTY_CONNECTOR);
            const multicall = createMulticall();
            const multicallStore = createStore$2(multicall.reducer);
            atomWithStore(multicallStore);

            function useActiveWeb3ReactState() {
                const injected = useAtomValue(injectedAtom);
                const url = useAtomValue(urlAtom);
                return injected[1].useIsActive() ? injected : url;
            }
            function useActiveWeb3ReactHooks() {
                const [, hooks] = useActiveWeb3ReactState();
                return hooks;
            }
            function useActiveWeb3React() {
                const { useProvider, useWeb3React } = useActiveWeb3ReactHooks();
                return useWeb3React(useProvider());
            }

            var utils = {};

            var require$$0 = /*@__PURE__*/getAugmentedNamespace(lib_esm$c);

            var require$$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$f);

            var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$3);

            var require$$3 = /*@__PURE__*/getAugmentedNamespace(lib_esm$9);

            var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$j);

            var require$$5$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$d);

            var require$$6$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$7);

            var require$$7 = /*@__PURE__*/getAugmentedNamespace(lib_esm$5);

            var require$$8 = /*@__PURE__*/getAugmentedNamespace(lib_esm$h);

            var require$$9 = /*@__PURE__*/getAugmentedNamespace(lib_esm$k);

            var require$$10 = /*@__PURE__*/getAugmentedNamespace(lib_esm$8);

            var require$$11 = /*@__PURE__*/getAugmentedNamespace(lib_esm$1);

            var require$$12$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$6);

            var require$$13$1 = /*@__PURE__*/getAugmentedNamespace(lib_esm$i);

            var require$$14 = /*@__PURE__*/getAugmentedNamespace(lib_esm$g);

            var require$$15 = /*@__PURE__*/getAugmentedNamespace(lib_esm$b);

            var require$$16 = /*@__PURE__*/getAugmentedNamespace(lib_esm$e);

            var require$$17 = /*@__PURE__*/getAugmentedNamespace(lib_esm$a);

            var require$$18 = /*@__PURE__*/getAugmentedNamespace(lib_esm);

            var require$$19 = /*@__PURE__*/getAugmentedNamespace(lib_esm$4);

            var require$$20 = /*@__PURE__*/getAugmentedNamespace(lib_esm$2);

            (function (exports) {
            var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
            }) : (function(o, m, k, k2) {
                if (k2 === undefined) k2 = k;
                o[k2] = m[k];
            }));
            var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
                Object.defineProperty(o, "default", { enumerable: true, value: v });
            }) : function(o, v) {
                o["default"] = v;
            });
            var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
                if (mod && mod.__esModule) return mod;
                var result = {};
                if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                __setModuleDefault(result, mod);
                return result;
            };
            Object.defineProperty(exports, "__esModule", { value: true });
            exports.formatBytes32String = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports._toEscapedUtf8String = exports.nameprep = exports.hexDataSlice = exports.hexDataLength = exports.hexZeroPad = exports.hexValue = exports.hexStripZeros = exports.hexConcat = exports.isHexString = exports.hexlify = exports.base64 = exports.base58 = exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.SigningKey = exports.HDNode = exports.defaultPath = exports.isBytesLike = exports.isBytes = exports.zeroPad = exports.stripZeros = exports.concat = exports.arrayify = exports.shallowCopy = exports.resolveProperties = exports.getStatic = exports.defineReadOnly = exports.deepCopy = exports.checkProperties = exports.poll = exports.fetchJson = exports._fetchData = exports.RLP = exports.Logger = exports.checkResultErrors = exports.FormatTypes = exports.ParamType = exports.FunctionFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.Fragment = exports.defaultAbiCoder = exports.AbiCoder = void 0;
            exports.Indexed = exports.Utf8ErrorReason = exports.UnicodeNormalizationForm = exports.SupportedAlgorithm = exports.mnemonicToSeed = exports.isValidMnemonic = exports.entropyToMnemonic = exports.mnemonicToEntropy = exports.getAccountPath = exports.verifyTypedData = exports.verifyMessage = exports.recoverPublicKey = exports.computePublicKey = exports.recoverAddress = exports.computeAddress = exports.getJsonWalletAddress = exports.TransactionTypes = exports.serializeTransaction = exports.parseTransaction = exports.accessListify = exports.joinSignature = exports.splitSignature = exports.soliditySha256 = exports.solidityKeccak256 = exports.solidityPack = exports.shuffled = exports.randomBytes = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.computeHmac = exports.commify = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.isAddress = exports.getCreate2Address = exports.getContractAddress = exports.getIcapAddress = exports.getAddress = exports._TypedDataEncoder = exports.id = exports.isValidName = exports.namehash = exports.hashMessage = exports.parseBytes32String = void 0;
            var abi_1 = require$$0;
            Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function () { return abi_1.AbiCoder; } });
            Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function () { return abi_1.checkResultErrors; } });
            Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function () { return abi_1.ConstructorFragment; } });
            Object.defineProperty(exports, "defaultAbiCoder", { enumerable: true, get: function () { return abi_1.defaultAbiCoder; } });
            Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function () { return abi_1.ErrorFragment; } });
            Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function () { return abi_1.EventFragment; } });
            Object.defineProperty(exports, "FormatTypes", { enumerable: true, get: function () { return abi_1.FormatTypes; } });
            Object.defineProperty(exports, "Fragment", { enumerable: true, get: function () { return abi_1.Fragment; } });
            Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function () { return abi_1.FunctionFragment; } });
            Object.defineProperty(exports, "Indexed", { enumerable: true, get: function () { return abi_1.Indexed; } });
            Object.defineProperty(exports, "Interface", { enumerable: true, get: function () { return abi_1.Interface; } });
            Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function () { return abi_1.LogDescription; } });
            Object.defineProperty(exports, "ParamType", { enumerable: true, get: function () { return abi_1.ParamType; } });
            Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function () { return abi_1.TransactionDescription; } });
            var address_1 = require$$1;
            Object.defineProperty(exports, "getAddress", { enumerable: true, get: function () { return address_1.getAddress; } });
            Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function () { return address_1.getCreate2Address; } });
            Object.defineProperty(exports, "getContractAddress", { enumerable: true, get: function () { return address_1.getContractAddress; } });
            Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function () { return address_1.getIcapAddress; } });
            Object.defineProperty(exports, "isAddress", { enumerable: true, get: function () { return address_1.isAddress; } });
            var base64 = __importStar(require$$2$1);
            exports.base64 = base64;
            var basex_1 = require$$3;
            Object.defineProperty(exports, "base58", { enumerable: true, get: function () { return basex_1.Base58; } });
            var bytes_1 = require$$4$1;
            Object.defineProperty(exports, "arrayify", { enumerable: true, get: function () { return bytes_1.arrayify; } });
            Object.defineProperty(exports, "concat", { enumerable: true, get: function () { return bytes_1.concat; } });
            Object.defineProperty(exports, "hexConcat", { enumerable: true, get: function () { return bytes_1.hexConcat; } });
            Object.defineProperty(exports, "hexDataSlice", { enumerable: true, get: function () { return bytes_1.hexDataSlice; } });
            Object.defineProperty(exports, "hexDataLength", { enumerable: true, get: function () { return bytes_1.hexDataLength; } });
            Object.defineProperty(exports, "hexlify", { enumerable: true, get: function () { return bytes_1.hexlify; } });
            Object.defineProperty(exports, "hexStripZeros", { enumerable: true, get: function () { return bytes_1.hexStripZeros; } });
            Object.defineProperty(exports, "hexValue", { enumerable: true, get: function () { return bytes_1.hexValue; } });
            Object.defineProperty(exports, "hexZeroPad", { enumerable: true, get: function () { return bytes_1.hexZeroPad; } });
            Object.defineProperty(exports, "isBytes", { enumerable: true, get: function () { return bytes_1.isBytes; } });
            Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function () { return bytes_1.isBytesLike; } });
            Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return bytes_1.isHexString; } });
            Object.defineProperty(exports, "joinSignature", { enumerable: true, get: function () { return bytes_1.joinSignature; } });
            Object.defineProperty(exports, "zeroPad", { enumerable: true, get: function () { return bytes_1.zeroPad; } });
            Object.defineProperty(exports, "splitSignature", { enumerable: true, get: function () { return bytes_1.splitSignature; } });
            Object.defineProperty(exports, "stripZeros", { enumerable: true, get: function () { return bytes_1.stripZeros; } });
            var hash_1 = require$$5$1;
            Object.defineProperty(exports, "_TypedDataEncoder", { enumerable: true, get: function () { return hash_1._TypedDataEncoder; } });
            Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function () { return hash_1.hashMessage; } });
            Object.defineProperty(exports, "id", { enumerable: true, get: function () { return hash_1.id; } });
            Object.defineProperty(exports, "isValidName", { enumerable: true, get: function () { return hash_1.isValidName; } });
            Object.defineProperty(exports, "namehash", { enumerable: true, get: function () { return hash_1.namehash; } });
            var hdnode_1 = require$$6$1;
            Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function () { return hdnode_1.defaultPath; } });
            Object.defineProperty(exports, "entropyToMnemonic", { enumerable: true, get: function () { return hdnode_1.entropyToMnemonic; } });
            Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function () { return hdnode_1.getAccountPath; } });
            Object.defineProperty(exports, "HDNode", { enumerable: true, get: function () { return hdnode_1.HDNode; } });
            Object.defineProperty(exports, "isValidMnemonic", { enumerable: true, get: function () { return hdnode_1.isValidMnemonic; } });
            Object.defineProperty(exports, "mnemonicToEntropy", { enumerable: true, get: function () { return hdnode_1.mnemonicToEntropy; } });
            Object.defineProperty(exports, "mnemonicToSeed", { enumerable: true, get: function () { return hdnode_1.mnemonicToSeed; } });
            var json_wallets_1 = require$$7;
            Object.defineProperty(exports, "getJsonWalletAddress", { enumerable: true, get: function () { return json_wallets_1.getJsonWalletAddress; } });
            var keccak256_1 = require$$8;
            Object.defineProperty(exports, "keccak256", { enumerable: true, get: function () { return keccak256_1.keccak256; } });
            var logger_1 = require$$9;
            Object.defineProperty(exports, "Logger", { enumerable: true, get: function () { return logger_1.Logger; } });
            var sha2_1 = require$$10;
            Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function () { return sha2_1.computeHmac; } });
            Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function () { return sha2_1.ripemd160; } });
            Object.defineProperty(exports, "sha256", { enumerable: true, get: function () { return sha2_1.sha256; } });
            Object.defineProperty(exports, "sha512", { enumerable: true, get: function () { return sha2_1.sha512; } });
            var solidity_1 = require$$11;
            Object.defineProperty(exports, "solidityKeccak256", { enumerable: true, get: function () { return solidity_1.keccak256; } });
            Object.defineProperty(exports, "solidityPack", { enumerable: true, get: function () { return solidity_1.pack; } });
            Object.defineProperty(exports, "soliditySha256", { enumerable: true, get: function () { return solidity_1.sha256; } });
            var random_1 = require$$12$1;
            Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function () { return random_1.randomBytes; } });
            Object.defineProperty(exports, "shuffled", { enumerable: true, get: function () { return random_1.shuffled; } });
            var properties_1 = require$$13$1;
            Object.defineProperty(exports, "checkProperties", { enumerable: true, get: function () { return properties_1.checkProperties; } });
            Object.defineProperty(exports, "deepCopy", { enumerable: true, get: function () { return properties_1.deepCopy; } });
            Object.defineProperty(exports, "defineReadOnly", { enumerable: true, get: function () { return properties_1.defineReadOnly; } });
            Object.defineProperty(exports, "getStatic", { enumerable: true, get: function () { return properties_1.getStatic; } });
            Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function () { return properties_1.resolveProperties; } });
            Object.defineProperty(exports, "shallowCopy", { enumerable: true, get: function () { return properties_1.shallowCopy; } });
            var RLP = __importStar(require$$14);
            exports.RLP = RLP;
            var signing_key_1 = require$$15;
            Object.defineProperty(exports, "computePublicKey", { enumerable: true, get: function () { return signing_key_1.computePublicKey; } });
            Object.defineProperty(exports, "recoverPublicKey", { enumerable: true, get: function () { return signing_key_1.recoverPublicKey; } });
            Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function () { return signing_key_1.SigningKey; } });
            var strings_1 = require$$16;
            Object.defineProperty(exports, "formatBytes32String", { enumerable: true, get: function () { return strings_1.formatBytes32String; } });
            Object.defineProperty(exports, "nameprep", { enumerable: true, get: function () { return strings_1.nameprep; } });
            Object.defineProperty(exports, "parseBytes32String", { enumerable: true, get: function () { return strings_1.parseBytes32String; } });
            Object.defineProperty(exports, "_toEscapedUtf8String", { enumerable: true, get: function () { return strings_1._toEscapedUtf8String; } });
            Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function () { return strings_1.toUtf8Bytes; } });
            Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function () { return strings_1.toUtf8CodePoints; } });
            Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function () { return strings_1.toUtf8String; } });
            Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function () { return strings_1.Utf8ErrorFuncs; } });
            var transactions_1 = require$$17;
            Object.defineProperty(exports, "accessListify", { enumerable: true, get: function () { return transactions_1.accessListify; } });
            Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function () { return transactions_1.computeAddress; } });
            Object.defineProperty(exports, "parseTransaction", { enumerable: true, get: function () { return transactions_1.parse; } });
            Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function () { return transactions_1.recoverAddress; } });
            Object.defineProperty(exports, "serializeTransaction", { enumerable: true, get: function () { return transactions_1.serialize; } });
            Object.defineProperty(exports, "TransactionTypes", { enumerable: true, get: function () { return transactions_1.TransactionTypes; } });
            var units_1 = require$$18;
            Object.defineProperty(exports, "commify", { enumerable: true, get: function () { return units_1.commify; } });
            Object.defineProperty(exports, "formatEther", { enumerable: true, get: function () { return units_1.formatEther; } });
            Object.defineProperty(exports, "parseEther", { enumerable: true, get: function () { return units_1.parseEther; } });
            Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function () { return units_1.formatUnits; } });
            Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function () { return units_1.parseUnits; } });
            var wallet_1 = require$$19;
            Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function () { return wallet_1.verifyMessage; } });
            Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function () { return wallet_1.verifyTypedData; } });
            var web_1 = require$$20;
            Object.defineProperty(exports, "_fetchData", { enumerable: true, get: function () { return web_1._fetchData; } });
            Object.defineProperty(exports, "fetchJson", { enumerable: true, get: function () { return web_1.fetchJson; } });
            Object.defineProperty(exports, "poll", { enumerable: true, get: function () { return web_1.poll; } });
            ////////////////////////
            // Enums
            var sha2_2 = require$$10;
            Object.defineProperty(exports, "SupportedAlgorithm", { enumerable: true, get: function () { return sha2_2.SupportedAlgorithm; } });
            var strings_2 = require$$16;
            Object.defineProperty(exports, "UnicodeNormalizationForm", { enumerable: true, get: function () { return strings_2.UnicodeNormalizationForm; } });
            Object.defineProperty(exports, "Utf8ErrorReason", { enumerable: true, get: function () { return strings_2.Utf8ErrorReason; } });

            }(utils));

            const REGISTRAR_ABI = [
                {
                    constant: true,
                    inputs: [
                        {
                            name: 'node',
                            type: 'bytes32',
                        },
                    ],
                    name: 'resolver',
                    outputs: [
                        {
                            name: 'resolverAddress',
                            type: 'address',
                        },
                    ],
                    payable: false,
                    stateMutability: 'view',
                    type: 'function',
                },
            ];
            const REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';
            const RESOLVER_ABI = [
                {
                    constant: true,
                    inputs: [
                        {
                            internalType: 'bytes32',
                            name: 'node',
                            type: 'bytes32',
                        },
                    ],
                    name: 'contenthash',
                    outputs: [
                        {
                            internalType: 'bytes',
                            name: '',
                            type: 'bytes',
                        },
                    ],
                    payable: false,
                    stateMutability: 'view',
                    type: 'function',
                },
            ];
            // cache the resolver contracts since most of them are the public resolver
            function resolverContract(resolverAddress, provider) {
                return new Contract(resolverAddress, RESOLVER_ABI, provider);
            }
            /**
             * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI
             * @param ensName to resolve
             * @param provider provider to use to fetch the data
             */
            async function resolveENSContentHash(ensName, provider) {
                const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider);
                const hash = utils.namehash(ensName);
                const resolverAddress = await ensRegistrarContract.resolver(hash);
                return resolverContract(resolverAddress, provider).contenthash(hash);
            }

            var src$5 = {exports: {}};

            // base-x encoding / decoding
            // Copyright (c) 2018 base-x contributors
            // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
            // Distributed under the MIT software license, see the accompanying
            // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
            function base$2 (ALPHABET) {
              if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }
              var BASE_MAP = new Uint8Array(256);
              for (var j = 0; j < BASE_MAP.length; j++) {
                BASE_MAP[j] = 255;
              }
              for (var i = 0; i < ALPHABET.length; i++) {
                var x = ALPHABET.charAt(i);
                var xc = x.charCodeAt(0);
                if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }
                BASE_MAP[xc] = i;
              }
              var BASE = ALPHABET.length;
              var LEADER = ALPHABET.charAt(0);
              var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
              var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
              function encode (source) {
                if (source instanceof Uint8Array) ; else if (ArrayBuffer.isView(source)) {
                  source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
                } else if (Array.isArray(source)) {
                  source = Uint8Array.from(source);
                }
                if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }
                if (source.length === 0) { return '' }
                    // Skip & count leading zeroes.
                var zeroes = 0;
                var length = 0;
                var pbegin = 0;
                var pend = source.length;
                while (pbegin !== pend && source[pbegin] === 0) {
                  pbegin++;
                  zeroes++;
                }
                    // Allocate enough space in big-endian base58 representation.
                var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
                var b58 = new Uint8Array(size);
                    // Process the bytes.
                while (pbegin !== pend) {
                  var carry = source[pbegin];
                        // Apply "b58 = b58 * 256 + ch".
                  var i = 0;
                  for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {
                    carry += (256 * b58[it1]) >>> 0;
                    b58[it1] = (carry % BASE) >>> 0;
                    carry = (carry / BASE) >>> 0;
                  }
                  if (carry !== 0) { throw new Error('Non-zero carry') }
                  length = i;
                  pbegin++;
                }
                    // Skip leading zeroes in base58 result.
                var it2 = size - length;
                while (it2 !== size && b58[it2] === 0) {
                  it2++;
                }
                    // Translate the result into a string.
                var str = LEADER.repeat(zeroes);
                for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]); }
                return str
              }
              function decodeUnsafe (source) {
                if (typeof source !== 'string') { throw new TypeError('Expected String') }
                if (source.length === 0) { return new Uint8Array() }
                var psz = 0;
                    // Skip leading spaces.
                if (source[psz] === ' ') { return }
                    // Skip and count leading '1's.
                var zeroes = 0;
                var length = 0;
                while (source[psz] === LEADER) {
                  zeroes++;
                  psz++;
                }
                    // Allocate enough space in big-endian base256 representation.
                var size = (((source.length - psz) * FACTOR) + 1) >>> 0; // log(58) / log(256), rounded up.
                var b256 = new Uint8Array(size);
                    // Process the characters.
                while (source[psz]) {
                        // Decode character
                  var carry = BASE_MAP[source.charCodeAt(psz)];
                        // Invalid character
                  if (carry === 255) { return }
                  var i = 0;
                  for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {
                    carry += (BASE * b256[it3]) >>> 0;
                    b256[it3] = (carry % 256) >>> 0;
                    carry = (carry / 256) >>> 0;
                  }
                  if (carry !== 0) { throw new Error('Non-zero carry') }
                  length = i;
                  psz++;
                }
                    // Skip trailing spaces.
                if (source[psz] === ' ') { return }
                    // Skip leading zeroes in b256.
                var it4 = size - length;
                while (it4 !== size && b256[it4] === 0) {
                  it4++;
                }
                var vch = new Uint8Array(zeroes + (size - it4));
                var j = zeroes;
                while (it4 !== size) {
                  vch[j++] = b256[it4++];
                }
                return vch
              }
              function decode (string) {
                var buffer = decodeUnsafe(string);
                if (buffer) { return buffer }
                throw new Error('Non-base' + BASE + ' character')
              }
              return {
                encode: encode,
                decodeUnsafe: decodeUnsafe,
                decode: decode
              }
            }
            var src$4 = base$2;

            const textDecoder = new TextDecoder();
            /**
             * @param {ArrayBufferView|ArrayBuffer} bytes
             * @returns {string}
             */
            const decodeText$1 = (bytes) => textDecoder.decode(bytes);

            const textEncoder = new TextEncoder();
            /**
             * @param {string} text
             * @returns {Uint8Array}
             */
            const encodeText$2 = (text) => textEncoder.encode(text);

            /**
             * Returns a new Uint8Array created by concatenating the passed Arrays
             *
             * @param {Array<ArrayLike<number>>} arrs
             * @param {number} length
             * @returns {Uint8Array}
             */
            function concat$2 (arrs, length) {
              const output = new Uint8Array(length);
              let offset = 0;

              for (const arr of arrs) {
                output.set(arr, offset);
                offset += arr.length;
              }

              return output
            }

            var util$8 = { decodeText: decodeText$1, encodeText: encodeText$2, concat: concat$2 };

            const { encodeText: encodeText$1 } = util$8;

            /** @typedef {import('./types').CodecFactory} CodecFactory */
            /** @typedef {import("./types").BaseName} BaseName */
            /** @typedef {import("./types").BaseCode} BaseCode */

            /**
             * Class to encode/decode in the supported Bases
             *
             */
            class Base$1 {
              /**
               * @param {BaseName} name
               * @param {BaseCode} code
               * @param {CodecFactory} factory
               * @param {string} alphabet
               */
              constructor (name, code, factory, alphabet) {
                this.name = name;
                this.code = code;
                this.codeBuf = encodeText$1(this.code);
                this.alphabet = alphabet;
                this.codec = factory(alphabet);
              }

              /**
               * @param {Uint8Array} buf
               * @returns {string}
               */
              encode (buf) {
                return this.codec.encode(buf)
              }

              /**
               * @param {string} string
               * @returns {Uint8Array}
               */
              decode (string) {
                for (const char of string) {
                  if (this.alphabet && this.alphabet.indexOf(char) < 0) {
                    throw new Error(`invalid character '${char}' in '${string}'`)
                  }
                }
                return this.codec.decode(string)
              }
            }

            var base$1 = Base$1;

            /** @typedef {import('./types').CodecFactory} CodecFactory */

            /**
             * @param {string} string
             * @param {string} alphabet
             * @param {number} bitsPerChar
             * @returns {Uint8Array}
             */
            const decode$5 = (string, alphabet, bitsPerChar) => {
              // Build the character lookup table:
              /** @type {Record<string, number>} */
              const codes = {};
              for (let i = 0; i < alphabet.length; ++i) {
                codes[alphabet[i]] = i;
              }

              // Count the padding bytes:
              let end = string.length;
              while (string[end - 1] === '=') {
                --end;
              }

              // Allocate the output:
              const out = new Uint8Array((end * bitsPerChar / 8) | 0);

              // Parse the data:
              let bits = 0; // Number of bits currently in the buffer
              let buffer = 0; // Bits waiting to be written out, MSB first
              let written = 0; // Next byte to write
              for (let i = 0; i < end; ++i) {
                // Read one character from the string:
                const value = codes[string[i]];
                if (value === undefined) {
                  throw new SyntaxError('Invalid character ' + string[i])
                }

                // Append the bits to the buffer:
                buffer = (buffer << bitsPerChar) | value;
                bits += bitsPerChar;

                // Write out some bits if the buffer has a byte's worth:
                if (bits >= 8) {
                  bits -= 8;
                  out[written++] = 0xff & (buffer >> bits);
                }
              }

              // Verify that we have received just enough bits:
              if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {
                throw new SyntaxError('Unexpected end of data')
              }

              return out
            };

            /**
             * @param {Uint8Array} data
             * @param {string} alphabet
             * @param {number} bitsPerChar
             * @returns {string}
             */
            const encode$6 = (data, alphabet, bitsPerChar) => {
              const pad = alphabet[alphabet.length - 1] === '=';
              const mask = (1 << bitsPerChar) - 1;
              let out = '';

              let bits = 0; // Number of bits currently in the buffer
              let buffer = 0; // Bits waiting to be written out, MSB first
              for (let i = 0; i < data.length; ++i) {
                // Slurp data into the buffer:
                buffer = (buffer << 8) | data[i];
                bits += 8;

                // Write out as much as we can:
                while (bits > bitsPerChar) {
                  bits -= bitsPerChar;
                  out += alphabet[mask & (buffer >> bits)];
                }
              }

              // Partial character:
              if (bits) {
                out += alphabet[mask & (buffer << (bitsPerChar - bits))];
              }

              // Add padding characters until we hit a byte boundary:
              if (pad) {
                while ((out.length * bitsPerChar) & 7) {
                  out += '=';
                }
              }

              return out
            };

            /**
             * RFC4648 Factory
             *
             * @param {number} bitsPerChar
             * @returns {CodecFactory}
             */
            const rfc4648$2 = (bitsPerChar) => (alphabet) => {
              return {
                /**
                 * @param {Uint8Array} input
                 * @returns {string}
                 */
                encode (input) {
                  return encode$6(input, alphabet, bitsPerChar)
                },
                /**
                 * @param {string} input
                 * @returns {Uint8Array}
                 */
                decode (input) {
                  return decode$5(input, alphabet, bitsPerChar)
                }
              }
            };

            var rfc4648_1 = { rfc4648: rfc4648$2 };

            const baseX$1 = src$4;
            const Base = base$1;
            const { rfc4648: rfc4648$1 } = rfc4648_1;
            const { decodeText, encodeText } = util$8;

            /** @typedef {import('./types').CodecFactory} CodecFactory */
            /** @typedef {import('./types').Codec} Codec */
            /** @typedef {import('./types').BaseName} BaseName */
            /** @typedef {import('./types').BaseCode} BaseCode */

            /** @type {CodecFactory} */
            const identity$3 = () => {
              return {
                encode: decodeText,
                decode: encodeText
              }
            };

            /**
             *
             * name, code, implementation, alphabet
             *
             * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}
             */
            const constants$1 = [
              ['identity', '\x00', identity$3, ''],
              ['base2', '0', rfc4648$1(1), '01'],
              ['base8', '7', rfc4648$1(3), '01234567'],
              ['base10', '9', baseX$1, '0123456789'],
              ['base16', 'f', rfc4648$1(4), '0123456789abcdef'],
              ['base16upper', 'F', rfc4648$1(4), '0123456789ABCDEF'],
              ['base32hex', 'v', rfc4648$1(5), '0123456789abcdefghijklmnopqrstuv'],
              ['base32hexupper', 'V', rfc4648$1(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],
              ['base32hexpad', 't', rfc4648$1(5), '0123456789abcdefghijklmnopqrstuv='],
              ['base32hexpadupper', 'T', rfc4648$1(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],
              ['base32', 'b', rfc4648$1(5), 'abcdefghijklmnopqrstuvwxyz234567'],
              ['base32upper', 'B', rfc4648$1(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],
              ['base32pad', 'c', rfc4648$1(5), 'abcdefghijklmnopqrstuvwxyz234567='],
              ['base32padupper', 'C', rfc4648$1(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],
              ['base32z', 'h', rfc4648$1(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],
              ['base36', 'k', baseX$1, '0123456789abcdefghijklmnopqrstuvwxyz'],
              ['base36upper', 'K', baseX$1, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],
              ['base58btc', 'z', baseX$1, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],
              ['base58flickr', 'Z', baseX$1, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],
              ['base64', 'm', rfc4648$1(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],
              ['base64pad', 'M', rfc4648$1(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],
              ['base64url', 'u', rfc4648$1(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],
              ['base64urlpad', 'U', rfc4648$1(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']
            ];

            /** @type {Record<BaseName,Base>} */
            const names$2 = constants$1.reduce((prev, tupple) => {
              prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);
              return prev
            }, /** @type {Record<BaseName,Base>} */({}));

            /** @type {Record<BaseCode,Base>} */
            const codes$1 = constants$1.reduce((prev, tupple) => {
              prev[tupple[1]] = names$2[tupple[0]];
              return prev
            }, /** @type {Record<BaseCode,Base>} */({}));

            var constants_1 = {
              names: names$2,
              codes: codes$1
            };

            /**
             * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.
             *
             */

            (function (module, exports) {

            const constants = constants_1;
            const { encodeText, decodeText, concat } = util$8;

            /** @typedef {import('./base')} Base */
            /** @typedef {import("./types").BaseNameOrCode} BaseNameOrCode */
            /** @typedef {import("./types").BaseCode} BaseCode */
            /** @typedef {import("./types").BaseName} BaseName */

            /**
             * Create a new Uint8Array with the multibase varint+code.
             *
             * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
             * @param {Uint8Array} buf - The data to be prefixed with multibase.
             * @returns {Uint8Array}
             * @throws {Error} Will throw if the encoding is not supported
             */
            function multibase (nameOrCode, buf) {
              if (!buf) {
                throw new Error('requires an encoded Uint8Array')
              }
              const { name, codeBuf } = encoding(nameOrCode);
              validEncode(name, buf);

              return concat([codeBuf, buf], codeBuf.length + buf.length)
            }

            /**
             * Encode data with the specified base and add the multibase prefix.
             *
             * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.
             * @param {Uint8Array} buf - The data to be encoded.
             * @returns {Uint8Array}
             * @throws {Error} Will throw if the encoding is not supported
             *
             */
            function encode (nameOrCode, buf) {
              const enc = encoding(nameOrCode);
              const data = encodeText(enc.encode(buf));

              return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)
            }

            /**
             * Takes a Uint8Array or string encoded with multibase header, decodes it and
             * returns the decoded buffer
             *
             * @param {Uint8Array|string} data
             * @returns {Uint8Array}
             * @throws {Error} Will throw if the encoding is not supported
             *
             */
            function decode (data) {
              if (data instanceof Uint8Array) {
                data = decodeText(data);
              }
              const prefix = data[0];

              // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet
              if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {
                data = data.toLowerCase();
              }
              const enc = encoding(/** @type {BaseCode} */(data[0]));
              return enc.decode(data.substring(1))
            }

            /**
             * Is the given data multibase encoded?
             *
             * @param {Uint8Array|string} data
             */
            function isEncoded (data) {
              if (data instanceof Uint8Array) {
                data = decodeText(data);
              }

              // Ensure bufOrString is a string
              if (Object.prototype.toString.call(data) !== '[object String]') {
                return false
              }

              try {
                const enc = encoding(/** @type {BaseCode} */(data[0]));
                return enc.name
              } catch (err) {
                return false
              }
            }

            /**
             * Validate encoded data
             *
             * @param {BaseNameOrCode} name
             * @param {Uint8Array} buf
             * @returns {void}
             * @throws {Error} Will throw if the encoding is not supported
             */
            function validEncode (name, buf) {
              const enc = encoding(name);
              enc.decode(decodeText(buf));
            }

            /**
             * Get the encoding by name or code
             *
             * @param {BaseNameOrCode} nameOrCode
             * @returns {Base}
             * @throws {Error} Will throw if the encoding is not supported
             */
            function encoding (nameOrCode) {
              if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {
                return constants.names[/** @type {BaseName} */(nameOrCode)]
              } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {
                return constants.codes[/** @type {BaseCode} */(nameOrCode)]
              } else {
                throw new Error(`Unsupported encoding: ${nameOrCode}`)
              }
            }

            /**
             * Get encoding from data
             *
             * @param {string|Uint8Array} data
             * @returns {Base}
             * @throws {Error} Will throw if the encoding is not supported
             */
            function encodingFromData (data) {
              if (data instanceof Uint8Array) {
                data = decodeText(data);
              }

              return encoding(/** @type {BaseCode} */(data[0]))
            }

            exports = module.exports = multibase;
            exports.encode = encode;
            exports.decode = decode;
            exports.isEncoded = isEncoded;
            exports.encoding = encoding;
            exports.encodingFromData = encodingFromData;
            const names = Object.freeze(constants.names);
            const codes = Object.freeze(constants.codes);
            exports.names = names;
            exports.codes = codes;
            }(src$5, src$5.exports));

            var encode_1$2 = encode$5;

            var MSB$4 = 0x80
              , REST$4 = 0x7F
              , MSBALL$2 = ~REST$4
              , INT$2 = Math.pow(2, 31);

            function encode$5(num, out, offset) {
              out = out || [];
              offset = offset || 0;
              var oldOffset = offset;

              while(num >= INT$2) {
                out[offset++] = (num & 0xFF) | MSB$4;
                num /= 128;
              }
              while(num & MSBALL$2) {
                out[offset++] = (num & 0xFF) | MSB$4;
                num >>>= 7;
              }
              out[offset] = num | 0;
              
              encode$5.bytes = offset - oldOffset + 1;
              
              return out
            }

            var decode$4 = read$2;

            var MSB$3 = 0x80
              , REST$3 = 0x7F;

            function read$2(buf, offset) {
              var res    = 0
                , offset = offset || 0
                , shift  = 0
                , counter = offset
                , b
                , l = buf.length;

              do {
                if (counter >= l) {
                  read$2.bytes = 0;
                  throw new RangeError('Could not decode varint')
                }
                b = buf[counter++];
                res += shift < 28
                  ? (b & REST$3) << shift
                  : (b & REST$3) * Math.pow(2, shift);
                shift += 7;
              } while (b >= MSB$3)

              read$2.bytes = counter - offset;

              return res
            }

            var N1$2 = Math.pow(2,  7);
            var N2$2 = Math.pow(2, 14);
            var N3$2 = Math.pow(2, 21);
            var N4$2 = Math.pow(2, 28);
            var N5$2 = Math.pow(2, 35);
            var N6$2 = Math.pow(2, 42);
            var N7$2 = Math.pow(2, 49);
            var N8$2 = Math.pow(2, 56);
            var N9$2 = Math.pow(2, 63);

            var length$2 = function (value) {
              return (
                value < N1$2 ? 1
              : value < N2$2 ? 2
              : value < N3$2 ? 3
              : value < N4$2 ? 4
              : value < N5$2 ? 5
              : value < N6$2 ? 6
              : value < N7$2 ? 7
              : value < N8$2 ? 8
              : value < N9$2 ? 9
              :              10
              )
            };

            var varint$5 = {
                encode: encode_1$2
              , decode: decode$4
              , encodingLength: length$2
            };

            /* eslint quote-props: off */

            /**
             * Names for all available hashes
             *
             * @typedef { "identity" | "sha1" | "sha2-256" | "sha2-512" | "sha3-512" | "sha3-384" | "sha3-256" | "sha3-224" | "shake-128" | "shake-256" | "keccak-224" | "keccak-256" | "keccak-384" | "keccak-512" | "blake3" | "murmur3-128" | "murmur3-32" | "dbl-sha2-256" | "md4" | "md5" | "bmt" | "sha2-256-trunc254-padded" | "ripemd-128" | "ripemd-160" | "ripemd-256" | "ripemd-320" | "x11" | "kangarootwelve" | "sm3-256" | "blake2b-8" | "blake2b-16" | "blake2b-24" | "blake2b-32" | "blake2b-40" | "blake2b-48" | "blake2b-56" | "blake2b-64" | "blake2b-72" | "blake2b-80" | "blake2b-88" | "blake2b-96" | "blake2b-104" | "blake2b-112" | "blake2b-120" | "blake2b-128" | "blake2b-136" | "blake2b-144" | "blake2b-152" | "blake2b-160" | "blake2b-168" | "blake2b-176" | "blake2b-184" | "blake2b-192" | "blake2b-200" | "blake2b-208" | "blake2b-216" | "blake2b-224" | "blake2b-232" | "blake2b-240" | "blake2b-248" | "blake2b-256" | "blake2b-264" | "blake2b-272" | "blake2b-280" | "blake2b-288" | "blake2b-296" | "blake2b-304" | "blake2b-312" | "blake2b-320" | "blake2b-328" | "blake2b-336" | "blake2b-344" | "blake2b-352" | "blake2b-360" | "blake2b-368" | "blake2b-376" | "blake2b-384" | "blake2b-392" | "blake2b-400" | "blake2b-408" | "blake2b-416" | "blake2b-424" | "blake2b-432" | "blake2b-440" | "blake2b-448" | "blake2b-456" | "blake2b-464" | "blake2b-472" | "blake2b-480" | "blake2b-488" | "blake2b-496" | "blake2b-504" | "blake2b-512" | "blake2s-8" | "blake2s-16" | "blake2s-24" | "blake2s-32" | "blake2s-40" | "blake2s-48" | "blake2s-56" | "blake2s-64" | "blake2s-72" | "blake2s-80" | "blake2s-88" | "blake2s-96" | "blake2s-104" | "blake2s-112" | "blake2s-120" | "blake2s-128" | "blake2s-136" | "blake2s-144" | "blake2s-152" | "blake2s-160" | "blake2s-168" | "blake2s-176" | "blake2s-184" | "blake2s-192" | "blake2s-200" | "blake2s-208" | "blake2s-216" | "blake2s-224" | "blake2s-232" | "blake2s-240" | "blake2s-248" | "blake2s-256" | "skein256-8" | "skein256-16" | "skein256-24" | "skein256-32" | "skein256-40" | "skein256-48" | "skein256-56" | "skein256-64" | "skein256-72" | "skein256-80" | "skein256-88" | "skein256-96" | "skein256-104" | "skein256-112" | "skein256-120" | "skein256-128" | "skein256-136" | "skein256-144" | "skein256-152" | "skein256-160" | "skein256-168" | "skein256-176" | "skein256-184" | "skein256-192" | "skein256-200" | "skein256-208" | "skein256-216" | "skein256-224" | "skein256-232" | "skein256-240" | "skein256-248" | "skein256-256" | "skein512-8" | "skein512-16" | "skein512-24" | "skein512-32" | "skein512-40" | "skein512-48" | "skein512-56" | "skein512-64" | "skein512-72" | "skein512-80" | "skein512-88" | "skein512-96" | "skein512-104" | "skein512-112" | "skein512-120" | "skein512-128" | "skein512-136" | "skein512-144" | "skein512-152" | "skein512-160" | "skein512-168" | "skein512-176" | "skein512-184" | "skein512-192" | "skein512-200" | "skein512-208" | "skein512-216" | "skein512-224" | "skein512-232" | "skein512-240" | "skein512-248" | "skein512-256" | "skein512-264" | "skein512-272" | "skein512-280" | "skein512-288" | "skein512-296" | "skein512-304" | "skein512-312" | "skein512-320" | "skein512-328" | "skein512-336" | "skein512-344" | "skein512-352" | "skein512-360" | "skein512-368" | "skein512-376" | "skein512-384" | "skein512-392" | "skein512-400" | "skein512-408" | "skein512-416" | "skein512-424" | "skein512-432" | "skein512-440" | "skein512-448" | "skein512-456" | "skein512-464" | "skein512-472" | "skein512-480" | "skein512-488" | "skein512-496" | "skein512-504" | "skein512-512" | "skein1024-8" | "skein1024-16" | "skein1024-24" | "skein1024-32" | "skein1024-40" | "skein1024-48" | "skein1024-56" | "skein1024-64" | "skein1024-72" | "skein1024-80" | "skein1024-88" | "skein1024-96" | "skein1024-104" | "skein1024-112" | "skein1024-120" | "skein1024-128" | "skein1024-136" | "skein1024-144" | "skein1024-152" | "skein1024-160" | "skein1024-168" | "skein1024-176" | "skein1024-184" | "skein1024-192" | "skein1024-200" | "skein1024-208" | "skein1024-216" | "skein1024-224" | "skein1024-232" | "skein1024-240" | "skein1024-248" | "skein1024-256" | "skein1024-264" | "skein1024-272" | "skein1024-280" | "skein1024-288" | "skein1024-296" | "skein1024-304" | "skein1024-312" | "skein1024-320" | "skein1024-328" | "skein1024-336" | "skein1024-344" | "skein1024-352" | "skein1024-360" | "skein1024-368" | "skein1024-376" | "skein1024-384" | "skein1024-392" | "skein1024-400" | "skein1024-408" | "skein1024-416" | "skein1024-424" | "skein1024-432" | "skein1024-440" | "skein1024-448" | "skein1024-456" | "skein1024-464" | "skein1024-472" | "skein1024-480" | "skein1024-488" | "skein1024-496" | "skein1024-504" | "skein1024-512" | "skein1024-520" | "skein1024-528" | "skein1024-536" | "skein1024-544" | "skein1024-552" | "skein1024-560" | "skein1024-568" | "skein1024-576" | "skein1024-584" | "skein1024-592" | "skein1024-600" | "skein1024-608" | "skein1024-616" | "skein1024-624" | "skein1024-632" | "skein1024-640" | "skein1024-648" | "skein1024-656" | "skein1024-664" | "skein1024-672" | "skein1024-680" | "skein1024-688" | "skein1024-696" | "skein1024-704" | "skein1024-712" | "skein1024-720" | "skein1024-728" | "skein1024-736" | "skein1024-744" | "skein1024-752" | "skein1024-760" | "skein1024-768" | "skein1024-776" | "skein1024-784" | "skein1024-792" | "skein1024-800" | "skein1024-808" | "skein1024-816" | "skein1024-824" | "skein1024-832" | "skein1024-840" | "skein1024-848" | "skein1024-856" | "skein1024-864" | "skein1024-872" | "skein1024-880" | "skein1024-888" | "skein1024-896" | "skein1024-904" | "skein1024-912" | "skein1024-920" | "skein1024-928" | "skein1024-936" | "skein1024-944" | "skein1024-952" | "skein1024-960" | "skein1024-968" | "skein1024-976" | "skein1024-984" | "skein1024-992" | "skein1024-1000" | "skein1024-1008" | "skein1024-1016" | "skein1024-1024" | "poseidon-bls12_381-a2-fc1" | "poseidon-bls12_381-a2-fc1-sc" } HashName
             */
            /**
             * Codes for all available hashes
             *
             * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode
             */

            /**
             * @type { Record<HashName,HashCode> }
             */
            const names$1 = Object.freeze({
              'identity': 0x00,
              'sha1': 0x11,
              'sha2-256': 0x12,
              'sha2-512': 0x13,
              'sha3-512': 0x14,
              'sha3-384': 0x15,
              'sha3-256': 0x16,
              'sha3-224': 0x17,
              'shake-128': 0x18,
              'shake-256': 0x19,
              'keccak-224': 0x1a,
              'keccak-256': 0x1b,
              'keccak-384': 0x1c,
              'keccak-512': 0x1d,
              'blake3': 0x1e,
              'murmur3-128': 0x22,
              'murmur3-32': 0x23,
              'dbl-sha2-256': 0x56,
              'md4': 0xd4,
              'md5': 0xd5,
              'bmt': 0xd6,
              'sha2-256-trunc254-padded': 0x1012,
              'ripemd-128': 0x1052,
              'ripemd-160': 0x1053,
              'ripemd-256': 0x1054,
              'ripemd-320': 0x1055,
              'x11': 0x1100,
              'kangarootwelve': 0x1d01,
              'sm3-256': 0x534d,
              'blake2b-8': 0xb201,
              'blake2b-16': 0xb202,
              'blake2b-24': 0xb203,
              'blake2b-32': 0xb204,
              'blake2b-40': 0xb205,
              'blake2b-48': 0xb206,
              'blake2b-56': 0xb207,
              'blake2b-64': 0xb208,
              'blake2b-72': 0xb209,
              'blake2b-80': 0xb20a,
              'blake2b-88': 0xb20b,
              'blake2b-96': 0xb20c,
              'blake2b-104': 0xb20d,
              'blake2b-112': 0xb20e,
              'blake2b-120': 0xb20f,
              'blake2b-128': 0xb210,
              'blake2b-136': 0xb211,
              'blake2b-144': 0xb212,
              'blake2b-152': 0xb213,
              'blake2b-160': 0xb214,
              'blake2b-168': 0xb215,
              'blake2b-176': 0xb216,
              'blake2b-184': 0xb217,
              'blake2b-192': 0xb218,
              'blake2b-200': 0xb219,
              'blake2b-208': 0xb21a,
              'blake2b-216': 0xb21b,
              'blake2b-224': 0xb21c,
              'blake2b-232': 0xb21d,
              'blake2b-240': 0xb21e,
              'blake2b-248': 0xb21f,
              'blake2b-256': 0xb220,
              'blake2b-264': 0xb221,
              'blake2b-272': 0xb222,
              'blake2b-280': 0xb223,
              'blake2b-288': 0xb224,
              'blake2b-296': 0xb225,
              'blake2b-304': 0xb226,
              'blake2b-312': 0xb227,
              'blake2b-320': 0xb228,
              'blake2b-328': 0xb229,
              'blake2b-336': 0xb22a,
              'blake2b-344': 0xb22b,
              'blake2b-352': 0xb22c,
              'blake2b-360': 0xb22d,
              'blake2b-368': 0xb22e,
              'blake2b-376': 0xb22f,
              'blake2b-384': 0xb230,
              'blake2b-392': 0xb231,
              'blake2b-400': 0xb232,
              'blake2b-408': 0xb233,
              'blake2b-416': 0xb234,
              'blake2b-424': 0xb235,
              'blake2b-432': 0xb236,
              'blake2b-440': 0xb237,
              'blake2b-448': 0xb238,
              'blake2b-456': 0xb239,
              'blake2b-464': 0xb23a,
              'blake2b-472': 0xb23b,
              'blake2b-480': 0xb23c,
              'blake2b-488': 0xb23d,
              'blake2b-496': 0xb23e,
              'blake2b-504': 0xb23f,
              'blake2b-512': 0xb240,
              'blake2s-8': 0xb241,
              'blake2s-16': 0xb242,
              'blake2s-24': 0xb243,
              'blake2s-32': 0xb244,
              'blake2s-40': 0xb245,
              'blake2s-48': 0xb246,
              'blake2s-56': 0xb247,
              'blake2s-64': 0xb248,
              'blake2s-72': 0xb249,
              'blake2s-80': 0xb24a,
              'blake2s-88': 0xb24b,
              'blake2s-96': 0xb24c,
              'blake2s-104': 0xb24d,
              'blake2s-112': 0xb24e,
              'blake2s-120': 0xb24f,
              'blake2s-128': 0xb250,
              'blake2s-136': 0xb251,
              'blake2s-144': 0xb252,
              'blake2s-152': 0xb253,
              'blake2s-160': 0xb254,
              'blake2s-168': 0xb255,
              'blake2s-176': 0xb256,
              'blake2s-184': 0xb257,
              'blake2s-192': 0xb258,
              'blake2s-200': 0xb259,
              'blake2s-208': 0xb25a,
              'blake2s-216': 0xb25b,
              'blake2s-224': 0xb25c,
              'blake2s-232': 0xb25d,
              'blake2s-240': 0xb25e,
              'blake2s-248': 0xb25f,
              'blake2s-256': 0xb260,
              'skein256-8': 0xb301,
              'skein256-16': 0xb302,
              'skein256-24': 0xb303,
              'skein256-32': 0xb304,
              'skein256-40': 0xb305,
              'skein256-48': 0xb306,
              'skein256-56': 0xb307,
              'skein256-64': 0xb308,
              'skein256-72': 0xb309,
              'skein256-80': 0xb30a,
              'skein256-88': 0xb30b,
              'skein256-96': 0xb30c,
              'skein256-104': 0xb30d,
              'skein256-112': 0xb30e,
              'skein256-120': 0xb30f,
              'skein256-128': 0xb310,
              'skein256-136': 0xb311,
              'skein256-144': 0xb312,
              'skein256-152': 0xb313,
              'skein256-160': 0xb314,
              'skein256-168': 0xb315,
              'skein256-176': 0xb316,
              'skein256-184': 0xb317,
              'skein256-192': 0xb318,
              'skein256-200': 0xb319,
              'skein256-208': 0xb31a,
              'skein256-216': 0xb31b,
              'skein256-224': 0xb31c,
              'skein256-232': 0xb31d,
              'skein256-240': 0xb31e,
              'skein256-248': 0xb31f,
              'skein256-256': 0xb320,
              'skein512-8': 0xb321,
              'skein512-16': 0xb322,
              'skein512-24': 0xb323,
              'skein512-32': 0xb324,
              'skein512-40': 0xb325,
              'skein512-48': 0xb326,
              'skein512-56': 0xb327,
              'skein512-64': 0xb328,
              'skein512-72': 0xb329,
              'skein512-80': 0xb32a,
              'skein512-88': 0xb32b,
              'skein512-96': 0xb32c,
              'skein512-104': 0xb32d,
              'skein512-112': 0xb32e,
              'skein512-120': 0xb32f,
              'skein512-128': 0xb330,
              'skein512-136': 0xb331,
              'skein512-144': 0xb332,
              'skein512-152': 0xb333,
              'skein512-160': 0xb334,
              'skein512-168': 0xb335,
              'skein512-176': 0xb336,
              'skein512-184': 0xb337,
              'skein512-192': 0xb338,
              'skein512-200': 0xb339,
              'skein512-208': 0xb33a,
              'skein512-216': 0xb33b,
              'skein512-224': 0xb33c,
              'skein512-232': 0xb33d,
              'skein512-240': 0xb33e,
              'skein512-248': 0xb33f,
              'skein512-256': 0xb340,
              'skein512-264': 0xb341,
              'skein512-272': 0xb342,
              'skein512-280': 0xb343,
              'skein512-288': 0xb344,
              'skein512-296': 0xb345,
              'skein512-304': 0xb346,
              'skein512-312': 0xb347,
              'skein512-320': 0xb348,
              'skein512-328': 0xb349,
              'skein512-336': 0xb34a,
              'skein512-344': 0xb34b,
              'skein512-352': 0xb34c,
              'skein512-360': 0xb34d,
              'skein512-368': 0xb34e,
              'skein512-376': 0xb34f,
              'skein512-384': 0xb350,
              'skein512-392': 0xb351,
              'skein512-400': 0xb352,
              'skein512-408': 0xb353,
              'skein512-416': 0xb354,
              'skein512-424': 0xb355,
              'skein512-432': 0xb356,
              'skein512-440': 0xb357,
              'skein512-448': 0xb358,
              'skein512-456': 0xb359,
              'skein512-464': 0xb35a,
              'skein512-472': 0xb35b,
              'skein512-480': 0xb35c,
              'skein512-488': 0xb35d,
              'skein512-496': 0xb35e,
              'skein512-504': 0xb35f,
              'skein512-512': 0xb360,
              'skein1024-8': 0xb361,
              'skein1024-16': 0xb362,
              'skein1024-24': 0xb363,
              'skein1024-32': 0xb364,
              'skein1024-40': 0xb365,
              'skein1024-48': 0xb366,
              'skein1024-56': 0xb367,
              'skein1024-64': 0xb368,
              'skein1024-72': 0xb369,
              'skein1024-80': 0xb36a,
              'skein1024-88': 0xb36b,
              'skein1024-96': 0xb36c,
              'skein1024-104': 0xb36d,
              'skein1024-112': 0xb36e,
              'skein1024-120': 0xb36f,
              'skein1024-128': 0xb370,
              'skein1024-136': 0xb371,
              'skein1024-144': 0xb372,
              'skein1024-152': 0xb373,
              'skein1024-160': 0xb374,
              'skein1024-168': 0xb375,
              'skein1024-176': 0xb376,
              'skein1024-184': 0xb377,
              'skein1024-192': 0xb378,
              'skein1024-200': 0xb379,
              'skein1024-208': 0xb37a,
              'skein1024-216': 0xb37b,
              'skein1024-224': 0xb37c,
              'skein1024-232': 0xb37d,
              'skein1024-240': 0xb37e,
              'skein1024-248': 0xb37f,
              'skein1024-256': 0xb380,
              'skein1024-264': 0xb381,
              'skein1024-272': 0xb382,
              'skein1024-280': 0xb383,
              'skein1024-288': 0xb384,
              'skein1024-296': 0xb385,
              'skein1024-304': 0xb386,
              'skein1024-312': 0xb387,
              'skein1024-320': 0xb388,
              'skein1024-328': 0xb389,
              'skein1024-336': 0xb38a,
              'skein1024-344': 0xb38b,
              'skein1024-352': 0xb38c,
              'skein1024-360': 0xb38d,
              'skein1024-368': 0xb38e,
              'skein1024-376': 0xb38f,
              'skein1024-384': 0xb390,
              'skein1024-392': 0xb391,
              'skein1024-400': 0xb392,
              'skein1024-408': 0xb393,
              'skein1024-416': 0xb394,
              'skein1024-424': 0xb395,
              'skein1024-432': 0xb396,
              'skein1024-440': 0xb397,
              'skein1024-448': 0xb398,
              'skein1024-456': 0xb399,
              'skein1024-464': 0xb39a,
              'skein1024-472': 0xb39b,
              'skein1024-480': 0xb39c,
              'skein1024-488': 0xb39d,
              'skein1024-496': 0xb39e,
              'skein1024-504': 0xb39f,
              'skein1024-512': 0xb3a0,
              'skein1024-520': 0xb3a1,
              'skein1024-528': 0xb3a2,
              'skein1024-536': 0xb3a3,
              'skein1024-544': 0xb3a4,
              'skein1024-552': 0xb3a5,
              'skein1024-560': 0xb3a6,
              'skein1024-568': 0xb3a7,
              'skein1024-576': 0xb3a8,
              'skein1024-584': 0xb3a9,
              'skein1024-592': 0xb3aa,
              'skein1024-600': 0xb3ab,
              'skein1024-608': 0xb3ac,
              'skein1024-616': 0xb3ad,
              'skein1024-624': 0xb3ae,
              'skein1024-632': 0xb3af,
              'skein1024-640': 0xb3b0,
              'skein1024-648': 0xb3b1,
              'skein1024-656': 0xb3b2,
              'skein1024-664': 0xb3b3,
              'skein1024-672': 0xb3b4,
              'skein1024-680': 0xb3b5,
              'skein1024-688': 0xb3b6,
              'skein1024-696': 0xb3b7,
              'skein1024-704': 0xb3b8,
              'skein1024-712': 0xb3b9,
              'skein1024-720': 0xb3ba,
              'skein1024-728': 0xb3bb,
              'skein1024-736': 0xb3bc,
              'skein1024-744': 0xb3bd,
              'skein1024-752': 0xb3be,
              'skein1024-760': 0xb3bf,
              'skein1024-768': 0xb3c0,
              'skein1024-776': 0xb3c1,
              'skein1024-784': 0xb3c2,
              'skein1024-792': 0xb3c3,
              'skein1024-800': 0xb3c4,
              'skein1024-808': 0xb3c5,
              'skein1024-816': 0xb3c6,
              'skein1024-824': 0xb3c7,
              'skein1024-832': 0xb3c8,
              'skein1024-840': 0xb3c9,
              'skein1024-848': 0xb3ca,
              'skein1024-856': 0xb3cb,
              'skein1024-864': 0xb3cc,
              'skein1024-872': 0xb3cd,
              'skein1024-880': 0xb3ce,
              'skein1024-888': 0xb3cf,
              'skein1024-896': 0xb3d0,
              'skein1024-904': 0xb3d1,
              'skein1024-912': 0xb3d2,
              'skein1024-920': 0xb3d3,
              'skein1024-928': 0xb3d4,
              'skein1024-936': 0xb3d5,
              'skein1024-944': 0xb3d6,
              'skein1024-952': 0xb3d7,
              'skein1024-960': 0xb3d8,
              'skein1024-968': 0xb3d9,
              'skein1024-976': 0xb3da,
              'skein1024-984': 0xb3db,
              'skein1024-992': 0xb3dc,
              'skein1024-1000': 0xb3dd,
              'skein1024-1008': 0xb3de,
              'skein1024-1016': 0xb3df,
              'skein1024-1024': 0xb3e0,
              'poseidon-bls12_381-a2-fc1': 0xb401,
              'poseidon-bls12_381-a2-fc1-sc': 0xb402
            });

            var constants = { names: names$1 };

            function base(ALPHABET, name) {
              if (ALPHABET.length >= 255) {
                throw new TypeError('Alphabet too long');
              }
              var BASE_MAP = new Uint8Array(256);
              for (var j = 0; j < BASE_MAP.length; j++) {
                BASE_MAP[j] = 255;
              }
              for (var i = 0; i < ALPHABET.length; i++) {
                var x = ALPHABET.charAt(i);
                var xc = x.charCodeAt(0);
                if (BASE_MAP[xc] !== 255) {
                  throw new TypeError(x + ' is ambiguous');
                }
                BASE_MAP[xc] = i;
              }
              var BASE = ALPHABET.length;
              var LEADER = ALPHABET.charAt(0);
              var FACTOR = Math.log(BASE) / Math.log(256);
              var iFACTOR = Math.log(256) / Math.log(BASE);
              function encode(source) {
                if (source instanceof Uint8Array);
                else if (ArrayBuffer.isView(source)) {
                  source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
                } else if (Array.isArray(source)) {
                  source = Uint8Array.from(source);
                }
                if (!(source instanceof Uint8Array)) {
                  throw new TypeError('Expected Uint8Array');
                }
                if (source.length === 0) {
                  return '';
                }
                var zeroes = 0;
                var length = 0;
                var pbegin = 0;
                var pend = source.length;
                while (pbegin !== pend && source[pbegin] === 0) {
                  pbegin++;
                  zeroes++;
                }
                var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
                var b58 = new Uint8Array(size);
                while (pbegin !== pend) {
                  var carry = source[pbegin];
                  var i = 0;
                  for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
                    carry += 256 * b58[it1] >>> 0;
                    b58[it1] = carry % BASE >>> 0;
                    carry = carry / BASE >>> 0;
                  }
                  if (carry !== 0) {
                    throw new Error('Non-zero carry');
                  }
                  length = i;
                  pbegin++;
                }
                var it2 = size - length;
                while (it2 !== size && b58[it2] === 0) {
                  it2++;
                }
                var str = LEADER.repeat(zeroes);
                for (; it2 < size; ++it2) {
                  str += ALPHABET.charAt(b58[it2]);
                }
                return str;
              }
              function decodeUnsafe(source) {
                if (typeof source !== 'string') {
                  throw new TypeError('Expected String');
                }
                if (source.length === 0) {
                  return new Uint8Array();
                }
                var psz = 0;
                if (source[psz] === ' ') {
                  return;
                }
                var zeroes = 0;
                var length = 0;
                while (source[psz] === LEADER) {
                  zeroes++;
                  psz++;
                }
                var size = (source.length - psz) * FACTOR + 1 >>> 0;
                var b256 = new Uint8Array(size);
                while (source[psz]) {
                  var carry = BASE_MAP[source.charCodeAt(psz)];
                  if (carry === 255) {
                    return;
                  }
                  var i = 0;
                  for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
                    carry += BASE * b256[it3] >>> 0;
                    b256[it3] = carry % 256 >>> 0;
                    carry = carry / 256 >>> 0;
                  }
                  if (carry !== 0) {
                    throw new Error('Non-zero carry');
                  }
                  length = i;
                  psz++;
                }
                if (source[psz] === ' ') {
                  return;
                }
                var it4 = size - length;
                while (it4 !== size && b256[it4] === 0) {
                  it4++;
                }
                var vch = new Uint8Array(zeroes + (size - it4));
                var j = zeroes;
                while (it4 !== size) {
                  vch[j++] = b256[it4++];
                }
                return vch;
              }
              function decode(string) {
                var buffer = decodeUnsafe(string);
                if (buffer) {
                  return buffer;
                }
                throw new Error(`Non-${ name } character`);
              }
              return {
                encode: encode,
                decodeUnsafe: decodeUnsafe,
                decode: decode
              };
            }
            var src$3 = base;
            var _brrp__multiformats_scope_baseX = src$3;

            const coerce = o => {
              if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
                return o;
              if (o instanceof ArrayBuffer)
                return new Uint8Array(o);
              if (ArrayBuffer.isView(o)) {
                return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
              }
              throw new Error('Unknown type, must be binary type');
            };
            const fromString$2 = str => new TextEncoder().encode(str);
            const toString$2 = b => new TextDecoder().decode(b);

            class Encoder {
              constructor(name, prefix, baseEncode) {
                this.name = name;
                this.prefix = prefix;
                this.baseEncode = baseEncode;
              }
              encode(bytes) {
                if (bytes instanceof Uint8Array) {
                  return `${ this.prefix }${ this.baseEncode(bytes) }`;
                } else {
                  throw Error('Unknown type, must be binary type');
                }
              }
            }
            class Decoder {
              constructor(name, prefix, baseDecode) {
                this.name = name;
                this.prefix = prefix;
                this.baseDecode = baseDecode;
              }
              decode(text) {
                if (typeof text === 'string') {
                  switch (text[0]) {
                  case this.prefix: {
                      return this.baseDecode(text.slice(1));
                    }
                  default: {
                      throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);
                    }
                  }
                } else {
                  throw Error('Can only multibase decode strings');
                }
              }
              or(decoder) {
                return or(this, decoder);
              }
            }
            class ComposedDecoder {
              constructor(decoders) {
                this.decoders = decoders;
              }
              or(decoder) {
                return or(this, decoder);
              }
              decode(input) {
                const prefix = input[0];
                const decoder = this.decoders[prefix];
                if (decoder) {
                  return decoder.decode(input);
                } else {
                  throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);
                }
              }
            }
            const or = (left, right) => new ComposedDecoder({
              ...left.decoders || { [left.prefix]: left },
              ...right.decoders || { [right.prefix]: right }
            });
            class Codec {
              constructor(name, prefix, baseEncode, baseDecode) {
                this.name = name;
                this.prefix = prefix;
                this.baseEncode = baseEncode;
                this.baseDecode = baseDecode;
                this.encoder = new Encoder(name, prefix, baseEncode);
                this.decoder = new Decoder(name, prefix, baseDecode);
              }
              encode(input) {
                return this.encoder.encode(input);
              }
              decode(input) {
                return this.decoder.decode(input);
              }
            }
            const from$1 = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);
            const baseX = ({prefix, name, alphabet}) => {
              const {encode, decode} = _brrp__multiformats_scope_baseX(alphabet, name);
              return from$1({
                prefix,
                name,
                encode,
                decode: text => coerce(decode(text))
              });
            };
            const decode$3 = (string, alphabet, bitsPerChar, name) => {
              const codes = {};
              for (let i = 0; i < alphabet.length; ++i) {
                codes[alphabet[i]] = i;
              }
              let end = string.length;
              while (string[end - 1] === '=') {
                --end;
              }
              const out = new Uint8Array(end * bitsPerChar / 8 | 0);
              let bits = 0;
              let buffer = 0;
              let written = 0;
              for (let i = 0; i < end; ++i) {
                const value = codes[string[i]];
                if (value === undefined) {
                  throw new SyntaxError(`Non-${ name } character`);
                }
                buffer = buffer << bitsPerChar | value;
                bits += bitsPerChar;
                if (bits >= 8) {
                  bits -= 8;
                  out[written++] = 255 & buffer >> bits;
                }
              }
              if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
                throw new SyntaxError('Unexpected end of data');
              }
              return out;
            };
            const encode$4 = (data, alphabet, bitsPerChar) => {
              const pad = alphabet[alphabet.length - 1] === '=';
              const mask = (1 << bitsPerChar) - 1;
              let out = '';
              let bits = 0;
              let buffer = 0;
              for (let i = 0; i < data.length; ++i) {
                buffer = buffer << 8 | data[i];
                bits += 8;
                while (bits > bitsPerChar) {
                  bits -= bitsPerChar;
                  out += alphabet[mask & buffer >> bits];
                }
              }
              if (bits) {
                out += alphabet[mask & buffer << bitsPerChar - bits];
              }
              if (pad) {
                while (out.length * bitsPerChar & 7) {
                  out += '=';
                }
              }
              return out;
            };
            const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {
              return from$1({
                prefix,
                name,
                encode(input) {
                  return encode$4(input, alphabet, bitsPerChar);
                },
                decode(input) {
                  return decode$3(input, alphabet, bitsPerChar, name);
                }
              });
            };

            const identity$2 = from$1({
              prefix: '\0',
              name: 'identity',
              encode: buf => toString$2(buf),
              decode: str => fromString$2(str)
            });

            var identityBase = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        identity: identity$2
            });

            const base2 = rfc4648({
              prefix: '0',
              name: 'base2',
              alphabet: '01',
              bitsPerChar: 1
            });

            var base2$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base2: base2
            });

            const base8 = rfc4648({
              prefix: '7',
              name: 'base8',
              alphabet: '01234567',
              bitsPerChar: 3
            });

            var base8$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base8: base8
            });

            const base10 = baseX({
              prefix: '9',
              name: 'base10',
              alphabet: '0123456789'
            });

            var base10$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base10: base10
            });

            const base16 = rfc4648({
              prefix: 'f',
              name: 'base16',
              alphabet: '0123456789abcdef',
              bitsPerChar: 4
            });
            const base16upper = rfc4648({
              prefix: 'F',
              name: 'base16upper',
              alphabet: '0123456789ABCDEF',
              bitsPerChar: 4
            });

            var base16$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base16: base16,
                        base16upper: base16upper
            });

            const base32 = rfc4648({
              prefix: 'b',
              name: 'base32',
              alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
              bitsPerChar: 5
            });
            const base32upper = rfc4648({
              prefix: 'B',
              name: 'base32upper',
              alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
              bitsPerChar: 5
            });
            const base32pad = rfc4648({
              prefix: 'c',
              name: 'base32pad',
              alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
              bitsPerChar: 5
            });
            const base32padupper = rfc4648({
              prefix: 'C',
              name: 'base32padupper',
              alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
              bitsPerChar: 5
            });
            const base32hex = rfc4648({
              prefix: 'v',
              name: 'base32hex',
              alphabet: '0123456789abcdefghijklmnopqrstuv',
              bitsPerChar: 5
            });
            const base32hexupper = rfc4648({
              prefix: 'V',
              name: 'base32hexupper',
              alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
              bitsPerChar: 5
            });
            const base32hexpad = rfc4648({
              prefix: 't',
              name: 'base32hexpad',
              alphabet: '0123456789abcdefghijklmnopqrstuv=',
              bitsPerChar: 5
            });
            const base32hexpadupper = rfc4648({
              prefix: 'T',
              name: 'base32hexpadupper',
              alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
              bitsPerChar: 5
            });
            const base32z = rfc4648({
              prefix: 'h',
              name: 'base32z',
              alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
              bitsPerChar: 5
            });

            var base32$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base32: base32,
                        base32upper: base32upper,
                        base32pad: base32pad,
                        base32padupper: base32padupper,
                        base32hex: base32hex,
                        base32hexupper: base32hexupper,
                        base32hexpad: base32hexpad,
                        base32hexpadupper: base32hexpadupper,
                        base32z: base32z
            });

            const base36 = baseX({
              prefix: 'k',
              name: 'base36',
              alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
            });
            const base36upper = baseX({
              prefix: 'K',
              name: 'base36upper',
              alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
            });

            var base36$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base36: base36,
                        base36upper: base36upper
            });

            const base58btc = baseX({
              name: 'base58btc',
              prefix: 'z',
              alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
            });
            const base58flickr = baseX({
              name: 'base58flickr',
              prefix: 'Z',
              alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
            });

            var base58 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base58btc: base58btc,
                        base58flickr: base58flickr
            });

            const base64 = rfc4648({
              prefix: 'm',
              name: 'base64',
              alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
              bitsPerChar: 6
            });
            const base64pad = rfc4648({
              prefix: 'M',
              name: 'base64pad',
              alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
              bitsPerChar: 6
            });
            const base64url = rfc4648({
              prefix: 'u',
              name: 'base64url',
              alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
              bitsPerChar: 6
            });
            const base64urlpad = rfc4648({
              prefix: 'U',
              name: 'base64urlpad',
              alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
              bitsPerChar: 6
            });

            var base64$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        base64: base64,
                        base64pad: base64pad,
                        base64url: base64url,
                        base64urlpad: base64urlpad
            });

            var encode_1$1 = encode$3;
            var MSB$2 = 128, REST$2 = 127, MSBALL$1 = ~REST$2, INT$1 = Math.pow(2, 31);
            function encode$3(num, out, offset) {
              out = out || [];
              offset = offset || 0;
              var oldOffset = offset;
              while (num >= INT$1) {
                out[offset++] = num & 255 | MSB$2;
                num /= 128;
              }
              while (num & MSBALL$1) {
                out[offset++] = num & 255 | MSB$2;
                num >>>= 7;
              }
              out[offset] = num | 0;
              encode$3.bytes = offset - oldOffset + 1;
              return out;
            }
            var decode$2 = read$1;
            var MSB$1$1 = 128, REST$1$1 = 127;
            function read$1(buf, offset) {
              var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
              do {
                if (counter >= l) {
                  read$1.bytes = 0;
                  throw new RangeError('Could not decode varint');
                }
                b = buf[counter++];
                res += shift < 28 ? (b & REST$1$1) << shift : (b & REST$1$1) * Math.pow(2, shift);
                shift += 7;
              } while (b >= MSB$1$1);
              read$1.bytes = counter - offset;
              return res;
            }
            var N1$1 = Math.pow(2, 7);
            var N2$1 = Math.pow(2, 14);
            var N3$1 = Math.pow(2, 21);
            var N4$1 = Math.pow(2, 28);
            var N5$1 = Math.pow(2, 35);
            var N6$1 = Math.pow(2, 42);
            var N7$1 = Math.pow(2, 49);
            var N8$1 = Math.pow(2, 56);
            var N9$1 = Math.pow(2, 63);
            var length$1 = function (value) {
              return value < N1$1 ? 1 : value < N2$1 ? 2 : value < N3$1 ? 3 : value < N4$1 ? 4 : value < N5$1 ? 5 : value < N6$1 ? 6 : value < N7$1 ? 7 : value < N8$1 ? 8 : value < N9$1 ? 9 : 10;
            };
            var varint$4 = {
              encode: encode_1$1,
              decode: decode$2,
              encodingLength: length$1
            };
            var _brrp_varint = varint$4;

            const encodeTo = (int, target, offset = 0) => {
              _brrp_varint.encode(int, target, offset);
              return target;
            };
            const encodingLength = int => {
              return _brrp_varint.encodingLength(int);
            };

            const create = (code, digest) => {
              const size = digest.byteLength;
              const sizeOffset = encodingLength(code);
              const digestOffset = sizeOffset + encodingLength(size);
              const bytes = new Uint8Array(digestOffset + size);
              encodeTo(code, bytes, 0);
              encodeTo(size, bytes, sizeOffset);
              bytes.set(digest, digestOffset);
              return new Digest(code, size, digest, bytes);
            };
            class Digest {
              constructor(code, size, digest, bytes) {
                this.code = code;
                this.size = size;
                this.digest = digest;
                this.bytes = bytes;
              }
            }

            const from = ({name, code, encode}) => new Hasher(name, code, encode);
            class Hasher {
              constructor(name, code, encode) {
                this.name = name;
                this.code = code;
                this.encode = encode;
              }
              digest(input) {
                if (input instanceof Uint8Array) {
                  const result = this.encode(input);
                  return result instanceof Uint8Array ? create(this.code, result) : result.then(digest => create(this.code, digest));
                } else {
                  throw Error('Unknown type, must be binary type');
                }
              }
            }

            const sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));
            const sha256 = from({
              name: 'sha2-256',
              code: 18,
              encode: sha('SHA-256')
            });
            const sha512 = from({
              name: 'sha2-512',
              code: 19,
              encode: sha('SHA-512')
            });

            var sha2 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        sha256: sha256,
                        sha512: sha512
            });

            const code = 0;
            const name = 'identity';
            const encode$2 = coerce;
            const digest = input => create(code, encode$2(input));
            const identity = {
              code,
              name,
              encode: encode$2,
              digest
            };

            var identity$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        identity: identity
            });

            new TextEncoder();
            new TextDecoder();

            const bases = {
              ...identityBase,
              ...base2$1,
              ...base8$1,
              ...base10$1,
              ...base16$1,
              ...base32$1,
              ...base36$1,
              ...base58,
              ...base64$1
            };
            ({
              ...sha2,
              ...identity$1
            });

            function createCodec(name, prefix, encode, decode) {
              return {
                name,
                prefix,
                encoder: {
                  name,
                  prefix,
                  encode
                },
                decoder: { decode }
              };
            }
            const string = createCodec('utf8', 'u', buf => {
              const decoder = new TextDecoder('utf8');
              return 'u' + decoder.decode(buf);
            }, str => {
              const encoder = new TextEncoder();
              return encoder.encode(str.substring(1));
            });
            const ascii = createCodec('ascii', 'a', buf => {
              let string = 'a';
              for (let i = 0; i < buf.length; i++) {
                string += String.fromCharCode(buf[i]);
              }
              return string;
            }, str => {
              str = str.substring(1);
              const buf = new Uint8Array(str.length);
              for (let i = 0; i < str.length; i++) {
                buf[i] = str.charCodeAt(i);
              }
              return buf;
            });
            const BASES = {
              utf8: string,
              'utf-8': string,
              hex: bases.base16,
              latin1: ascii,
              ascii: ascii,
              binary: ascii,
              ...bases
            };

            function toString(array, encoding = 'utf8') {
              const base = BASES[encoding];
              if (!base) {
                throw new Error(`Unsupported encoding "${ encoding }"`);
              }
              return base.encoder.encode(array).substring(1);
            }

            var toString$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        toString: toString
            });

            var require$$5 = /*@__PURE__*/getAugmentedNamespace(toString$1);

            function fromString(string, encoding = 'utf8') {
              const base = BASES[encoding];
              if (!base) {
                throw new Error(`Unsupported encoding "${ encoding }"`);
              }
              return base.decoder.decode(`${ base.prefix }${ string }`);
            }

            var fromString$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        fromString: fromString
            });

            var require$$2 = /*@__PURE__*/getAugmentedNamespace(fromString$1);

            function concat(arrays, length) {
              if (!length) {
                length = arrays.reduce((acc, curr) => acc + curr.length, 0);
              }
              const output = new Uint8Array(length);
              let offset = 0;
              for (const arr of arrays) {
                output.set(arr, offset);
                offset += arr.length;
              }
              return output;
            }

            var concat$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        concat: concat
            });

            var require$$4 = /*@__PURE__*/getAugmentedNamespace(concat$1);

            /**
             * Multihash implementation in JavaScript.
             */

            const multibase$1 = src$5.exports;
            const varint$3 = varint$5;
            const { names } = constants;
            const { toString: uint8ArrayToString$2 } = require$$5;
            const { fromString: uint8ArrayFromString$1 } = require$$2;
            const { concat: uint8ArrayConcat$2 } = require$$4;

            const codes = /** @type {import('./types').CodeNameMap} */({});

            // eslint-disable-next-line guard-for-in
            for (const key in names) {
              const name = /** @type {HashName} */(key);
              codes[names[name]] = name;
            }
            Object.freeze(codes);

            /**
             * Convert the given multihash to a hex encoded string.
             *
             * @param {Uint8Array} hash
             * @returns {string}
             */
            function toHexString (hash) {
              if (!(hash instanceof Uint8Array)) {
                throw new Error('must be passed a Uint8Array')
              }

              return uint8ArrayToString$2(hash, 'base16')
            }

            /**
             * Convert the given hex encoded string to a multihash.
             *
             * @param {string} hash
             * @returns {Uint8Array}
             */
            function fromHexString (hash) {
              return uint8ArrayFromString$1(hash, 'base16')
            }

            /**
             * Convert the given multihash to a base58 encoded string.
             *
             * @param {Uint8Array} hash
             * @returns {string}
             */
            function toB58String (hash) {
              if (!(hash instanceof Uint8Array)) {
                throw new Error('must be passed a Uint8Array')
              }

              return uint8ArrayToString$2(multibase$1.encode('base58btc', hash)).slice(1)
            }

            /**
             * Convert the given base58 encoded string to a multihash.
             *
             * @param {string|Uint8Array} hash
             * @returns {Uint8Array}
             */
            function fromB58String (hash) {
              const encoded = hash instanceof Uint8Array
                ? uint8ArrayToString$2(hash)
                : hash;

              return multibase$1.decode('z' + encoded)
            }

            /**
             * Decode a hash from the given multihash.
             *
             * @param {Uint8Array} bytes
             * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result
             */
            function decode$1 (bytes) {
              if (!(bytes instanceof Uint8Array)) {
                throw new Error('multihash must be a Uint8Array')
              }

              if (bytes.length < 2) {
                throw new Error('multihash too short. must be > 2 bytes.')
              }

              const code = /** @type {HashCode} */(varint$3.decode(bytes));
              if (!isValidCode(code)) {
                throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)
              }
              bytes = bytes.slice(varint$3.decode.bytes);

              const len = varint$3.decode(bytes);
              if (len < 0) {
                throw new Error(`multihash invalid length: ${len}`)
              }
              bytes = bytes.slice(varint$3.decode.bytes);

              if (bytes.length !== len) {
                throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString$2(bytes, 'base16')}`)
              }

              return {
                code,
                name: codes[code],
                length: len,
                digest: bytes
              }
            }

            /**
             * Encode a hash digest along with the specified function code.
             *
             * > **Note:** the length is derived from the length of the digest itself.
             *
             * @param {Uint8Array} digest
             * @param {HashName | HashCode} code
             * @param {number} [length]
             * @returns {Uint8Array}
             */
            function encode$1 (digest, code, length) {
              if (!digest || code === undefined) {
                throw new Error('multihash encode requires at least two args: digest, code')
              }

              // ensure it's a hashfunction code.
              const hashfn = coerceCode(code);

              if (!(digest instanceof Uint8Array)) {
                throw new Error('digest should be a Uint8Array')
              }

              if (length == null) {
                length = digest.length;
              }

              if (length && digest.length !== length) {
                throw new Error('digest length should be equal to specified length.')
              }

              const hash = varint$3.encode(hashfn);
              const len = varint$3.encode(length);
              return uint8ArrayConcat$2([hash, len, digest], hash.length + len.length + digest.length)
            }

            /**
             * Converts a hash function name into the matching code.
             * If passed a number it will return the number if it's a valid code.
             *
             * @param {HashName | number} name
             * @returns {number}
             */
            function coerceCode (name) {
              let code = name;

              if (typeof name === 'string') {
                if (names[name] === undefined) {
                  throw new Error(`Unrecognized hash function named: ${name}`)
                }
                code = names[name];
              }

              if (typeof code !== 'number') {
                throw new Error(`Hash function code should be a number. Got: ${code}`)
              }

              // @ts-ignore
              if (codes[code] === undefined && !isAppCode(code)) {
                throw new Error(`Unrecognized function code: ${code}`)
              }

              return code
            }

            /**
             * Checks if a code is part of the app range
             *
             * @param {number} code
             * @returns {boolean}
             */
            function isAppCode (code) {
              return code > 0 && code < 0x10
            }

            /**
             * Checks whether a multihash code is valid.
             *
             * @param {HashCode} code
             * @returns {boolean}
             */
            function isValidCode (code) {
              if (isAppCode(code)) {
                return true
              }

              if (codes[code]) {
                return true
              }

              return false
            }

            /**
             * Check if the given buffer is a valid multihash. Throws an error if it is not valid.
             *
             * @param {Uint8Array} multihash
             * @returns {void}
             * @throws {Error}
             */
            function validate$2 (multihash) {
              decode$1(multihash); // throws if bad.
            }

            /**
             * Returns a prefix from a valid multihash. Throws an error if it is not valid.
             *
             * @param {Uint8Array} multihash
             * @returns {Uint8Array}
             * @throws {Error}
             */
            function prefix (multihash) {
              validate$2(multihash);

              return multihash.subarray(0, 2)
            }

            var src$2 = {
              names,
              codes,
              toHexString,
              fromHexString,
              toB58String,
              fromB58String,
              decode: decode$1,
              encode: encode$1,
              coerceCode,
              isAppCode,
              validate: validate$2,
              prefix,
              isValidCode
            };

            var encode_1 = encode;

            var MSB$1 = 0x80
              , REST$1 = 0x7F
              , MSBALL = ~REST$1
              , INT = Math.pow(2, 31);

            function encode(num, out, offset) {
              if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
                encode.bytes = 0;
                throw new RangeError('Could not encode varint')
              }
              out = out || [];
              offset = offset || 0;
              var oldOffset = offset;

              while(num >= INT) {
                out[offset++] = (num & 0xFF) | MSB$1;
                num /= 128;
              }
              while(num & MSBALL) {
                out[offset++] = (num & 0xFF) | MSB$1;
                num >>>= 7;
              }
              out[offset] = num | 0;
              
              encode.bytes = offset - oldOffset + 1;
              
              return out
            }

            var decode = read;

            var MSB = 0x80
              , REST = 0x7F;

            function read(buf, offset) {
              var res    = 0
                , offset = offset || 0
                , shift  = 0
                , counter = offset
                , b
                , l = buf.length;

              do {
                if (counter >= l || shift > 49) {
                  read.bytes = 0;
                  throw new RangeError('Could not decode varint')
                }
                b = buf[counter++];
                res += shift < 28
                  ? (b & REST) << shift
                  : (b & REST) * Math.pow(2, shift);
                shift += 7;
              } while (b >= MSB)

              read.bytes = counter - offset;

              return res
            }

            var N1 = Math.pow(2,  7);
            var N2 = Math.pow(2, 14);
            var N3 = Math.pow(2, 21);
            var N4 = Math.pow(2, 28);
            var N5 = Math.pow(2, 35);
            var N6 = Math.pow(2, 42);
            var N7 = Math.pow(2, 49);
            var N8 = Math.pow(2, 56);
            var N9 = Math.pow(2, 63);

            var length = function (value) {
              return (
                value < N1 ? 1
              : value < N2 ? 2
              : value < N3 ? 3
              : value < N4 ? 4
              : value < N5 ? 5
              : value < N6 ? 6
              : value < N7 ? 7
              : value < N8 ? 8
              : value < N9 ? 9
              :              10
              )
            };

            var varint$2 = {
                encode: encode_1
              , decode: decode
              , encodingLength: length
            };

            const varint$1 = varint$2;
            const { toString: uint8ArrayToString$1 } = require$$5;
            const { fromString: uint8ArrayFromString } = require$$2;

            var util$7 = {
              numberToUint8Array,
              uint8ArrayToNumber,
              varintUint8ArrayEncode,
              varintEncode: varintEncode$1
            };

            /**
             * @param {Uint8Array} buf
             */
            function uint8ArrayToNumber (buf) {
              return parseInt(uint8ArrayToString$1(buf, 'base16'), 16)
            }

            /**
             * @param {number} num
             */
            function numberToUint8Array (num) {
              let hexString = num.toString(16);
              if (hexString.length % 2 === 1) {
                hexString = '0' + hexString;
              }
              return uint8ArrayFromString(hexString, 'base16')
            }

            /**
             * @param {Uint8Array} input
             */
            function varintUint8ArrayEncode (input) {
              return Uint8Array.from(varint$1.encode(uint8ArrayToNumber(input)))
            }

            /**
             * @param {number} num
             */
            function varintEncode$1 (num) {
              return Uint8Array.from(varint$1.encode(num))
            }

            /**
             * @type {import('./generated-types').NameCodeMap}
             */
            const baseTable$1 = Object.freeze({
              'identity': 0x00,
              'cidv1': 0x01,
              'cidv2': 0x02,
              'cidv3': 0x03,
              'ip4': 0x04,
              'tcp': 0x06,
              'sha1': 0x11,
              'sha2-256': 0x12,
              'sha2-512': 0x13,
              'sha3-512': 0x14,
              'sha3-384': 0x15,
              'sha3-256': 0x16,
              'sha3-224': 0x17,
              'shake-128': 0x18,
              'shake-256': 0x19,
              'keccak-224': 0x1a,
              'keccak-256': 0x1b,
              'keccak-384': 0x1c,
              'keccak-512': 0x1d,
              'blake3': 0x1e,
              'dccp': 0x21,
              'murmur3-128': 0x22,
              'murmur3-32': 0x23,
              'ip6': 0x29,
              'ip6zone': 0x2a,
              'path': 0x2f,
              'multicodec': 0x30,
              'multihash': 0x31,
              'multiaddr': 0x32,
              'multibase': 0x33,
              'dns': 0x35,
              'dns4': 0x36,
              'dns6': 0x37,
              'dnsaddr': 0x38,
              'protobuf': 0x50,
              'cbor': 0x51,
              'raw': 0x55,
              'dbl-sha2-256': 0x56,
              'rlp': 0x60,
              'bencode': 0x63,
              'dag-pb': 0x70,
              'dag-cbor': 0x71,
              'libp2p-key': 0x72,
              'git-raw': 0x78,
              'torrent-info': 0x7b,
              'torrent-file': 0x7c,
              'leofcoin-block': 0x81,
              'leofcoin-tx': 0x82,
              'leofcoin-pr': 0x83,
              'sctp': 0x84,
              'dag-jose': 0x85,
              'dag-cose': 0x86,
              'eth-block': 0x90,
              'eth-block-list': 0x91,
              'eth-tx-trie': 0x92,
              'eth-tx': 0x93,
              'eth-tx-receipt-trie': 0x94,
              'eth-tx-receipt': 0x95,
              'eth-state-trie': 0x96,
              'eth-account-snapshot': 0x97,
              'eth-storage-trie': 0x98,
              'eth-receipt-log-trie': 0x99,
              'eth-reciept-log': 0x9a,
              'bitcoin-block': 0xb0,
              'bitcoin-tx': 0xb1,
              'bitcoin-witness-commitment': 0xb2,
              'zcash-block': 0xc0,
              'zcash-tx': 0xc1,
              'caip-50': 0xca,
              'streamid': 0xce,
              'stellar-block': 0xd0,
              'stellar-tx': 0xd1,
              'md4': 0xd4,
              'md5': 0xd5,
              'bmt': 0xd6,
              'decred-block': 0xe0,
              'decred-tx': 0xe1,
              'ipld-ns': 0xe2,
              'ipfs-ns': 0xe3,
              'swarm-ns': 0xe4,
              'ipns-ns': 0xe5,
              'zeronet': 0xe6,
              'secp256k1-pub': 0xe7,
              'bls12_381-g1-pub': 0xea,
              'bls12_381-g2-pub': 0xeb,
              'x25519-pub': 0xec,
              'ed25519-pub': 0xed,
              'bls12_381-g1g2-pub': 0xee,
              'dash-block': 0xf0,
              'dash-tx': 0xf1,
              'swarm-manifest': 0xfa,
              'swarm-feed': 0xfb,
              'udp': 0x0111,
              'p2p-webrtc-star': 0x0113,
              'p2p-webrtc-direct': 0x0114,
              'p2p-stardust': 0x0115,
              'p2p-circuit': 0x0122,
              'dag-json': 0x0129,
              'udt': 0x012d,
              'utp': 0x012e,
              'unix': 0x0190,
              'thread': 0x0196,
              'p2p': 0x01a5,
              'ipfs': 0x01a5,
              'https': 0x01bb,
              'onion': 0x01bc,
              'onion3': 0x01bd,
              'garlic64': 0x01be,
              'garlic32': 0x01bf,
              'tls': 0x01c0,
              'noise': 0x01c6,
              'quic': 0x01cc,
              'ws': 0x01dd,
              'wss': 0x01de,
              'p2p-websocket-star': 0x01df,
              'http': 0x01e0,
              'swhid-1-snp': 0x01f0,
              'json': 0x0200,
              'messagepack': 0x0201,
              'libp2p-peer-record': 0x0301,
              'libp2p-relay-rsvp': 0x0302,
              'car-index-sorted': 0x0400,
              'sha2-256-trunc254-padded': 0x1012,
              'ripemd-128': 0x1052,
              'ripemd-160': 0x1053,
              'ripemd-256': 0x1054,
              'ripemd-320': 0x1055,
              'x11': 0x1100,
              'p256-pub': 0x1200,
              'p384-pub': 0x1201,
              'p521-pub': 0x1202,
              'ed448-pub': 0x1203,
              'x448-pub': 0x1204,
              'ed25519-priv': 0x1300,
              'secp256k1-priv': 0x1301,
              'x25519-priv': 0x1302,
              'kangarootwelve': 0x1d01,
              'sm3-256': 0x534d,
              'blake2b-8': 0xb201,
              'blake2b-16': 0xb202,
              'blake2b-24': 0xb203,
              'blake2b-32': 0xb204,
              'blake2b-40': 0xb205,
              'blake2b-48': 0xb206,
              'blake2b-56': 0xb207,
              'blake2b-64': 0xb208,
              'blake2b-72': 0xb209,
              'blake2b-80': 0xb20a,
              'blake2b-88': 0xb20b,
              'blake2b-96': 0xb20c,
              'blake2b-104': 0xb20d,
              'blake2b-112': 0xb20e,
              'blake2b-120': 0xb20f,
              'blake2b-128': 0xb210,
              'blake2b-136': 0xb211,
              'blake2b-144': 0xb212,
              'blake2b-152': 0xb213,
              'blake2b-160': 0xb214,
              'blake2b-168': 0xb215,
              'blake2b-176': 0xb216,
              'blake2b-184': 0xb217,
              'blake2b-192': 0xb218,
              'blake2b-200': 0xb219,
              'blake2b-208': 0xb21a,
              'blake2b-216': 0xb21b,
              'blake2b-224': 0xb21c,
              'blake2b-232': 0xb21d,
              'blake2b-240': 0xb21e,
              'blake2b-248': 0xb21f,
              'blake2b-256': 0xb220,
              'blake2b-264': 0xb221,
              'blake2b-272': 0xb222,
              'blake2b-280': 0xb223,
              'blake2b-288': 0xb224,
              'blake2b-296': 0xb225,
              'blake2b-304': 0xb226,
              'blake2b-312': 0xb227,
              'blake2b-320': 0xb228,
              'blake2b-328': 0xb229,
              'blake2b-336': 0xb22a,
              'blake2b-344': 0xb22b,
              'blake2b-352': 0xb22c,
              'blake2b-360': 0xb22d,
              'blake2b-368': 0xb22e,
              'blake2b-376': 0xb22f,
              'blake2b-384': 0xb230,
              'blake2b-392': 0xb231,
              'blake2b-400': 0xb232,
              'blake2b-408': 0xb233,
              'blake2b-416': 0xb234,
              'blake2b-424': 0xb235,
              'blake2b-432': 0xb236,
              'blake2b-440': 0xb237,
              'blake2b-448': 0xb238,
              'blake2b-456': 0xb239,
              'blake2b-464': 0xb23a,
              'blake2b-472': 0xb23b,
              'blake2b-480': 0xb23c,
              'blake2b-488': 0xb23d,
              'blake2b-496': 0xb23e,
              'blake2b-504': 0xb23f,
              'blake2b-512': 0xb240,
              'blake2s-8': 0xb241,
              'blake2s-16': 0xb242,
              'blake2s-24': 0xb243,
              'blake2s-32': 0xb244,
              'blake2s-40': 0xb245,
              'blake2s-48': 0xb246,
              'blake2s-56': 0xb247,
              'blake2s-64': 0xb248,
              'blake2s-72': 0xb249,
              'blake2s-80': 0xb24a,
              'blake2s-88': 0xb24b,
              'blake2s-96': 0xb24c,
              'blake2s-104': 0xb24d,
              'blake2s-112': 0xb24e,
              'blake2s-120': 0xb24f,
              'blake2s-128': 0xb250,
              'blake2s-136': 0xb251,
              'blake2s-144': 0xb252,
              'blake2s-152': 0xb253,
              'blake2s-160': 0xb254,
              'blake2s-168': 0xb255,
              'blake2s-176': 0xb256,
              'blake2s-184': 0xb257,
              'blake2s-192': 0xb258,
              'blake2s-200': 0xb259,
              'blake2s-208': 0xb25a,
              'blake2s-216': 0xb25b,
              'blake2s-224': 0xb25c,
              'blake2s-232': 0xb25d,
              'blake2s-240': 0xb25e,
              'blake2s-248': 0xb25f,
              'blake2s-256': 0xb260,
              'skein256-8': 0xb301,
              'skein256-16': 0xb302,
              'skein256-24': 0xb303,
              'skein256-32': 0xb304,
              'skein256-40': 0xb305,
              'skein256-48': 0xb306,
              'skein256-56': 0xb307,
              'skein256-64': 0xb308,
              'skein256-72': 0xb309,
              'skein256-80': 0xb30a,
              'skein256-88': 0xb30b,
              'skein256-96': 0xb30c,
              'skein256-104': 0xb30d,
              'skein256-112': 0xb30e,
              'skein256-120': 0xb30f,
              'skein256-128': 0xb310,
              'skein256-136': 0xb311,
              'skein256-144': 0xb312,
              'skein256-152': 0xb313,
              'skein256-160': 0xb314,
              'skein256-168': 0xb315,
              'skein256-176': 0xb316,
              'skein256-184': 0xb317,
              'skein256-192': 0xb318,
              'skein256-200': 0xb319,
              'skein256-208': 0xb31a,
              'skein256-216': 0xb31b,
              'skein256-224': 0xb31c,
              'skein256-232': 0xb31d,
              'skein256-240': 0xb31e,
              'skein256-248': 0xb31f,
              'skein256-256': 0xb320,
              'skein512-8': 0xb321,
              'skein512-16': 0xb322,
              'skein512-24': 0xb323,
              'skein512-32': 0xb324,
              'skein512-40': 0xb325,
              'skein512-48': 0xb326,
              'skein512-56': 0xb327,
              'skein512-64': 0xb328,
              'skein512-72': 0xb329,
              'skein512-80': 0xb32a,
              'skein512-88': 0xb32b,
              'skein512-96': 0xb32c,
              'skein512-104': 0xb32d,
              'skein512-112': 0xb32e,
              'skein512-120': 0xb32f,
              'skein512-128': 0xb330,
              'skein512-136': 0xb331,
              'skein512-144': 0xb332,
              'skein512-152': 0xb333,
              'skein512-160': 0xb334,
              'skein512-168': 0xb335,
              'skein512-176': 0xb336,
              'skein512-184': 0xb337,
              'skein512-192': 0xb338,
              'skein512-200': 0xb339,
              'skein512-208': 0xb33a,
              'skein512-216': 0xb33b,
              'skein512-224': 0xb33c,
              'skein512-232': 0xb33d,
              'skein512-240': 0xb33e,
              'skein512-248': 0xb33f,
              'skein512-256': 0xb340,
              'skein512-264': 0xb341,
              'skein512-272': 0xb342,
              'skein512-280': 0xb343,
              'skein512-288': 0xb344,
              'skein512-296': 0xb345,
              'skein512-304': 0xb346,
              'skein512-312': 0xb347,
              'skein512-320': 0xb348,
              'skein512-328': 0xb349,
              'skein512-336': 0xb34a,
              'skein512-344': 0xb34b,
              'skein512-352': 0xb34c,
              'skein512-360': 0xb34d,
              'skein512-368': 0xb34e,
              'skein512-376': 0xb34f,
              'skein512-384': 0xb350,
              'skein512-392': 0xb351,
              'skein512-400': 0xb352,
              'skein512-408': 0xb353,
              'skein512-416': 0xb354,
              'skein512-424': 0xb355,
              'skein512-432': 0xb356,
              'skein512-440': 0xb357,
              'skein512-448': 0xb358,
              'skein512-456': 0xb359,
              'skein512-464': 0xb35a,
              'skein512-472': 0xb35b,
              'skein512-480': 0xb35c,
              'skein512-488': 0xb35d,
              'skein512-496': 0xb35e,
              'skein512-504': 0xb35f,
              'skein512-512': 0xb360,
              'skein1024-8': 0xb361,
              'skein1024-16': 0xb362,
              'skein1024-24': 0xb363,
              'skein1024-32': 0xb364,
              'skein1024-40': 0xb365,
              'skein1024-48': 0xb366,
              'skein1024-56': 0xb367,
              'skein1024-64': 0xb368,
              'skein1024-72': 0xb369,
              'skein1024-80': 0xb36a,
              'skein1024-88': 0xb36b,
              'skein1024-96': 0xb36c,
              'skein1024-104': 0xb36d,
              'skein1024-112': 0xb36e,
              'skein1024-120': 0xb36f,
              'skein1024-128': 0xb370,
              'skein1024-136': 0xb371,
              'skein1024-144': 0xb372,
              'skein1024-152': 0xb373,
              'skein1024-160': 0xb374,
              'skein1024-168': 0xb375,
              'skein1024-176': 0xb376,
              'skein1024-184': 0xb377,
              'skein1024-192': 0xb378,
              'skein1024-200': 0xb379,
              'skein1024-208': 0xb37a,
              'skein1024-216': 0xb37b,
              'skein1024-224': 0xb37c,
              'skein1024-232': 0xb37d,
              'skein1024-240': 0xb37e,
              'skein1024-248': 0xb37f,
              'skein1024-256': 0xb380,
              'skein1024-264': 0xb381,
              'skein1024-272': 0xb382,
              'skein1024-280': 0xb383,
              'skein1024-288': 0xb384,
              'skein1024-296': 0xb385,
              'skein1024-304': 0xb386,
              'skein1024-312': 0xb387,
              'skein1024-320': 0xb388,
              'skein1024-328': 0xb389,
              'skein1024-336': 0xb38a,
              'skein1024-344': 0xb38b,
              'skein1024-352': 0xb38c,
              'skein1024-360': 0xb38d,
              'skein1024-368': 0xb38e,
              'skein1024-376': 0xb38f,
              'skein1024-384': 0xb390,
              'skein1024-392': 0xb391,
              'skein1024-400': 0xb392,
              'skein1024-408': 0xb393,
              'skein1024-416': 0xb394,
              'skein1024-424': 0xb395,
              'skein1024-432': 0xb396,
              'skein1024-440': 0xb397,
              'skein1024-448': 0xb398,
              'skein1024-456': 0xb399,
              'skein1024-464': 0xb39a,
              'skein1024-472': 0xb39b,
              'skein1024-480': 0xb39c,
              'skein1024-488': 0xb39d,
              'skein1024-496': 0xb39e,
              'skein1024-504': 0xb39f,
              'skein1024-512': 0xb3a0,
              'skein1024-520': 0xb3a1,
              'skein1024-528': 0xb3a2,
              'skein1024-536': 0xb3a3,
              'skein1024-544': 0xb3a4,
              'skein1024-552': 0xb3a5,
              'skein1024-560': 0xb3a6,
              'skein1024-568': 0xb3a7,
              'skein1024-576': 0xb3a8,
              'skein1024-584': 0xb3a9,
              'skein1024-592': 0xb3aa,
              'skein1024-600': 0xb3ab,
              'skein1024-608': 0xb3ac,
              'skein1024-616': 0xb3ad,
              'skein1024-624': 0xb3ae,
              'skein1024-632': 0xb3af,
              'skein1024-640': 0xb3b0,
              'skein1024-648': 0xb3b1,
              'skein1024-656': 0xb3b2,
              'skein1024-664': 0xb3b3,
              'skein1024-672': 0xb3b4,
              'skein1024-680': 0xb3b5,
              'skein1024-688': 0xb3b6,
              'skein1024-696': 0xb3b7,
              'skein1024-704': 0xb3b8,
              'skein1024-712': 0xb3b9,
              'skein1024-720': 0xb3ba,
              'skein1024-728': 0xb3bb,
              'skein1024-736': 0xb3bc,
              'skein1024-744': 0xb3bd,
              'skein1024-752': 0xb3be,
              'skein1024-760': 0xb3bf,
              'skein1024-768': 0xb3c0,
              'skein1024-776': 0xb3c1,
              'skein1024-784': 0xb3c2,
              'skein1024-792': 0xb3c3,
              'skein1024-800': 0xb3c4,
              'skein1024-808': 0xb3c5,
              'skein1024-816': 0xb3c6,
              'skein1024-824': 0xb3c7,
              'skein1024-832': 0xb3c8,
              'skein1024-840': 0xb3c9,
              'skein1024-848': 0xb3ca,
              'skein1024-856': 0xb3cb,
              'skein1024-864': 0xb3cc,
              'skein1024-872': 0xb3cd,
              'skein1024-880': 0xb3ce,
              'skein1024-888': 0xb3cf,
              'skein1024-896': 0xb3d0,
              'skein1024-904': 0xb3d1,
              'skein1024-912': 0xb3d2,
              'skein1024-920': 0xb3d3,
              'skein1024-928': 0xb3d4,
              'skein1024-936': 0xb3d5,
              'skein1024-944': 0xb3d6,
              'skein1024-952': 0xb3d7,
              'skein1024-960': 0xb3d8,
              'skein1024-968': 0xb3d9,
              'skein1024-976': 0xb3da,
              'skein1024-984': 0xb3db,
              'skein1024-992': 0xb3dc,
              'skein1024-1000': 0xb3dd,
              'skein1024-1008': 0xb3de,
              'skein1024-1016': 0xb3df,
              'skein1024-1024': 0xb3e0,
              'poseidon-bls12_381-a2-fc1': 0xb401,
              'poseidon-bls12_381-a2-fc1-sc': 0xb402,
              'zeroxcert-imprint-256': 0xce11,
              'fil-commitment-unsealed': 0xf101,
              'fil-commitment-sealed': 0xf102,
              'holochain-adr-v0': 0x807124,
              'holochain-adr-v1': 0x817124,
              'holochain-key-v0': 0x947124,
              'holochain-key-v1': 0x957124,
              'holochain-sig-v0': 0xa27124,
              'holochain-sig-v1': 0xa37124,
              'skynet-ns': 0xb19910,
              'arweave-ns': 0xb29910
            });

            var generatedTable = { baseTable: baseTable$1 };

            /** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */
            /** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */
            /** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */
            /** @typedef {import('./generated-types').CodecName} CodecName */
            /** @typedef {import('./generated-types').CodecConstant} CodecConstant */

            const { baseTable } = generatedTable;
            const varintEncode = util$7.varintEncode;

            const nameToVarint$1 = /** @type {NameUint8ArrayMap} */ ({});
            const constantToCode$1 = /** @type {ConstantCodeMap} */({});
            const codeToName$1 = /** @type {CodeNameMap} */({});

            // eslint-disable-next-line guard-for-in
            for (const name in baseTable) {
              const codecName = /** @type {CodecName} */(name);
              const code = baseTable[codecName];
              nameToVarint$1[codecName] = varintEncode(code);

              const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'));
              constantToCode$1[constant] = code;

              if (!codeToName$1[code]) {
                codeToName$1[code] = codecName;
              }
            }

            Object.freeze(nameToVarint$1);
            Object.freeze(constantToCode$1);
            Object.freeze(codeToName$1);
            const nameToCode$1 = Object.freeze(baseTable);
            var maps = {
              nameToVarint: nameToVarint$1,
              constantToCode: constantToCode$1,
              nameToCode: nameToCode$1,
              codeToName: codeToName$1
            };

            /**
             * Implementation of the multicodec specification.
             *
             * @module multicodec
             * @example
             * const multicodec = require('multicodec')
             *
             * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)
             * // prefixedProtobuf 0x50...
             *
             */

            /** @typedef {import('./generated-types').CodecName} CodecName */
            /** @typedef {import('./generated-types').CodecCode} CodecCode */

            const varint = varint$2;
            const { concat: uint8ArrayConcat$1 } = require$$4;
            const util$6 = util$7;
            const { nameToVarint, constantToCode, nameToCode, codeToName } = maps;

            /**
             * Prefix a buffer with a multicodec-packed.
             *
             * @param {CodecName|Uint8Array} multicodecStrOrCode
             * @param {Uint8Array} data
             * @returns {Uint8Array}
             */
            function addPrefix (multicodecStrOrCode, data) {
              let prefix;

              if (multicodecStrOrCode instanceof Uint8Array) {
                prefix = util$6.varintUint8ArrayEncode(multicodecStrOrCode);
              } else {
                if (nameToVarint[multicodecStrOrCode]) {
                  prefix = nameToVarint[multicodecStrOrCode];
                } else {
                  throw new Error('multicodec not recognized')
                }
              }

              return uint8ArrayConcat$1([prefix, data], prefix.length + data.length)
            }

            /**
             * Decapsulate the multicodec-packed prefix from the data.
             *
             * @param {Uint8Array} data
             * @returns {Uint8Array}
             */
            function rmPrefix (data) {
              varint.decode(/** @type {Buffer} */(data));
              return data.slice(varint.decode.bytes)
            }

            /**
             * Get the codec name of the prefixed data.
             *
             * @param {Uint8Array} prefixedData
             * @returns {CodecName}
             */
            function getNameFromData (prefixedData) {
              const code = /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)));
              const name = codeToName[code];
              if (name === undefined) {
                throw new Error(`Code "${code}" not found`)
              }
              return name
            }

            /**
             * Get the codec name from a code.
             *
             * @param {CodecCode} codec
             * @returns {CodecName}
             */
            function getNameFromCode (codec) {
              return codeToName[codec]
            }

            /**
             * Get the code of the codec
             *
             * @param {CodecName} name
             * @returns {CodecCode}
             */
            function getCodeFromName (name) {
              const code = nameToCode[name];
              if (code === undefined) {
                throw new Error(`Codec "${name}" not found`)
              }
              return code
            }

            /**
             * Get the code of the prefixed data.
             *
             * @param {Uint8Array} prefixedData
             * @returns {CodecCode}
             */
            function getCodeFromData (prefixedData) {
              return /** @type {CodecCode} */(varint.decode(/** @type {Buffer} */(prefixedData)))
            }

            /**
             * Get the code as varint of a codec name.
             *
             * @param {CodecName} name
             * @returns {Uint8Array}
             */
            function getVarintFromName (name) {
              const code = nameToVarint[name];
              if (code === undefined) {
                throw new Error(`Codec "${name}" not found`)
              }
              return code
            }

            /**
             * Get the varint of a code.
             *
             * @param {CodecCode} code
             * @returns {Uint8Array}
             */
            function getVarintFromCode (code) {
              return util$6.varintEncode(code)
            }

            /**
             * Get the codec name of the prefixed data.
             *
             * @deprecated use getNameFromData instead.
             * @param {Uint8Array} prefixedData
             * @returns {CodecName}
             */
            function getCodec (prefixedData) {
              return getNameFromData(prefixedData)
            }

            /**
             * Get the codec name from a code.
             *
             * @deprecated use getNameFromCode instead.
             * @param {CodecCode} codec
             * @returns {CodecName}
             */
            function getName (codec) {
              return getNameFromCode(codec)
            }

            /**
             * Get the code of the codec
             *
             * @deprecated use getCodeFromName instead.
             * @param {CodecName} name
             * @returns {CodecCode}
             */
            function getNumber (name) {
              return getCodeFromName(name)
            }

            /**
             * Get the code of the prefixed data.
             *
             * @deprecated use getCodeFromData instead.
             * @param {Uint8Array} prefixedData
             * @returns {CodecCode}
             */
            function getCode (prefixedData) {
              return getCodeFromData(prefixedData)
            }

            /**
             * Get the code as varint of a codec name.
             *
             * @deprecated use getVarintFromName instead.
             * @param {CodecName} name
             * @returns {Uint8Array}
             */
            function getCodeVarint (name) {
              return getVarintFromName(name)
            }

            /**
             * Get the varint of a code.
             *
             * @deprecated use getVarintFromCode instead.
             * @param {CodecCode} code
             * @returns {Array.<number>}
             */
            function getVarint (code) {
              return Array.from(getVarintFromCode(code))
            }

            var src$1 = {
              addPrefix,
              rmPrefix,
              getNameFromData,
              getNameFromCode,
              getCodeFromName,
              getCodeFromData,
              getVarintFromName,
              getVarintFromCode,
              // Deprecated
              getCodec,
              getName,
              getNumber,
              getCode,
              getCodeVarint,
              getVarint,
              // Make the constants top-level constants
              ...constantToCode,
              // Export the maps
              nameToVarint,
              nameToCode,
              codeToName
            };

            const mh$1 = src$2;

            const CIDUtil$1 = {
              /**
               * Test if the given input is a valid CID object.
               * Returns an error message if it is not.
               * Returns undefined if it is a valid CID.
               *
               * @param {any} other
               * @returns {string|undefined}
               */
              checkCIDComponents: function (other) {
                if (other == null) {
                  return 'null values are not valid CIDs'
                }

                if (!(other.version === 0 || other.version === 1)) {
                  return 'Invalid version, must be a number equal to 1 or 0'
                }

                if (typeof other.codec !== 'string') {
                  return 'codec must be string'
                }

                if (other.version === 0) {
                  if (other.codec !== 'dag-pb') {
                    return "codec must be 'dag-pb' for CIDv0"
                  }
                  if (other.multibaseName !== 'base58btc') {
                    return "multibaseName must be 'base58btc' for CIDv0"
                  }
                }

                if (!(other.multihash instanceof Uint8Array)) {
                  return 'multihash must be a Uint8Array'
                }

                try {
                  mh$1.validate(other.multihash);
                } catch (err) {
                  let errorMsg = err.message;
                  if (!errorMsg) { // Just in case mh.validate() throws an error with empty error message
                    errorMsg = 'Multihash validation failed';
                  }
                  return errorMsg
                }
              }
            };

            var cidUtil = CIDUtil$1;

            function equals(a, b) {
              if (a === b) {
                return true;
              }
              if (a.byteLength !== b.byteLength) {
                return false;
              }
              for (let i = 0; i < a.byteLength; i++) {
                if (a[i] !== b[i]) {
                  return false;
                }
              }
              return true;
            }

            var equals$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        equals: equals
            });

            var require$$6 = /*@__PURE__*/getAugmentedNamespace(equals$1);

            const mh = src$2;
            const multibase = src$5.exports;
            const multicodec = src$1;
            const CIDUtil = cidUtil;
            const { concat: uint8ArrayConcat } = require$$4;
            const { toString: uint8ArrayToString } = require$$5;
            const { equals: uint8ArrayEquals } = require$$6;

            const codecs = multicodec.nameToCode;
            const codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {
              p[codecs[name]] = name;
              return p
            }, /** @type {Record<CodecCode, CodecName>} */({}));

            const symbol = Symbol.for('@ipld/js-cid/CID');

            /**
             * @typedef {Object} SerializedCID
             * @property {string} codec
             * @property {number} version
             * @property {Uint8Array} hash
             */
            /**
             * @typedef {0|1} CIDVersion
             * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode
             * @typedef {import('multicodec').CodecName} CodecName
             * @typedef {import('multicodec').CodecCode} CodecCode
             */

            /**
             * Class representing a CID `<mbase><version><mcodec><mhash>`
             * , as defined in [ipld/cid](https://github.com/multiformats/cid).
             *
             * @class CID
             */
            class CID {
              /**
               * Create a new CID.
               *
               * The algorithm for argument input is roughly:
               * ```
               * if (cid)
               *   -> create a copy
               * else if (str)
               *   if (1st char is on multibase table) -> CID String
               *   else -> bs58 encoded multihash
               * else if (Uint8Array)
               *   if (1st byte is 0 or 1) -> CID
               *   else -> multihash
               * else if (Number)
               *   -> construct CID by parts
               * ```
               *
               * @param {CIDVersion | string | Uint8Array | CID} version
               * @param {string|number} [codec]
               * @param {Uint8Array} [multihash]
               * @param {string} [multibaseName]
               *
               * @example
               * new CID(<version>, <codec>, <multihash>, <multibaseName>)
               * new CID(<cidStr>)
               * new CID(<cid.bytes>)
               * new CID(<multihash>)
               * new CID(<bs58 encoded multihash>)
               * new CID(<cid>)
               */
              constructor (version, codec, multihash, multibaseName) {
                // We have below three blank field accessors only because
                // otherwise TS will not pick them up if done after assignemnts

                /**
                 * The version of the CID.
                 *
                 * @type {CIDVersion}
                 */
                // eslint-disable-next-line no-unused-expressions
                this.version;

                /**
                 * The codec of the CID.
                 *
                 * @deprecated
                 * @type {CodecName}
                 */
                // eslint-disable-next-line no-unused-expressions
                this.codec;

                /**
                 * The multihash of the CID.
                 *
                 * @type {Uint8Array}
                 */
                // eslint-disable-next-line no-unused-expressions
                this.multihash;

                Object.defineProperty(this, symbol, { value: true });
                if (CID.isCID(version)) {
                  // version is an exising CID instance
                  const cid = /** @type {CID} */(version);
                  this.version = cid.version;
                  this.codec = cid.codec;
                  this.multihash = cid.multihash;
                  // Default guard for when a CID < 0.7 is passed with no multibaseName
                  // @ts-ignore
                  this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');
                  return
                }

                if (typeof version === 'string') {
                  // e.g. 'base32' or false
                  const baseName = multibase.isEncoded(version);
                  if (baseName) {
                    // version is a CID String encoded with multibase, so v1
                    const cid = multibase.decode(version);
                    this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16));
                    this.codec = multicodec.getCodec(cid.slice(1));
                    this.multihash = multicodec.rmPrefix(cid.slice(1));
                    this.multibaseName = baseName;
                  } else {
                    // version is a base58btc string multihash, so v0
                    this.version = 0;
                    this.codec = 'dag-pb';
                    this.multihash = mh.fromB58String(version);
                    this.multibaseName = 'base58btc';
                  }
                  CID.validateCID(this);
                  Object.defineProperty(this, 'string', { value: version });
                  return
                }

                if (version instanceof Uint8Array) {
                  const v = parseInt(version[0].toString(), 16);
                  if (v === 1) {
                    // version is a CID Uint8Array
                    const cid = version;
                    this.version = v;
                    this.codec = multicodec.getCodec(cid.slice(1));
                    this.multihash = multicodec.rmPrefix(cid.slice(1));
                    this.multibaseName = 'base32';
                  } else {
                    // version is a raw multihash Uint8Array, so v0
                    this.version = 0;
                    this.codec = 'dag-pb';
                    this.multihash = version;
                    this.multibaseName = 'base58btc';
                  }
                  CID.validateCID(this);
                  return
                }

                // otherwise, assemble the CID from the parameters

                this.version = version;

                if (typeof codec === 'number') {
                  // @ts-ignore
                  codec = codecInts[codec];
                }

                this.codec = /** @type {CodecName} */ (codec);

                this.multihash = /** @type {Uint8Array} */ (multihash);

                /**
                 * Multibase name as string.
                 *
                 * @deprecated
                 * @type {string}
                 */
                this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');

                CID.validateCID(this);
              }

              /**
               * The CID as a `Uint8Array`
               *
               * @returns {Uint8Array}
               *
               */
              get bytes () {
                // @ts-ignore
                let bytes = this._bytes;

                if (!bytes) {
                  if (this.version === 0) {
                    bytes = this.multihash;
                  } else if (this.version === 1) {
                    const codec = multicodec.getCodeVarint(this.codec);
                    bytes = uint8ArrayConcat([
                      [1], codec, this.multihash
                    ], 1 + codec.byteLength + this.multihash.byteLength);
                  } else {
                    throw new Error('unsupported version')
                  }

                  // Cache this Uint8Array so it doesn't have to be recreated
                  Object.defineProperty(this, '_bytes', { value: bytes });
                }

                return bytes
              }

              /**
               * The prefix of the CID.
               *
               * @returns {Uint8Array}
               */
              get prefix () {
                const codec = multicodec.getCodeVarint(this.codec);
                const multihash = mh.prefix(this.multihash);
                const prefix = uint8ArrayConcat([
                  [this.version], codec, multihash
                ], 1 + codec.byteLength + multihash.byteLength);

                return prefix
              }

              /**
               * The codec of the CID in its number form.
               *
               * @returns {CodecCode}
               */
              get code () {
                return codecs[this.codec]
              }

              /**
               * Convert to a CID of version `0`.
               *
               * @returns {CID}
               */
              toV0 () {
                if (this.codec !== 'dag-pb') {
                  throw new Error('Cannot convert a non dag-pb CID to CIDv0')
                }

                const { name, length } = mh.decode(this.multihash);

                if (name !== 'sha2-256') {
                  throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')
                }

                if (length !== 32) {
                  throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')
                }

                return new CID(0, this.codec, this.multihash)
              }

              /**
               * Convert to a CID of version `1`.
               *
               * @returns {CID}
               */
              toV1 () {
                return new CID(1, this.codec, this.multihash, this.multibaseName)
              }

              /**
               * Encode the CID into a string.
               *
               * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.
               * @returns {string}
               */
              toBaseEncodedString (base = this.multibaseName) {
                // @ts-ignore non enumerable cache property
                if (this.string && this.string.length !== 0 && base === this.multibaseName) {
                  // @ts-ignore non enumerable cache property
                  return this.string
                }
                let str;
                if (this.version === 0) {
                  if (base !== 'base58btc') {
                    throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')
                  }
                  str = mh.toB58String(this.multihash);
                } else if (this.version === 1) {
                  str = uint8ArrayToString(multibase.encode(base, this.bytes));
                } else {
                  throw new Error('unsupported version')
                }
                if (base === this.multibaseName) {
                  // cache the string value
                  Object.defineProperty(this, 'string', { value: str });
                }
                return str
              }

              /**
               * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)
               *
               * @returns {string}
               */
              [Symbol.for('nodejs.util.inspect.custom')] () {
                return 'CID(' + this.toString() + ')'
              }

              /**
               * Encode the CID into a string.
               *
               * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.
               * @returns {string}
               */
              toString (base) {
                return this.toBaseEncodedString(base)
              }

              /**
               * Serialize to a plain object.
               *
               * @returns {SerializedCID}
               */
              toJSON () {
                return {
                  codec: this.codec,
                  version: this.version,
                  hash: this.multihash
                }
              }

              /**
               * Compare equality with another CID.
               *
               * @param {CID} other
               * @returns {boolean}
               */
              equals (other) {
                return this.codec === other.codec &&
                  this.version === other.version &&
                  uint8ArrayEquals(this.multihash, other.multihash)
              }

              /**
               * Test if the given input is a valid CID object.
               * Throws if it is not.
               *
               * @param {any} other - The other CID.
               * @returns {void}
               */
              static validateCID (other) {
                const errorMsg = CIDUtil.checkCIDComponents(other);
                if (errorMsg) {
                  throw new Error(errorMsg)
                }
              }

              /**
               * Check if object is a CID instance
               *
               * @param {any} value
               * @returns {value is CID}
               */
              static isCID (value) {
                return value instanceof CID || Boolean(value && value[symbol])
              }
            }

            CID.codecs = codecs;

            var src = CID;

            function hexToUint8Array(hex) {
                hex = hex.startsWith('0x') ? hex.substr(2) : hex;
                if (hex.length % 2 !== 0)
                    throw new Error('hex must have length that is multiple of 2');
                const arr = new Uint8Array(hex.length / 2);
                for (let i = 0; i < arr.length; i++) {
                    arr[i] = parseInt(hex.substr(i * 2, 2), 16);
                }
                return arr;
            }
            const UTF_8_DECODER = new TextDecoder('utf-8');
            /**
             * Returns the URI representation of the content hash for supported codecs
             * @param contenthash to decode
             */
            function contenthashToUri(contenthash) {
                const data = hexToUint8Array(contenthash);
                const codec = src$1.getNameFromData(data);
                switch (codec) {
                    case 'ipfs-ns': {
                        const unprefixedData = src$1.rmPrefix(data);
                        const cid = new src(unprefixedData);
                        return `ipfs://${src$2.toB58String(cid.multihash)}`;
                    }
                    case 'ipns-ns': {
                        const unprefixedData = src$1.rmPrefix(data);
                        const cid = new src(unprefixedData);
                        const multihash = src$2.decode(cid.multihash);
                        if (multihash.name === 'identity') {
                            return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`;
                        }
                        else {
                            return `ipns://${src$2.toB58String(cid.multihash)}`;
                        }
                    }
                    default:
                        throw new Error(`Unrecognized codec: ${codec}`);
                }
            }

            const ENS_NAME_REGEX = /^(([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+)eth(\/.*)?$/;
            function parseENSAddress(ensAddress) {
                const match = ensAddress.match(ENS_NAME_REGEX);
                if (!match)
                    return undefined;
                return { ensName: `${match[1].toLowerCase()}eth`, ensPath: match[4] };
            }

            /**
             * Given a URI that may be ipfs, ipns, http, https, ar, or data protocol, return the fetch-able http(s) URLs for the same content
             * @param uri to convert to fetch-able http url
             */
            function uriToHttp(uri) {
                const protocol = uri.split(':')[0].toLowerCase();
                switch (protocol) {
                    case 'data':
                        return [uri];
                    case 'https':
                        return [uri];
                    case 'http':
                        return ['https' + uri.substr(4), uri];
                    case 'ipfs':
                        const hash = uri.match(/^ipfs:(\/\/)?(.*)$/i)?.[2];
                        return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];
                    case 'ipns':
                        const name = uri.match(/^ipns:(\/\/)?(.*)$/i)?.[2];
                        return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];
                    case 'ar':
                        const tx = uri.match(/^ar:(\/\/)?(.*)$/i)?.[2];
                        return [`https://arweave.net/${tx}`];
                    default:
                        return [];
                }
            }

            var ValidationSchema;
            (function (ValidationSchema) {
                ValidationSchema["LIST"] = "list";
                ValidationSchema["TOKENS"] = "tokens";
            })(ValidationSchema || (ValidationSchema = {}));
            const validator = new Promise(async (resolve) => {
                const [ajv, schema] = await Promise.all([Promise.resolve().then(function () { return ajv$1; }), Promise.resolve().then(function () { return tokenlist_schema$1; })]);
                const validator = new ajv.default({ allErrors: true })
                    .addSchema(schema, ValidationSchema.LIST)
                    // Adds a meta scheme of Pick<TokenList, 'tokens'>
                    .addSchema({
                    ...schema,
                    $id: schema.$id + '#tokens',
                    required: ['tokens'],
                }, ValidationSchema.TOKENS);
                resolve(validator);
            });
            function getValidationErrors(validate) {
                return (validate?.errors?.map((error) => [error.dataPath, error.message].filter(Boolean).join(' ')).join('; ') ??
                    'unknown error');
            }
            /**
             * Validates an array of tokens.
             * @param json the TokenInfo[] to validate
             */
            async function validateTokens(json) {
                const validate = (await validator).getSchema(ValidationSchema.TOKENS);
                if (validate?.({ tokens: json })) {
                    return json;
                }
                throw new Error(`Token list failed validation: ${getValidationErrors(validate)}`);
            }
            /**
             * Validates a token list.
             * @param json the TokenList to validate
             */
            async function validateTokenList(json) {
                const validate = (await validator).getSchema(ValidationSchema.LIST);
                if (validate?.(json)) {
                    return json;
                }
                throw new Error(`Token list failed validation: ${getValidationErrors(validate)}`);
            }

            const DEFAULT_TOKEN_LIST = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org';
            const listCache = new Map();
            /** Fetches and validates a token list. */
            async function fetchTokenList(listUrl, resolveENSContentHash) {
                const cached = listCache?.get(listUrl); // avoid spurious re-fetches
                if (cached) {
                    return cached;
                }
                let urls;
                const parsedENS = parseENSAddress(listUrl);
                if (parsedENS) {
                    let contentHashUri;
                    try {
                        contentHashUri = await resolveENSContentHash(parsedENS.ensName);
                    }
                    catch (error) {
                        const message = `failed to resolve ENS name: ${parsedENS.ensName}`;
                        console.debug(message, error);
                        throw new Error(message);
                    }
                    let translatedUri;
                    try {
                        translatedUri = contenthashToUri(contentHashUri);
                    }
                    catch (error) {
                        const message = `failed to translate contenthash to URI: ${contentHashUri}`;
                        console.debug(message, error);
                        throw new Error(message);
                    }
                    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`);
                }
                else {
                    urls = uriToHttp(listUrl);
                }
                for (let i = 0; i < urls.length; i++) {
                    const url = urls[i];
                    const isLast = i === urls.length - 1;
                    let response;
                    try {
                        response = await fetch(url, { credentials: 'omit' });
                    }
                    catch (error) {
                        const message = `failed to fetch list: ${listUrl}`;
                        console.debug(message, error);
                        if (isLast)
                            throw new Error(message);
                        continue;
                    }
                    if (!response.ok) {
                        const message = `failed to fetch list: ${listUrl}`;
                        console.debug(message, response.statusText);
                        if (isLast)
                            throw new Error(message);
                        continue;
                    }
                    const json = await response.json();
                    const list = await validateTokenList(json);
                    listCache?.set(listUrl, list);
                    return list;
                }
                throw new Error('Unrecognized list URL protocol.');
            }

            // import { Token } from '@uniswap/sdk-core'
            // import { TokenAddressMap } from '../state/lists/hooks'
            // returns the checksummed address if the address is valid, otherwise returns false
            function isAddress(value) {
                try {
                    return utils.getAddress(value);
                }
                catch {
                    return false;
                }
            }
            // // shorten the checksummed version of the input address to have 0x + 4 characters at start and end
            // export function shortenAddress(address: string, chars = 4): string {
            //   const parsed = isAddress(address)
            //   if (!parsed) {
            //     throw Error(`Invalid 'address' parameter '${address}'.`)
            //   }
            //   return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`
            // }
            // // account is not optional
            // function getSigner(library: providers.Web3Provider, account: string): providers.JsonRpcSigner {
            //   return library.getSigner(account).connectUnchecked()
            // }
            // // account is optional
            // function getProviderOrSigner(
            //   library: providers.Web3Provider,
            //   account?: string
            // ): providers.Web3Provider | providers.JsonRpcSigner {
            //   return account ? getSigner(library, account) : library
            // }
            // // account is optional
            // export function getContract(address: string, ABI: any, library: providers.Web3Provider, account?: string): Contract {
            //   if (!isAddress(address) || address === constants.AddressZero) {
            //     throw Error(`Invalid 'address' parameter '${address}'.`)
            //   }
            //   return new Contract(address, ABI, getProviderOrSigner(library, account) as any)
            // }
            // export function escapeRegExp(string: string): string {
            //   return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') // $& means the whole matched string
            // }
            // export function isTokenOnList(tokenAddressMap: TokenAddressMap, token?: Token): boolean {
            //   return Boolean(token?.isToken && tokenAddressMap[token.chainId]?.[token.address])
            // }
            // export function formattedFeeAmount(feeAmount: FeeAmount): number {
            //   return feeAmount / 10000
            // }

            /**
             * Token instances created from token info on a token list.
             */
            class WrappedTokenInfo {
                isNative = false;
                isToken = true;
                list;
                tokenInfo;
                constructor(tokenInfo, list) {
                    this.tokenInfo = tokenInfo;
                    this.list = list;
                }
                _checksummedAddress = null;
                get address() {
                    if (this._checksummedAddress)
                        return this._checksummedAddress;
                    const checksummedAddress = isAddress(this.tokenInfo.address);
                    if (!checksummedAddress)
                        throw new Error(`Invalid token address: ${this.tokenInfo.address}`);
                    return (this._checksummedAddress = checksummedAddress);
                }
                get chainId() {
                    return this.tokenInfo.chainId;
                }
                get decimals() {
                    return this.tokenInfo.decimals;
                }
                get name() {
                    return this.tokenInfo.name;
                }
                get symbol() {
                    return this.tokenInfo.symbol;
                }
                get logoURI() {
                    return this.tokenInfo.logoURI;
                }
                _tags = null;
                get tags() {
                    if (this._tags !== null)
                        return this._tags;
                    if (!this.tokenInfo.tags)
                        return (this._tags = []);
                    const listTags = this.list?.tags;
                    if (!listTags)
                        return (this._tags = []);
                    return (this._tags = this.tokenInfo.tags.map((tagId) => {
                        return {
                            ...listTags[tagId],
                            id: tagId,
                        };
                    }));
                }
                equals(other) {
                    return other.chainId === this.chainId && other.isToken && other.address.toLowerCase() === this.address.toLowerCase();
                }
                sortsBefore(other) {
                    if (this.equals(other))
                        throw new Error('Addresses should not be equal');
                    return this.address.toLowerCase() < other.address.toLowerCase();
                }
                get wrapped() {
                    return this;
                }
            }

            const mapCache = typeof WeakMap !== 'undefined' ? new WeakMap() : null;
            function tokensToChainTokenMap(tokens) {
                const cached = mapCache?.get(tokens);
                if (cached)
                    return cached;
                const [list, infos] = Array.isArray(tokens) ? [undefined, tokens] : [tokens, tokens.tokens];
                const map = infos.reduce((map, info) => {
                    const token = new WrappedTokenInfo(info, list);
                    if (map[token.chainId]?.[token.address] !== undefined) {
                        console.warn(`Duplicate token skipped: ${token.address}`);
                        return map;
                    }
                    if (!map[token.chainId]) {
                        map[token.chainId] = {};
                    }
                    map[token.chainId][token.address] = { token, list };
                    return map;
                }, {});
                mapCache?.set(tokens, map);
                return map;
            }

            const chainTokenMapAtom = atom({});
            function useTokenList(list) {
                const { chainId, library } = useActiveWeb3React();
                const [chainTokenMap, setChainTokenMap] = useAtom(chainTokenMapAtom);
                // Error boundaries will not catch (non-rendering) async errors, but it should still be shown
                const [error, setError] = React.useState();
                if (error)
                    throw error;
                React.useEffect(() => {
                    if (list !== undefined) {
                        let tokens;
                        if (typeof list === 'string') {
                            tokens = fetchTokenList(list, (ensName) => {
                                if (library && chainId === 1) {
                                    return resolveENSContentHash(ensName, library);
                                }
                                throw new Error('Could not construct mainnet ENS resolver');
                            });
                        }
                        else {
                            tokens = validateTokens(list);
                        }
                        tokens.then(tokensToChainTokenMap).then(setChainTokenMap).catch(setError);
                    }
                }, [chainId, library, list, setChainTokenMap]);
                return React.useMemo(() => {
                    return (chainId && chainTokenMap[chainId]) || {};
                }, [chainId, chainTokenMap]);
            }

            function Wallet({ disabled }) {
                return disabled ? (jsxRuntime.exports.jsx(Caption, Object.assign({ color: "secondary" }, { children: jsxRuntime.exports.jsxs(Row, Object.assign({ gap: 0.25 }, { children: [jsxRuntime.exports.jsx(CreditCard, {}, void 0), "Connect wallet to swap"] }), void 0) }), void 0)) : null;
            }

            const BoundaryContext = React.createContext(null);
            const BoundaryProvider = BoundaryContext.Provider;
            styled.div `
  background-color: ${({ theme }) => theme.dialog};
  border-radius: 0.5em;
  opacity: ${(props) => (props.show ? 1 : 0)};
  padding: 8px;
  transition: visibility 0.25s linear, opacity 0.25s linear;
  visibility: ${(props) => (props.show ? 'visible' : 'hidden')};
  z-index: ${Layer.TOOLTIP};
`;
            styled.div `
  display: inline-block;
`;
            styled.div `
  height: 8px;
  width: 8px;
  z-index: ${Layer.TOOLTIP};

  ::before {
    background: ${({ theme }) => theme.dialog};
    border: 1px solid ${({ theme }) => theme.outline};
    content: '';

    height: 8px;
    position: absolute;
    transform: rotate(45deg);
    width: 8px;
  }

  &.arrow-top {
    bottom: -5px;
    ::before {
      border-left: none;
      border-top: none;
    }
  }

  &.arrow-bottom {
    top: -5px;
    ::before {
      border-bottom: none;
      border-right: none;
    }
  }

  &.arrow-left {
    right: -5px;
    ::before {
      border-bottom: none;
      border-left: none;
    }
  }

  &.arrow-right {
    left: -5px;
    ::before {
      border-right: none;
      border-top: none;
    }
  }
`;

            const DEFAULT_INPUT = { address: 'ETH' };
            const DEFAULT_OUTPUT = {};
            function useSwapDefaults(defaults = {}) {
                const tokenList = defaults.tokenList || DEFAULT_TOKEN_LIST;
                const input = defaults.input || DEFAULT_INPUT;
                const output = defaults.output || DEFAULT_OUTPUT;
                input.amount = input.amount || 0;
                output.amount = output.amount || 0;
                // eslint-disable-next-line react-hooks/exhaustive-deps
                return React.useMemo(() => ({ tokenList, input, output }), []);
            }
            const CrowdSale = ({ defaults }) => {
                const { tokenList } = useSwapDefaults(defaults);
                useTokenList(tokenList);
                const [boundary, setBoundary] = React.useState(null);
                const { active, account } = useActiveWeb3React();
                React.useState(0);
                return (jsxRuntime.exports.jsxs(jsxRuntime.exports.Fragment, { children: [jsxRuntime.exports.jsx(Header, Object.assign({ logo: true, title: jsxRuntime.exports.jsx("p", { children: "Swap" }, void 0) }, { children: jsxRuntime.exports.jsx(Wallet, { disabled: !account }, void 0) }), void 0), jsxRuntime.exports.jsx("div", Object.assign({ ref: setBoundary }, { children: jsxRuntime.exports.jsx(BoundaryProvider, { value: boundary }, void 0) }), void 0)] }, void 0));
            };

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps) _defineProperties(Constructor.prototype, protoProps);
              if (staticProps) _defineProperties(Constructor, staticProps);
              Object.defineProperty(Constructor, "prototype", {
                writable: false
              });
              return Constructor;
            }

            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

              return _setPrototypeOf(o, p);
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }

              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true
                }
              });
              Object.defineProperty(subClass, "prototype", {
                writable: false
              });
              if (superClass) _setPrototypeOf(subClass, superClass);
            }

            function _typeof(obj) {
              "@babel/helpers - typeof";

              return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
                return typeof obj;
              } : function (obj) {
                return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
              }, _typeof(obj);
            }

            function _assertThisInitialized(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }

              return self;
            }

            function _possibleConstructorReturn(self, call) {
              if (call && (_typeof(call) === "object" || typeof call === "function")) {
                return call;
              } else if (call !== void 0) {
                throw new TypeError("Derived constructors may only return object or undefined");
              }

              return _assertThisInitialized(self);
            }

            function _getPrototypeOf(o) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
              return _getPrototypeOf(o);
            }

            function _arrayWithHoles$1(arr) {
              if (Array.isArray(arr)) return arr;
            }

            function _iterableToArrayLimit$1(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

              if (_i == null) return;
              var _arr = [];
              var _n = true;
              var _d = false;

              var _s, _e;

              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            function _arrayLikeToArray$1(arr, len) {
              if (len == null || len > arr.length) len = arr.length;

              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            }

            function _unsupportedIterableToArray$1(o, minLen) {
              if (!o) return;
              if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor) n = o.constructor.name;
              if (n === "Map" || n === "Set") return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
            }

            function _nonIterableRest$1() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _slicedToArray$1(arr, i) {
              return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
            }

            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null) return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key, i;

              for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
              }

              return target;
            }

            function _objectWithoutProperties(source, excluded) {
              if (source == null) return {};
              var target = _objectWithoutPropertiesLoose(source, excluded);
              var key, i;

              if (Object.getOwnPropertySymbols) {
                var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

                for (i = 0; i < sourceSymbolKeys.length; i++) {
                  key = sourceSymbolKeys[i];
                  if (excluded.indexOf(key) >= 0) continue;
                  if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
                  target[key] = source[key];
                }
              }

              return target;
            }

            var i$1=function(e){return "string"==typeof e},s=function(e){return "function"==typeof e},u=new Map,c$1=new Map;function f(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return function(r){if(i$1(r)&&(r=new Date(r)),n){var a=v(e,t),o=c$1.get(a);if(o)return o.format(r);var l=new Intl.DateTimeFormat(e,t);return c$1.set(a,l),l.format(r)}var s=new Intl.DateTimeFormat(e,t);return s.format(r)}}function h(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return function(r){if(n){var a=v(e,t),o=u.get(a);if(o)return o.format(r);var l=new Intl.NumberFormat(e,t);return u.set(a,l),l.format(r)}var i=new Intl.NumberFormat(e,t);return i.format(r)}}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=Array.isArray(e)?e.sort().join("-"):e;return "".concat(n,"-").concat(JSON.stringify(t))}Object.freeze({__proto__:null,date:f,number:h});var g=/\\u[a-fA-F0-9]{4}|\\x[a-fA-F0-9]{2}/g;function d$1(e){var t=e.locale,n=e.locales,r=e.values,a=e.formats,o=e.localeData,u=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{plurals:void 0},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};t=t||e;var a=n.plurals,o=function(e){return i$1(e)?r[e]||{style:e}:e},u=function(e,n){return function(r){var a=s(n)?n(r):n,o=Array.isArray(a)?a:[a],l=h(t)(e);return o.map((function(e){return i$1(e)?e.replace("#",l):e}))}};return a||console.error("Plurals for locale ".concat(e," aren't loaded. Use i18n.loadLocaleData method to load plurals for specific locale. Using other plural rule as a fallback.")),{plural:function(e,t){var n=t.offset,r=void 0===n?0:n,o=_objectWithoutProperties(t,["offset"]),i=o[e]||o[null==a?void 0:a(e-r)]||o.other;return u(e-r,i)},selectordinal:function(e,t){var n=t.offset,r=void 0===n?0:n,o=_objectWithoutProperties(t,["offset"]),i=o[e]||o[null==a?void 0:a(e-r,!0)]||o.other;return u(e-r,i)},select:function(e,t){return t[e]||t.other},number:function(e,n){return h(t,o(n))(e)},date:function(e,n){return f(t,o(n))(e)},undefined:function(e){return e}}}(t,n,o,a);return function e(t,n,a){var o=r[t],l=u[n](o,a),i=s(l)?l(e):l;return Array.isArray(i)?i.join(""):i}}function p(e,t,n,r){return function(a){var l=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=d$1({locale:t,locales:n,localeData:r,formats:l,values:a}),u=function e(t){return Array.isArray(t)?t.reduce((function(t,n){if(i$1(n))return t+n;var r=_slicedToArray$1(n,3),a=r[0],l=r[1],u=r[2],c={};null==u||i$1(u)?c=u:Object.keys(u).forEach((function(t){c[t]=e(u[t]);}));var f=s(a,l,c);return null==f?t:t+f}),""):t},c=u(e);return i$1(c)&&g.test(c)?JSON.parse('"'.concat(c.trim(),'"')):i$1(c)?c.trim():c}}var y=function(){function n(){_classCallCheck(this,n),this._events={};}return _createClass(n,[{key:"on",value:function(e,t){var n=this;return this._hasEvent(e)||(this._events[e]=[]),this._events[e].push(t),function(){return n.removeListener(e,t)}}},{key:"removeListener",value:function(e,t){if(this._hasEvent(e)){var n=this._events[e].indexOf(t);~n&&this._events[e].splice(n,1);}}},{key:"emit",value:function(e){for(var t=this,n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];this._hasEvent(e)&&this._events[e].map((function(e){return e.apply(t,r)}));}},{key:"_hasEvent",value:function(e){return Array.isArray(this._events[e])}}]),n}();function _(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,o=_getPrototypeOf(e);if(t){var l=_getPrototypeOf(this).constructor;n=Reflect.construct(o,arguments,l);}else n=o.apply(this,arguments);return _possibleConstructorReturn(this,n)}}var b=function(r){_inherits(o,r);var a=_(o);function o(t){var n;return _classCallCheck(this,o),n=a.call(this),n._messages={},n._localeData={},null!=t.missing&&(n._missing=t.missing),null!=t.messages&&n.load(t.messages),null!=t.localeData&&n.loadLocaleData(t.localeData),null==t.locale&&null==t.locales||n.activate(t.locale,t.locales),n}return _createClass(o,[{key:"_loadLocaleData",value:function(e,t){null==this._localeData[e]?this._localeData[e]=t:Object.assign(this._localeData[e],t);}},{key:"loadLocaleData",value:function(e,t){var n=this;null!=t?this._loadLocaleData(e,t):Object.keys(e).forEach((function(t){return n._loadLocaleData(t,e[t])})),this.emit("change");}},{key:"_load",value:function(e,t){null==this._messages[e]?this._messages[e]=t:Object.assign(this._messages[e],t);}},{key:"load",value:function(e,t){var n=this;null!=t?this._load(e,t):Object.keys(e).forEach((function(t){return n._load(t,e[t])})),this.emit("change");}},{key:"activate",value:function(e,t){this._locale=e,this._locales=t,this.emit("change");}},{key:"_",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=n.message,a=n.formats,o=n.context;i$1(e)||(t=e.values||t,r=e.message,o=e.context,e=e.id);var l,u=!o&&!this.messages[e],c=o&&!this.messages[o][e],f=c||u,h=this._missing;return h&&f?s(h)?h(this.locale,e,o):h:(f&&this.emit("missing",{id:e,context:o,locale:this._locale}),l=o&&!c?this.messages[o][e]||r||e:this.messages[e]||r||e,i$1(l)&&g.test(l)?JSON.parse('"'.concat(l,'"')):i$1(l)?l:p(l,this.locale,this.locales,this.localeData)(t,a))}},{key:"date",value:function(e,t){return f(this.locales||this.locale,t)(e)}},{key:"number",value:function(e,t){return h(this.locales||this.locale,t)(e)}},{key:"locale",get:function(){return this._locale}},{key:"locales",get:function(){return this._locales}},{key:"messages",get:function(){var e;return null!==(e=this._messages[this._locale])&&void 0!==e?e:{}}},{key:"localeData",get:function(){var e;return null!==(e=this._localeData[this._locale])&&void 0!==e?e:{}}}]),o}(y);function D(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new b(e)}var k=D();

            const i18n = k ;

            function _arrayWithHoles(arr) {
              if (Array.isArray(arr)) return arr;
            }

            function _iterableToArrayLimit(arr, i) {
              var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

              if (_i == null) return;
              var _arr = [];
              var _n = true;
              var _d = false;

              var _s, _e;

              try {
                for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                  _arr.push(_s.value);

                  if (i && _arr.length === i) break;
                }
              } catch (err) {
                _d = true;
                _e = err;
              } finally {
                try {
                  if (!_n && _i["return"] != null) _i["return"]();
                } finally {
                  if (_d) throw _e;
                }
              }

              return _arr;
            }

            function _arrayLikeToArray(arr, len) {
              if (len == null || len > arr.length) len = arr.length;

              for (var i = 0, arr2 = new Array(len); i < len; i++) {
                arr2[i] = arr[i];
              }

              return arr2;
            }

            function _unsupportedIterableToArray(o, minLen) {
              if (!o) return;
              if (typeof o === "string") return _arrayLikeToArray(o, minLen);
              var n = Object.prototype.toString.call(o).slice(8, -1);
              if (n === "Object" && o.constructor) n = o.constructor.name;
              if (n === "Map" || n === "Set") return Array.from(o);
              if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
            }

            function _nonIterableRest() {
              throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            function _slicedToArray(arr, i) {
              return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
            }

            var r=React__default['default'].createContext(null);var i=function(t){var o=t.i18n,a=t.defaultComponent,i=t.forceRenderOnLocaleChange,c=void 0===i||i,u=t.children,l=function(){return {i18n:o,defaultComponent:a}},f=function(){return c&&o.locale||"default"},s=React__default['default'].useState(l()),p=_slicedToArray(s,2),m=p[0],d=p[1],v=React__default['default'].useState(f()),y=_slicedToArray(v,2),h=y[0],b=y[1];return React__default['default'].useEffect((function(){var e=o.on("change",(function(){d(l()),b(f());}));return "default"===h&&b(f()),c&&"default"===h&&console.log("I18nProvider did not render. A call to i18n.activate still needs to happen or forceRenderOnLocaleChange must be set to false."),function(){return e()}}),[]),c&&"default"===h?null:React__default['default'].createElement(r.Provider,{value:m,key:h},u)};

            const I18nProvider = i ;

            /*eslint-disable*/

            var enUS={messages:{"$-":"$-","$<0/>":"$<0/>","${0}":["$",["0"]],"(${0})":["($",["0"],")"],"(View on Explorer)":"(View on Explorer)","(clear all)":"(clear all)","(edit)":"(edit)","- Remove recipient":"- Remove recipient","0 UNI / week":"0 UNI / week","25%":"25%","50%":"50%","75%":"75%","<0/> All Proposals":"<0/> All Proposals","<0/> Votes":"<0/> Votes","<0>Account analytics and accrued fees</0><1> ↗ </1>":"<0>Account analytics and accrued fees</0><1> ↗ </1>","<0>Current Price:</0><1><2/></1><3>{0} per {1}</3>":["<0>Current Price:</0><1><2/></1><3>",["0"]," per ",["1"],"</3>"],"<0>Tip:</0> Removing pool tokens converts your position back into underlying tokens at the current rate, proportional to your share of the pool. Accrued fees are included in the amounts you receive.":"<0>Tip:</0> Removing pool tokens converts your position back into underlying tokens at the current rate, proportional to your share of the pool. Accrued fees are included in the amounts you receive.","<0>Tip:</0> Select an action and describe your proposal for the community. The proposal cannot be modified after submission, so please verify all information before submitting. The voting period will begin immediately and last for 7 days. To propose a custom action, <1>read the docs</1>.":"<0>Tip:</0> Select an action and describe your proposal for the community. The proposal cannot be modified after submission, so please verify all information before submitting. The voting period will begin immediately and last for 7 days. To propose a custom action, <1>read the docs</1>.","<0>Tip:</0> Use this tool to find v2 pools that don't automatically appear in the interface.":"<0>Tip:</0> Use this tool to find v2 pools that don't automatically appear in the interface.","<0>Tip:</0> When you add liquidity, you will receive pool tokens representing your position. These tokens automatically earn fees proportional to your share of the pool, and can be redeemed at any time.":"<0>Tip:</0> When you add liquidity, you will receive pool tokens representing your position. These tokens automatically earn fees proportional to your share of the pool, and can be redeemed at any time.","<0>Unlock voting</0> to prepare for the next proposal.":"<0>Unlock voting</0> to prepare for the next proposal.","<0>🎉 </0>Welcome to team Unicorn :) <1>🎉</1>":"<0>🎉 </0>Welcome to team Unicorn :) <1>🎉</1>","A minimum threshold of 0.25% of the total UNI supply is required to submit proposals":"A minimum threshold of 0.25% of the total UNI supply is required to submit proposals","About":"About","Accept":"Accept","Account":"Account","Active":"Active","Add":"Add","Add <0/> and <1/> to GuildFX V2":"Add <0/> and <1/> to GuildFX V2","Add <0/> and <1/> to Uniswap V2":"Add <0/> and <1/> to Uniswap V2","Add Delegate +":"Add Delegate +","Add Liquidity":"Add Liquidity","Add V2 Liquidity":"Add V2 Liquidity","Add liquidity.":"Add liquidity.","Add more liquidity":"Add more liquidity","Add {0} to Metamask <0/>":["Add ",["0"]," to Metamask <0/>"],"Add {0}-{1} liquidity":["Add ",["0"],"-",["1"]," liquidity"],"Add {0}/{1} V3 liquidity":["Add ",["0"],"/",["1"]," V3 liquidity"],"Added {0}":["Added ",["0"]],"Address has no available claim":"Address has no available claim","Against":"Against","Allow LP token migration":"Allow LP token migration","Allow high price impact trades and skip the confirm screen. Use at your own risk.":"Allow high price impact trades and skip the confirm screen. Use at your own risk.","Allow the GuildFX Protocol to use your {0}":["Allow the GuildFX Protocol to use your ",["0"]],"Allow the Uniswap Protocol to use your {0}":["Allow the Uniswap Protocol to use your ",["0"]],"Allowed":"Allowed","Amount":"Amount","An error occurred when trying to execute this swap. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3.":"An error occurred when trying to execute this swap. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3.","An error occurred when trying to execute this swap. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3.":"An error occurred when trying to execute this swap. You may need to increase your slippage tolerance. If that does not work, there may be an incompatibility with the token you are trading. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3.","Approve":"Approve","Approve Token":"Approve Token","Approve {0}":["Approve ",["0"]],"Approve {0} first":["Approve ",["0"]," first"],"Approved":"Approved","Approving":"Approving","Approving {0}":["Approving ",["0"]],"Arbiscan":"Arbiscan","Arbitrum Bridge":"Arbitrum Bridge","Arbitrum is in Beta and may experience downtime. During downtime, your position will not earn fees and you will be unable to remove liquidity. <0>Read more.</0>":"Arbitrum is in Beta and may experience downtime. During downtime, your position will not earn fees and you will be unable to remove liquidity. <0>Read more.</0>","Are you sure?":"Are you sure?","As a member of the GuildFX community you may claim UNI to be used for voting and governance.<0/><1/><2>Read more about UNI</2>":"As a member of the GuildFX community you may claim UNI to be used for voting and governance.<0/><1/><2>Read more about UNI</2>","As a member of the Uniswap community you may claim UNI to be used for voting and governance.<0/><1/><2>Read more about UNI</2>":"As a member of the Uniswap community you may claim UNI to be used for voting and governance.<0/><1/><2>Read more about UNI</2>","At least {0} {1} and {2} {3} will be refunded to your wallet due to selected price range.":["At least ",["0"]," ",["1"]," and ",["2"]," ",["3"]," will be refunded to your wallet due to selected price range."],"Auto":"Auto","Auto Router API":"Auto Router API","Available to deposit: {0}":["Available to deposit: ",["0"]],"Balance: {0}":["Balance: ",["0"]],"Best for exotic pairs.":"Best for exotic pairs.","Best for most pairs.":"Best for most pairs.","Best for stable pairs.":"Best for stable pairs.","Best for very stable pairs.":"Best for very stable pairs.","Best price route costs ~{formattedGasPriceString} in gas.":["Best price route costs ~",["formattedGasPriceString"]," in gas."],"Blocked address":"Blocked address","Bridge":"Bridge","By adding liquidity you'll earn 0.3% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.":"By adding liquidity you'll earn 0.3% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.","By adding this list you are implicitly trusting that the data is correct. Anyone can create a list, including creating fake versions of existing lists and lists that claim to represent projects that do not have one.":"By adding this list you are implicitly trusting that the data is correct. Anyone can create a list, including creating fake versions of existing lists and lists that claim to represent projects that do not have one.","By connecting a wallet, you agree to GuildFX Labs’ <0>Terms of Service</0> and acknowledge that you have read and understand the GuildFX <1>Protocol Disclaimer</1>.":"By connecting a wallet, you agree to GuildFX Labs’ <0>Terms of Service</0> and acknowledge that you have read and understand the GuildFX <1>Protocol Disclaimer</1>.","By connecting a wallet, you agree to Uniswap Labs’ <0>Terms of Service</0> and acknowledge that you have read and understand the Uniswap <1>Protocol Disclaimer</1>.":"By connecting a wallet, you agree to Uniswap Labs’ <0>Terms of Service</0> and acknowledge that you have read and understand the Uniswap <1>Protocol Disclaimer</1>.","Canceled":"Canceled","Change":"Change","Charts":"Charts","Check network status":"Check network status","Check out our v3 LP walkthrough and migration guides.":"Check out our v3 LP walkthrough and migration guides.","Claim":"Claim","Claim <0/> for {0}":["Claim <0/> for ",["0"]],"Claim UNI":"Claim UNI","Claim UNI Token":"Claim UNI Token","Claim UNI reward for {0}":["Claim UNI reward for ",["0"]],"Claim WIN":"Claim WIN","Claim fees":"Claim fees","Claim your UNI tokens":"Claim your UNI tokens","Claimed":"Claimed","Claimed UNI!":"Claimed UNI!","Claimed!":"Claimed!","Claiming":"Claiming","Claiming UNI":"Claiming UNI","Claiming WIN":"Claiming WIN","Claiming {0} UNI":["Claiming ",["0"]," UNI"],"Clear All":"Clear All","Clear all":"Clear all","Close":"Close","Closed":"Closed","Collect":"Collect","Collect as WETH":"Collect as WETH","Collect fees":"Collect fees","Collect {0}/{1} fees":["Collect ",["0"],"/",["1"]," fees"],"Collected":"Collected","Collecting":"Collecting","Collecting fees":"Collecting fees","Collecting fees will withdraw currently available fees for you.":"Collecting fees will withdraw currently available fees for you.","Confirm":"Confirm","Confirm Supply":"Confirm Supply","Confirm Swap":"Confirm Swap","Confirm swap":"Confirm swap","Confirm this transaction in your wallet":"Confirm this transaction in your wallet","Confirm transaction in wallet":"Confirm transaction in wallet","Connect Wallet":"Connect Wallet","Connect a wallet":"Connect a wallet","Connect to a wallet to find pools":"Connect to a wallet to find pools","Connect to a wallet to view your V2 liquidity.":"Connect to a wallet to view your V2 liquidity.","Connect to a wallet to view your liquidity.":"Connect to a wallet to view your liquidity.","Connect wallet to swap":"Connect wallet to swap","Connected with {name}":["Connected with ",["name"]],"Copied":"Copied","Copy Address":"Copy Address","Create Pool & Supply":"Create Pool & Supply","Create Proposal":"Create Proposal","Create a pair":"Create a pair","Create a pool":"Create a pool","Create an issue on GitHub":"Create an issue on GitHub","Create pool and add {0}/{1} V3 liquidity":["Create pool and add ",["0"],"/",["1"]," V3 liquidity"],"Create pool.":"Create pool.","Create {0}/{1} V3 pool":["Create ",["0"],"/",["1"]," V3 pool"],"Current price":"Current price","Current {0} Price:":["Current ",["0"]," Price:"],"Custom":"Custom","Dark Theme":"Dark Theme","Defeated":"Defeated","Delegate Votes":"Delegate Votes","Delegate voting power to {0}":["Delegate voting power to ",["0"]],"Delegated to:":"Delegated to:","Delegating votes":"Delegating votes","Deposit":"Deposit","Deposit Amounts":"Deposit Amounts","Deposit UNI-V2 LP Tokens":"Deposit UNI-V2 LP Tokens","Deposit liquidity":"Deposit liquidity","Deposit tokens to the {label} network.":["Deposit tokens to the ",["label"]," network."],"Deposit your Liquidity Provider tokens to receive UNI, the GuildFX protocol governance token.":"Deposit your Liquidity Provider tokens to receive UNI, the GuildFX protocol governance token.","Deposit your Liquidity Provider tokens to receive UNI, the Uniswap protocol governance token.":"Deposit your Liquidity Provider tokens to receive UNI, the Uniswap protocol governance token.","Deposited liquidity:":"Deposited liquidity:","Deposited {0} UNI-V2":["Deposited ",["0"]," UNI-V2"],"Depositing Liquidity":"Depositing Liquidity","Description":"Description","Detailed":"Detailed","Details":"Details","Disconnect":"Disconnect","Discord":"Discord","Dismiss":"Dismiss","Docs":"Docs","Don’t see one of your v2 positions? <0>Import it.</0>":"Don’t see one of your v2 positions? <0>Import it.</0>","Earn":"Earn","Earned UNI tokens represent voting shares in GuildFX governance.":"Earned UNI tokens represent voting shares in GuildFX governance.","Earned UNI tokens represent voting shares in Uniswap governance.":"Earned UNI tokens represent voting shares in Uniswap governance.","Edit":"Edit","Efficiency Comparison":"Efficiency Comparison","Enter a percent":"Enter a percent","Enter a recipient":"Enter a recipient","Enter a valid slippage percentage":"Enter a valid slippage percentage","Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on submission.":"Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on submission.","Enter an amount":"Enter an amount","Enter valid list location":"Enter valid list location","Enter valid token address":"Enter valid token address","Enter {0} amount":["Enter ",["0"]," amount"],"Error":"Error","Error connecting":"Error connecting","Error connecting. Try refreshing the page.":"Error connecting. Try refreshing the page.","Error details":"Error details","Error importing list":"Error importing list","Estimate may differ due to your wallet gas settings":"Estimate may differ due to your wallet gas settings","Estimated network fee":"Estimated network fee","Etherscan":"Etherscan","Executed":"Executed","Expanded results from inactive Token Lists":"Expanded results from inactive Token Lists","Expected Output":"Expected Output","Expert Mode":"Expert Mode","Expert mode turns off the confirm transaction prompt and allows high slippage trades that often result in bad rates and lost funds.":"Expert mode turns off the confirm transaction prompt and allows high slippage trades that often result in bad rates and lost funds.","Expired":"Expired","Explore GuildFX Analytics.":"Explore GuildFX Analytics.","Explore Uniswap Analytics.":"Explore Uniswap Analytics.","Failed to switch networks from the GuildFX Interface. In order to use GuildFX on {0}, you must change the network in your wallet.":["Failed to switch networks from the GuildFX Interface. In order to use GuildFX on ",["0"],", you must change the network in your wallet."],"Failed to switch networks from the Uniswap Interface. In order to use Uniswap on {0}, you must change the network in your wallet.":["Failed to switch networks from the Uniswap Interface. In order to use Uniswap on ",["0"],", you must change the network in your wallet."],"Fee Tier":"Fee Tier","Fee tier":"Fee tier","Fetching best price...":"Fetching best price...","Fetching best price…":"Fetching best price…","For":"For","For each pool shown below, click migrate to remove your liquidity from GuildFX V2 and deposit it into GuildFX V3.":"For each pool shown below, click migrate to remove your liquidity from GuildFX V2 and deposit it into GuildFX V3.","For each pool shown below, click migrate to remove your liquidity from Uniswap V2 and deposit it into Uniswap V3.":"For each pool shown below, click migrate to remove your liquidity from Uniswap V2 and deposit it into Uniswap V3.","From":"From","From (at most)":"From (at most)","Full Range":"Full Range","Full range positions may earn less fees than concentrated positions. Learn more <0>here</0>.":"Full range positions may earn less fees than concentrated positions. Learn more <0>here</0>.","Get support on Discord":"Get support on Discord","GuildFX Governance":"GuildFX Governance","GuildFX Labs' Terms of Service":"GuildFX Labs' Terms of Service","GuildFX available in: <0>{0}</0>":["GuildFX available in: <0>",["0"],"</0>"],"GuildFX governance is only available on Layer 1. Switch your network to Ethereum Mainnet to view Proposals and Vote.":"GuildFX governance is only available on Layer 1. Switch your network to Ethereum Mainnet to view Proposals and Vote.","GuildFX liquidity mining":"GuildFX liquidity mining","GuildFX migration contract↗":"GuildFX migration contract↗","Help Center":"Help Center","Hide":"Hide","Hide closed positions":"Hide closed positions","High Price Impact":"High Price Impact","How this app uses APIs":"How this app uses APIs","I understand":"I understand","If you purchase a token from this list, you may not be able to sell it back.":"If you purchase a token from this list, you may not be able to sell it back.","Import":"Import","Import List":"Import List","Import Pool":"Import Pool","Import V2 Pool":"Import V2 Pool","Import at your own risk":"Import at your own risk","In range":"In range","Increase Liquidity":"Increase Liquidity","Initial prices and pool share":"Initial prices and pool share","Initializing...":"Initializing...","Input is estimated. You will sell at most <0>{0} {1}</0> or the transaction will revert.":["Input is estimated. You will sell at most <0>",["0"]," ",["1"],"</0> or the transaction will revert."],"Install Metamask":"Install Metamask","Insufficient liquidity for this trade.":"Insufficient liquidity for this trade.","Insufficient {0}":["Insufficient ",["0"]],"Insufficient {0} balance":["Insufficient ",["0"]," balance"],"Interface Settings":"Interface Settings","Invalid pair":"Invalid pair","Invalid pair.":"Invalid pair.","Invalid price input":"Invalid price input","Invalid range selected. The min price must be lower than the max price.":"Invalid range selected. The min price must be lower than the max price.","Invalid recipient":"Invalid recipient","Language":"Language","Learn":"Learn","Learn about providing liquidity":"Learn about providing liquidity","Learn more":"Learn more","Legal & Privacy":"Legal & Privacy","Light Theme":"Light Theme","Liquidity":"Liquidity","Liquidity data not available.":"Liquidity data not available.","Liquidity provider fee":"Liquidity provider fee","Liquidity provider rewards":"Liquidity provider rewards","Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.":"Liquidity providers earn a 0.3% fee on all trades proportional to their share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.","Lists":"Lists","Loaded":"Loaded","Loading":"Loading","MAX":"MAX","Manage":"Manage","Manage Liquidity in Rewards Pool":"Manage Liquidity in Rewards Pool","Manage Token Lists":"Manage Token Lists","Manage this pool.":"Manage this pool.","Max":"Max","Max Price":"Max Price","Max price":"Max price","Max slippage":"Max slippage","Max:":"Max:","Maximum sent":"Maximum sent","Menu":"Menu","Migrate":"Migrate","Migrate Liquidity to V3":"Migrate Liquidity to V3","Migrate V2 Liquidity":"Migrate V2 Liquidity","Migrate your liquidity tokens from GuildFX V2 to GuildFX V3.":"Migrate your liquidity tokens from GuildFX V2 to GuildFX V3.","Migrate your liquidity tokens from Uniswap V2 to Uniswap V3.":"Migrate your liquidity tokens from Uniswap V2 to Uniswap V3.","Migrate {0}/{1} liquidity to V3":["Migrate ",["0"],"/",["1"]," liquidity to V3"],"Migrating":"Migrating","Min Price":"Min Price","Min price":"Min price","Min:":"Min:","Minimum received":"Minimum received","Missing dependencies":"Missing dependencies","Mock Toggle":"Mock Toggle","More":"More","Network Fee":"Network Fee","Network Warning":"Network Warning","Network fees exceed 50% of the swap amount!":"Network fees exceed 50% of the swap amount!","New Position":"New Position","News":"News","No V2 Liquidity found.":"No V2 Liquidity found.","No active pools":"No active pools","No data":"No data","No description.":"No description.","No liquidity found.":"No liquidity found.","No pool found.":"No pool found.","No proposals found.":"No proposals found.","No results found.":"No results found.","Not created":"Not created","OFF":"OFF","ON":"ON","ONLY USE THIS MODE IF YOU KNOW WHAT YOU ARE DOING.":"ONLY USE THIS MODE IF YOU KNOW WHAT YOU ARE DOING.","Off":"Off","On":"On","Once you are happy with the rate click supply to review.":"Once you are happy with the rate click supply to review.","Only UNI votes that were self delegated or delegated to another address before block {0} are eligible for voting.":["Only UNI votes that were self delegated or delegated to another address before block ",["0"]," are eligible for voting."],"Oops! An unknown error occurred. Please refresh the page, or visit from another browser or device.":"Oops! An unknown error occurred. Please refresh the page, or visit from another browser or device.","Optimism Gateway":"Optimism Gateway","Optimism is in Beta and may experience downtime. Optimism expects planned downtime to upgrade the network in the near future. During downtime, your position will not earn fees and you will be unable to remove liquidity. <0>Read more.</0>":"Optimism is in Beta and may experience downtime. Optimism expects planned downtime to upgrade the network in the near future. During downtime, your position will not earn fees and you will be unable to remove liquidity. <0>Read more.</0>","Optimistic Etherscan":"Optimistic Etherscan","Out of range":"Out of range","Output is estimated.":"Output is estimated.","Output is estimated. If the price changes by more than {0}% your transaction will revert.":["Output is estimated. If the price changes by more than ",["0"],"% your transaction will revert."],"Output is estimated. You will receive at least <0>{0} {1}</0> or the transaction will revert.":["Output is estimated. You will receive at least <0>",["0"]," ",["1"],"</0> or the transaction will revert."],"Output will be sent to <0>{0}</0>":["Output will be sent to <0>",["0"],"</0>"],"Owner":"Owner","Participating pools":"Participating pools","Pending":"Pending","Please confirm you would like to remove this list by typing REMOVE":"Please confirm you would like to remove this list by typing REMOVE","Please connect to Layer 1 Ethereum":"Please connect to Layer 1 Ethereum","Please connect to a supported network in the dropdown menu or in your wallet.":"Please connect to a supported network in the dropdown menu or in your wallet.","Please type the word \"{confirmWord}\" to enable expert mode.":["Please type the word \"",["confirmWord"],"\" to enable expert mode."],"Polygon Bridge":"Polygon Bridge","Polygonscan":"Polygonscan","Pool":"Pool","Pool Found!":"Pool Found!","Pool Rate":"Pool Rate","Pool rate":"Pool rate","Pool tokens in rewards pool:":"Pool tokens in rewards pool:","Pooled {0}:":["Pooled ",["0"],":"],"Pools Overview":"Pools Overview","Preview":"Preview","Price":"Price","Price Difference:":"Price Difference:","Price Impact":"Price Impact","Price Impact Too High":"Price Impact Too High","Price Updated":"Price Updated","Price impact":"Price impact","Price range":"Price range","Price updated":"Price updated","Price:":"Price:","Prices and pool share":"Prices and pool share","Proposal":"Proposal","Proposal Submitted":"Proposal Submitted","Proposal Title":"Proposal Title","Proposals":"Proposals","Proposals submitted by community members will appear here.":"Proposals submitted by community members will appear here.","Proposed Action":"Proposed Action","Proposer":"Proposer","Protocol Disclaimer":"Protocol Disclaimer","Queued":"Queued","Rates":"Rates","Read more about GuildFX governance":"Read more about GuildFX governance","Read more about UNI":"Read more about UNI","Read more about Uniswap governance":"Read more about Uniswap governance","Read more about providing liquidity":"Read more about providing liquidity","Read more about unsupported assets":"Read more about unsupported assets","Recent Transactions":"Recent Transactions","Recent transactions":"Recent transactions","Recipient":"Recipient","Reload the page":"Reload the page","Reload the page to try again":"Reload the page to try again","Remove":"Remove","Remove <0/> and <1/>":"Remove <0/> and <1/>","Remove Amount":"Remove Amount","Remove Delegate":"Remove Delegate","Remove Liquidity":"Remove Liquidity","Remove list":"Remove list","Removing {0} {1} and {2} {3}":["Removing ",["0"]," ",["1"]," and ",["2"]," ",["3"]],"Removing {0} {1} and{2} {3}":["Removing ",["0"]," ",["1"]," and",["2"]," ",["3"]],"Request Features":"Request Features","Reset":"Reset","Return":"Return","Review swap":"Review swap","Search by token name or address":"Search by token name or address","Search name or paste address":"Search name or paste address","Select Pair":"Select Pair","Select a network":"Select a network","Select a token":"Select a token","Select a token to find your v2 liquidity.":"Select a token to find your v2 liquidity.","Select an action":"Select an action","Selected Range":"Selected Range","Self":"Self","Self Delegate":"Self Delegate","Set Price Range":"Set Price Range","Set Starting Price":"Set Starting Price","Settings":"Settings","Share of Pool":"Share of Pool","Share of Pool:":"Share of Pool:","Show Portis":"Show Portis","Show closed positions":"Show closed positions","Simple":"Simple","Slippage tolerance":"Slippage tolerance","Some assets are not available through this interface because they may not work well with the smart contracts or we are unable to allow trading for legal reasons.":"Some assets are not available through this interface because they may not work well with the smart contracts or we are unable to allow trading for legal reasons.","Something went wrong":"Something went wrong","Something went wrong.":"Something went wrong.","Step 1. Get UNI-V2 Liquidity tokens":"Step 1. Get UNI-V2 Liquidity tokens","Submit new proposal":"Submit new proposal","Submitting Proposal":"Submitting Proposal","Submitting Vote":"Submitting Vote","Succeeded":"Succeeded","Success":"Success","Supply":"Supply","Supplying {0} {1} and {2} {3}":["Supplying ",["0"]," ",["1"]," and ",["2"]," ",["3"]],"Swap":"Swap","Swap <0/> for exactly <1/>":"Swap <0/> for exactly <1/>","Swap Anyway":"Swap Anyway","Swap details":"Swap details","Swap exactly <0/> for <1/>":"Swap exactly <0/> for <1/>","Swap failed: {0}":["Swap failed: ",["0"]],"Swap summary":"Swap summary","Swapping {0} {1} for {2} {3}":["Swapping ",["0"]," ",["1"]," for ",["2"]," ",["3"]],"Thanks for being part of the GuildFX community <0/>":"Thanks for being part of the GuildFX community <0/>","Thanks for being part of the Uniswap community <0/>":"Thanks for being part of the Uniswap community <0/>","The % you will earn in fees.":"The % you will earn in fees.","The GuildFX invariant x*y=k was not satisfied by the swap. This usually means one of the tokens you are swapping incorporates custom behavior on transfer.":"The GuildFX invariant x*y=k was not satisfied by the swap. This usually means one of the tokens you are swapping incorporates custom behavior on transfer.","The Uniswap invariant x*y=k was not satisfied by the swap. This usually means one of the tokens you are swapping incorporates custom behavior on transfer.":"The Uniswap invariant x*y=k was not satisfied by the swap. This usually means one of the tokens you are swapping incorporates custom behavior on transfer.","The app fetches blockchain data from The Graph’s hosted service.":"The app fetches blockchain data from The Graph’s hosted service.","The app fetches on-chain data and constructs contract calls with an Infura API.":"The app fetches on-chain data and constructs contract calls with an Infura API.","The app fetches the optimal trade route from a GuildFX Labs server.":"The app fetches the optimal trade route from a GuildFX Labs server.","The app fetches the optimal trade route from a Uniswap Labs server.":"The app fetches the optimal trade route from a Uniswap Labs server.","The app logs anonymized usage statistics in order to improve over time.":"The app logs anonymized usage statistics in order to improve over time.","The app securely collects your wallet address and shares it with TRM Labs Inc. for risk and compliance reasons.":"The app securely collects your wallet address and shares it with TRM Labs Inc. for risk and compliance reasons.","The cost of sending this transaction is more than half of the value of the input amount.":"The cost of sending this transaction is more than half of the value of the input amount.","The current fast gas amount for sending a transaction on L1. Gas fees are paid in Ethereum's native currency Ether (ETH) and denominated in GWEI.":"The current fast gas amount for sending a transaction on L1. Gas fees are paid in Ethereum's native currency Ether (ETH) and denominated in GWEI.","The estimated difference between the USD values of input and output amounts.":"The estimated difference between the USD values of input and output amounts.","The input token cannot be transferred. There may be an issue with the input token.":"The input token cannot be transferred. There may be an issue with the input token.","The market price is outside your specified price range. Single-asset deposit only.":"The market price is outside your specified price range. Single-asset deposit only.","The most recent block number on this network. Prices update on every block.":"The most recent block number on this network. Prices update on every block.","The output token cannot be transferred. There may be an issue with the output token.":"The output token cannot be transferred. There may be an issue with the output token.","The output token cannot be transferred. There may be an issue with the output token. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3.":"The output token cannot be transferred. There may be an issue with the output token. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3.","The output token cannot be transferred. There may be an issue with the output token. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3.":"The output token cannot be transferred. There may be an issue with the output token. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3.","The price of this pool is outside of your selected range. Your position is not currently earning fees.":"The price of this pool is outside of your selected range. Your position is not currently earning fees.","The price of this pool is within your selected range. Your position is currently earning fees.":"The price of this pool is within your selected range. Your position is currently earning fees.","The ratio of tokens you add will set the price of this pool.":"The ratio of tokens you add will set the price of this pool.","The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.":"The transaction could not be sent because the deadline has passed. Please check that your transaction deadline is not too low.","There is no liquidity data.":"There is no liquidity data.","This app uses the following third-party APIs:":"This app uses the following third-party APIs:","This pool must be initialized before you can add liquidity. To initialize, select a starting price for the pool. Then, enter your liquidity price range and deposit amount. Gas fees will be higher than usual due to the initialization transaction.":"This pool must be initialized before you can add liquidity. To initialize, select a starting price for the pool. Then, enter your liquidity price range and deposit amount. Gas fees will be higher than usual due to the initialization transaction.","This route optimizes your total output by considering split routes, multiple hops, and the gas cost of each step.":"This route optimizes your total output by considering split routes, multiple hops, and the gas cost of each step.","This token doesn't appear on the active token list(s). Make sure this is the token that you want to trade.":"This token doesn't appear on the active token list(s). Make sure this is the token that you want to trade.","This token is not supported in the GuildFX Labs app":"This token is not supported in the GuildFX Labs app","This token is not supported in the Uniswap Labs app":"This token is not supported in the Uniswap Labs app","This tool will safely migrate your {0} liquidity to V3. The process is completely trustless thanks to the":["This tool will safely migrate your ",["0"]," liquidity to V3. The process is completely trustless thanks to the"],"This transaction will not succeed due to price movement. Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3.":"This transaction will not succeed due to price movement. Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3.","This transaction will not succeed due to price movement. Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3.":"This transaction will not succeed due to price movement. Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3.","This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.":"This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.","Tip: Custom tokens are stored locally in your browser":"Tip: Custom tokens are stored locally in your browser","To":"To","To (at least)":"To (at least)","Token not supported":"Token not supported","Tokens":"Tokens","Tokens from inactive lists. Import specific tokens below or click Manage to activate more lists.":"Tokens from inactive lists. Import specific tokens below or click Manage to activate more lists.","Top pools":"Top pools","Total deposited":"Total deposited","Total deposits":"Total deposits","Trade":"Trade","Trade Route":"Trade Route","Trading":"Trading","Transaction Settings":"Transaction Settings","Transaction Submitted":"Transaction Submitted","Transaction completed in":"Transaction completed in","Transaction deadline":"Transaction deadline","Transaction pending":"Transaction pending","Transaction rejected.":"Transaction rejected.","Transaction submitted":"Transaction submitted","Transfer Token":"Transfer Token","Try Again":"Try Again","Try increasing your slippage tolerance.<0/>NOTE: Fee on transfer and rebase tokens are incompatible with GuildFX V3.":"Try increasing your slippage tolerance.<0/>NOTE: Fee on transfer and rebase tokens are incompatible with GuildFX V3.","Try increasing your slippage tolerance.<0/>NOTE: Fee on transfer and rebase tokens are incompatible with Uniswap V3.":"Try increasing your slippage tolerance.<0/>NOTE: Fee on transfer and rebase tokens are incompatible with Uniswap V3.","Turn On Expert Mode":"Turn On Expert Mode","UNI has arrived":"UNI has arrived","UNI tokens represent voting shares in GuildFX governance. You can vote on each proposal yourself or delegate your votes to a third party.":"UNI tokens represent voting shares in GuildFX governance. You can vote on each proposal yourself or delegate your votes to a third party.","UNI tokens represent voting shares in Uniswap governance. You can vote on each proposal yourself or delegate your votes to a third party.":"UNI tokens represent voting shares in Uniswap governance. You can vote on each proposal yourself or delegate your votes to a third party.","UNI {0}/{1} Burned":["UNI ",["0"],"/",["1"]," Burned"],"UNI-V2 LP tokens are required. Once you've added liquidity to the {0}-{1} pool you can stake your liquidity tokens on this page.":["UNI-V2 LP tokens are required. Once you've added liquidity to the ",["0"],"-",["1"]," pool you can stake your liquidity tokens on this page."],"UNI-V2 {0}-{1}":["UNI-V2 ",["0"],"-",["1"]],"Unclaimed UNI":"Unclaimed UNI","Unclaimed fees":"Unclaimed fees","Undetermined":"Undetermined","Unexpected error. Could not estimate gas for the swap.":"Unexpected error. Could not estimate gas for the swap.","Unexpected issue with estimating the gas. Please try again.":"Unexpected issue with estimating the gas. Please try again.","Uniswap Governance":"Uniswap Governance","Uniswap Labs' Terms of Service":"Uniswap Labs' Terms of Service","Uniswap available in: <0>{0}</0>":["Uniswap available in: <0>",["0"],"</0>"],"Uniswap governance is only available on Layer 1. Switch your network to Ethereum Mainnet to view Proposals and Vote.":"Uniswap governance is only available on Layer 1. Switch your network to Ethereum Mainnet to view Proposals and Vote.","Uniswap liquidity mining":"Uniswap liquidity mining","Uniswap migration contract↗":"Uniswap migration contract↗","Unknown Source":"Unknown Source","Unknown error{0}. Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3.":["Unknown error",["0"],". Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with GuildFX V3."],"Unknown error{0}. Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3.":["Unknown error",["0"],". Try increasing your slippage tolerance. Note: fee on transfer and rebase tokens are incompatible with Uniswap V3."],"Unlock Votes":"Unlock Votes","Unlock Voting":"Unlock Voting","Unlocking Votes":"Unlocking Votes","Unsupported Asset":"Unsupported Asset","Unsupported Assets":"Unsupported Assets","Untitled":"Untitled","Unwrap":"Unwrap","Unwrap <0/> to {0}":["Unwrap <0/> to ",["0"]],"Update Delegation":"Update Delegation","Update list":"Update list","Use the GuildFX Labs API to get faster quotes.":"Use the GuildFX Labs API to get faster quotes.","Use the Uniswap Labs API to get faster quotes.":"Use the Uniswap Labs API to get faster quotes.","User":"User","V2 is not available on Layer 2. Switch to Layer 1 Ethereum.":"V2 is not available on Layer 2. Switch to Layer 1 Ethereum.","V2 liquidity":"V2 liquidity","V3 {0} Price:":["V3 ",["0"]," Price:"],"View accrued fees and analytics<0>↗</0>":"View accrued fees and analytics<0>↗</0>","View list":"View list","View on Etherscan":"View on Etherscan","View on Explorer":"View on Explorer","View transaction on Explorer":"View transaction on Explorer","Vote":"Vote","Vote Against":"Vote Against","Vote For":"Vote For","Vote against proposal {proposalId}":["Vote against proposal ",["proposalId"]],"Vote against proposal {proposalKey}":["Vote against proposal ",["proposalKey"]],"Vote against proposal {proposalKey} with reason \"{0}\"":["Vote against proposal ",["proposalKey"]," with reason \"",["0"],"\""],"Vote for proposal {proposalId}":["Vote for proposal ",["proposalId"]],"Vote for proposal {proposalKey}":["Vote for proposal ",["proposalKey"]],"Vote for proposal {proposalKey} with reason \"{0}\"":["Vote for proposal ",["proposalKey"]," with reason \"",["0"],"\""],"Vote to abstain on proposal {proposalId}":["Vote to abstain on proposal ",["proposalId"]],"Vote to abstain on proposal {proposalKey}":["Vote to abstain on proposal ",["proposalKey"]],"Vote to abstain on proposal {proposalKey} with reason \"{0}\"":["Vote to abstain on proposal ",["proposalKey"]," with reason \"",["0"],"\""],"Voting ended {0}":["Voting ended ",["0"]],"Voting ends approximately {0}":["Voting ends approximately ",["0"]],"Voting starts approximately {0}":["Voting starts approximately ",["0"]],"Waiting For Confirmation":"Waiting For Confirmation","Wallet Address or ENS name":"Wallet Address or ENS name","Weekly Rewards":"Weekly Rewards","Welcome to team Unicorn :)":"Welcome to team Unicorn :)","When you claim without withdrawing your liquidity remains in the mining pool.":"When you claim without withdrawing your liquidity remains in the mining pool.","When you withdraw, the contract will automagically claim UNI on your behalf!":"When you withdraw, the contract will automagically claim UNI on your behalf!","When you withdraw, your UNI is claimed and your liquidity is removed from the mining pool.":"When you withdraw, your UNI is claimed and your liquidity is removed from the mining pool.","Withdraw":"Withdraw","Withdraw & Claim":"Withdraw & Claim","Withdraw deposited liquidity":"Withdraw deposited liquidity","Withdrawing {0} UNI-V2":["Withdrawing ",["0"]," UNI-V2"],"Withdrew UNI-V2!":"Withdrew UNI-V2!","Wrap":"Wrap","Wrap <0/> to {0}":["Wrap <0/> to ",["0"]],"Wrong Network":"Wrong Network","You already have an active or pending proposal":"You already have an active or pending proposal","You are creating a pool":"You are creating a pool","You are the first liquidity provider for this GuildFX V3 pool. Your liquidity will migrate at the current {0} price.":["You are the first liquidity provider for this GuildFX V3 pool. Your liquidity will migrate at the current ",["0"]," price."],"You are the first liquidity provider for this Uniswap V3 pool. Your liquidity will migrate at the current {0} price.":["You are the first liquidity provider for this Uniswap V3 pool. Your liquidity will migrate at the current ",["0"]," price."],"You are the first liquidity provider.":"You are the first liquidity provider.","You can either vote on each proposal yourself or delegate your votes to a third party.":"You can either vote on each proposal yourself or delegate your votes to a third party.","You can now trade {0}":["You can now trade ",["0"]],"You don't have enough votes to submit a proposal":"You don't have enough votes to submit a proposal","You don’t have liquidity in this pool yet.":"You don’t have liquidity in this pool yet.","You may have lost your network connection, or {label} might be down right now.":["You may have lost your network connection, or ",["label"]," might be down right now."],"You may have lost your network connection.":"You may have lost your network connection.","You might consider waiting until the network fees go down to complete this transaction.":"You might consider waiting until the network fees go down to complete this transaction.","You must connect an account.":"You must connect an account.","You must give the GuildFX smart contracts permission to use your {0}. You only have to do this once per token.":["You must give the GuildFX smart contracts permission to use your ",["0"],". You only have to do this once per token."],"You must give the Uniswap smart contracts permission to use your {0}. You only have to do this once per token.":["You must give the Uniswap smart contracts permission to use your ",["0"],". You only have to do this once per token."],"You must have {formattedProposalThreshold} votes to submit a proposal":["You must have ",["formattedProposalThreshold"]," votes to submit a proposal"],"You should only deposit liquidity into GuildFX V3 at a price you believe is correct. <0/>If the price seems incorrect, you can either make a swap to move the price or wait for someone else to do so.":"You should only deposit liquidity into GuildFX V3 at a price you believe is correct. <0/>If the price seems incorrect, you can either make a swap to move the price or wait for someone else to do so.","You should only deposit liquidity into Uniswap V3 at a price you believe is correct. <0/>If the price seems incorrect, you can either make a swap to move the price or wait for someone else to do so.":"You should only deposit liquidity into Uniswap V3 at a price you believe is correct. <0/>If the price seems incorrect, you can either make a swap to move the price or wait for someone else to do so.","You will also collect fees earned from this position.":"You will also collect fees earned from this position.","You will receive":"You will receive","You will receive at least {0} {1} or the transaction will revert.":["You will receive at least ",["0"]," ",["1"]," or the transaction will revert."],"You will send at most {0} {1} or the transaction will revert.":["You will send at most ",["0"]," ",["1"]," or the transaction will revert."],"Your V2 liquidity":"Your V2 liquidity","Your active V3 liquidity positions will appear here.":"Your active V3 liquidity positions will appear here.","Your liquidity deposits":"Your liquidity deposits","Your pool share:":"Your pool share:","Your position":"Your position","Your position has 0 liquidity, and is not earning fees.":"Your position has 0 liquidity, and is not earning fees.","Your position will appear here.":"Your position will appear here.","Your position will be 100% composed of {0} at this price":["Your position will be 100% composed of ",["0"]," at this price"],"Your position will be 100% {0} at this price.":["Your position will be 100% ",["0"]," at this price."],"Your position will not earn fees or be used in trades until the market price moves into your range.":"Your position will not earn fees or be used in trades until the market price moves into your range.","Your positions":"Your positions","Your rate":"Your rate","Your total pool tokens:":"Your total pool tokens:","Your transaction cost will be much higher as it includes the gas to create the pool.":"Your transaction cost will be much higher as it includes the gas to create the pool.","Your transaction may be frontrun":"Your transaction may be frontrun","Your transaction may fail":"Your transaction may fail","Your transaction will revert if it has been pending for longer than this period of time.":"Your transaction will revert if it has been pending for longer than this period of time.","Your transaction will revert if it is pending for more than this period of time.":"Your transaction will revert if it is pending for more than this period of time.","Your transaction will revert if the price changes unfavorably by more than this percentage.":"Your transaction will revert if the price changes unfavorably by more than this percentage.","Your transactions will appear here...":"Your transactions will appear here...","Your unclaimed UNI":"Your unclaimed UNI","after slippage":"after slippage","confirm":"confirm","for {0}":["for ",["0"]],"gwei":"gwei","has socks emoji":"has socks emoji","here.":"here.","https:// or ipfs:// or ENS name":"https:// or ipfs:// or ENS name","minutes":"minutes","via {0}":["via ",["0"]],"via {0} token list":["via ",["0"]," token list"],"{0, plural, one {Import token} other {Import tokens}}":[["0","plural",{one:"Import token",other:"Import tokens"}]],"{0}":[["0"]],"{0} %":[["0"]," %"],"{0} <0/> per <1/>":[["0"]," <0/> per <1/>"],"{0} Custom Tokens":[["0"]," Custom Tokens"],"{0} Deposited":[["0"]," Deposited"],"{0} ETH":[["0"]," ETH"],"{0} Fees Earned:":[["0"]," Fees Earned:"],"{0} Pending":[["0"]," Pending"],"{0} UNI":[["0"]," UNI"],"{0} UNI / week":[["0"]," UNI / week"],"{0} UNI-V2":[["0"]," UNI-V2"],"{0} UNI-V2 LP tokens available":[["0"]," UNI-V2 LP tokens available"],"{0} Votes":[["0"]," Votes"],"{0} per {1}":[["0"]," per ",["1"]],"{0} tokens":[["0"]," tokens"],"{0} {1} Price:":[["0"]," ",["1"]," Price:"],"{0} {nativeCurrencySymbol}":[["0"]," ",["nativeCurrencySymbol"]],"{0} • Added by user":[["0"]," • Added by user"],"{0}%":[["0"],"%"],"{0}% fee tier":[["0"],"% fee tier"],"{0}% pool":[["0"],"% pool"],"{0}% select":[["0"],"% select"],"{0}-{1} Liquidity Mining":[["0"],"-",["1"]," Liquidity Mining"],"{0}/{1} LP NFT":[["0"],"/",["1"]," LP NFT"],"{0}/{1} LP Tokens":[["0"],"/",["1"]," LP Tokens"],"{SOCKS_AMOUNT} UNI":[["SOCKS_AMOUNT"]," UNI"],"{USER_AMOUNT} UNI":[["USER_AMOUNT"]," UNI"],"{activeTokensOnThisChain} tokens":[["activeTokensOnThisChain"]," tokens"],"{integrator} fee":[["integrator"]," fee"],"{label} token bridge":[["label"]," token bridge"],"{min}m {sec}s":[["min"],"m ",["sec"],"s"],"{percentForSlider}%":[["percentForSlider"],"%"],"{sec}s":[["sec"],"s"],"{tokenB} per {tokenA}":[["tokenB"]," per ",["tokenA"]],"← Back to Pools Overview":"← Back to Pools Overview"}};

            var enUS$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), enUS, {
                        'default': enUS
            }));

            const DEFAULT_LOCALE = 'en-US';
            const DEFAULT_CATALOG = enUS$1;

            function a(n, ord) {
              if (ord) return 'other';
              return n == 1 ? 'one' : 'other';
            }
            function c(n, ord) {
              var s = String(n).split('.'), v0 = !s[1];
              if (ord) return 'other';
              return n == 1 && v0 ? 'one' : 'other';
            }
            function d(n, ord) {
              return 'other';
            }
            const af = a;
            function ar(n, ord) {
              var s = String(n).split('.'), t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);
              if (ord) return 'other';
              return n == 0 ? 'zero'
                : n == 1 ? 'one'
                : n == 2 ? 'two'
                : (n100 >= 3 && n100 <= 10) ? 'few'
                : (n100 >= 11 && n100 <= 99) ? 'many'
                : 'other';
            }
            function ca(n, ord) {
              var s = String(n).split('.'), v0 = !s[1];
              if (ord) return (n == 1 || n == 3) ? 'one'
                : n == 2 ? 'two'
                : n == 4 ? 'few'
                : 'other';
              return n == 1 && v0 ? 'one' : 'other';
            }
            function cs(n, ord) {
              var s = String(n).split('.'), i = s[0], v0 = !s[1];
              if (ord) return 'other';
              return n == 1 && v0 ? 'one'
                : (i >= 2 && i <= 4) && v0 ? 'few'
                : !v0 ? 'many'
                : 'other';
            }
            function da(n, ord) {
              var s = String(n).split('.'), i = s[0], t0 = Number(s[0]) == n;
              if (ord) return 'other';
              return n == 1 || !t0 && (i == 0 || i == 1) ? 'one' : 'other';
            }
            const de = c;
            const el = a;
            function en(n, ord) {
              var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
              if (ord) return n10 == 1 && n100 != 11 ? 'one'
                : n10 == 2 && n100 != 12 ? 'two'
                : n10 == 3 && n100 != 13 ? 'few'
                : 'other';
              return n == 1 && v0 ? 'one' : 'other';
            }
            const es = a;
            const fi = c;
            function fr(n, ord) {
              if (ord) return n == 1 ? 'one' : 'other';
              return n >= 0 && n < 2 ? 'one' : 'other';
            }
            function he(n, ord) {
              var s = String(n).split('.'), i = s[0], v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1);
              if (ord) return 'other';
              return n == 1 && v0 ? 'one'
                : i == 2 && v0 ? 'two'
                : v0 && (n < 0 || n > 10) && t0 && n10 == 0 ? 'many'
                : 'other';
            }
            function hu(n, ord) {
              if (ord) return (n == 1 || n == 5) ? 'one' : 'other';
              return n == 1 ? 'one' : 'other';
            }
            const id = d;
            function it(n, ord) {
              var s = String(n).split('.'), v0 = !s[1];
              if (ord) return (n == 11 || n == 8 || n == 80 || n == 800) ? 'many' : 'other';
              return n == 1 && v0 ? 'one' : 'other';
            }
            const ja = d;
            const ko = d;
            const nl = c;
            const no = a;
            function pl(n, ord) {
              var s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2);
              if (ord) return 'other';
              return n == 1 && v0 ? 'one'
                : v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14) ? 'few'
                : v0 && i != 1 && (i10 == 0 || i10 == 1) || v0 && (i10 >= 5 && i10 <= 9) || v0 && (i100 >= 12 && i100 <= 14) ? 'many'
                : 'other';
            }
            function pt(n, ord) {
              var s = String(n).split('.'), i = s[0];
              if (ord) return 'other';
              return (i == 0 || i == 1) ? 'one' : 'other';
            }
            function ro(n, ord) {
              var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n100 = t0 && s[0].slice(-2);
              if (ord) return n == 1 ? 'one' : 'other';
              return n == 1 && v0 ? 'one'
                : !v0 || n == 0 || (n100 >= 2 && n100 <= 19) ? 'few'
                : 'other';
            }
            function ru(n, ord) {
              var s = String(n).split('.'), i = s[0], v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2);
              if (ord) return 'other';
              return v0 && i10 == 1 && i100 != 11 ? 'one'
                : v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14) ? 'few'
                : v0 && i10 == 0 || v0 && (i10 >= 5 && i10 <= 9) || v0 && (i100 >= 11 && i100 <= 14) ? 'many'
                : 'other';
            }
            function sr(n, ord) {
              var s = String(n).split('.'), i = s[0], f = s[1] || '', v0 = !s[1], i10 = i.slice(-1), i100 = i.slice(-2), f10 = f.slice(-1), f100 = f.slice(-2);
              if (ord) return 'other';
              return v0 && i10 == 1 && i100 != 11 || f10 == 1 && f100 != 11 ? 'one'
                : v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14) || (f10 >= 2 && f10 <= 4) && (f100 < 12 || f100 > 14) ? 'few'
                : 'other';
            }
            function sv(n, ord) {
              var s = String(n).split('.'), v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2);
              if (ord) return (n10 == 1 || n10 == 2) && n100 != 11 && n100 != 12 ? 'one' : 'other';
              return n == 1 && v0 ? 'one' : 'other';
            }
            const sw = c;
            const tr = a;
            function uk(n, ord) {
              var s = String(n).split('.'), i = s[0], v0 = !s[1], t0 = Number(s[0]) == n, n10 = t0 && s[0].slice(-1), n100 = t0 && s[0].slice(-2), i10 = i.slice(-1), i100 = i.slice(-2);
              if (ord) return n10 == 3 && n100 != 13 ? 'few' : 'other';
              return v0 && i10 == 1 && i100 != 11 ? 'one'
                : v0 && (i10 >= 2 && i10 <= 4) && (i100 < 12 || i100 > 14) ? 'few'
                : v0 && i10 == 0 || v0 && (i10 >= 5 && i10 <= 9) || v0 && (i100 >= 11 && i100 <= 14) ? 'many'
                : 'other';
            }
            function vi(n, ord) {
              if (ord) return n == 1 ? 'one' : 'other';
              return 'other';
            }
            const zh = d;

            const plurals = {
                'af-ZA': af,
                'ar-SA': ar,
                'ca-ES': ca,
                'cs-CZ': cs,
                'da-DK': da,
                'de-DE': de,
                'el-GR': el,
                'en-US': en,
                'es-ES': es,
                'fi-FI': fi,
                'fr-FR': fr,
                'he-IL': he,
                'hu-HU': hu,
                'id-ID': id,
                'it-IT': it,
                'ja-JP': ja,
                'ko-KR': ko,
                'nl-NL': nl,
                'no-NO': no,
                'pl-PL': pl,
                'pt-BR': pt,
                'pt-PT': pt,
                'ro-RO': ro,
                'ru-RU': ru,
                'sr-SP': sr,
                'sv-SE': sv,
                'sw-TZ': sw,
                'tr-TR': tr,
                'uk-UA': uk,
                'vi-VN': vi,
                'zh-CN': zh,
                'zh-TW': zh,
                pseudo: en,
            };
            async function dynamicActivate(locale) {
                i18n.loadLocaleData(locale, { plurals: () => plurals[locale] });
                // There are no default messages in production; instead, bundle the default to save a network request:
                // see https://github.com/lingui/js-lingui/issues/388#issuecomment-497779030
                const catalog = locale === DEFAULT_LOCALE ? DEFAULT_CATALOG : await import(`locales/${locale}`);
                i18n.load(locale, catalog.messages);
                i18n.activate(locale);
            }
            function Provider({ locale, forceRenderAfterLocaleChange = true, onActivate, children }) {
                React.useEffect(() => {
                    dynamicActivate(locale)
                        .then(() => onActivate?.(locale))
                        .catch((error) => {
                        console.error('Failed to activate locale', locale, error);
                    });
                }, [locale, onActivate]);
                return (jsxRuntime.exports.jsx(I18nProvider, Object.assign({ forceRenderOnLocaleChange: forceRenderAfterLocaleChange, i18n: i18n }, { children: children }), void 0));
            }

            const injectSwap = () => {
                const targetInjectionPoint = document.getElementById('app');
                ReactDOM.render(jsxRuntime.exports.jsx(React__default['default'].StrictMode, { children: jsxRuntime.exports.jsx(Provider, Object.assign({ locale: DEFAULT_LOCALE }, { children: jsxRuntime.exports.jsx(ThemeProvider, Object.assign({ theme: defaultTheme }, { children: jsxRuntime.exports.jsx(CrowdSale, {}, void 0) }), void 0) }), void 0) }, void 0), targetInjectionPoint);
            };

            (() => injectSwap())();

            var uri_all = {exports: {}};

            /** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */

            (function (module, exports) {
            (function (global, factory) {
            	factory(exports) ;
            }(commonjsGlobal, (function (exports) {
            function merge() {
                for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
                    sets[_key] = arguments[_key];
                }

                if (sets.length > 1) {
                    sets[0] = sets[0].slice(0, -1);
                    var xl = sets.length - 1;
                    for (var x = 1; x < xl; ++x) {
                        sets[x] = sets[x].slice(1, -1);
                    }
                    sets[xl] = sets[xl].slice(1);
                    return sets.join('');
                } else {
                    return sets[0];
                }
            }
            function subexp(str) {
                return "(?:" + str + ")";
            }
            function typeOf(o) {
                return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
            }
            function toUpperCase(str) {
                return str.toUpperCase();
            }
            function toArray(obj) {
                return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
            }
            function assign(target, source) {
                var obj = target;
                if (source) {
                    for (var key in source) {
                        obj[key] = source[key];
                    }
                }
                return obj;
            }

            function buildExps(isIRI) {
                var ALPHA$$ = "[A-Za-z]",
                    DIGIT$$ = "[0-9]",
                    HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
                    PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
                    //expanded
                GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
                    SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
                    RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
                    UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
                    //subset, excludes bidi control characters
                IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
                    //subset
                UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$);
                    subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*");
                    subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*");
                    var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
                    //relaxed parsing rules
                IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
                    H16$ = subexp(HEXDIG$$ + "{1,4}"),
                    LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
                    IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
                    //                           6( h16 ":" ) ls32
                IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
                    //                      "::" 5( h16 ":" ) ls32
                IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
                    //[               h16 ] "::" 4( h16 ":" ) ls32
                IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
                    //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
                IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
                    //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
                IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
                    //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
                IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
                    //[ *4( h16 ":" ) h16 ] "::"              ls32
                IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
                    //[ *5( h16 ":" ) h16 ] "::"              h16
                IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
                    //[ *6( h16 ":" ) h16 ] "::"
                IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
                    ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+");
                    //RFC 6874, with relaxed parsing rules
                subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+");
                    //RFC 6874
                subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*");
                    var PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]"));
                    subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+");
                    subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
                return {
                    NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
                    NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
                    NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
                    ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
                    UNRESERVED: new RegExp(UNRESERVED$$, "g"),
                    OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
                    PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
                    IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
                    IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
                };
            }
            var URI_PROTOCOL = buildExps(false);

            var IRI_PROTOCOL = buildExps(true);

            var slicedToArray = function () {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;

                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);

                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }

                return _arr;
              }

              return function (arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();













            var toConsumableArray = function (arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

                return arr2;
              } else {
                return Array.from(arr);
              }
            };

            /** Highest positive signed 32-bit float value */

            var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

            /** Bootstring parameters */
            var base = 36;
            var tMin = 1;
            var tMax = 26;
            var skew = 38;
            var damp = 700;
            var initialBias = 72;
            var initialN = 128; // 0x80
            var delimiter = '-'; // '\x2D'

            /** Regular expressions */
            var regexPunycode = /^xn--/;
            var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
            var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

            /** Error messages */
            var errors = {
            	'overflow': 'Overflow: input needs wider integers to process',
            	'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            	'invalid-input': 'Invalid input'
            };

            /** Convenience shortcuts */
            var baseMinusTMin = base - tMin;
            var floor = Math.floor;
            var stringFromCharCode = String.fromCharCode;

            /*--------------------------------------------------------------------------*/

            /**
             * A generic error utility function.
             * @private
             * @param {String} type The error type.
             * @returns {Error} Throws a `RangeError` with the applicable error message.
             */
            function error$1(type) {
            	throw new RangeError(errors[type]);
            }

            /**
             * A generic `Array#map` utility function.
             * @private
             * @param {Array} array The array to iterate over.
             * @param {Function} callback The function that gets called for every array
             * item.
             * @returns {Array} A new array of values returned by the callback function.
             */
            function map(array, fn) {
            	var result = [];
            	var length = array.length;
            	while (length--) {
            		result[length] = fn(array[length]);
            	}
            	return result;
            }

            /**
             * A simple `Array#map`-like wrapper to work with domain name strings or email
             * addresses.
             * @private
             * @param {String} domain The domain name or email address.
             * @param {Function} callback The function that gets called for every
             * character.
             * @returns {Array} A new string of characters returned by the callback
             * function.
             */
            function mapDomain(string, fn) {
            	var parts = string.split('@');
            	var result = '';
            	if (parts.length > 1) {
            		// In email addresses, only the domain name should be punycoded. Leave
            		// the local part (i.e. everything up to `@`) intact.
            		result = parts[0] + '@';
            		string = parts[1];
            	}
            	// Avoid `split(regex)` for IE8 compatibility. See #17.
            	string = string.replace(regexSeparators, '\x2E');
            	var labels = string.split('.');
            	var encoded = map(labels, fn).join('.');
            	return result + encoded;
            }

            /**
             * Creates an array containing the numeric code points of each Unicode
             * character in the string. While JavaScript uses UCS-2 internally,
             * this function will convert a pair of surrogate halves (each of which
             * UCS-2 exposes as separate characters) into a single code point,
             * matching UTF-16.
             * @see `punycode.ucs2.encode`
             * @see <https://mathiasbynens.be/notes/javascript-encoding>
             * @memberOf punycode.ucs2
             * @name decode
             * @param {String} string The Unicode input string (UCS-2).
             * @returns {Array} The new array of code points.
             */
            function ucs2decode(string) {
            	var output = [];
            	var counter = 0;
            	var length = string.length;
            	while (counter < length) {
            		var value = string.charCodeAt(counter++);
            		if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            			// It's a high surrogate, and there is a next character.
            			var extra = string.charCodeAt(counter++);
            			if ((extra & 0xFC00) == 0xDC00) {
            				// Low surrogate.
            				output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            			} else {
            				// It's an unmatched surrogate; only append this code unit, in case the
            				// next code unit is the high surrogate of a surrogate pair.
            				output.push(value);
            				counter--;
            			}
            		} else {
            			output.push(value);
            		}
            	}
            	return output;
            }

            /**
             * Creates a string based on an array of numeric code points.
             * @see `punycode.ucs2.decode`
             * @memberOf punycode.ucs2
             * @name encode
             * @param {Array} codePoints The array of numeric code points.
             * @returns {String} The new Unicode string (UCS-2).
             */
            var ucs2encode = function ucs2encode(array) {
            	return String.fromCodePoint.apply(String, toConsumableArray(array));
            };

            /**
             * Converts a basic code point into a digit/integer.
             * @see `digitToBasic()`
             * @private
             * @param {Number} codePoint The basic numeric code point value.
             * @returns {Number} The numeric value of a basic code point (for use in
             * representing integers) in the range `0` to `base - 1`, or `base` if
             * the code point does not represent a value.
             */
            var basicToDigit = function basicToDigit(codePoint) {
            	if (codePoint - 0x30 < 0x0A) {
            		return codePoint - 0x16;
            	}
            	if (codePoint - 0x41 < 0x1A) {
            		return codePoint - 0x41;
            	}
            	if (codePoint - 0x61 < 0x1A) {
            		return codePoint - 0x61;
            	}
            	return base;
            };

            /**
             * Converts a digit/integer into a basic code point.
             * @see `basicToDigit()`
             * @private
             * @param {Number} digit The numeric value of a basic code point.
             * @returns {Number} The basic code point whose value (when used for
             * representing integers) is `digit`, which needs to be in the range
             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
             * used; else, the lowercase form is used. The behavior is undefined
             * if `flag` is non-zero and `digit` has no uppercase form.
             */
            var digitToBasic = function digitToBasic(digit, flag) {
            	//  0..25 map to ASCII a..z or A..Z
            	// 26..35 map to ASCII 0..9
            	return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
            };

            /**
             * Bias adaptation function as per section 3.4 of RFC 3492.
             * https://tools.ietf.org/html/rfc3492#section-3.4
             * @private
             */
            var adapt = function adapt(delta, numPoints, firstTime) {
            	var k = 0;
            	delta = firstTime ? floor(delta / damp) : delta >> 1;
            	delta += floor(delta / numPoints);
            	for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
            		delta = floor(delta / baseMinusTMin);
            	}
            	return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
            };

            /**
             * Converts a Punycode string of ASCII-only symbols to a string of Unicode
             * symbols.
             * @memberOf punycode
             * @param {String} input The Punycode string of ASCII-only symbols.
             * @returns {String} The resulting string of Unicode symbols.
             */
            var decode = function decode(input) {
            	// Don't use UCS-2.
            	var output = [];
            	var inputLength = input.length;
            	var i = 0;
            	var n = initialN;
            	var bias = initialBias;

            	// Handle the basic code points: let `basic` be the number of input code
            	// points before the last delimiter, or `0` if there is none, then copy
            	// the first basic code points to the output.

            	var basic = input.lastIndexOf(delimiter);
            	if (basic < 0) {
            		basic = 0;
            	}

            	for (var j = 0; j < basic; ++j) {
            		// if it's not a basic code point
            		if (input.charCodeAt(j) >= 0x80) {
            			error$1('not-basic');
            		}
            		output.push(input.charCodeAt(j));
            	}

            	// Main decoding loop: start just after the last delimiter if any basic code
            	// points were copied; start at the beginning otherwise.

            	for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{

            		// `index` is the index of the next character to be consumed.
            		// Decode a generalized variable-length integer into `delta`,
            		// which gets added to `i`. The overflow checking is easier
            		// if we increase `i` as we go, then subtract off its starting
            		// value at the end to obtain `delta`.
            		var oldi = i;
            		for (var w = 1, k = base;; /* no condition */k += base) {

            			if (index >= inputLength) {
            				error$1('invalid-input');
            			}

            			var digit = basicToDigit(input.charCodeAt(index++));

            			if (digit >= base || digit > floor((maxInt - i) / w)) {
            				error$1('overflow');
            			}

            			i += digit * w;
            			var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            			if (digit < t) {
            				break;
            			}

            			var baseMinusT = base - t;
            			if (w > floor(maxInt / baseMinusT)) {
            				error$1('overflow');
            			}

            			w *= baseMinusT;
            		}

            		var out = output.length + 1;
            		bias = adapt(i - oldi, out, oldi == 0);

            		// `i` was supposed to wrap around from `out` to `0`,
            		// incrementing `n` each time, so we'll fix that now:
            		if (floor(i / out) > maxInt - n) {
            			error$1('overflow');
            		}

            		n += floor(i / out);
            		i %= out;

            		// Insert `n` at position `i` of the output.
            		output.splice(i++, 0, n);
            	}

            	return String.fromCodePoint.apply(String, output);
            };

            /**
             * Converts a string of Unicode symbols (e.g. a domain name label) to a
             * Punycode string of ASCII-only symbols.
             * @memberOf punycode
             * @param {String} input The string of Unicode symbols.
             * @returns {String} The resulting Punycode string of ASCII-only symbols.
             */
            var encode = function encode(input) {
            	var output = [];

            	// Convert the input in UCS-2 to an array of Unicode code points.
            	input = ucs2decode(input);

            	// Cache the length.
            	var inputLength = input.length;

            	// Initialize the state.
            	var n = initialN;
            	var delta = 0;
            	var bias = initialBias;

            	// Handle the basic code points.
            	var _iteratorNormalCompletion = true;
            	var _didIteratorError = false;
            	var _iteratorError = undefined;

            	try {
            		for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            			var _currentValue2 = _step.value;

            			if (_currentValue2 < 0x80) {
            				output.push(stringFromCharCode(_currentValue2));
            			}
            		}
            	} catch (err) {
            		_didIteratorError = true;
            		_iteratorError = err;
            	} finally {
            		try {
            			if (!_iteratorNormalCompletion && _iterator.return) {
            				_iterator.return();
            			}
            		} finally {
            			if (_didIteratorError) {
            				throw _iteratorError;
            			}
            		}
            	}

            	var basicLength = output.length;
            	var handledCPCount = basicLength;

            	// `handledCPCount` is the number of code points that have been handled;
            	// `basicLength` is the number of basic code points.

            	// Finish the basic string with a delimiter unless it's empty.
            	if (basicLength) {
            		output.push(delimiter);
            	}

            	// Main encoding loop:
            	while (handledCPCount < inputLength) {

            		// All non-basic code points < n have been handled already. Find the next
            		// larger one:
            		var m = maxInt;
            		var _iteratorNormalCompletion2 = true;
            		var _didIteratorError2 = false;
            		var _iteratorError2 = undefined;

            		try {
            			for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            				var currentValue = _step2.value;

            				if (currentValue >= n && currentValue < m) {
            					m = currentValue;
            				}
            			}

            			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            			// but guard against overflow.
            		} catch (err) {
            			_didIteratorError2 = true;
            			_iteratorError2 = err;
            		} finally {
            			try {
            				if (!_iteratorNormalCompletion2 && _iterator2.return) {
            					_iterator2.return();
            				}
            			} finally {
            				if (_didIteratorError2) {
            					throw _iteratorError2;
            				}
            			}
            		}

            		var handledCPCountPlusOne = handledCPCount + 1;
            		if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            			error$1('overflow');
            		}

            		delta += (m - n) * handledCPCountPlusOne;
            		n = m;

            		var _iteratorNormalCompletion3 = true;
            		var _didIteratorError3 = false;
            		var _iteratorError3 = undefined;

            		try {
            			for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            				var _currentValue = _step3.value;

            				if (_currentValue < n && ++delta > maxInt) {
            					error$1('overflow');
            				}
            				if (_currentValue == n) {
            					// Represent delta as a generalized variable-length integer.
            					var q = delta;
            					for (var k = base;; /* no condition */k += base) {
            						var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            						if (q < t) {
            							break;
            						}
            						var qMinusT = q - t;
            						var baseMinusT = base - t;
            						output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            						q = floor(qMinusT / baseMinusT);
            					}

            					output.push(stringFromCharCode(digitToBasic(q, 0)));
            					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
            					delta = 0;
            					++handledCPCount;
            				}
            			}
            		} catch (err) {
            			_didIteratorError3 = true;
            			_iteratorError3 = err;
            		} finally {
            			try {
            				if (!_iteratorNormalCompletion3 && _iterator3.return) {
            					_iterator3.return();
            				}
            			} finally {
            				if (_didIteratorError3) {
            					throw _iteratorError3;
            				}
            			}
            		}

            		++delta;
            		++n;
            	}
            	return output.join('');
            };

            /**
             * Converts a Punycode string representing a domain name or an email address
             * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
             * it doesn't matter if you call it on a string that has already been
             * converted to Unicode.
             * @memberOf punycode
             * @param {String} input The Punycoded domain name or email address to
             * convert to Unicode.
             * @returns {String} The Unicode representation of the given Punycode
             * string.
             */
            var toUnicode = function toUnicode(input) {
            	return mapDomain(input, function (string) {
            		return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
            	});
            };

            /**
             * Converts a Unicode string representing a domain name or an email address to
             * Punycode. Only the non-ASCII parts of the domain name will be converted,
             * i.e. it doesn't matter if you call it with a domain that's already in
             * ASCII.
             * @memberOf punycode
             * @param {String} input The domain name or email address to convert, as a
             * Unicode string.
             * @returns {String} The Punycode representation of the given domain name or
             * email address.
             */
            var toASCII = function toASCII(input) {
            	return mapDomain(input, function (string) {
            		return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
            	});
            };

            /*--------------------------------------------------------------------------*/

            /** Define the public API */
            var punycode = {
            	/**
              * A string representing the current Punycode.js version number.
              * @memberOf punycode
              * @type String
              */
            	'version': '2.1.0',
            	/**
              * An object of methods to convert from JavaScript's internal character
              * representation (UCS-2) to Unicode code points, and back.
              * @see <https://mathiasbynens.be/notes/javascript-encoding>
              * @memberOf punycode
              * @type Object
              */
            	'ucs2': {
            		'decode': ucs2decode,
            		'encode': ucs2encode
            	},
            	'decode': decode,
            	'encode': encode,
            	'toASCII': toASCII,
            	'toUnicode': toUnicode
            };

            /**
             * URI.js
             *
             * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
             * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
             * @see http://github.com/garycourt/uri-js
             */
            /**
             * Copyright 2011 Gary Court. All rights reserved.
             *
             * Redistribution and use in source and binary forms, with or without modification, are
             * permitted provided that the following conditions are met:
             *
             *    1. Redistributions of source code must retain the above copyright notice, this list of
             *       conditions and the following disclaimer.
             *
             *    2. Redistributions in binary form must reproduce the above copyright notice, this list
             *       of conditions and the following disclaimer in the documentation and/or other materials
             *       provided with the distribution.
             *
             * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
             * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
             * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
             * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
             * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
             * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
             * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
             * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
             * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
             *
             * The views and conclusions contained in the software and documentation are those of the
             * authors and should not be interpreted as representing official policies, either expressed
             * or implied, of Gary Court.
             */
            var SCHEMES = {};
            function pctEncChar(chr) {
                var c = chr.charCodeAt(0);
                var e = void 0;
                if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
                return e;
            }
            function pctDecChars(str) {
                var newStr = "";
                var i = 0;
                var il = str.length;
                while (i < il) {
                    var c = parseInt(str.substr(i + 1, 2), 16);
                    if (c < 128) {
                        newStr += String.fromCharCode(c);
                        i += 3;
                    } else if (c >= 194 && c < 224) {
                        if (il - i >= 6) {
                            var c2 = parseInt(str.substr(i + 4, 2), 16);
                            newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
                        } else {
                            newStr += str.substr(i, 6);
                        }
                        i += 6;
                    } else if (c >= 224) {
                        if (il - i >= 9) {
                            var _c = parseInt(str.substr(i + 4, 2), 16);
                            var c3 = parseInt(str.substr(i + 7, 2), 16);
                            newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
                        } else {
                            newStr += str.substr(i, 9);
                        }
                        i += 9;
                    } else {
                        newStr += str.substr(i, 3);
                        i += 3;
                    }
                }
                return newStr;
            }
            function _normalizeComponentEncoding(components, protocol) {
                function decodeUnreserved(str) {
                    var decStr = pctDecChars(str);
                    return !decStr.match(protocol.UNRESERVED) ? str : decStr;
                }
                if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
                if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
                return components;
            }

            function _stripLeadingZeros(str) {
                return str.replace(/^0*(.*)/, "$1") || "0";
            }
            function _normalizeIPv4(host, protocol) {
                var matches = host.match(protocol.IPV4ADDRESS) || [];

                var _matches = slicedToArray(matches, 2),
                    address = _matches[1];

                if (address) {
                    return address.split(".").map(_stripLeadingZeros).join(".");
                } else {
                    return host;
                }
            }
            function _normalizeIPv6(host, protocol) {
                var matches = host.match(protocol.IPV6ADDRESS) || [];

                var _matches2 = slicedToArray(matches, 3),
                    address = _matches2[1],
                    zone = _matches2[2];

                if (address) {
                    var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
                        _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
                        last = _address$toLowerCase$2[0],
                        first = _address$toLowerCase$2[1];

                    var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
                    var lastFields = last.split(":").map(_stripLeadingZeros);
                    var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
                    var fieldCount = isLastFieldIPv4Address ? 7 : 8;
                    var lastFieldsStart = lastFields.length - fieldCount;
                    var fields = Array(fieldCount);
                    for (var x = 0; x < fieldCount; ++x) {
                        fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
                    }
                    if (isLastFieldIPv4Address) {
                        fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
                    }
                    var allZeroFields = fields.reduce(function (acc, field, index) {
                        if (!field || field === "0") {
                            var lastLongest = acc[acc.length - 1];
                            if (lastLongest && lastLongest.index + lastLongest.length === index) {
                                lastLongest.length++;
                            } else {
                                acc.push({ index: index, length: 1 });
                            }
                        }
                        return acc;
                    }, []);
                    var longestZeroFields = allZeroFields.sort(function (a, b) {
                        return b.length - a.length;
                    })[0];
                    var newHost = void 0;
                    if (longestZeroFields && longestZeroFields.length > 1) {
                        var newFirst = fields.slice(0, longestZeroFields.index);
                        var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
                        newHost = newFirst.join(":") + "::" + newLast.join(":");
                    } else {
                        newHost = fields.join(":");
                    }
                    if (zone) {
                        newHost += "%" + zone;
                    }
                    return newHost;
                } else {
                    return host;
                }
            }
            var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
            var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
            function parse(uriString) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                var components = {};
                var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
                if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
                var matches = uriString.match(URI_PARSE);
                if (matches) {
                    if (NO_MATCH_IS_UNDEFINED) {
                        //store each component
                        components.scheme = matches[1];
                        components.userinfo = matches[3];
                        components.host = matches[4];
                        components.port = parseInt(matches[5], 10);
                        components.path = matches[6] || "";
                        components.query = matches[7];
                        components.fragment = matches[8];
                        //fix port number
                        if (isNaN(components.port)) {
                            components.port = matches[5];
                        }
                    } else {
                        //IE FIX for improper RegExp matching
                        //store each component
                        components.scheme = matches[1] || undefined;
                        components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
                        components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
                        components.port = parseInt(matches[5], 10);
                        components.path = matches[6] || "";
                        components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
                        components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
                        //fix port number
                        if (isNaN(components.port)) {
                            components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
                        }
                    }
                    if (components.host) {
                        //normalize IP hosts
                        components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
                    }
                    //determine reference type
                    if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
                        components.reference = "same-document";
                    } else if (components.scheme === undefined) {
                        components.reference = "relative";
                    } else if (components.fragment === undefined) {
                        components.reference = "absolute";
                    } else {
                        components.reference = "uri";
                    }
                    //check for reference errors
                    if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
                        components.error = components.error || "URI is not a " + options.reference + " reference.";
                    }
                    //find scheme handler
                    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
                    //check if scheme can't handle IRIs
                    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
                        //if host component is a domain name
                        if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
                            //convert Unicode IDN -> ASCII IDN
                            try {
                                components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
                            } catch (e) {
                                components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
                            }
                        }
                        //convert IRI -> URI
                        _normalizeComponentEncoding(components, URI_PROTOCOL);
                    } else {
                        //normalize encodings
                        _normalizeComponentEncoding(components, protocol);
                    }
                    //perform scheme specific parsing
                    if (schemeHandler && schemeHandler.parse) {
                        schemeHandler.parse(components, options);
                    }
                } else {
                    components.error = components.error || "URI can not be parsed.";
                }
                return components;
            }

            function _recomposeAuthority(components, options) {
                var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
                var uriTokens = [];
                if (components.userinfo !== undefined) {
                    uriTokens.push(components.userinfo);
                    uriTokens.push("@");
                }
                if (components.host !== undefined) {
                    //normalize IP hosts, add brackets and escape zone separator for IPv6
                    uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
                        return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
                    }));
                }
                if (typeof components.port === "number" || typeof components.port === "string") {
                    uriTokens.push(":");
                    uriTokens.push(String(components.port));
                }
                return uriTokens.length ? uriTokens.join("") : undefined;
            }

            var RDS1 = /^\.\.?\//;
            var RDS2 = /^\/\.(\/|$)/;
            var RDS3 = /^\/\.\.(\/|$)/;
            var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
            function removeDotSegments(input) {
                var output = [];
                while (input.length) {
                    if (input.match(RDS1)) {
                        input = input.replace(RDS1, "");
                    } else if (input.match(RDS2)) {
                        input = input.replace(RDS2, "/");
                    } else if (input.match(RDS3)) {
                        input = input.replace(RDS3, "/");
                        output.pop();
                    } else if (input === "." || input === "..") {
                        input = "";
                    } else {
                        var im = input.match(RDS5);
                        if (im) {
                            var s = im[0];
                            input = input.slice(s.length);
                            output.push(s);
                        } else {
                            throw new Error("Unexpected dot segment condition");
                        }
                    }
                }
                return output.join("");
            }

            function serialize(components) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
                var uriTokens = [];
                //find scheme handler
                var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
                //perform scheme specific serialization
                if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
                if (components.host) {
                    //if host component is an IPv6 address
                    if (protocol.IPV6ADDRESS.test(components.host)) ;
                    //TODO: normalize IPv6 address as per RFC 5952

                    //if host component is a domain name
                    else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
                            //convert IDN via punycode
                            try {
                                components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
                            } catch (e) {
                                components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                            }
                        }
                }
                //normalize encoding
                _normalizeComponentEncoding(components, protocol);
                if (options.reference !== "suffix" && components.scheme) {
                    uriTokens.push(components.scheme);
                    uriTokens.push(":");
                }
                var authority = _recomposeAuthority(components, options);
                if (authority !== undefined) {
                    if (options.reference !== "suffix") {
                        uriTokens.push("//");
                    }
                    uriTokens.push(authority);
                    if (components.path && components.path.charAt(0) !== "/") {
                        uriTokens.push("/");
                    }
                }
                if (components.path !== undefined) {
                    var s = components.path;
                    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
                        s = removeDotSegments(s);
                    }
                    if (authority === undefined) {
                        s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
                    }
                    uriTokens.push(s);
                }
                if (components.query !== undefined) {
                    uriTokens.push("?");
                    uriTokens.push(components.query);
                }
                if (components.fragment !== undefined) {
                    uriTokens.push("#");
                    uriTokens.push(components.fragment);
                }
                return uriTokens.join(""); //merge tokens into a string
            }

            function resolveComponents(base, relative) {
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var skipNormalization = arguments[3];

                var target = {};
                if (!skipNormalization) {
                    base = parse(serialize(base, options), options); //normalize base components
                    relative = parse(serialize(relative, options), options); //normalize relative components
                }
                options = options || {};
                if (!options.tolerant && relative.scheme) {
                    target.scheme = relative.scheme;
                    //target.authority = relative.authority;
                    target.userinfo = relative.userinfo;
                    target.host = relative.host;
                    target.port = relative.port;
                    target.path = removeDotSegments(relative.path || "");
                    target.query = relative.query;
                } else {
                    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
                        //target.authority = relative.authority;
                        target.userinfo = relative.userinfo;
                        target.host = relative.host;
                        target.port = relative.port;
                        target.path = removeDotSegments(relative.path || "");
                        target.query = relative.query;
                    } else {
                        if (!relative.path) {
                            target.path = base.path;
                            if (relative.query !== undefined) {
                                target.query = relative.query;
                            } else {
                                target.query = base.query;
                            }
                        } else {
                            if (relative.path.charAt(0) === "/") {
                                target.path = removeDotSegments(relative.path);
                            } else {
                                if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
                                    target.path = "/" + relative.path;
                                } else if (!base.path) {
                                    target.path = relative.path;
                                } else {
                                    target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
                                }
                                target.path = removeDotSegments(target.path);
                            }
                            target.query = relative.query;
                        }
                        //target.authority = base.authority;
                        target.userinfo = base.userinfo;
                        target.host = base.host;
                        target.port = base.port;
                    }
                    target.scheme = base.scheme;
                }
                target.fragment = relative.fragment;
                return target;
            }

            function resolve(baseURI, relativeURI, options) {
                var schemelessOptions = assign({ scheme: 'null' }, options);
                return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
            }

            function normalize(uri, options) {
                if (typeof uri === "string") {
                    uri = serialize(parse(uri, options), options);
                } else if (typeOf(uri) === "object") {
                    uri = parse(serialize(uri, options), options);
                }
                return uri;
            }

            function equal(uriA, uriB, options) {
                if (typeof uriA === "string") {
                    uriA = serialize(parse(uriA, options), options);
                } else if (typeOf(uriA) === "object") {
                    uriA = serialize(uriA, options);
                }
                if (typeof uriB === "string") {
                    uriB = serialize(parse(uriB, options), options);
                } else if (typeOf(uriB) === "object") {
                    uriB = serialize(uriB, options);
                }
                return uriA === uriB;
            }

            function escapeComponent(str, options) {
                return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
            }

            function unescapeComponent(str, options) {
                return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
            }

            var handler = {
                scheme: "http",
                domainHost: true,
                parse: function parse(components, options) {
                    //report missing host
                    if (!components.host) {
                        components.error = components.error || "HTTP URIs must have a host.";
                    }
                    return components;
                },
                serialize: function serialize(components, options) {
                    var secure = String(components.scheme).toLowerCase() === "https";
                    //normalize the default port
                    if (components.port === (secure ? 443 : 80) || components.port === "") {
                        components.port = undefined;
                    }
                    //normalize the empty path
                    if (!components.path) {
                        components.path = "/";
                    }
                    //NOTE: We do not parse query strings for HTTP URIs
                    //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
                    //and not the HTTP spec.
                    return components;
                }
            };

            var handler$1 = {
                scheme: "https",
                domainHost: handler.domainHost,
                parse: handler.parse,
                serialize: handler.serialize
            };

            function isSecure(wsComponents) {
                return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
            }
            //RFC 6455
            var handler$2 = {
                scheme: "ws",
                domainHost: true,
                parse: function parse(components, options) {
                    var wsComponents = components;
                    //indicate if the secure flag is set
                    wsComponents.secure = isSecure(wsComponents);
                    //construct resouce name
                    wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
                    wsComponents.path = undefined;
                    wsComponents.query = undefined;
                    return wsComponents;
                },
                serialize: function serialize(wsComponents, options) {
                    //normalize the default port
                    if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
                        wsComponents.port = undefined;
                    }
                    //ensure scheme matches secure flag
                    if (typeof wsComponents.secure === 'boolean') {
                        wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
                        wsComponents.secure = undefined;
                    }
                    //reconstruct path from resource name
                    if (wsComponents.resourceName) {
                        var _wsComponents$resourc = wsComponents.resourceName.split('?'),
                            _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
                            path = _wsComponents$resourc2[0],
                            query = _wsComponents$resourc2[1];

                        wsComponents.path = path && path !== '/' ? path : undefined;
                        wsComponents.query = query;
                        wsComponents.resourceName = undefined;
                    }
                    //forbid fragment component
                    wsComponents.fragment = undefined;
                    return wsComponents;
                }
            };

            var handler$3 = {
                scheme: "wss",
                domainHost: handler$2.domainHost,
                parse: handler$2.parse,
                serialize: handler$2.serialize
            };

            var O = {};
            //RFC 3986
            var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ("\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
            var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
            var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
            //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
            //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
            //const WSP$$ = "[\\x20\\x09]";
            //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
            //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
            //const VCHAR$$ = "[\\x21-\\x7E]";
            //const WSP$$ = "[\\x20\\x09]";
            //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
            //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
            //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
            //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
            var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
            var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
            var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
            var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
            var UNRESERVED = new RegExp(UNRESERVED$$, "g");
            var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
            var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
            var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
            var NOT_HFVALUE = NOT_HFNAME;
            function decodeUnreserved(str) {
                var decStr = pctDecChars(str);
                return !decStr.match(UNRESERVED) ? str : decStr;
            }
            var handler$4 = {
                scheme: "mailto",
                parse: function parse$$1(components, options) {
                    var mailtoComponents = components;
                    var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
                    mailtoComponents.path = undefined;
                    if (mailtoComponents.query) {
                        var unknownHeaders = false;
                        var headers = {};
                        var hfields = mailtoComponents.query.split("&");
                        for (var x = 0, xl = hfields.length; x < xl; ++x) {
                            var hfield = hfields[x].split("=");
                            switch (hfield[0]) {
                                case "to":
                                    var toAddrs = hfield[1].split(",");
                                    for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
                                        to.push(toAddrs[_x]);
                                    }
                                    break;
                                case "subject":
                                    mailtoComponents.subject = unescapeComponent(hfield[1], options);
                                    break;
                                case "body":
                                    mailtoComponents.body = unescapeComponent(hfield[1], options);
                                    break;
                                default:
                                    unknownHeaders = true;
                                    headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                                    break;
                            }
                        }
                        if (unknownHeaders) mailtoComponents.headers = headers;
                    }
                    mailtoComponents.query = undefined;
                    for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
                        var addr = to[_x2].split("@");
                        addr[0] = unescapeComponent(addr[0]);
                        if (!options.unicodeSupport) {
                            //convert Unicode IDN -> ASCII IDN
                            try {
                                addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                            } catch (e) {
                                mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                            }
                        } else {
                            addr[1] = unescapeComponent(addr[1], options).toLowerCase();
                        }
                        to[_x2] = addr.join("@");
                    }
                    return mailtoComponents;
                },
                serialize: function serialize$$1(mailtoComponents, options) {
                    var components = mailtoComponents;
                    var to = toArray(mailtoComponents.to);
                    if (to) {
                        for (var x = 0, xl = to.length; x < xl; ++x) {
                            var toAddr = String(to[x]);
                            var atIdx = toAddr.lastIndexOf("@");
                            var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                            var domain = toAddr.slice(atIdx + 1);
                            //convert IDN via punycode
                            try {
                                domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
                            } catch (e) {
                                components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                            }
                            to[x] = localPart + "@" + domain;
                        }
                        components.path = to.join(",");
                    }
                    var headers = mailtoComponents.headers = mailtoComponents.headers || {};
                    if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
                    if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
                    var fields = [];
                    for (var name in headers) {
                        if (headers[name] !== O[name]) {
                            fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
                        }
                    }
                    if (fields.length) {
                        components.query = fields.join("&");
                    }
                    return components;
                }
            };

            var URN_PARSE = /^([^\:]+)\:(.*)/;
            //RFC 2141
            var handler$5 = {
                scheme: "urn",
                parse: function parse$$1(components, options) {
                    var matches = components.path && components.path.match(URN_PARSE);
                    var urnComponents = components;
                    if (matches) {
                        var scheme = options.scheme || urnComponents.scheme || "urn";
                        var nid = matches[1].toLowerCase();
                        var nss = matches[2];
                        var urnScheme = scheme + ":" + (options.nid || nid);
                        var schemeHandler = SCHEMES[urnScheme];
                        urnComponents.nid = nid;
                        urnComponents.nss = nss;
                        urnComponents.path = undefined;
                        if (schemeHandler) {
                            urnComponents = schemeHandler.parse(urnComponents, options);
                        }
                    } else {
                        urnComponents.error = urnComponents.error || "URN can not be parsed.";
                    }
                    return urnComponents;
                },
                serialize: function serialize$$1(urnComponents, options) {
                    var scheme = options.scheme || urnComponents.scheme || "urn";
                    var nid = urnComponents.nid;
                    var urnScheme = scheme + ":" + (options.nid || nid);
                    var schemeHandler = SCHEMES[urnScheme];
                    if (schemeHandler) {
                        urnComponents = schemeHandler.serialize(urnComponents, options);
                    }
                    var uriComponents = urnComponents;
                    var nss = urnComponents.nss;
                    uriComponents.path = (nid || options.nid) + ":" + nss;
                    return uriComponents;
                }
            };

            var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
            //RFC 4122
            var handler$6 = {
                scheme: "urn:uuid",
                parse: function parse(urnComponents, options) {
                    var uuidComponents = urnComponents;
                    uuidComponents.uuid = uuidComponents.nss;
                    uuidComponents.nss = undefined;
                    if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
                        uuidComponents.error = uuidComponents.error || "UUID is not valid.";
                    }
                    return uuidComponents;
                },
                serialize: function serialize(uuidComponents, options) {
                    var urnComponents = uuidComponents;
                    //normalize UUID
                    urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
                    return urnComponents;
                }
            };

            SCHEMES[handler.scheme] = handler;
            SCHEMES[handler$1.scheme] = handler$1;
            SCHEMES[handler$2.scheme] = handler$2;
            SCHEMES[handler$3.scheme] = handler$3;
            SCHEMES[handler$4.scheme] = handler$4;
            SCHEMES[handler$5.scheme] = handler$5;
            SCHEMES[handler$6.scheme] = handler$6;

            exports.SCHEMES = SCHEMES;
            exports.pctEncChar = pctEncChar;
            exports.pctDecChars = pctDecChars;
            exports.parse = parse;
            exports.removeDotSegments = removeDotSegments;
            exports.serialize = serialize;
            exports.resolveComponents = resolveComponents;
            exports.resolve = resolve;
            exports.normalize = normalize;
            exports.equal = equal;
            exports.escapeComponent = escapeComponent;
            exports.unescapeComponent = unescapeComponent;

            Object.defineProperty(exports, '__esModule', { value: true });

            })));

            }(uri_all, uri_all.exports));

            // do not edit .js files directly - edit src/index.jst



            var fastDeepEqual = function equal(a, b) {
              if (a === b) return true;

              if (a && b && typeof a == 'object' && typeof b == 'object') {
                if (a.constructor !== b.constructor) return false;

                var length, i, keys;
                if (Array.isArray(a)) {
                  length = a.length;
                  if (length != b.length) return false;
                  for (i = length; i-- !== 0;)
                    if (!equal(a[i], b[i])) return false;
                  return true;
                }



                if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
                if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
                if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

                keys = Object.keys(a);
                length = keys.length;
                if (length !== Object.keys(b).length) return false;

                for (i = length; i-- !== 0;)
                  if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

                for (i = length; i-- !== 0;) {
                  var key = keys[i];

                  if (!equal(a[key], b[key])) return false;
                }

                return true;
              }

              // true if both NaN, false otherwise
              return a!==a && b!==b;
            };

            // https://mathiasbynens.be/notes/javascript-encoding
            // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
            var ucs2length$1 = function ucs2length(str) {
              var length = 0
                , len = str.length
                , pos = 0
                , value;
              while (pos < len) {
                length++;
                value = str.charCodeAt(pos++);
                if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
                  // high surrogate, and there is a next character
                  value = str.charCodeAt(pos);
                  if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
                }
              }
              return length;
            };

            var util$5 = {
              copy: copy,
              checkDataType: checkDataType,
              checkDataTypes: checkDataTypes,
              coerceToTypes: coerceToTypes,
              toHash: toHash$1,
              getProperty: getProperty,
              escapeQuotes: escapeQuotes,
              equal: fastDeepEqual,
              ucs2length: ucs2length$1,
              varOccurences: varOccurences,
              varReplace: varReplace,
              schemaHasRules: schemaHasRules,
              schemaHasRulesExcept: schemaHasRulesExcept,
              schemaUnknownRules: schemaUnknownRules,
              toQuotedString: toQuotedString,
              getPathExpr: getPathExpr,
              getPath: getPath,
              getData: getData,
              unescapeFragment: unescapeFragment,
              unescapeJsonPointer: unescapeJsonPointer,
              escapeFragment: escapeFragment,
              escapeJsonPointer: escapeJsonPointer
            };


            function copy(o, to) {
              to = to || {};
              for (var key in o) to[key] = o[key];
              return to;
            }


            function checkDataType(dataType, data, strictNumbers, negate) {
              var EQUAL = negate ? ' !== ' : ' === '
                , AND = negate ? ' || ' : ' && '
                , OK = negate ? '!' : ''
                , NOT = negate ? '' : '!';
              switch (dataType) {
                case 'null': return data + EQUAL + 'null';
                case 'array': return OK + 'Array.isArray(' + data + ')';
                case 'object': return '(' + OK + data + AND +
                                      'typeof ' + data + EQUAL + '"object"' + AND +
                                      NOT + 'Array.isArray(' + data + '))';
                case 'integer': return '(typeof ' + data + EQUAL + '"number"' + AND +
                                       NOT + '(' + data + ' % 1)' +
                                       AND + data + EQUAL + data +
                                       (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';
                case 'number': return '(typeof ' + data + EQUAL + '"' + dataType + '"' +
                                      (strictNumbers ? (AND + OK + 'isFinite(' + data + ')') : '') + ')';
                default: return 'typeof ' + data + EQUAL + '"' + dataType + '"';
              }
            }


            function checkDataTypes(dataTypes, data, strictNumbers) {
              switch (dataTypes.length) {
                case 1: return checkDataType(dataTypes[0], data, strictNumbers, true);
                default:
                  var code = '';
                  var types = toHash$1(dataTypes);
                  if (types.array && types.object) {
                    code = types.null ? '(': '(!' + data + ' || ';
                    code += 'typeof ' + data + ' !== "object")';
                    delete types.null;
                    delete types.array;
                    delete types.object;
                  }
                  if (types.number) delete types.integer;
                  for (var t in types)
                    code += (code ? ' && ' : '' ) + checkDataType(t, data, strictNumbers, true);

                  return code;
              }
            }


            var COERCE_TO_TYPES = toHash$1([ 'string', 'number', 'integer', 'boolean', 'null' ]);
            function coerceToTypes(optionCoerceTypes, dataTypes) {
              if (Array.isArray(dataTypes)) {
                var types = [];
                for (var i=0; i<dataTypes.length; i++) {
                  var t = dataTypes[i];
                  if (COERCE_TO_TYPES[t]) types[types.length] = t;
                  else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
                }
                if (types.length) return types;
              } else if (COERCE_TO_TYPES[dataTypes]) {
                return [dataTypes];
              } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
                return ['array'];
              }
            }


            function toHash$1(arr) {
              var hash = {};
              for (var i=0; i<arr.length; i++) hash[arr[i]] = true;
              return hash;
            }


            var IDENTIFIER$1 = /^[a-z$_][a-z$_0-9]*$/i;
            var SINGLE_QUOTE = /'|\\/g;
            function getProperty(key) {
              return typeof key == 'number'
                      ? '[' + key + ']'
                      : IDENTIFIER$1.test(key)
                        ? '.' + key
                        : "['" + escapeQuotes(key) + "']";
            }


            function escapeQuotes(str) {
              return str.replace(SINGLE_QUOTE, '\\$&')
                        .replace(/\n/g, '\\n')
                        .replace(/\r/g, '\\r')
                        .replace(/\f/g, '\\f')
                        .replace(/\t/g, '\\t');
            }


            function varOccurences(str, dataVar) {
              dataVar += '[^0-9]';
              var matches = str.match(new RegExp(dataVar, 'g'));
              return matches ? matches.length : 0;
            }


            function varReplace(str, dataVar, expr) {
              dataVar += '([^0-9])';
              expr = expr.replace(/\$/g, '$$$$');
              return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
            }


            function schemaHasRules(schema, rules) {
              if (typeof schema == 'boolean') return !schema;
              for (var key in schema) if (rules[key]) return true;
            }


            function schemaHasRulesExcept(schema, rules, exceptKeyword) {
              if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';
              for (var key in schema) if (key != exceptKeyword && rules[key]) return true;
            }


            function schemaUnknownRules(schema, rules) {
              if (typeof schema == 'boolean') return;
              for (var key in schema) if (!rules[key]) return key;
            }


            function toQuotedString(str) {
              return '\'' + escapeQuotes(str) + '\'';
            }


            function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
              var path = jsonPointers // false by default
                          ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')')
                          : (isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'');
              return joinPaths(currentPath, path);
            }


            function getPath(currentPath, prop, jsonPointers) {
              var path = jsonPointers // false by default
                          ? toQuotedString('/' + escapeJsonPointer(prop))
                          : toQuotedString(getProperty(prop));
              return joinPaths(currentPath, path);
            }


            var JSON_POINTER$1 = /^\/(?:[^~]|~0|~1)*$/;
            var RELATIVE_JSON_POINTER$1 = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
            function getData($data, lvl, paths) {
              var up, jsonPointer, data, matches;
              if ($data === '') return 'rootData';
              if ($data[0] == '/') {
                if (!JSON_POINTER$1.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
                jsonPointer = $data;
                data = 'rootData';
              } else {
                matches = $data.match(RELATIVE_JSON_POINTER$1);
                if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
                up = +matches[1];
                jsonPointer = matches[2];
                if (jsonPointer == '#') {
                  if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
                  return paths[lvl - up];
                }

                if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
                data = 'data' + ((lvl - up) || '');
                if (!jsonPointer) return data;
              }

              var expr = data;
              var segments = jsonPointer.split('/');
              for (var i=0; i<segments.length; i++) {
                var segment = segments[i];
                if (segment) {
                  data += getProperty(unescapeJsonPointer(segment));
                  expr += ' && ' + data;
                }
              }
              return expr;
            }


            function joinPaths (a, b) {
              if (a == '""') return b;
              return (a + ' + ' + b).replace(/([^\\])' \+ '/g, '$1');
            }


            function unescapeFragment(str) {
              return unescapeJsonPointer(decodeURIComponent(str));
            }


            function escapeFragment(str) {
              return encodeURIComponent(escapeJsonPointer(str));
            }


            function escapeJsonPointer(str) {
              return str.replace(/~/g, '~0').replace(/\//g, '~1');
            }


            function unescapeJsonPointer(str) {
              return str.replace(/~1/g, '/').replace(/~0/g, '~');
            }

            var util$4 = util$5;

            var schema_obj = SchemaObject$2;

            function SchemaObject$2(obj) {
              util$4.copy(obj, this);
            }

            var jsonSchemaTraverse = {exports: {}};

            var traverse$1 = jsonSchemaTraverse.exports = function (schema, opts, cb) {
              // Legacy support for v0.3.1 and earlier.
              if (typeof opts == 'function') {
                cb = opts;
                opts = {};
              }

              cb = opts.cb || cb;
              var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
              var post = cb.post || function() {};

              _traverse(opts, pre, post, schema, '', schema);
            };


            traverse$1.keywords = {
              additionalItems: true,
              items: true,
              contains: true,
              additionalProperties: true,
              propertyNames: true,
              not: true
            };

            traverse$1.arrayKeywords = {
              items: true,
              allOf: true,
              anyOf: true,
              oneOf: true
            };

            traverse$1.propsKeywords = {
              definitions: true,
              properties: true,
              patternProperties: true,
              dependencies: true
            };

            traverse$1.skipKeywords = {
              default: true,
              enum: true,
              const: true,
              required: true,
              maximum: true,
              minimum: true,
              exclusiveMaximum: true,
              exclusiveMinimum: true,
              multipleOf: true,
              maxLength: true,
              minLength: true,
              pattern: true,
              format: true,
              maxItems: true,
              minItems: true,
              uniqueItems: true,
              maxProperties: true,
              minProperties: true
            };


            function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
              if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
                pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
                for (var key in schema) {
                  var sch = schema[key];
                  if (Array.isArray(sch)) {
                    if (key in traverse$1.arrayKeywords) {
                      for (var i=0; i<sch.length; i++)
                        _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
                    }
                  } else if (key in traverse$1.propsKeywords) {
                    if (sch && typeof sch == 'object') {
                      for (var prop in sch)
                        _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
                    }
                  } else if (key in traverse$1.keywords || (opts.allKeys && !(key in traverse$1.skipKeywords))) {
                    _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
                  }
                }
                post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
              }
            }


            function escapeJsonPtr(str) {
              return str.replace(/~/g, '~0').replace(/\//g, '~1');
            }

            var URI$1 = uri_all.exports
              , equal$1 = fastDeepEqual
              , util$3 = util$5
              , SchemaObject$1 = schema_obj
              , traverse = jsonSchemaTraverse.exports;

            var resolve_1 = resolve$3;

            resolve$3.normalizeId = normalizeId;
            resolve$3.fullPath = getFullPath;
            resolve$3.url = resolveUrl;
            resolve$3.ids = resolveIds;
            resolve$3.inlineRef = inlineRef;
            resolve$3.schema = resolveSchema;

            /**
             * [resolve and compile the references ($ref)]
             * @this   Ajv
             * @param  {Function} compile reference to schema compilation funciton (localCompile)
             * @param  {Object} root object with information about the root schema for the current schema
             * @param  {String} ref reference to resolve
             * @return {Object|Function} schema object (if the schema can be inlined) or validation function
             */
            function resolve$3(compile, root, ref) {
              /* jshint validthis: true */
              var refVal = this._refs[ref];
              if (typeof refVal == 'string') {
                if (this._refs[refVal]) refVal = this._refs[refVal];
                else return resolve$3.call(this, compile, root, refVal);
              }

              refVal = refVal || this._schemas[ref];
              if (refVal instanceof SchemaObject$1) {
                return inlineRef(refVal.schema, this._opts.inlineRefs)
                        ? refVal.schema
                        : refVal.validate || this._compile(refVal);
              }

              var res = resolveSchema.call(this, root, ref);
              var schema, v, baseId;
              if (res) {
                schema = res.schema;
                root = res.root;
                baseId = res.baseId;
              }

              if (schema instanceof SchemaObject$1) {
                v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
              } else if (schema !== undefined) {
                v = inlineRef(schema, this._opts.inlineRefs)
                    ? schema
                    : compile.call(this, schema, root, undefined, baseId);
              }

              return v;
            }


            /**
             * Resolve schema, its root and baseId
             * @this Ajv
             * @param  {Object} root root object with properties schema, refVal, refs
             * @param  {String} ref  reference to resolve
             * @return {Object} object with properties schema, root, baseId
             */
            function resolveSchema(root, ref) {
              /* jshint validthis: true */
              var p = URI$1.parse(ref)
                , refPath = _getFullPath(p)
                , baseId = getFullPath(this._getId(root.schema));
              if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
                var id = normalizeId(refPath);
                var refVal = this._refs[id];
                if (typeof refVal == 'string') {
                  return resolveRecursive.call(this, root, refVal, p);
                } else if (refVal instanceof SchemaObject$1) {
                  if (!refVal.validate) this._compile(refVal);
                  root = refVal;
                } else {
                  refVal = this._schemas[id];
                  if (refVal instanceof SchemaObject$1) {
                    if (!refVal.validate) this._compile(refVal);
                    if (id == normalizeId(ref))
                      return { schema: refVal, root: root, baseId: baseId };
                    root = refVal;
                  } else {
                    return;
                  }
                }
                if (!root.schema) return;
                baseId = getFullPath(this._getId(root.schema));
              }
              return getJsonPointer.call(this, p, baseId, root.schema, root);
            }


            /* @this Ajv */
            function resolveRecursive(root, ref, parsedRef) {
              /* jshint validthis: true */
              var res = resolveSchema.call(this, root, ref);
              if (res) {
                var schema = res.schema;
                var baseId = res.baseId;
                root = res.root;
                var id = this._getId(schema);
                if (id) baseId = resolveUrl(baseId, id);
                return getJsonPointer.call(this, parsedRef, baseId, schema, root);
              }
            }


            var PREVENT_SCOPE_CHANGE = util$3.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
            /* @this Ajv */
            function getJsonPointer(parsedRef, baseId, schema, root) {
              /* jshint validthis: true */
              parsedRef.fragment = parsedRef.fragment || '';
              if (parsedRef.fragment.slice(0,1) != '/') return;
              var parts = parsedRef.fragment.split('/');

              for (var i = 1; i < parts.length; i++) {
                var part = parts[i];
                if (part) {
                  part = util$3.unescapeFragment(part);
                  schema = schema[part];
                  if (schema === undefined) break;
                  var id;
                  if (!PREVENT_SCOPE_CHANGE[part]) {
                    id = this._getId(schema);
                    if (id) baseId = resolveUrl(baseId, id);
                    if (schema.$ref) {
                      var $ref = resolveUrl(baseId, schema.$ref);
                      var res = resolveSchema.call(this, root, $ref);
                      if (res) {
                        schema = res.schema;
                        root = res.root;
                        baseId = res.baseId;
                      }
                    }
                  }
                }
              }
              if (schema !== undefined && schema !== root.schema)
                return { schema: schema, root: root, baseId: baseId };
            }


            var SIMPLE_INLINED = util$3.toHash([
              'type', 'format', 'pattern',
              'maxLength', 'minLength',
              'maxProperties', 'minProperties',
              'maxItems', 'minItems',
              'maximum', 'minimum',
              'uniqueItems', 'multipleOf',
              'required', 'enum'
            ]);
            function inlineRef(schema, limit) {
              if (limit === false) return false;
              if (limit === undefined || limit === true) return checkNoRef(schema);
              else if (limit) return countKeys(schema) <= limit;
            }


            function checkNoRef(schema) {
              var item;
              if (Array.isArray(schema)) {
                for (var i=0; i<schema.length; i++) {
                  item = schema[i];
                  if (typeof item == 'object' && !checkNoRef(item)) return false;
                }
              } else {
                for (var key in schema) {
                  if (key == '$ref') return false;
                  item = schema[key];
                  if (typeof item == 'object' && !checkNoRef(item)) return false;
                }
              }
              return true;
            }


            function countKeys(schema) {
              var count = 0, item;
              if (Array.isArray(schema)) {
                for (var i=0; i<schema.length; i++) {
                  item = schema[i];
                  if (typeof item == 'object') count += countKeys(item);
                  if (count == Infinity) return Infinity;
                }
              } else {
                for (var key in schema) {
                  if (key == '$ref') return Infinity;
                  if (SIMPLE_INLINED[key]) {
                    count++;
                  } else {
                    item = schema[key];
                    if (typeof item == 'object') count += countKeys(item) + 1;
                    if (count == Infinity) return Infinity;
                  }
                }
              }
              return count;
            }


            function getFullPath(id, normalize) {
              if (normalize !== false) id = normalizeId(id);
              var p = URI$1.parse(id);
              return _getFullPath(p);
            }


            function _getFullPath(p) {
              return URI$1.serialize(p).split('#')[0] + '#';
            }


            var TRAILING_SLASH_HASH = /#\/?$/;
            function normalizeId(id) {
              return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
            }


            function resolveUrl(baseId, id) {
              id = normalizeId(id);
              return URI$1.resolve(baseId, id);
            }


            /* @this Ajv */
            function resolveIds(schema) {
              var schemaId = normalizeId(this._getId(schema));
              var baseIds = {'': schemaId};
              var fullPaths = {'': getFullPath(schemaId, false)};
              var localRefs = {};
              var self = this;

              traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
                if (jsonPtr === '') return;
                var id = self._getId(sch);
                var baseId = baseIds[parentJsonPtr];
                var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;
                if (keyIndex !== undefined)
                  fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util$3.escapeFragment(keyIndex));

                if (typeof id == 'string') {
                  id = baseId = normalizeId(baseId ? URI$1.resolve(baseId, id) : id);

                  var refVal = self._refs[id];
                  if (typeof refVal == 'string') refVal = self._refs[refVal];
                  if (refVal && refVal.schema) {
                    if (!equal$1(sch, refVal.schema))
                      throw new Error('id "' + id + '" resolves to more than one schema');
                  } else if (id != normalizeId(fullPath)) {
                    if (id[0] == '#') {
                      if (localRefs[id] && !equal$1(sch, localRefs[id]))
                        throw new Error('id "' + id + '" resolves to more than one schema');
                      localRefs[id] = sch;
                    } else {
                      self._refs[id] = fullPath;
                    }
                  }
                }
                baseIds[jsonPtr] = baseId;
                fullPaths[jsonPtr] = fullPath;
              });

              return localRefs;
            }

            var resolve$2 = resolve_1;

            var error_classes = {
              Validation: errorSubclass(ValidationError$1),
              MissingRef: errorSubclass(MissingRefError$1)
            };


            function ValidationError$1(errors) {
              this.message = 'validation failed';
              this.errors = errors;
              this.ajv = this.validation = true;
            }


            MissingRefError$1.message = function (baseId, ref) {
              return 'can\'t resolve reference ' + ref + ' from id ' + baseId;
            };


            function MissingRefError$1(baseId, ref, message) {
              this.message = message || MissingRefError$1.message(baseId, ref);
              this.missingRef = resolve$2.url(baseId, ref);
              this.missingSchema = resolve$2.normalizeId(resolve$2.fullPath(this.missingRef));
            }


            function errorSubclass(Subclass) {
              Subclass.prototype = Object.create(Error.prototype);
              Subclass.prototype.constructor = Subclass;
              return Subclass;
            }

            var fastJsonStableStringify = function (data, opts) {
                if (!opts) opts = {};
                if (typeof opts === 'function') opts = { cmp: opts };
                var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;

                var cmp = opts.cmp && (function (f) {
                    return function (node) {
                        return function (a, b) {
                            var aobj = { key: a, value: node[a] };
                            var bobj = { key: b, value: node[b] };
                            return f(aobj, bobj);
                        };
                    };
                })(opts.cmp);

                var seen = [];
                return (function stringify (node) {
                    if (node && node.toJSON && typeof node.toJSON === 'function') {
                        node = node.toJSON();
                    }

                    if (node === undefined) return;
                    if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';
                    if (typeof node !== 'object') return JSON.stringify(node);

                    var i, out;
                    if (Array.isArray(node)) {
                        out = '[';
                        for (i = 0; i < node.length; i++) {
                            if (i) out += ',';
                            out += stringify(node[i]) || 'null';
                        }
                        return out + ']';
                    }

                    if (node === null) return 'null';

                    if (seen.indexOf(node) !== -1) {
                        if (cycles) return JSON.stringify('__cycle__');
                        throw new TypeError('Converting circular structure to JSON');
                    }

                    var seenIndex = seen.push(node) - 1;
                    var keys = Object.keys(node).sort(cmp && cmp(node));
                    out = '';
                    for (i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var value = stringify(node[key]);

                        if (!value) continue;
                        if (out) out += ',';
                        out += JSON.stringify(key) + ':' + value;
                    }
                    seen.splice(seenIndex, 1);
                    return '{' + out + '}';
                })(data);
            };

            var validate$1 = function generate_validate(it, $keyword, $ruleType) {
              var out = '';
              var $async = it.schema.$async === true,
                $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),
                $id = it.self._getId(it.schema);
              if (it.opts.strictKeywords) {
                var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
                if ($unknownKwd) {
                  var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;
                  if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);
                  else throw new Error($keywordsMsg);
                }
              }
              if (it.isTop) {
                out += ' var validate = ';
                if ($async) {
                  it.async = true;
                  out += 'async ';
                }
                out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; ';
                if ($id && (it.opts.sourceCode || it.opts.processCode)) {
                  out += ' ' + ('/\*# sourceURL=' + $id + ' */') + ' ';
                }
              }
              if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {
                var $keyword = 'false schema';
                var $lvl = it.level;
                var $dataLvl = it.dataLevel;
                var $schema = it.schema[$keyword];
                var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
                var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
                var $breakOnError = !it.opts.allErrors;
                var $errorKeyword;
                var $data = 'data' + ($dataLvl || '');
                var $valid = 'valid' + $lvl;
                if (it.schema === false) {
                  if (it.isTop) {
                    $breakOnError = true;
                  } else {
                    out += ' var ' + ($valid) + ' = false; ';
                  }
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'false schema') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'boolean schema is false\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                      out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                } else {
                  if (it.isTop) {
                    if ($async) {
                      out += ' return data; ';
                    } else {
                      out += ' validate.errors = null; return true; ';
                    }
                  } else {
                    out += ' var ' + ($valid) + ' = true; ';
                  }
                }
                if (it.isTop) {
                  out += ' }; return validate; ';
                }
                return out;
              }
              if (it.isTop) {
                var $top = it.isTop,
                  $lvl = it.level = 0,
                  $dataLvl = it.dataLevel = 0,
                  $data = 'data';
                it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
                it.baseId = it.baseId || it.rootId;
                delete it.isTop;
                it.dataPathArr = [""];
                if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
                  var $defaultMsg = 'default is ignored in the schema root';
                  if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                  else throw new Error($defaultMsg);
                }
                out += ' var vErrors = null; ';
                out += ' var errors = 0;     ';
                out += ' if (rootData === undefined) rootData = data; ';
              } else {
                var $lvl = it.level,
                  $dataLvl = it.dataLevel,
                  $data = 'data' + ($dataLvl || '');
                if ($id) it.baseId = it.resolve.url(it.baseId, $id);
                if ($async && !it.async) throw new Error('async schema in sync schema');
                out += ' var errs_' + ($lvl) + ' = errors;';
              }
              var $valid = 'valid' + $lvl,
                $breakOnError = !it.opts.allErrors,
                $closingBraces1 = '',
                $closingBraces2 = '';
              var $errorKeyword;
              var $typeSchema = it.schema.type,
                $typeIsArray = Array.isArray($typeSchema);
              if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
                if ($typeIsArray) {
                  if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');
                } else if ($typeSchema != 'null') {
                  $typeSchema = [$typeSchema, 'null'];
                  $typeIsArray = true;
                }
              }
              if ($typeIsArray && $typeSchema.length == 1) {
                $typeSchema = $typeSchema[0];
                $typeIsArray = false;
              }
              if (it.schema.$ref && $refKeywords) {
                if (it.opts.extendRefs == 'fail') {
                  throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
                } else if (it.opts.extendRefs !== true) {
                  $refKeywords = false;
                  it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
                }
              }
              if (it.schema.$comment && it.opts.$comment) {
                out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));
              }
              if ($typeSchema) {
                if (it.opts.coerceTypes) {
                  var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
                }
                var $rulesGroup = it.RULES.types[$typeSchema];
                if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {
                  var $schemaPath = it.schemaPath + '.type',
                    $errSchemaPath = it.errSchemaPath + '/type';
                  var $schemaPath = it.schemaPath + '.type',
                    $errSchemaPath = it.errSchemaPath + '/type',
                    $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
                  out += ' if (' + (it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true)) + ') { ';
                  if ($coerceToTypes) {
                    var $dataType = 'dataType' + $lvl,
                      $coerced = 'coerced' + $lvl;
                    out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; var ' + ($coerced) + ' = undefined; ';
                    if (it.opts.coerceTypes == 'array') {
                      out += ' if (' + ($dataType) + ' == \'object\' && Array.isArray(' + ($data) + ') && ' + ($data) + '.length == 1) { ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + '; if (' + (it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers)) + ') ' + ($coerced) + ' = ' + ($data) + '; } ';
                    }
                    out += ' if (' + ($coerced) + ' !== undefined) ; ';
                    var arr1 = $coerceToTypes;
                    if (arr1) {
                      var $type, $i = -1,
                        l1 = arr1.length - 1;
                      while ($i < l1) {
                        $type = arr1[$i += 1];
                        if ($type == 'string') {
                          out += ' else if (' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\') ' + ($coerced) + ' = \'\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \'\'; ';
                        } else if ($type == 'number' || $type == 'integer') {
                          out += ' else if (' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \'string\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';
                          if ($type == 'integer') {
                            out += ' && !(' + ($data) + ' % 1)';
                          }
                          out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';
                        } else if ($type == 'boolean') {
                          out += ' else if (' + ($data) + ' === \'false\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \'true\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';
                        } else if ($type == 'null') {
                          out += ' else if (' + ($data) + ' === \'\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';
                        } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
                          out += ' else if (' + ($dataType) + ' == \'string\' || ' + ($dataType) + ' == \'number\' || ' + ($dataType) + ' == \'boolean\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';
                        }
                      }
                    }
                    out += ' else {   ';
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                      if ($typeIsArray) {
                        out += '' + ($typeSchema.join(","));
                      } else {
                        out += '' + ($typeSchema);
                      }
                      out += '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should be ';
                        if ($typeIsArray) {
                          out += '' + ($typeSchema.join(","));
                        } else {
                          out += '' + ($typeSchema);
                        }
                        out += '\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                      } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                    out += ' } if (' + ($coerced) + ' !== undefined) {  ';
                    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
                      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                    out += ' ' + ($data) + ' = ' + ($coerced) + '; ';
                    if (!$dataLvl) {
                      out += 'if (' + ($parentData) + ' !== undefined)';
                    }
                    out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';
                  } else {
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                      if ($typeIsArray) {
                        out += '' + ($typeSchema.join(","));
                      } else {
                        out += '' + ($typeSchema);
                      }
                      out += '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should be ';
                        if ($typeIsArray) {
                          out += '' + ($typeSchema.join(","));
                        } else {
                          out += '' + ($typeSchema);
                        }
                        out += '\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                      } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                  }
                  out += ' } ';
                }
              }
              if (it.schema.$ref && !$refKeywords) {
                out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';
                if ($breakOnError) {
                  out += ' } if (errors === ';
                  if ($top) {
                    out += '0';
                  } else {
                    out += 'errs_' + ($lvl);
                  }
                  out += ') { ';
                  $closingBraces2 += '}';
                }
              } else {
                var arr2 = it.RULES;
                if (arr2) {
                  var $rulesGroup, i2 = -1,
                    l2 = arr2.length - 1;
                  while (i2 < l2) {
                    $rulesGroup = arr2[i2 += 1];
                    if ($shouldUseGroup($rulesGroup)) {
                      if ($rulesGroup.type) {
                        out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers)) + ') { ';
                      }
                      if (it.opts.useDefaults) {
                        if ($rulesGroup.type == 'object' && it.schema.properties) {
                          var $schema = it.schema.properties,
                            $schemaKeys = Object.keys($schema);
                          var arr3 = $schemaKeys;
                          if (arr3) {
                            var $propertyKey, i3 = -1,
                              l3 = arr3.length - 1;
                            while (i3 < l3) {
                              $propertyKey = arr3[i3 += 1];
                              var $sch = $schema[$propertyKey];
                              if ($sch.default !== undefined) {
                                var $passData = $data + it.util.getProperty($propertyKey);
                                if (it.compositeRule) {
                                  if (it.opts.strictDefaults) {
                                    var $defaultMsg = 'default is ignored for: ' + $passData;
                                    if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                                    else throw new Error($defaultMsg);
                                  }
                                } else {
                                  out += ' if (' + ($passData) + ' === undefined ';
                                  if (it.opts.useDefaults == 'empty') {
                                    out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                                  }
                                  out += ' ) ' + ($passData) + ' = ';
                                  if (it.opts.useDefaults == 'shared') {
                                    out += ' ' + (it.useDefault($sch.default)) + ' ';
                                  } else {
                                    out += ' ' + (JSON.stringify($sch.default)) + ' ';
                                  }
                                  out += '; ';
                                }
                              }
                            }
                          }
                        } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
                          var arr4 = it.schema.items;
                          if (arr4) {
                            var $sch, $i = -1,
                              l4 = arr4.length - 1;
                            while ($i < l4) {
                              $sch = arr4[$i += 1];
                              if ($sch.default !== undefined) {
                                var $passData = $data + '[' + $i + ']';
                                if (it.compositeRule) {
                                  if (it.opts.strictDefaults) {
                                    var $defaultMsg = 'default is ignored for: ' + $passData;
                                    if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);
                                    else throw new Error($defaultMsg);
                                  }
                                } else {
                                  out += ' if (' + ($passData) + ' === undefined ';
                                  if (it.opts.useDefaults == 'empty') {
                                    out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \'\' ';
                                  }
                                  out += ' ) ' + ($passData) + ' = ';
                                  if (it.opts.useDefaults == 'shared') {
                                    out += ' ' + (it.useDefault($sch.default)) + ' ';
                                  } else {
                                    out += ' ' + (JSON.stringify($sch.default)) + ' ';
                                  }
                                  out += '; ';
                                }
                              }
                            }
                          }
                        }
                      }
                      var arr5 = $rulesGroup.rules;
                      if (arr5) {
                        var $rule, i5 = -1,
                          l5 = arr5.length - 1;
                        while (i5 < l5) {
                          $rule = arr5[i5 += 1];
                          if ($shouldUseRule($rule)) {
                            var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                            if ($code) {
                              out += ' ' + ($code) + ' ';
                              if ($breakOnError) {
                                $closingBraces1 += '}';
                              }
                            }
                          }
                        }
                      }
                      if ($breakOnError) {
                        out += ' ' + ($closingBraces1) + ' ';
                        $closingBraces1 = '';
                      }
                      if ($rulesGroup.type) {
                        out += ' } ';
                        if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                          out += ' else { ';
                          var $schemaPath = it.schemaPath + '.type',
                            $errSchemaPath = it.errSchemaPath + '/type';
                          var $$outStack = $$outStack || [];
                          $$outStack.push(out);
                          out = ''; /* istanbul ignore else */
                          if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ($errorKeyword || 'type') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \'';
                            if ($typeIsArray) {
                              out += '' + ($typeSchema.join(","));
                            } else {
                              out += '' + ($typeSchema);
                            }
                            out += '\' } ';
                            if (it.opts.messages !== false) {
                              out += ' , message: \'should be ';
                              if ($typeIsArray) {
                                out += '' + ($typeSchema.join(","));
                              } else {
                                out += '' + ($typeSchema);
                              }
                              out += '\' ';
                            }
                            if (it.opts.verbose) {
                              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                          } else {
                            out += ' {} ';
                          }
                          var __err = out;
                          out = $$outStack.pop();
                          if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                              out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                              out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                          } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                          }
                          out += ' } ';
                        }
                      }
                      if ($breakOnError) {
                        out += ' if (errors === ';
                        if ($top) {
                          out += '0';
                        } else {
                          out += 'errs_' + ($lvl);
                        }
                        out += ') { ';
                        $closingBraces2 += '}';
                      }
                    }
                  }
                }
              }
              if ($breakOnError) {
                out += ' ' + ($closingBraces2) + ' ';
              }
              if ($top) {
                if ($async) {
                  out += ' if (errors === 0) return data;           ';
                  out += ' else throw new ValidationError(vErrors); ';
                } else {
                  out += ' validate.errors = vErrors; ';
                  out += ' return errors === 0;       ';
                }
                out += ' }; return validate;';
              } else {
                out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';
              }

              function $shouldUseGroup($rulesGroup) {
                var rules = $rulesGroup.rules;
                for (var i = 0; i < rules.length; i++)
                  if ($shouldUseRule(rules[i])) return true;
              }

              function $shouldUseRule($rule) {
                return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));
              }

              function $ruleImplementsSomeKeyword($rule) {
                var impl = $rule.implements;
                for (var i = 0; i < impl.length; i++)
                  if (it.schema[impl[i]] !== undefined) return true;
              }
              return out;
            };

            var resolve$1 = resolve_1
              , util$2 = util$5
              , errorClasses$1 = error_classes
              , stableStringify$1 = fastJsonStableStringify;

            var validateGenerator = validate$1;

            /**
             * Functions below are used inside compiled validations function
             */

            var ucs2length = util$2.ucs2length;
            var equal = fastDeepEqual;

            // this error is thrown by async schemas to return validation errors via exception
            var ValidationError = errorClasses$1.Validation;

            var compile_1 = compile$1;


            /**
             * Compiles schema to validation function
             * @this   Ajv
             * @param  {Object} schema schema object
             * @param  {Object} root object with information about the root schema for this schema
             * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
             * @param  {String} baseId base ID for IDs in the schema
             * @return {Function} validation function
             */
            function compile$1(schema, root, localRefs, baseId) {
              /* jshint validthis: true, evil: true */
              /* eslint no-shadow: 0 */
              var self = this
                , opts = this._opts
                , refVal = [ undefined ]
                , refs = {}
                , patterns = []
                , patternsHash = {}
                , defaults = []
                , defaultsHash = {}
                , customRules = [];

              root = root || { schema: schema, refVal: refVal, refs: refs };

              var c = checkCompiling.call(this, schema, root, baseId);
              var compilation = this._compilations[c.index];
              if (c.compiling) return (compilation.callValidate = callValidate);

              var formats = this._formats;
              var RULES = this.RULES;

              try {
                var v = localCompile(schema, root, localRefs, baseId);
                compilation.validate = v;
                var cv = compilation.callValidate;
                if (cv) {
                  cv.schema = v.schema;
                  cv.errors = null;
                  cv.refs = v.refs;
                  cv.refVal = v.refVal;
                  cv.root = v.root;
                  cv.$async = v.$async;
                  if (opts.sourceCode) cv.source = v.source;
                }
                return v;
              } finally {
                endCompiling.call(this, schema, root, baseId);
              }

              /* @this   {*} - custom context, see passContext option */
              function callValidate() {
                /* jshint validthis: true */
                var validate = compilation.validate;
                var result = validate.apply(this, arguments);
                callValidate.errors = validate.errors;
                return result;
              }

              function localCompile(_schema, _root, localRefs, baseId) {
                var isRoot = !_root || (_root && _root.schema == _schema);
                if (_root.schema != root.schema)
                  return compile$1.call(self, _schema, _root, localRefs, baseId);

                var $async = _schema.$async === true;

                var sourceCode = validateGenerator({
                  isTop: true,
                  schema: _schema,
                  isRoot: isRoot,
                  baseId: baseId,
                  root: _root,
                  schemaPath: '',
                  errSchemaPath: '#',
                  errorPath: '""',
                  MissingRefError: errorClasses$1.MissingRef,
                  RULES: RULES,
                  validate: validateGenerator,
                  util: util$2,
                  resolve: resolve$1,
                  resolveRef: resolveRef,
                  usePattern: usePattern,
                  useDefault: useDefault,
                  useCustomRule: useCustomRule,
                  opts: opts,
                  formats: formats,
                  logger: self.logger,
                  self: self
                });

                sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)
                               + vars(defaults, defaultCode) + vars(customRules, customRuleCode$1)
                               + sourceCode;

                if (opts.processCode) sourceCode = opts.processCode(sourceCode, _schema);
                // console.log('\n\n\n *** \n', JSON.stringify(sourceCode));
                var validate;
                try {
                  var makeValidate = new Function(
                    'self',
                    'RULES',
                    'formats',
                    'root',
                    'refVal',
                    'defaults',
                    'customRules',
                    'equal',
                    'ucs2length',
                    'ValidationError',
                    sourceCode
                  );

                  validate = makeValidate(
                    self,
                    RULES,
                    formats,
                    root,
                    refVal,
                    defaults,
                    customRules,
                    equal,
                    ucs2length,
                    ValidationError
                  );

                  refVal[0] = validate;
                } catch(e) {
                  self.logger.error('Error compiling schema, function code:', sourceCode);
                  throw e;
                }

                validate.schema = _schema;
                validate.errors = null;
                validate.refs = refs;
                validate.refVal = refVal;
                validate.root = isRoot ? validate : _root;
                if ($async) validate.$async = true;
                if (opts.sourceCode === true) {
                  validate.source = {
                    code: sourceCode,
                    patterns: patterns,
                    defaults: defaults
                  };
                }

                return validate;
              }

              function resolveRef(baseId, ref, isRoot) {
                ref = resolve$1.url(baseId, ref);
                var refIndex = refs[ref];
                var _refVal, refCode;
                if (refIndex !== undefined) {
                  _refVal = refVal[refIndex];
                  refCode = 'refVal[' + refIndex + ']';
                  return resolvedRef(_refVal, refCode);
                }
                if (!isRoot && root.refs) {
                  var rootRefId = root.refs[ref];
                  if (rootRefId !== undefined) {
                    _refVal = root.refVal[rootRefId];
                    refCode = addLocalRef(ref, _refVal);
                    return resolvedRef(_refVal, refCode);
                  }
                }

                refCode = addLocalRef(ref);
                var v = resolve$1.call(self, localCompile, root, ref);
                if (v === undefined) {
                  var localSchema = localRefs && localRefs[ref];
                  if (localSchema) {
                    v = resolve$1.inlineRef(localSchema, opts.inlineRefs)
                        ? localSchema
                        : compile$1.call(self, localSchema, root, localRefs, baseId);
                  }
                }

                if (v === undefined) {
                  removeLocalRef(ref);
                } else {
                  replaceLocalRef(ref, v);
                  return resolvedRef(v, refCode);
                }
              }

              function addLocalRef(ref, v) {
                var refId = refVal.length;
                refVal[refId] = v;
                refs[ref] = refId;
                return 'refVal' + refId;
              }

              function removeLocalRef(ref) {
                delete refs[ref];
              }

              function replaceLocalRef(ref, v) {
                var refId = refs[ref];
                refVal[refId] = v;
              }

              function resolvedRef(refVal, code) {
                return typeof refVal == 'object' || typeof refVal == 'boolean'
                        ? { code: code, schema: refVal, inline: true }
                        : { code: code, $async: refVal && !!refVal.$async };
              }

              function usePattern(regexStr) {
                var index = patternsHash[regexStr];
                if (index === undefined) {
                  index = patternsHash[regexStr] = patterns.length;
                  patterns[index] = regexStr;
                }
                return 'pattern' + index;
              }

              function useDefault(value) {
                switch (typeof value) {
                  case 'boolean':
                  case 'number':
                    return '' + value;
                  case 'string':
                    return util$2.toQuotedString(value);
                  case 'object':
                    if (value === null) return 'null';
                    var valueStr = stableStringify$1(value);
                    var index = defaultsHash[valueStr];
                    if (index === undefined) {
                      index = defaultsHash[valueStr] = defaults.length;
                      defaults[index] = value;
                    }
                    return 'default' + index;
                }
              }

              function useCustomRule(rule, schema, parentSchema, it) {
                if (self._opts.validateSchema !== false) {
                  var deps = rule.definition.dependencies;
                  if (deps && !deps.every(function(keyword) {
                    return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
                  }))
                    throw new Error('parent schema must have all required keywords: ' + deps.join(','));

                  var validateSchema = rule.definition.validateSchema;
                  if (validateSchema) {
                    var valid = validateSchema(schema);
                    if (!valid) {
                      var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
                      if (self._opts.validateSchema == 'log') self.logger.error(message);
                      else throw new Error(message);
                    }
                  }
                }

                var compile = rule.definition.compile
                  , inline = rule.definition.inline
                  , macro = rule.definition.macro;

                var validate;
                if (compile) {
                  validate = compile.call(self, schema, parentSchema, it);
                } else if (macro) {
                  validate = macro.call(self, schema, parentSchema, it);
                  if (opts.validateSchema !== false) self.validateSchema(validate, true);
                } else if (inline) {
                  validate = inline.call(self, it, rule.keyword, schema, parentSchema);
                } else {
                  validate = rule.definition.validate;
                  if (!validate) return;
                }

                if (validate === undefined)
                  throw new Error('custom keyword "' + rule.keyword + '"failed to compile');

                var index = customRules.length;
                customRules[index] = validate;

                return {
                  code: 'customRule' + index,
                  validate: validate
                };
              }
            }


            /**
             * Checks if the schema is currently compiled
             * @this   Ajv
             * @param  {Object} schema schema to compile
             * @param  {Object} root root object
             * @param  {String} baseId base schema ID
             * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
             */
            function checkCompiling(schema, root, baseId) {
              /* jshint validthis: true */
              var index = compIndex.call(this, schema, root, baseId);
              if (index >= 0) return { index: index, compiling: true };
              index = this._compilations.length;
              this._compilations[index] = {
                schema: schema,
                root: root,
                baseId: baseId
              };
              return { index: index, compiling: false };
            }


            /**
             * Removes the schema from the currently compiled list
             * @this   Ajv
             * @param  {Object} schema schema to compile
             * @param  {Object} root root object
             * @param  {String} baseId base schema ID
             */
            function endCompiling(schema, root, baseId) {
              /* jshint validthis: true */
              var i = compIndex.call(this, schema, root, baseId);
              if (i >= 0) this._compilations.splice(i, 1);
            }


            /**
             * Index of schema compilation in the currently compiled list
             * @this   Ajv
             * @param  {Object} schema schema to compile
             * @param  {Object} root root object
             * @param  {String} baseId base schema ID
             * @return {Integer} compilation index
             */
            function compIndex(schema, root, baseId) {
              /* jshint validthis: true */
              for (var i=0; i<this._compilations.length; i++) {
                var c = this._compilations[i];
                if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
              }
              return -1;
            }


            function patternCode(i, patterns) {
              return 'var pattern' + i + ' = new RegExp(' + util$2.toQuotedString(patterns[i]) + ');';
            }


            function defaultCode(i) {
              return 'var default' + i + ' = defaults[' + i + '];';
            }


            function refValCode(i, refVal) {
              return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';
            }


            function customRuleCode$1(i) {
              return 'var customRule' + i + ' = customRules[' + i + '];';
            }


            function vars(arr, statement) {
              if (!arr.length) return '';
              var code = '';
              for (var i=0; i<arr.length; i++)
                code += statement(i, arr);
              return code;
            }

            var cache = {exports: {}};

            var Cache$1 = cache.exports = function Cache() {
              this._cache = {};
            };


            Cache$1.prototype.put = function Cache_put(key, value) {
              this._cache[key] = value;
            };


            Cache$1.prototype.get = function Cache_get(key) {
              return this._cache[key];
            };


            Cache$1.prototype.del = function Cache_del(key) {
              delete this._cache[key];
            };


            Cache$1.prototype.clear = function Cache_clear() {
              this._cache = {};
            };

            var util$1 = util$5;

            var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
            var DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];
            var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
            var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
            var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
            var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
            // uri-template: https://tools.ietf.org/html/rfc6570
            var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
            // For the source: https://gist.github.com/dperini/729294
            // For test cases: https://mathiasbynens.be/demo/url-regex
            // @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.
            // var URL = /^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)(?:\.(?:[a-z\u{00a1}-\u{ffff}0-9]+-)*[a-z\u{00a1}-\u{ffff}0-9]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu;
            var URL = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
            var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
            var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
            var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
            var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;


            var formats_1 = formats$1;

            function formats$1(mode) {
              mode = mode == 'full' ? 'full' : 'fast';
              return util$1.copy(formats$1[mode]);
            }


            formats$1.fast = {
              // date: http://tools.ietf.org/html/rfc3339#section-5.6
              date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
              // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
              time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
              'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
              // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
              uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
              'uri-reference': /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
              'uri-template': URITEMPLATE,
              url: URL,
              // email (sources from jsen validator):
              // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
              // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
              email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
              hostname: HOSTNAME,
              // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
              ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
              // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
              ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
              regex: regex,
              // uuid: http://tools.ietf.org/html/rfc4122
              uuid: UUID,
              // JSON-pointer: https://tools.ietf.org/html/rfc6901
              // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
              'json-pointer': JSON_POINTER,
              'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
              // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
              'relative-json-pointer': RELATIVE_JSON_POINTER
            };


            formats$1.full = {
              date: date,
              time: time,
              'date-time': date_time,
              uri: uri,
              'uri-reference': URIREF,
              'uri-template': URITEMPLATE,
              url: URL,
              email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
              hostname: HOSTNAME,
              ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
              ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
              regex: regex,
              uuid: UUID,
              'json-pointer': JSON_POINTER,
              'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,
              'relative-json-pointer': RELATIVE_JSON_POINTER
            };


            function isLeapYear(year) {
              // https://tools.ietf.org/html/rfc3339#appendix-C
              return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
            }


            function date(str) {
              // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
              var matches = str.match(DATE);
              if (!matches) return false;

              var year = +matches[1];
              var month = +matches[2];
              var day = +matches[3];

              return month >= 1 && month <= 12 && day >= 1 &&
                      day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
            }


            function time(str, full) {
              var matches = str.match(TIME);
              if (!matches) return false;

              var hour = matches[1];
              var minute = matches[2];
              var second = matches[3];
              var timeZone = matches[5];
              return ((hour <= 23 && minute <= 59 && second <= 59) ||
                      (hour == 23 && minute == 59 && second == 60)) &&
                     (!full || timeZone);
            }


            var DATE_TIME_SEPARATOR = /t|\s/i;
            function date_time(str) {
              // http://tools.ietf.org/html/rfc3339#section-5.6
              var dateTime = str.split(DATE_TIME_SEPARATOR);
              return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
            }


            var NOT_URI_FRAGMENT = /\/|:/;
            function uri(str) {
              // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
              return NOT_URI_FRAGMENT.test(str) && URI.test(str);
            }


            var Z_ANCHOR = /[^\\]\\Z/;
            function regex(str) {
              if (Z_ANCHOR.test(str)) return false;
              try {
                new RegExp(str);
                return true;
              } catch(e) {
                return false;
              }
            }

            var ref = function generate_ref(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $async, $refCode;
              if ($schema == '#' || $schema == '#/') {
                if (it.isRoot) {
                  $async = it.async;
                  $refCode = 'validate';
                } else {
                  $async = it.root.schema.$async === true;
                  $refCode = 'root.refVal[0]';
                }
              } else {
                var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
                if ($refVal === undefined) {
                  var $message = it.MissingRefError.message(it.baseId, $schema);
                  if (it.opts.missingRefs == 'fail') {
                    it.logger.error($message);
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ('$ref') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \'' + (it.util.escapeQuotes($schema)) + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'can\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                      } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                    if ($breakOnError) {
                      out += ' if (false) { ';
                    }
                  } else if (it.opts.missingRefs == 'ignore') {
                    it.logger.warn($message);
                    if ($breakOnError) {
                      out += ' if (true) { ';
                    }
                  } else {
                    throw new it.MissingRefError(it.baseId, $schema, $message);
                  }
                } else if ($refVal.inline) {
                  var $it = it.util.copy(it);
                  $it.level++;
                  var $nextValid = 'valid' + $it.level;
                  $it.schema = $refVal.schema;
                  $it.schemaPath = '';
                  $it.errSchemaPath = $schema;
                  var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
                  out += ' ' + ($code) + ' ';
                  if ($breakOnError) {
                    out += ' if (' + ($nextValid) + ') { ';
                  }
                } else {
                  $async = $refVal.$async === true || (it.async && $refVal.$async !== false);
                  $refCode = $refVal.code;
                }
              }
              if ($refCode) {
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = '';
                if (it.opts.passContext) {
                  out += ' ' + ($refCode) + '.call(this, ';
                } else {
                  out += ' ' + ($refCode) + '( ';
                }
                out += ' ' + ($data) + ', (dataPath || \'\')';
                if (it.errorPath != '""') {
                  out += ' + ' + (it.errorPath);
                }
                var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
                  $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';
                var __callValidate = out;
                out = $$outStack.pop();
                if ($async) {
                  if (!it.async) throw new Error('async schema referenced by sync schema');
                  if ($breakOnError) {
                    out += ' var ' + ($valid) + '; ';
                  }
                  out += ' try { await ' + (__callValidate) + '; ';
                  if ($breakOnError) {
                    out += ' ' + ($valid) + ' = true; ';
                  }
                  out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';
                  if ($breakOnError) {
                    out += ' ' + ($valid) + ' = false; ';
                  }
                  out += ' } ';
                  if ($breakOnError) {
                    out += ' if (' + ($valid) + ') { ';
                  }
                } else {
                  out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';
                  if ($breakOnError) {
                    out += ' else { ';
                  }
                }
              }
              return out;
            };

            var allOf = function generate_allOf(it, $keyword, $ruleType) {
              var out = ' ';
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $currentBaseId = $it.baseId,
                $allSchemasEmpty = true;
              var arr1 = $schema;
              if (arr1) {
                var $sch, $i = -1,
                  l1 = arr1.length - 1;
                while ($i < l1) {
                  $sch = arr1[$i += 1];
                  if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
                    $allSchemasEmpty = false;
                    $it.schema = $sch;
                    $it.schemaPath = $schemaPath + '[' + $i + ']';
                    $it.errSchemaPath = $errSchemaPath + '/' + $i;
                    out += '  ' + (it.validate($it)) + ' ';
                    $it.baseId = $currentBaseId;
                    if ($breakOnError) {
                      out += ' if (' + ($nextValid) + ') { ';
                      $closingBraces += '}';
                    }
                  }
                }
              }
              if ($breakOnError) {
                if ($allSchemasEmpty) {
                  out += ' if (true) { ';
                } else {
                  out += ' ' + ($closingBraces.slice(0, -1)) + ' ';
                }
              }
              return out;
            };

            var anyOf = function generate_anyOf(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $noEmptySchema = $schema.every(function($sch) {
                return (it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all));
              });
              if ($noEmptySchema) {
                var $currentBaseId = $it.baseId;
                out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                var arr1 = $schema;
                if (arr1) {
                  var $sch, $i = -1,
                    l1 = arr1.length - 1;
                  while ($i < l1) {
                    $sch = arr1[$i += 1];
                    $it.schema = $sch;
                    $it.schemaPath = $schemaPath + '[' + $i + ']';
                    $it.errSchemaPath = $errSchemaPath + '/' + $i;
                    out += '  ' + (it.validate($it)) + ' ';
                    $it.baseId = $currentBaseId;
                    out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';
                    $closingBraces += '}';
                  }
                }
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('anyOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should match some schema in anyOf\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError(vErrors); ';
                  } else {
                    out += ' validate.errors = vErrors; return false; ';
                  }
                }
                out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
                if (it.opts.allErrors) {
                  out += ' } ';
                }
              } else {
                if ($breakOnError) {
                  out += ' if (true) { ';
                }
              }
              return out;
            };

            var comment = function generate_comment(it, $keyword, $ruleType) {
              var out = ' ';
              var $schema = it.schema[$keyword];
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              !it.opts.allErrors;
              var $comment = it.util.toQuotedString($schema);
              if (it.opts.$comment === true) {
                out += ' console.log(' + ($comment) + ');';
              } else if (typeof it.opts.$comment == 'function') {
                out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';
              }
              return out;
            };

            var _const = function generate_const(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $isData = it.opts.$data && $schema && $schema.$data;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
              }
              if (!$isData) {
                out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';
              }
              out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('const') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be equal to constant\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' }';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var contains = function generate_contains(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $idx = 'i' + $lvl,
                $dataNxt = $it.dataLevel = it.dataLevel + 1,
                $nextData = 'data' + $dataNxt,
                $currentBaseId = it.baseId,
                $nonEmptySchema = (it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all));
              out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
              if ($nonEmptySchema) {
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
                $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                var $passData = $data + '[' + $idx + ']';
                $it.dataPathArr[$dataNxt] = $idx;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                } else {
                  out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                }
                out += ' if (' + ($nextValid) + ') break; }  ';
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';
              } else {
                out += ' if (' + ($data) + '.length == 0) {';
              }
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('contains') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should contain a valid item\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } else { ';
              if ($nonEmptySchema) {
                out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
              }
              if (it.opts.allErrors) {
                out += ' } ';
              }
              return out;
            };

            var dependencies = function generate_dependencies(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $schemaDeps = {},
                $propertyDeps = {},
                $ownProperties = it.opts.ownProperties;
              for ($property in $schema) {
                if ($property == '__proto__') continue;
                var $sch = $schema[$property];
                var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
                $deps[$property] = $sch;
              }
              out += 'var ' + ($errs) + ' = errors;';
              var $currentErrorPath = it.errorPath;
              out += 'var missing' + ($lvl) + ';';
              for (var $property in $propertyDeps) {
                $deps = $propertyDeps[$property];
                if ($deps.length) {
                  out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
                  if ($ownProperties) {
                    out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
                  }
                  if ($breakOnError) {
                    out += ' && ( ';
                    var arr1 = $deps;
                    if (arr1) {
                      var $propertyKey, $i = -1,
                        l1 = arr1.length - 1;
                      while ($i < l1) {
                        $propertyKey = arr1[$i += 1];
                        if ($i) {
                          out += ' || ';
                        }
                        var $prop = it.util.getProperty($propertyKey),
                          $useData = $data + $prop;
                        out += ' ( ( ' + ($useData) + ' === undefined ';
                        if ($ownProperties) {
                          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                        }
                        out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
                      }
                    }
                    out += ')) {  ';
                    var $propertyPath = 'missing' + $lvl,
                      $missingProperty = '\' + ' + $propertyPath + ' + \'';
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
                    }
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'should have ';
                        if ($deps.length == 1) {
                          out += 'property ' + (it.util.escapeQuotes($deps[0]));
                        } else {
                          out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                        }
                        out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                      } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                  } else {
                    out += ' ) { ';
                    var arr2 = $deps;
                    if (arr2) {
                      var $propertyKey, i2 = -1,
                        l2 = arr2.length - 1;
                      while (i2 < l2) {
                        $propertyKey = arr2[i2 += 1];
                        var $prop = it.util.getProperty($propertyKey),
                          $missingProperty = it.util.escapeQuotes($propertyKey),
                          $useData = $data + $prop;
                        if (it.opts._errorDataPathProperty) {
                          it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                        }
                        out += ' if ( ' + ($useData) + ' === undefined ';
                        if ($ownProperties) {
                          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                        }
                        out += ') {  var err =   '; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                          out += ' { keyword: \'' + ('dependencies') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \'' + (it.util.escapeQuotes($property)) + '\', missingProperty: \'' + ($missingProperty) + '\', depsCount: ' + ($deps.length) + ', deps: \'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", "))) + '\' } ';
                          if (it.opts.messages !== false) {
                            out += ' , message: \'should have ';
                            if ($deps.length == 1) {
                              out += 'property ' + (it.util.escapeQuotes($deps[0]));
                            } else {
                              out += 'properties ' + (it.util.escapeQuotes($deps.join(", ")));
                            }
                            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\' ';
                          }
                          if (it.opts.verbose) {
                            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                          }
                          out += ' } ';
                        } else {
                          out += ' {} ';
                        }
                        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
                      }
                    }
                  }
                  out += ' }   ';
                  if ($breakOnError) {
                    $closingBraces += '}';
                    out += ' else { ';
                  }
                }
              }
              it.errorPath = $currentErrorPath;
              var $currentBaseId = $it.baseId;
              for (var $property in $schemaDeps) {
                var $sch = $schemaDeps[$property];
                if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
                  out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';
                  if ($ownProperties) {
                    out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($property)) + '\') ';
                  }
                  out += ') { ';
                  $it.schema = $sch;
                  $it.schemaPath = $schemaPath + it.util.getProperty($property);
                  $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
                  out += '  ' + (it.validate($it)) + ' ';
                  $it.baseId = $currentBaseId;
                  out += ' }  ';
                  if ($breakOnError) {
                    out += ' if (' + ($nextValid) + ') { ';
                    $closingBraces += '}';
                  }
                }
              }
              if ($breakOnError) {
                out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
              }
              return out;
            };

            var _enum = function generate_enum(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $isData = it.opts.$data && $schema && $schema.$data;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
              }
              var $i = 'i' + $lvl,
                $vSchema = 'schema' + $lvl;
              if (!$isData) {
                out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';
              }
              out += 'var ' + ($valid) + ';';
              if ($isData) {
                out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
              }
              out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';
              if ($isData) {
                out += '  }  ';
              }
              out += ' if (!' + ($valid) + ') {   ';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('enum') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be equal to one of the allowed values\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' }';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var format = function generate_format(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              if (it.opts.format === false) {
                if ($breakOnError) {
                  out += ' if (true) { ';
                }
                return out;
              }
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              var $unknownFormats = it.opts.unknownFormats,
                $allowUnknown = Array.isArray($unknownFormats);
              if ($isData) {
                var $format = 'format' + $lvl,
                  $isObject = 'isObject' + $lvl,
                  $formatType = 'formatType' + $lvl;
                out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \'object\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \'string\'; if (' + ($isObject) + ') { ';
                if (it.async) {
                  out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';
                }
                out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';
                if ($isData) {
                  out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
                }
                out += ' (';
                if ($unknownFormats != 'ignore') {
                  out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';
                  if ($allowUnknown) {
                    out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';
                  }
                  out += ') || ';
                }
                out += ' (' + ($format) + ' && ' + ($formatType) + ' == \'' + ($ruleType) + '\' && !(typeof ' + ($format) + ' == \'function\' ? ';
                if (it.async) {
                  out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';
                } else {
                  out += ' ' + ($format) + '(' + ($data) + ') ';
                }
                out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';
              } else {
                var $format = it.formats[$schema];
                if (!$format) {
                  if ($unknownFormats == 'ignore') {
                    it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
                    if ($breakOnError) {
                      out += ' if (true) { ';
                    }
                    return out;
                  } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
                    if ($breakOnError) {
                      out += ' if (true) { ';
                    }
                    return out;
                  } else {
                    throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
                  }
                }
                var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;
                var $formatType = $isObject && $format.type || 'string';
                if ($isObject) {
                  var $async = $format.async === true;
                  $format = $format.validate;
                }
                if ($formatType != $ruleType) {
                  if ($breakOnError) {
                    out += ' if (true) { ';
                  }
                  return out;
                }
                if ($async) {
                  if (!it.async) throw new Error('async format in sync schema');
                  var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
                  out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';
                } else {
                  out += ' if (! ';
                  var $formatRef = 'formats' + it.util.getProperty($schema);
                  if ($isObject) $formatRef += '.validate';
                  if (typeof $format == 'function') {
                    out += ' ' + ($formatRef) + '(' + ($data) + ') ';
                  } else {
                    out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';
                  }
                  out += ') { ';
                }
              }
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('format') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';
                if ($isData) {
                  out += '' + ($schemaValue);
                } else {
                  out += '' + (it.util.toQuotedString($schema));
                }
                out += '  } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should match format "';
                  if ($isData) {
                    out += '\' + ' + ($schemaValue) + ' + \'';
                  } else {
                    out += '' + (it.util.escapeQuotes($schema));
                  }
                  out += '"\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema:  ';
                  if ($isData) {
                    out += 'validate.schema' + ($schemaPath);
                  } else {
                    out += '' + (it.util.toQuotedString($schema));
                  }
                  out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var _if = function generate_if(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $thenSch = it.schema['then'],
                $elseSch = it.schema['else'],
                $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? (typeof $thenSch == 'object' && Object.keys($thenSch).length > 0) || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)),
                $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? (typeof $elseSch == 'object' && Object.keys($elseSch).length > 0) || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)),
                $currentBaseId = $it.baseId;
              if ($thenPresent || $elsePresent) {
                var $ifClause;
                $it.createErrors = false;
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                out += '  ' + (it.validate($it)) + ' ';
                $it.baseId = $currentBaseId;
                $it.createErrors = true;
                out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';
                it.compositeRule = $it.compositeRule = $wasComposite;
                if ($thenPresent) {
                  out += ' if (' + ($nextValid) + ') {  ';
                  $it.schema = it.schema['then'];
                  $it.schemaPath = it.schemaPath + '.then';
                  $it.errSchemaPath = it.errSchemaPath + '/then';
                  out += '  ' + (it.validate($it)) + ' ';
                  $it.baseId = $currentBaseId;
                  out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
                  if ($thenPresent && $elsePresent) {
                    $ifClause = 'ifClause' + $lvl;
                    out += ' var ' + ($ifClause) + ' = \'then\'; ';
                  } else {
                    $ifClause = '\'then\'';
                  }
                  out += ' } ';
                  if ($elsePresent) {
                    out += ' else { ';
                  }
                } else {
                  out += ' if (!' + ($nextValid) + ') { ';
                }
                if ($elsePresent) {
                  $it.schema = it.schema['else'];
                  $it.schemaPath = it.schemaPath + '.else';
                  $it.errSchemaPath = it.errSchemaPath + '/else';
                  out += '  ' + (it.validate($it)) + ' ';
                  $it.baseId = $currentBaseId;
                  out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';
                  if ($thenPresent && $elsePresent) {
                    $ifClause = 'ifClause' + $lvl;
                    out += ' var ' + ($ifClause) + ' = \'else\'; ';
                  } else {
                    $ifClause = '\'else\'';
                  }
                  out += ' } ';
                }
                out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('if') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should match "\' + ' + ($ifClause) + ' + \'" schema\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError(vErrors); ';
                  } else {
                    out += ' validate.errors = vErrors; return false; ';
                  }
                }
                out += ' }   ';
                if ($breakOnError) {
                  out += ' else { ';
                }
              } else {
                if ($breakOnError) {
                  out += ' if (true) { ';
                }
              }
              return out;
            };

            var items = function generate_items(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $idx = 'i' + $lvl,
                $dataNxt = $it.dataLevel = it.dataLevel + 1,
                $nextData = 'data' + $dataNxt,
                $currentBaseId = it.baseId;
              out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
              if (Array.isArray($schema)) {
                var $additionalItems = it.schema.additionalItems;
                if ($additionalItems === false) {
                  out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';
                  var $currErrSchemaPath = $errSchemaPath;
                  $errSchemaPath = it.errSchemaPath + '/additionalItems';
                  out += '  if (!' + ($valid) + ') {   ';
                  var $$outStack = $$outStack || [];
                  $$outStack.push(out);
                  out = ''; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ('additionalItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should NOT have more than ' + ($schema.length) + ' items\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  var __err = out;
                  out = $$outStack.pop();
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError([' + (__err) + ']); ';
                    } else {
                      out += ' validate.errors = [' + (__err) + ']; return false; ';
                    }
                  } else {
                    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  }
                  out += ' } ';
                  $errSchemaPath = $currErrSchemaPath;
                  if ($breakOnError) {
                    $closingBraces += '}';
                    out += ' else { ';
                  }
                }
                var arr1 = $schema;
                if (arr1) {
                  var $sch, $i = -1,
                    l1 = arr1.length - 1;
                  while ($i < l1) {
                    $sch = arr1[$i += 1];
                    if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
                      out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';
                      var $passData = $data + '[' + $i + ']';
                      $it.schema = $sch;
                      $it.schemaPath = $schemaPath + '[' + $i + ']';
                      $it.errSchemaPath = $errSchemaPath + '/' + $i;
                      $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
                      $it.dataPathArr[$dataNxt] = $i;
                      var $code = it.validate($it);
                      $it.baseId = $currentBaseId;
                      if (it.util.varOccurences($code, $nextData) < 2) {
                        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                      } else {
                        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                      }
                      out += ' }  ';
                      if ($breakOnError) {
                        out += ' if (' + ($nextValid) + ') { ';
                        $closingBraces += '}';
                      }
                    }
                  }
                }
                if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? (typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0) || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
                  $it.schema = $additionalItems;
                  $it.schemaPath = it.schemaPath + '.additionalItems';
                  $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
                  out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
                  $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                  var $passData = $data + '[' + $idx + ']';
                  $it.dataPathArr[$dataNxt] = $idx;
                  var $code = it.validate($it);
                  $it.baseId = $currentBaseId;
                  if (it.util.varOccurences($code, $nextData) < 2) {
                    out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                  } else {
                    out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                  }
                  if ($breakOnError) {
                    out += ' if (!' + ($nextValid) + ') break; ';
                  }
                  out += ' } }  ';
                  if ($breakOnError) {
                    out += ' if (' + ($nextValid) + ') { ';
                    $closingBraces += '}';
                  }
                }
              } else if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';
                $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
                var $passData = $data + '[' + $idx + ']';
                $it.dataPathArr[$dataNxt] = $idx;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                } else {
                  out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                }
                if ($breakOnError) {
                  out += ' if (!' + ($nextValid) + ') break; ';
                }
                out += ' }';
              }
              if ($breakOnError) {
                out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
              }
              return out;
            };

            var _limit = function generate__limit(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $errorKeyword;
              var $data = 'data' + ($dataLvl || '');
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              var $isMax = $keyword == 'maximum',
                $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
                $schemaExcl = it.schema[$exclusiveKeyword],
                $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
                $op = $isMax ? '<' : '>',
                $notOp = $isMax ? '>' : '<',
                $errorKeyword = undefined;
              if (!($isData || typeof $schema == 'number' || $schema === undefined)) {
                throw new Error($keyword + ' must be number');
              }
              if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == 'number' || typeof $schemaExcl == 'boolean')) {
                throw new Error($exclusiveKeyword + ' must be number or boolean');
              }
              if ($isDataExcl) {
                var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
                  $exclusive = 'exclusive' + $lvl,
                  $exclType = 'exclType' + $lvl,
                  $exclIsNumber = 'exclIsNumber' + $lvl,
                  $opExpr = 'op' + $lvl,
                  $opStr = '\' + ' + $opExpr + ' + \'';
                out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
                $schemaValueExcl = 'schemaExcl' + $lvl;
                out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \'boolean\' && ' + ($exclType) + ' != \'undefined\' && ' + ($exclType) + ' != \'number\') { ';
                var $errorKeyword = $exclusiveKeyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } else if ( ';
                if ($isData) {
                  out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
                }
                out += ' ' + ($exclType) + ' == \'number\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\'; ';
                if ($schema === undefined) {
                  $errorKeyword = $exclusiveKeyword;
                  $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
                  $schemaValue = $schemaValueExcl;
                  $isData = $isDataExcl;
                }
              } else {
                var $exclIsNumber = typeof $schemaExcl == 'number',
                  $opStr = $op;
                if ($exclIsNumber && $isData) {
                  var $opExpr = '\'' + $opStr + '\'';
                  out += ' if ( ';
                  if ($isData) {
                    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
                  }
                  out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';
                } else {
                  if ($exclIsNumber && $schema === undefined) {
                    $exclusive = true;
                    $errorKeyword = $exclusiveKeyword;
                    $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
                    $schemaValue = $schemaExcl;
                    $notOp += '=';
                  } else {
                    if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);
                    if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
                      $exclusive = true;
                      $errorKeyword = $exclusiveKeyword;
                      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;
                      $notOp += '=';
                    } else {
                      $exclusive = false;
                      $opStr += '=';
                    }
                  }
                  var $opExpr = '\'' + $opStr + '\'';
                  out += ' if ( ';
                  if ($isData) {
                    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
                  }
                  out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';
                }
              }
              $errorKeyword = $errorKeyword || $keyword;
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be ' + ($opStr) + ' ';
                  if ($isData) {
                    out += '\' + ' + ($schemaValue);
                  } else {
                    out += '' + ($schemaValue) + '\'';
                  }
                }
                if (it.opts.verbose) {
                  out += ' , schema:  ';
                  if ($isData) {
                    out += 'validate.schema' + ($schemaPath);
                  } else {
                    out += '' + ($schema);
                  }
                  out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += ' } ';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var _limitItems = function generate__limitItems(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $errorKeyword;
              var $data = 'data' + ($dataLvl || '');
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              if (!($isData || typeof $schema == 'number')) {
                throw new Error($keyword + ' must be number');
              }
              var $op = $keyword == 'maxItems' ? '>' : '<';
              out += 'if ( ';
              if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
              }
              out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';
              var $errorKeyword = $keyword;
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should NOT have ';
                  if ($keyword == 'maxItems') {
                    out += 'more';
                  } else {
                    out += 'fewer';
                  }
                  out += ' than ';
                  if ($isData) {
                    out += '\' + ' + ($schemaValue) + ' + \'';
                  } else {
                    out += '' + ($schema);
                  }
                  out += ' items\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema:  ';
                  if ($isData) {
                    out += 'validate.schema' + ($schemaPath);
                  } else {
                    out += '' + ($schema);
                  }
                  out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += '} ';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var _limitLength = function generate__limitLength(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $errorKeyword;
              var $data = 'data' + ($dataLvl || '');
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              if (!($isData || typeof $schema == 'number')) {
                throw new Error($keyword + ' must be number');
              }
              var $op = $keyword == 'maxLength' ? '>' : '<';
              out += 'if ( ';
              if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
              }
              if (it.opts.unicode === false) {
                out += ' ' + ($data) + '.length ';
              } else {
                out += ' ucs2length(' + ($data) + ') ';
              }
              out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';
              var $errorKeyword = $keyword;
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should NOT be ';
                  if ($keyword == 'maxLength') {
                    out += 'longer';
                  } else {
                    out += 'shorter';
                  }
                  out += ' than ';
                  if ($isData) {
                    out += '\' + ' + ($schemaValue) + ' + \'';
                  } else {
                    out += '' + ($schema);
                  }
                  out += ' characters\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema:  ';
                  if ($isData) {
                    out += 'validate.schema' + ($schemaPath);
                  } else {
                    out += '' + ($schema);
                  }
                  out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += '} ';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var _limitProperties = function generate__limitProperties(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $errorKeyword;
              var $data = 'data' + ($dataLvl || '');
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              if (!($isData || typeof $schema == 'number')) {
                throw new Error($keyword + ' must be number');
              }
              var $op = $keyword == 'maxProperties' ? '>' : '<';
              out += 'if ( ';
              if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'number\') || ';
              }
              out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';
              var $errorKeyword = $keyword;
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should NOT have ';
                  if ($keyword == 'maxProperties') {
                    out += 'more';
                  } else {
                    out += 'fewer';
                  }
                  out += ' than ';
                  if ($isData) {
                    out += '\' + ' + ($schemaValue) + ' + \'';
                  } else {
                    out += '' + ($schema);
                  }
                  out += ' properties\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema:  ';
                  if ($isData) {
                    out += 'validate.schema' + ($schemaPath);
                  } else {
                    out += '' + ($schema);
                  }
                  out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += '} ';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var multipleOf = function generate_multipleOf(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              if (!($isData || typeof $schema == 'number')) {
                throw new Error($keyword + ' must be number');
              }
              out += 'var division' + ($lvl) + ';if (';
              if ($isData) {
                out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \'number\' || ';
              }
              out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';
              if (it.opts.multipleOfPrecision) {
                out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';
              } else {
                out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';
              }
              out += ' ) ';
              if ($isData) {
                out += '  )  ';
              }
              out += ' ) {   ';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('multipleOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should be multiple of ';
                  if ($isData) {
                    out += '\' + ' + ($schemaValue);
                  } else {
                    out += '' + ($schemaValue) + '\'';
                  }
                }
                if (it.opts.verbose) {
                  out += ' , schema:  ';
                  if ($isData) {
                    out += 'validate.schema' + ($schemaPath);
                  } else {
                    out += '' + ($schema);
                  }
                  out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += '} ';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var not = function generate_not(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                out += ' var ' + ($errs) + ' = errors;  ';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                $it.createErrors = false;
                var $allErrorsOption;
                if ($it.opts.allErrors) {
                  $allErrorsOption = $it.opts.allErrors;
                  $it.opts.allErrors = false;
                }
                out += ' ' + (it.validate($it)) + ' ';
                $it.createErrors = true;
                if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' if (' + ($nextValid) + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT be valid\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';
                if (it.opts.allErrors) {
                  out += ' } ';
                }
              } else {
                out += '  var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('not') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT be valid\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if ($breakOnError) {
                  out += ' if (false) { ';
                }
              }
              return out;
            };

            var oneOf = function generate_oneOf(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $currentBaseId = $it.baseId,
                $prevValid = 'prevValid' + $lvl,
                $passingSchemas = 'passingSchemas' + $lvl;
              out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';
              var $wasComposite = it.compositeRule;
              it.compositeRule = $it.compositeRule = true;
              var arr1 = $schema;
              if (arr1) {
                var $sch, $i = -1,
                  l1 = arr1.length - 1;
                while ($i < l1) {
                  $sch = arr1[$i += 1];
                  if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
                    $it.schema = $sch;
                    $it.schemaPath = $schemaPath + '[' + $i + ']';
                    $it.errSchemaPath = $errSchemaPath + '/' + $i;
                    out += '  ' + (it.validate($it)) + ' ';
                    $it.baseId = $currentBaseId;
                  } else {
                    out += ' var ' + ($nextValid) + ' = true; ';
                  }
                  if ($i) {
                    out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';
                    $closingBraces += '}';
                  }
                  out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';
                }
              }
              it.compositeRule = $it.compositeRule = $wasComposite;
              out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('oneOf') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should match exactly one schema in oneOf\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError(vErrors); ';
                } else {
                  out += ' validate.errors = vErrors; return false; ';
                }
              }
              out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';
              if (it.opts.allErrors) {
                out += ' } ';
              }
              return out;
            };

            var pattern = function generate_pattern(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
              out += 'if ( ';
              if ($isData) {
                out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \'string\') || ';
              }
              out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';
              var $$outStack = $$outStack || [];
              $$outStack.push(out);
              out = ''; /* istanbul ignore else */
              if (it.createErrors !== false) {
                out += ' { keyword: \'' + ('pattern') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';
                if ($isData) {
                  out += '' + ($schemaValue);
                } else {
                  out += '' + (it.util.toQuotedString($schema));
                }
                out += '  } ';
                if (it.opts.messages !== false) {
                  out += ' , message: \'should match pattern "';
                  if ($isData) {
                    out += '\' + ' + ($schemaValue) + ' + \'';
                  } else {
                    out += '' + (it.util.escapeQuotes($schema));
                  }
                  out += '"\' ';
                }
                if (it.opts.verbose) {
                  out += ' , schema:  ';
                  if ($isData) {
                    out += 'validate.schema' + ($schemaPath);
                  } else {
                    out += '' + (it.util.toQuotedString($schema));
                  }
                  out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                }
                out += ' } ';
              } else {
                out += ' {} ';
              }
              var __err = out;
              out = $$outStack.pop();
              if (!it.compositeRule && $breakOnError) {
                /* istanbul ignore if */
                if (it.async) {
                  out += ' throw new ValidationError([' + (__err) + ']); ';
                } else {
                  out += ' validate.errors = [' + (__err) + ']; return false; ';
                }
              } else {
                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
              }
              out += '} ';
              if ($breakOnError) {
                out += ' else { ';
              }
              return out;
            };

            var properties$3 = function generate_properties(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              var $key = 'key' + $lvl,
                $idx = 'idx' + $lvl,
                $dataNxt = $it.dataLevel = it.dataLevel + 1,
                $nextData = 'data' + $dataNxt,
                $dataProperties = 'dataProperties' + $lvl;
              var $schemaKeys = Object.keys($schema || {}).filter(notProto),
                $pProperties = it.schema.patternProperties || {},
                $pPropertyKeys = Object.keys($pProperties).filter(notProto),
                $aProperties = it.schema.additionalProperties,
                $someProperties = $schemaKeys.length || $pPropertyKeys.length,
                $noAdditional = $aProperties === false,
                $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,
                $removeAdditional = it.opts.removeAdditional,
                $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
                $ownProperties = it.opts.ownProperties,
                $currentBaseId = it.baseId;
              var $required = it.schema.required;
              if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
                var $requiredHash = it.util.toHash($required);
              }

              function notProto(p) {
                return p !== '__proto__';
              }
              out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';
              if ($ownProperties) {
                out += ' var ' + ($dataProperties) + ' = undefined;';
              }
              if ($checkAdditional) {
                if ($ownProperties) {
                  out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
                } else {
                  out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
                }
                if ($someProperties) {
                  out += ' var isAdditional' + ($lvl) + ' = !(false ';
                  if ($schemaKeys.length) {
                    if ($schemaKeys.length > 8) {
                      out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';
                    } else {
                      var arr1 = $schemaKeys;
                      if (arr1) {
                        var $propertyKey, i1 = -1,
                          l1 = arr1.length - 1;
                        while (i1 < l1) {
                          $propertyKey = arr1[i1 += 1];
                          out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';
                        }
                      }
                    }
                  }
                  if ($pPropertyKeys.length) {
                    var arr2 = $pPropertyKeys;
                    if (arr2) {
                      var $pProperty, $i = -1,
                        l2 = arr2.length - 1;
                      while ($i < l2) {
                        $pProperty = arr2[$i += 1];
                        out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';
                      }
                    }
                  }
                  out += ' ); if (isAdditional' + ($lvl) + ') { ';
                }
                if ($removeAdditional == 'all') {
                  out += ' delete ' + ($data) + '[' + ($key) + ']; ';
                } else {
                  var $currentErrorPath = it.errorPath;
                  var $additionalProperty = '\' + ' + $key + ' + \'';
                  if (it.opts._errorDataPathProperty) {
                    it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                  }
                  if ($noAdditional) {
                    if ($removeAdditional) {
                      out += ' delete ' + ($data) + '[' + ($key) + ']; ';
                    } else {
                      out += ' ' + ($nextValid) + ' = false; ';
                      var $currErrSchemaPath = $errSchemaPath;
                      $errSchemaPath = it.errSchemaPath + '/additionalProperties';
                      var $$outStack = $$outStack || [];
                      $$outStack.push(out);
                      out = ''; /* istanbul ignore else */
                      if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ('additionalProperties') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \'' + ($additionalProperty) + '\' } ';
                        if (it.opts.messages !== false) {
                          out += ' , message: \'';
                          if (it.opts._errorDataPathProperty) {
                            out += 'is an invalid additional property';
                          } else {
                            out += 'should NOT have additional properties';
                          }
                          out += '\' ';
                        }
                        if (it.opts.verbose) {
                          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                        }
                        out += ' } ';
                      } else {
                        out += ' {} ';
                      }
                      var __err = out;
                      out = $$outStack.pop();
                      if (!it.compositeRule && $breakOnError) {
                        /* istanbul ignore if */
                        if (it.async) {
                          out += ' throw new ValidationError([' + (__err) + ']); ';
                        } else {
                          out += ' validate.errors = [' + (__err) + ']; return false; ';
                        }
                      } else {
                        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                      }
                      $errSchemaPath = $currErrSchemaPath;
                      if ($breakOnError) {
                        out += ' break; ';
                      }
                    }
                  } else if ($additionalIsSchema) {
                    if ($removeAdditional == 'failing') {
                      out += ' var ' + ($errs) + ' = errors;  ';
                      var $wasComposite = it.compositeRule;
                      it.compositeRule = $it.compositeRule = true;
                      $it.schema = $aProperties;
                      $it.schemaPath = it.schemaPath + '.additionalProperties';
                      $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
                      $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                      var $passData = $data + '[' + $key + ']';
                      $it.dataPathArr[$dataNxt] = $key;
                      var $code = it.validate($it);
                      $it.baseId = $currentBaseId;
                      if (it.util.varOccurences($code, $nextData) < 2) {
                        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                      } else {
                        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                      }
                      out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';
                      it.compositeRule = $it.compositeRule = $wasComposite;
                    } else {
                      $it.schema = $aProperties;
                      $it.schemaPath = it.schemaPath + '.additionalProperties';
                      $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
                      $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                      var $passData = $data + '[' + $key + ']';
                      $it.dataPathArr[$dataNxt] = $key;
                      var $code = it.validate($it);
                      $it.baseId = $currentBaseId;
                      if (it.util.varOccurences($code, $nextData) < 2) {
                        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                      } else {
                        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                      }
                      if ($breakOnError) {
                        out += ' if (!' + ($nextValid) + ') break; ';
                      }
                    }
                  }
                  it.errorPath = $currentErrorPath;
                }
                if ($someProperties) {
                  out += ' } ';
                }
                out += ' }  ';
                if ($breakOnError) {
                  out += ' if (' + ($nextValid) + ') { ';
                  $closingBraces += '}';
                }
              }
              var $useDefaults = it.opts.useDefaults && !it.compositeRule;
              if ($schemaKeys.length) {
                var arr3 = $schemaKeys;
                if (arr3) {
                  var $propertyKey, i3 = -1,
                    l3 = arr3.length - 1;
                  while (i3 < l3) {
                    $propertyKey = arr3[i3 += 1];
                    var $sch = $schema[$propertyKey];
                    if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
                      var $prop = it.util.getProperty($propertyKey),
                        $passData = $data + $prop,
                        $hasDefault = $useDefaults && $sch.default !== undefined;
                      $it.schema = $sch;
                      $it.schemaPath = $schemaPath + $prop;
                      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
                      $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
                      $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
                      var $code = it.validate($it);
                      $it.baseId = $currentBaseId;
                      if (it.util.varOccurences($code, $nextData) < 2) {
                        $code = it.util.varReplace($code, $nextData, $passData);
                        var $useData = $passData;
                      } else {
                        var $useData = $nextData;
                        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';
                      }
                      if ($hasDefault) {
                        out += ' ' + ($code) + ' ';
                      } else {
                        if ($requiredHash && $requiredHash[$propertyKey]) {
                          out += ' if ( ' + ($useData) + ' === undefined ';
                          if ($ownProperties) {
                            out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                          }
                          out += ') { ' + ($nextValid) + ' = false; ';
                          var $currentErrorPath = it.errorPath,
                            $currErrSchemaPath = $errSchemaPath,
                            $missingProperty = it.util.escapeQuotes($propertyKey);
                          if (it.opts._errorDataPathProperty) {
                            it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                          }
                          $errSchemaPath = it.errSchemaPath + '/required';
                          var $$outStack = $$outStack || [];
                          $$outStack.push(out);
                          out = ''; /* istanbul ignore else */
                          if (it.createErrors !== false) {
                            out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                            if (it.opts.messages !== false) {
                              out += ' , message: \'';
                              if (it.opts._errorDataPathProperty) {
                                out += 'is a required property';
                              } else {
                                out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                              }
                              out += '\' ';
                            }
                            if (it.opts.verbose) {
                              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                            }
                            out += ' } ';
                          } else {
                            out += ' {} ';
                          }
                          var __err = out;
                          out = $$outStack.pop();
                          if (!it.compositeRule && $breakOnError) {
                            /* istanbul ignore if */
                            if (it.async) {
                              out += ' throw new ValidationError([' + (__err) + ']); ';
                            } else {
                              out += ' validate.errors = [' + (__err) + ']; return false; ';
                            }
                          } else {
                            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                          }
                          $errSchemaPath = $currErrSchemaPath;
                          it.errorPath = $currentErrorPath;
                          out += ' } else { ';
                        } else {
                          if ($breakOnError) {
                            out += ' if ( ' + ($useData) + ' === undefined ';
                            if ($ownProperties) {
                              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                            }
                            out += ') { ' + ($nextValid) + ' = true; } else { ';
                          } else {
                            out += ' if (' + ($useData) + ' !== undefined ';
                            if ($ownProperties) {
                              out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                            }
                            out += ' ) { ';
                          }
                        }
                        out += ' ' + ($code) + ' } ';
                      }
                    }
                    if ($breakOnError) {
                      out += ' if (' + ($nextValid) + ') { ';
                      $closingBraces += '}';
                    }
                  }
                }
              }
              if ($pPropertyKeys.length) {
                var arr4 = $pPropertyKeys;
                if (arr4) {
                  var $pProperty, i4 = -1,
                    l4 = arr4.length - 1;
                  while (i4 < l4) {
                    $pProperty = arr4[i4 += 1];
                    var $sch = $pProperties[$pProperty];
                    if ((it.opts.strictKeywords ? (typeof $sch == 'object' && Object.keys($sch).length > 0) || $sch === false : it.util.schemaHasRules($sch, it.RULES.all))) {
                      $it.schema = $sch;
                      $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
                      $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
                      if ($ownProperties) {
                        out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
                      } else {
                        out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
                      }
                      out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';
                      $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
                      var $passData = $data + '[' + $key + ']';
                      $it.dataPathArr[$dataNxt] = $key;
                      var $code = it.validate($it);
                      $it.baseId = $currentBaseId;
                      if (it.util.varOccurences($code, $nextData) < 2) {
                        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                      } else {
                        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                      }
                      if ($breakOnError) {
                        out += ' if (!' + ($nextValid) + ') break; ';
                      }
                      out += ' } ';
                      if ($breakOnError) {
                        out += ' else ' + ($nextValid) + ' = true; ';
                      }
                      out += ' }  ';
                      if ($breakOnError) {
                        out += ' if (' + ($nextValid) + ') { ';
                        $closingBraces += '}';
                      }
                    }
                  }
                }
              }
              if ($breakOnError) {
                out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
              }
              return out;
            };

            var propertyNames = function generate_propertyNames(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $errs = 'errs__' + $lvl;
              var $it = it.util.copy(it);
              var $closingBraces = '';
              $it.level++;
              var $nextValid = 'valid' + $it.level;
              out += 'var ' + ($errs) + ' = errors;';
              if ((it.opts.strictKeywords ? (typeof $schema == 'object' && Object.keys($schema).length > 0) || $schema === false : it.util.schemaHasRules($schema, it.RULES.all))) {
                $it.schema = $schema;
                $it.schemaPath = $schemaPath;
                $it.errSchemaPath = $errSchemaPath;
                var $key = 'key' + $lvl,
                  $idx = 'idx' + $lvl,
                  $i = 'i' + $lvl,
                  $invalidName = '\' + ' + $key + ' + \'',
                  $dataNxt = $it.dataLevel = it.dataLevel + 1,
                  $nextData = 'data' + $dataNxt,
                  $dataProperties = 'dataProperties' + $lvl,
                  $ownProperties = it.opts.ownProperties,
                  $currentBaseId = it.baseId;
                if ($ownProperties) {
                  out += ' var ' + ($dataProperties) + ' = undefined; ';
                }
                if ($ownProperties) {
                  out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
                } else {
                  out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
                }
                out += ' var startErrs' + ($lvl) + ' = errors; ';
                var $passData = $key;
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                var $code = it.validate($it);
                $it.baseId = $currentBaseId;
                if (it.util.varOccurences($code, $nextData) < 2) {
                  out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';
                } else {
                  out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';
                }
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('propertyNames') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \'' + ($invalidName) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'property name \\\'' + ($invalidName) + '\\\' is invalid\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError(vErrors); ';
                  } else {
                    out += ' validate.errors = vErrors; return false; ';
                  }
                }
                if ($breakOnError) {
                  out += ' break; ';
                }
                out += ' } }';
              }
              if ($breakOnError) {
                out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';
              }
              return out;
            };

            var required$2 = function generate_required(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $isData = it.opts.$data && $schema && $schema.$data;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
              }
              var $vSchema = 'schema' + $lvl;
              if (!$isData) {
                if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
                  var $required = [];
                  var arr1 = $schema;
                  if (arr1) {
                    var $property, i1 = -1,
                      l1 = arr1.length - 1;
                    while (i1 < l1) {
                      $property = arr1[i1 += 1];
                      var $propertySch = it.schema.properties[$property];
                      if (!($propertySch && (it.opts.strictKeywords ? (typeof $propertySch == 'object' && Object.keys($propertySch).length > 0) || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
                        $required[$required.length] = $property;
                      }
                    }
                  }
                } else {
                  var $required = $schema;
                }
              }
              if ($isData || $required.length) {
                var $currentErrorPath = it.errorPath,
                  $loopRequired = $isData || $required.length >= it.opts.loopRequired,
                  $ownProperties = it.opts.ownProperties;
                if ($breakOnError) {
                  out += ' var missing' + ($lvl) + '; ';
                  if ($loopRequired) {
                    if (!$isData) {
                      out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
                    }
                    var $i = 'i' + $lvl,
                      $propertyPath = 'schema' + $lvl + '[' + $i + ']',
                      $missingProperty = '\' + ' + $propertyPath + ' + \'';
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
                    }
                    out += ' var ' + ($valid) + ' = true; ';
                    if ($isData) {
                      out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';
                    }
                    out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';
                    if ($ownProperties) {
                      out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
                    }
                    out += '; if (!' + ($valid) + ') break; } ';
                    if ($isData) {
                      out += '  }  ';
                    }
                    out += '  if (!' + ($valid) + ') {   ';
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'';
                        if (it.opts._errorDataPathProperty) {
                          out += 'is a required property';
                        } else {
                          out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                        }
                        out += '\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                      } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                    out += ' } else { ';
                  } else {
                    out += ' if ( ';
                    var arr2 = $required;
                    if (arr2) {
                      var $propertyKey, $i = -1,
                        l2 = arr2.length - 1;
                      while ($i < l2) {
                        $propertyKey = arr2[$i += 1];
                        if ($i) {
                          out += ' || ';
                        }
                        var $prop = it.util.getProperty($propertyKey),
                          $useData = $data + $prop;
                        out += ' ( ( ' + ($useData) + ' === undefined ';
                        if ($ownProperties) {
                          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                        }
                        out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';
                      }
                    }
                    out += ') {  ';
                    var $propertyPath = 'missing' + $lvl,
                      $missingProperty = '\' + ' + $propertyPath + ' + \'';
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
                    }
                    var $$outStack = $$outStack || [];
                    $$outStack.push(out);
                    out = ''; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'';
                        if (it.opts._errorDataPathProperty) {
                          out += 'is a required property';
                        } else {
                          out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                        }
                        out += '\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    var __err = out;
                    out = $$outStack.pop();
                    if (!it.compositeRule && $breakOnError) {
                      /* istanbul ignore if */
                      if (it.async) {
                        out += ' throw new ValidationError([' + (__err) + ']); ';
                      } else {
                        out += ' validate.errors = [' + (__err) + ']; return false; ';
                      }
                    } else {
                      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                    }
                    out += ' } else { ';
                  }
                } else {
                  if ($loopRequired) {
                    if (!$isData) {
                      out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';
                    }
                    var $i = 'i' + $lvl,
                      $propertyPath = 'schema' + $lvl + '[' + $i + ']',
                      $missingProperty = '\' + ' + $propertyPath + ' + \'';
                    if (it.opts._errorDataPathProperty) {
                      it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
                    }
                    if ($isData) {
                      out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */
                      if (it.createErrors !== false) {
                        out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                        if (it.opts.messages !== false) {
                          out += ' , message: \'';
                          if (it.opts._errorDataPathProperty) {
                            out += 'is a required property';
                          } else {
                            out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                          }
                          out += '\' ';
                        }
                        if (it.opts.verbose) {
                          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                        }
                        out += ' } ';
                      } else {
                        out += ' {} ';
                      }
                      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';
                    }
                    out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';
                    if ($ownProperties) {
                      out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';
                    }
                    out += ') {  var err =   '; /* istanbul ignore else */
                    if (it.createErrors !== false) {
                      out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                      if (it.opts.messages !== false) {
                        out += ' , message: \'';
                        if (it.opts._errorDataPathProperty) {
                          out += 'is a required property';
                        } else {
                          out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                        }
                        out += '\' ';
                      }
                      if (it.opts.verbose) {
                        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                      }
                      out += ' } ';
                    } else {
                      out += ' {} ';
                    }
                    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
                    if ($isData) {
                      out += '  }  ';
                    }
                  } else {
                    var arr3 = $required;
                    if (arr3) {
                      var $propertyKey, i3 = -1,
                        l3 = arr3.length - 1;
                      while (i3 < l3) {
                        $propertyKey = arr3[i3 += 1];
                        var $prop = it.util.getProperty($propertyKey),
                          $missingProperty = it.util.escapeQuotes($propertyKey),
                          $useData = $data + $prop;
                        if (it.opts._errorDataPathProperty) {
                          it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                        }
                        out += ' if ( ' + ($useData) + ' === undefined ';
                        if ($ownProperties) {
                          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \'' + (it.util.escapeQuotes($propertyKey)) + '\') ';
                        }
                        out += ') {  var err =   '; /* istanbul ignore else */
                        if (it.createErrors !== false) {
                          out += ' { keyword: \'' + ('required') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \'' + ($missingProperty) + '\' } ';
                          if (it.opts.messages !== false) {
                            out += ' , message: \'';
                            if (it.opts._errorDataPathProperty) {
                              out += 'is a required property';
                            } else {
                              out += 'should have required property \\\'' + ($missingProperty) + '\\\'';
                            }
                            out += '\' ';
                          }
                          if (it.opts.verbose) {
                            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                          }
                          out += ' } ';
                        } else {
                          out += ' {} ';
                        }
                        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
                      }
                    }
                  }
                }
                it.errorPath = $currentErrorPath;
              } else if ($breakOnError) {
                out += ' if (true) {';
              }
              return out;
            };

            var uniqueItems = function generate_uniqueItems(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              if (($schema || $isData) && it.opts.uniqueItems !== false) {
                if ($isData) {
                  out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'boolean\') ' + ($valid) + ' = false; else { ';
                }
                out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';
                var $itemType = it.schema.items && it.schema.items.type,
                  $typeIsArray = Array.isArray($itemType);
                if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {
                  out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';
                } else {
                  out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';
                  var $method = 'checkDataType' + ($typeIsArray ? 's' : '');
                  out += ' if (' + (it.util[$method]($itemType, 'item', it.opts.strictNumbers, true)) + ') continue; ';
                  if ($typeIsArray) {
                    out += ' if (typeof item == \'string\') item = \'"\' + item; ';
                  }
                  out += ' if (typeof itemIndices[item] == \'number\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';
                }
                out += ' } ';
                if ($isData) {
                  out += '  }  ';
                }
                out += ' if (!' + ($valid) + ') {   ';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ('uniqueItems') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema:  ';
                    if ($isData) {
                      out += 'validate.schema' + ($schemaPath);
                    } else {
                      out += '' + ($schema);
                    }
                    out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                out += ' } ';
                if ($breakOnError) {
                  out += ' else { ';
                }
              } else {
                if ($breakOnError) {
                  out += ' if (true) { ';
                }
              }
              return out;
            };

            //all requires must be explicit because browserify won't work with dynamic requires
            var dotjs = {
              '$ref': ref,
              allOf: allOf,
              anyOf: anyOf,
              '$comment': comment,
              const: _const,
              contains: contains,
              dependencies: dependencies,
              'enum': _enum,
              format: format,
              'if': _if,
              items: items,
              maximum: _limit,
              minimum: _limit,
              maxItems: _limitItems,
              minItems: _limitItems,
              maxLength: _limitLength,
              minLength: _limitLength,
              maxProperties: _limitProperties,
              minProperties: _limitProperties,
              multipleOf: multipleOf,
              not: not,
              oneOf: oneOf,
              pattern: pattern,
              properties: properties$3,
              propertyNames: propertyNames,
              required: required$2,
              uniqueItems: uniqueItems,
              validate: validate$1
            };

            var ruleModules = dotjs
              , toHash = util$5.toHash;

            var rules$1 = function rules() {
              var RULES = [
                { type: 'number',
                  rules: [ { 'maximum': ['exclusiveMaximum'] },
                           { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },
                { type: 'string',
                  rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },
                { type: 'array',
                  rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },
                { type: 'object',
                  rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',
                           { 'properties': ['additionalProperties', 'patternProperties'] } ] },
                { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }
              ];

              var ALL = [ 'type', '$comment' ];
              var KEYWORDS = [
                '$schema', '$id', 'id', '$data', '$async', 'title',
                'description', 'default', 'definitions',
                'examples', 'readOnly', 'writeOnly',
                'contentMediaType', 'contentEncoding',
                'additionalItems', 'then', 'else'
              ];
              var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];
              RULES.all = toHash(ALL);
              RULES.types = toHash(TYPES);

              RULES.forEach(function (group) {
                group.rules = group.rules.map(function (keyword) {
                  var implKeywords;
                  if (typeof keyword == 'object') {
                    var key = Object.keys(keyword)[0];
                    implKeywords = keyword[key];
                    keyword = key;
                    implKeywords.forEach(function (k) {
                      ALL.push(k);
                      RULES.all[k] = true;
                    });
                  }
                  ALL.push(keyword);
                  var rule = RULES.all[keyword] = {
                    keyword: keyword,
                    code: ruleModules[keyword],
                    implements: implKeywords
                  };
                  return rule;
                });

                RULES.all.$comment = {
                  keyword: '$comment',
                  code: ruleModules.$comment
                };

                if (group.type) RULES.types[group.type] = group;
              });

              RULES.keywords = toHash(ALL.concat(KEYWORDS));
              RULES.custom = {};

              return RULES;
            };

            var KEYWORDS = [
              'multipleOf',
              'maximum',
              'exclusiveMaximum',
              'minimum',
              'exclusiveMinimum',
              'maxLength',
              'minLength',
              'pattern',
              'additionalItems',
              'maxItems',
              'minItems',
              'uniqueItems',
              'maxProperties',
              'minProperties',
              'required',
              'additionalProperties',
              'enum',
              'format',
              'const'
            ];

            var data = function (metaSchema, keywordsJsonPointers) {
              for (var i=0; i<keywordsJsonPointers.length; i++) {
                metaSchema = JSON.parse(JSON.stringify(metaSchema));
                var segments = keywordsJsonPointers[i].split('/');
                var keywords = metaSchema;
                var j;
                for (j=1; j<segments.length; j++)
                  keywords = keywords[segments[j]];

                for (j=0; j<KEYWORDS.length; j++) {
                  var key = KEYWORDS[j];
                  var schema = keywords[key];
                  if (schema) {
                    keywords[key] = {
                      anyOf: [
                        schema,
                        { $ref: 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }
                      ]
                    };
                  }
                }
              }

              return metaSchema;
            };

            var MissingRefError = error_classes.MissingRef;

            var async = compileAsync;


            /**
             * Creates validating function for passed schema with asynchronous loading of missing schemas.
             * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.
             * @this  Ajv
             * @param {Object}   schema schema object
             * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped
             * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.
             * @return {Promise} promise that resolves with a validating function.
             */
            function compileAsync(schema, meta, callback) {
              /* eslint no-shadow: 0 */
              /* global Promise */
              /* jshint validthis: true */
              var self = this;
              if (typeof this._opts.loadSchema != 'function')
                throw new Error('options.loadSchema should be a function');

              if (typeof meta == 'function') {
                callback = meta;
                meta = undefined;
              }

              var p = loadMetaSchemaOf(schema).then(function () {
                var schemaObj = self._addSchema(schema, undefined, meta);
                return schemaObj.validate || _compileAsync(schemaObj);
              });

              if (callback) {
                p.then(
                  function(v) { callback(null, v); },
                  callback
                );
              }

              return p;


              function loadMetaSchemaOf(sch) {
                var $schema = sch.$schema;
                return $schema && !self.getSchema($schema)
                        ? compileAsync.call(self, { $ref: $schema }, true)
                        : Promise.resolve();
              }


              function _compileAsync(schemaObj) {
                try { return self._compile(schemaObj); }
                catch(e) {
                  if (e instanceof MissingRefError) return loadMissingSchema(e);
                  throw e;
                }


                function loadMissingSchema(e) {
                  var ref = e.missingSchema;
                  if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');

                  var schemaPromise = self._loadingSchemas[ref];
                  if (!schemaPromise) {
                    schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);
                    schemaPromise.then(removePromise, removePromise);
                  }

                  return schemaPromise.then(function (sch) {
                    if (!added(ref)) {
                      return loadMetaSchemaOf(sch).then(function () {
                        if (!added(ref)) self.addSchema(sch, ref, undefined, meta);
                      });
                    }
                  }).then(function() {
                    return _compileAsync(schemaObj);
                  });

                  function removePromise() {
                    delete self._loadingSchemas[ref];
                  }

                  function added(ref) {
                    return self._refs[ref] || self._schemas[ref];
                  }
                }
              }
            }

            var custom = function generate_custom(it, $keyword, $ruleType) {
              var out = ' ';
              var $lvl = it.level;
              var $dataLvl = it.dataLevel;
              var $schema = it.schema[$keyword];
              var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
              var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
              var $breakOnError = !it.opts.allErrors;
              var $errorKeyword;
              var $data = 'data' + ($dataLvl || '');
              var $valid = 'valid' + $lvl;
              var $errs = 'errs__' + $lvl;
              var $isData = it.opts.$data && $schema && $schema.$data,
                $schemaValue;
              if ($isData) {
                out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
                $schemaValue = 'schema' + $lvl;
              } else {
                $schemaValue = $schema;
              }
              var $rule = this,
                $definition = 'definition' + $lvl,
                $rDef = $rule.definition,
                $closingBraces = '';
              var $compile, $inline, $macro, $ruleValidate, $validateCode;
              if ($isData && $rDef.$data) {
                $validateCode = 'keywordValidate' + $lvl;
                var $validateSchema = $rDef.validateSchema;
                out += ' var ' + ($definition) + ' = RULES.custom[\'' + ($keyword) + '\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';
              } else {
                $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
                if (!$ruleValidate) return;
                $schemaValue = 'validate.schema' + $schemaPath;
                $validateCode = $ruleValidate.code;
                $compile = $rDef.compile;
                $inline = $rDef.inline;
                $macro = $rDef.macro;
              }
              var $ruleErrs = $validateCode + '.errors',
                $i = 'i' + $lvl,
                $ruleErr = 'ruleErr' + $lvl,
                $asyncKeyword = $rDef.async;
              if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
              if (!($inline || $macro)) {
                out += '' + ($ruleErrs) + ' = null;';
              }
              out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';
              if ($isData && $rDef.$data) {
                $closingBraces += '}';
                out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';
                if ($validateSchema) {
                  $closingBraces += '}';
                  out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';
                }
              }
              if ($inline) {
                if ($rDef.statements) {
                  out += ' ' + ($ruleValidate.validate) + ' ';
                } else {
                  out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';
                }
              } else if ($macro) {
                var $it = it.util.copy(it);
                var $closingBraces = '';
                $it.level++;
                var $nextValid = 'valid' + $it.level;
                $it.schema = $ruleValidate.validate;
                $it.schemaPath = '';
                var $wasComposite = it.compositeRule;
                it.compositeRule = $it.compositeRule = true;
                var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
                it.compositeRule = $it.compositeRule = $wasComposite;
                out += ' ' + ($code);
              } else {
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = '';
                out += '  ' + ($validateCode) + '.call( ';
                if (it.opts.passContext) {
                  out += 'this';
                } else {
                  out += 'self';
                }
                if ($compile || $rDef.schema === false) {
                  out += ' , ' + ($data) + ' ';
                } else {
                  out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';
                }
                out += ' , (dataPath || \'\')';
                if (it.errorPath != '""') {
                  out += ' + ' + (it.errorPath);
                }
                var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',
                  $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
                out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';
                var def_callRuleValidate = out;
                out = $$outStack.pop();
                if ($rDef.errors === false) {
                  out += ' ' + ($valid) + ' = ';
                  if ($asyncKeyword) {
                    out += 'await ';
                  }
                  out += '' + (def_callRuleValidate) + '; ';
                } else {
                  if ($asyncKeyword) {
                    $ruleErrs = 'customErrors' + $lvl;
                    out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';
                  } else {
                    out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';
                  }
                }
              }
              if ($rDef.modifying) {
                out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';
              }
              out += '' + ($closingBraces);
              if ($rDef.valid) {
                if ($breakOnError) {
                  out += ' if (true) { ';
                }
              } else {
                out += ' if ( ';
                if ($rDef.valid === undefined) {
                  out += ' !';
                  if ($macro) {
                    out += '' + ($nextValid);
                  } else {
                    out += '' + ($valid);
                  }
                } else {
                  out += ' ' + (!$rDef.valid) + ' ';
                }
                out += ') { ';
                $errorKeyword = $rule.keyword;
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = '';
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = ''; /* istanbul ignore else */
                if (it.createErrors !== false) {
                  out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
                  if (it.opts.messages !== false) {
                    out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
                  }
                  if (it.opts.verbose) {
                    out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                  }
                  out += ' } ';
                } else {
                  out += ' {} ';
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  /* istanbul ignore if */
                  if (it.async) {
                    out += ' throw new ValidationError([' + (__err) + ']); ';
                  } else {
                    out += ' validate.errors = [' + (__err) + ']; return false; ';
                  }
                } else {
                  out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                }
                var def_customError = out;
                out = $$outStack.pop();
                if ($inline) {
                  if ($rDef.errors) {
                    if ($rDef.errors != 'full') {
                      out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
                      if (it.opts.verbose) {
                        out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
                      }
                      out += ' } ';
                    }
                  } else {
                    if ($rDef.errors === false) {
                      out += ' ' + (def_customError) + ' ';
                    } else {
                      out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '"; } ';
                      if (it.opts.verbose) {
                        out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
                      }
                      out += ' } } ';
                    }
                  }
                } else if ($macro) {
                  out += '   var err =   '; /* istanbul ignore else */
                  if (it.createErrors !== false) {
                    out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \'' + ($rule.keyword) + '\' } ';
                    if (it.opts.messages !== false) {
                      out += ' , message: \'should pass "' + ($rule.keyword) + '" keyword validation\' ';
                    }
                    if (it.opts.verbose) {
                      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
                    }
                    out += ' } ';
                  } else {
                    out += ' {} ';
                  }
                  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
                  if (!it.compositeRule && $breakOnError) {
                    /* istanbul ignore if */
                    if (it.async) {
                      out += ' throw new ValidationError(vErrors); ';
                    } else {
                      out += ' validate.errors = vErrors; return false; ';
                    }
                  }
                } else {
                  if ($rDef.errors === false) {
                    out += ' ' + (def_customError) + ' ';
                  } else {
                    out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \'\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = "' + ($errSchemaPath) + '";  ';
                    if (it.opts.verbose) {
                      out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';
                    }
                    out += ' } } else { ' + (def_customError) + ' } ';
                  }
                }
                out += ' } ';
                if ($breakOnError) {
                  out += ' else { ';
                }
              }
              return out;
            };

            var $schema$2 = "http://json-schema.org/draft-07/schema#";
            var $id$2 = "http://json-schema.org/draft-07/schema#";
            var title$1 = "Core schema meta-schema";
            var definitions$1 = {
            	schemaArray: {
            		type: "array",
            		minItems: 1,
            		items: {
            			$ref: "#"
            		}
            	},
            	nonNegativeInteger: {
            		type: "integer",
            		minimum: 0
            	},
            	nonNegativeIntegerDefault0: {
            		allOf: [
            			{
            				$ref: "#/definitions/nonNegativeInteger"
            			},
            			{
            				"default": 0
            			}
            		]
            	},
            	simpleTypes: {
            		"enum": [
            			"array",
            			"boolean",
            			"integer",
            			"null",
            			"number",
            			"object",
            			"string"
            		]
            	},
            	stringArray: {
            		type: "array",
            		items: {
            			type: "string"
            		},
            		uniqueItems: true,
            		"default": [
            		]
            	}
            };
            var type$2 = [
            	"object",
            	"boolean"
            ];
            var properties$2 = {
            	$id: {
            		type: "string",
            		format: "uri-reference"
            	},
            	$schema: {
            		type: "string",
            		format: "uri"
            	},
            	$ref: {
            		type: "string",
            		format: "uri-reference"
            	},
            	$comment: {
            		type: "string"
            	},
            	title: {
            		type: "string"
            	},
            	description: {
            		type: "string"
            	},
            	"default": true,
            	readOnly: {
            		type: "boolean",
            		"default": false
            	},
            	examples: {
            		type: "array",
            		items: true
            	},
            	multipleOf: {
            		type: "number",
            		exclusiveMinimum: 0
            	},
            	maximum: {
            		type: "number"
            	},
            	exclusiveMaximum: {
            		type: "number"
            	},
            	minimum: {
            		type: "number"
            	},
            	exclusiveMinimum: {
            		type: "number"
            	},
            	maxLength: {
            		$ref: "#/definitions/nonNegativeInteger"
            	},
            	minLength: {
            		$ref: "#/definitions/nonNegativeIntegerDefault0"
            	},
            	pattern: {
            		type: "string",
            		format: "regex"
            	},
            	additionalItems: {
            		$ref: "#"
            	},
            	items: {
            		anyOf: [
            			{
            				$ref: "#"
            			},
            			{
            				$ref: "#/definitions/schemaArray"
            			}
            		],
            		"default": true
            	},
            	maxItems: {
            		$ref: "#/definitions/nonNegativeInteger"
            	},
            	minItems: {
            		$ref: "#/definitions/nonNegativeIntegerDefault0"
            	},
            	uniqueItems: {
            		type: "boolean",
            		"default": false
            	},
            	contains: {
            		$ref: "#"
            	},
            	maxProperties: {
            		$ref: "#/definitions/nonNegativeInteger"
            	},
            	minProperties: {
            		$ref: "#/definitions/nonNegativeIntegerDefault0"
            	},
            	required: {
            		$ref: "#/definitions/stringArray"
            	},
            	additionalProperties: {
            		$ref: "#"
            	},
            	definitions: {
            		type: "object",
            		additionalProperties: {
            			$ref: "#"
            		},
            		"default": {
            		}
            	},
            	properties: {
            		type: "object",
            		additionalProperties: {
            			$ref: "#"
            		},
            		"default": {
            		}
            	},
            	patternProperties: {
            		type: "object",
            		additionalProperties: {
            			$ref: "#"
            		},
            		propertyNames: {
            			format: "regex"
            		},
            		"default": {
            		}
            	},
            	dependencies: {
            		type: "object",
            		additionalProperties: {
            			anyOf: [
            				{
            					$ref: "#"
            				},
            				{
            					$ref: "#/definitions/stringArray"
            				}
            			]
            		}
            	},
            	propertyNames: {
            		$ref: "#"
            	},
            	"const": true,
            	"enum": {
            		type: "array",
            		items: true,
            		minItems: 1,
            		uniqueItems: true
            	},
            	type: {
            		anyOf: [
            			{
            				$ref: "#/definitions/simpleTypes"
            			},
            			{
            				type: "array",
            				items: {
            					$ref: "#/definitions/simpleTypes"
            				},
            				minItems: 1,
            				uniqueItems: true
            			}
            		]
            	},
            	format: {
            		type: "string"
            	},
            	contentMediaType: {
            		type: "string"
            	},
            	contentEncoding: {
            		type: "string"
            	},
            	"if": {
            		$ref: "#"
            	},
            	then: {
            		$ref: "#"
            	},
            	"else": {
            		$ref: "#"
            	},
            	allOf: {
            		$ref: "#/definitions/schemaArray"
            	},
            	anyOf: {
            		$ref: "#/definitions/schemaArray"
            	},
            	oneOf: {
            		$ref: "#/definitions/schemaArray"
            	},
            	not: {
            		$ref: "#"
            	}
            };
            var require$$13 = {
            	$schema: $schema$2,
            	$id: $id$2,
            	title: title$1,
            	definitions: definitions$1,
            	type: type$2,
            	properties: properties$2,
            	"default": true
            };

            var metaSchema = require$$13;

            var definition_schema = {
              $id: 'https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js',
              definitions: {
                simpleTypes: metaSchema.definitions.simpleTypes
              },
              type: 'object',
              dependencies: {
                schema: ['validate'],
                $data: ['validate'],
                statements: ['inline'],
                valid: {not: {required: ['macro']}}
              },
              properties: {
                type: metaSchema.properties.type,
                schema: {type: 'boolean'},
                statements: {type: 'boolean'},
                dependencies: {
                  type: 'array',
                  items: {type: 'string'}
                },
                metaSchema: {type: 'object'},
                modifying: {type: 'boolean'},
                valid: {type: 'boolean'},
                $data: {type: 'boolean'},
                async: {type: 'boolean'},
                errors: {
                  anyOf: [
                    {type: 'boolean'},
                    {const: 'full'}
                  ]
                }
              }
            };

            var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
            var customRuleCode = custom;
            var definitionSchema = definition_schema;

            var keyword = {
              add: addKeyword,
              get: getKeyword,
              remove: removeKeyword,
              validate: validateKeyword
            };


            /**
             * Define custom keyword
             * @this  Ajv
             * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
             * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
             * @return {Ajv} this for method chaining
             */
            function addKeyword(keyword, definition) {
              /* jshint validthis: true */
              /* eslint no-shadow: 0 */
              var RULES = this.RULES;
              if (RULES.keywords[keyword])
                throw new Error('Keyword ' + keyword + ' is already defined');

              if (!IDENTIFIER.test(keyword))
                throw new Error('Keyword ' + keyword + ' is not a valid identifier');

              if (definition) {
                this.validateKeyword(definition, true);

                var dataType = definition.type;
                if (Array.isArray(dataType)) {
                  for (var i=0; i<dataType.length; i++)
                    _addRule(keyword, dataType[i], definition);
                } else {
                  _addRule(keyword, dataType, definition);
                }

                var metaSchema = definition.metaSchema;
                if (metaSchema) {
                  if (definition.$data && this._opts.$data) {
                    metaSchema = {
                      anyOf: [
                        metaSchema,
                        { '$ref': 'https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#' }
                      ]
                    };
                  }
                  definition.validateSchema = this.compile(metaSchema, true);
                }
              }

              RULES.keywords[keyword] = RULES.all[keyword] = true;


              function _addRule(keyword, dataType, definition) {
                var ruleGroup;
                for (var i=0; i<RULES.length; i++) {
                  var rg = RULES[i];
                  if (rg.type == dataType) {
                    ruleGroup = rg;
                    break;
                  }
                }

                if (!ruleGroup) {
                  ruleGroup = { type: dataType, rules: [] };
                  RULES.push(ruleGroup);
                }

                var rule = {
                  keyword: keyword,
                  definition: definition,
                  custom: true,
                  code: customRuleCode,
                  implements: definition.implements
                };
                ruleGroup.rules.push(rule);
                RULES.custom[keyword] = rule;
              }

              return this;
            }


            /**
             * Get keyword
             * @this  Ajv
             * @param {String} keyword pre-defined or custom keyword.
             * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
             */
            function getKeyword(keyword) {
              /* jshint validthis: true */
              var rule = this.RULES.custom[keyword];
              return rule ? rule.definition : this.RULES.keywords[keyword] || false;
            }


            /**
             * Remove keyword
             * @this  Ajv
             * @param {String} keyword pre-defined or custom keyword.
             * @return {Ajv} this for method chaining
             */
            function removeKeyword(keyword) {
              /* jshint validthis: true */
              var RULES = this.RULES;
              delete RULES.keywords[keyword];
              delete RULES.all[keyword];
              delete RULES.custom[keyword];
              for (var i=0; i<RULES.length; i++) {
                var rules = RULES[i].rules;
                for (var j=0; j<rules.length; j++) {
                  if (rules[j].keyword == keyword) {
                    rules.splice(j, 1);
                    break;
                  }
                }
              }
              return this;
            }


            /**
             * Validate keyword definition
             * @this  Ajv
             * @param {Object} definition keyword definition object.
             * @param {Boolean} throwError true to throw exception if definition is invalid
             * @return {boolean} validation result
             */
            function validateKeyword(definition, throwError) {
              validateKeyword.errors = null;
              var v = this._validateKeyword = this._validateKeyword
                                              || this.compile(definitionSchema, true);

              if (v(definition)) return true;
              validateKeyword.errors = v.errors;
              if (throwError)
                throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));
              else
                return false;
            }

            var $schema$1 = "http://json-schema.org/draft-07/schema#";
            var $id$1 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
            var description$1 = "Meta-schema for $data reference (JSON Schema extension proposal)";
            var type$1 = "object";
            var required$1 = [
            	"$data"
            ];
            var properties$1 = {
            	$data: {
            		type: "string",
            		anyOf: [
            			{
            				format: "relative-json-pointer"
            			},
            			{
            				format: "json-pointer"
            			}
            		]
            	}
            };
            var additionalProperties$1 = false;
            var require$$12 = {
            	$schema: $schema$1,
            	$id: $id$1,
            	description: description$1,
            	type: type$1,
            	required: required$1,
            	properties: properties$1,
            	additionalProperties: additionalProperties$1
            };

            var compileSchema = compile_1
              , resolve = resolve_1
              , Cache = cache.exports
              , SchemaObject = schema_obj
              , stableStringify = fastJsonStableStringify
              , formats = formats_1
              , rules = rules$1
              , $dataMetaSchema = data
              , util = util$5;

            var ajv = Ajv;

            Ajv.prototype.validate = validate;
            Ajv.prototype.compile = compile;
            Ajv.prototype.addSchema = addSchema;
            Ajv.prototype.addMetaSchema = addMetaSchema;
            Ajv.prototype.validateSchema = validateSchema;
            Ajv.prototype.getSchema = getSchema;
            Ajv.prototype.removeSchema = removeSchema;
            Ajv.prototype.addFormat = addFormat;
            Ajv.prototype.errorsText = errorsText;

            Ajv.prototype._addSchema = _addSchema;
            Ajv.prototype._compile = _compile;

            Ajv.prototype.compileAsync = async;
            var customKeyword = keyword;
            Ajv.prototype.addKeyword = customKeyword.add;
            Ajv.prototype.getKeyword = customKeyword.get;
            Ajv.prototype.removeKeyword = customKeyword.remove;
            Ajv.prototype.validateKeyword = customKeyword.validate;

            var errorClasses = error_classes;
            Ajv.ValidationError = errorClasses.Validation;
            Ajv.MissingRefError = errorClasses.MissingRef;
            Ajv.$dataMetaSchema = $dataMetaSchema;

            var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

            var META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];
            var META_SUPPORT_DATA = ['/properties'];

            /**
             * Creates validator instance.
             * Usage: `Ajv(opts)`
             * @param {Object} opts optional options
             * @return {Object} ajv instance
             */
            function Ajv(opts) {
              if (!(this instanceof Ajv)) return new Ajv(opts);
              opts = this._opts = util.copy(opts) || {};
              setLogger(this);
              this._schemas = {};
              this._refs = {};
              this._fragments = {};
              this._formats = formats(opts.format);

              this._cache = opts.cache || new Cache;
              this._loadingSchemas = {};
              this._compilations = [];
              this.RULES = rules();
              this._getId = chooseGetId(opts);

              opts.loopRequired = opts.loopRequired || Infinity;
              if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
              if (opts.serialize === undefined) opts.serialize = stableStringify;
              this._metaOpts = getMetaSchemaOptions(this);

              if (opts.formats) addInitialFormats(this);
              if (opts.keywords) addInitialKeywords(this);
              addDefaultMetaSchema(this);
              if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
              if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});
              addInitialSchemas(this);
            }



            /**
             * Validate data using schema
             * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
             * @this   Ajv
             * @param  {String|Object} schemaKeyRef key, ref or schema object
             * @param  {Any} data to be validated
             * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
             */
            function validate(schemaKeyRef, data) {
              var v;
              if (typeof schemaKeyRef == 'string') {
                v = this.getSchema(schemaKeyRef);
                if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
              } else {
                var schemaObj = this._addSchema(schemaKeyRef);
                v = schemaObj.validate || this._compile(schemaObj);
              }

              var valid = v(data);
              if (v.$async !== true) this.errors = v.errors;
              return valid;
            }


            /**
             * Create validating function for passed schema.
             * @this   Ajv
             * @param  {Object} schema schema object
             * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
             * @return {Function} validating function
             */
            function compile(schema, _meta) {
              var schemaObj = this._addSchema(schema, undefined, _meta);
              return schemaObj.validate || this._compile(schemaObj);
            }


            /**
             * Adds schema to the instance.
             * @this   Ajv
             * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
             * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
             * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
             * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
             * @return {Ajv} this for method chaining
             */
            function addSchema(schema, key, _skipValidation, _meta) {
              if (Array.isArray(schema)){
                for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);
                return this;
              }
              var id = this._getId(schema);
              if (id !== undefined && typeof id != 'string')
                throw new Error('schema id must be string');
              key = resolve.normalizeId(key || id);
              checkUnique(this, key);
              this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
              return this;
            }


            /**
             * Add schema that will be used to validate other schemas
             * options in META_IGNORE_OPTIONS are alway set to false
             * @this   Ajv
             * @param {Object} schema schema object
             * @param {String} key optional schema key
             * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
             * @return {Ajv} this for method chaining
             */
            function addMetaSchema(schema, key, skipValidation) {
              this.addSchema(schema, key, skipValidation, true);
              return this;
            }


            /**
             * Validate schema
             * @this   Ajv
             * @param {Object} schema schema to validate
             * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
             * @return {Boolean} true if schema is valid
             */
            function validateSchema(schema, throwOrLogError) {
              var $schema = schema.$schema;
              if ($schema !== undefined && typeof $schema != 'string')
                throw new Error('$schema must be a string');
              $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
              if (!$schema) {
                this.logger.warn('meta-schema not available');
                this.errors = null;
                return true;
              }
              var valid = this.validate($schema, schema);
              if (!valid && throwOrLogError) {
                var message = 'schema is invalid: ' + this.errorsText();
                if (this._opts.validateSchema == 'log') this.logger.error(message);
                else throw new Error(message);
              }
              return valid;
            }


            function defaultMeta(self) {
              var meta = self._opts.meta;
              self._opts.defaultMeta = typeof meta == 'object'
                                        ? self._getId(meta) || meta
                                        : self.getSchema(META_SCHEMA_ID)
                                          ? META_SCHEMA_ID
                                          : undefined;
              return self._opts.defaultMeta;
            }


            /**
             * Get compiled schema from the instance by `key` or `ref`.
             * @this   Ajv
             * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
             * @return {Function} schema validating function (with property `schema`).
             */
            function getSchema(keyRef) {
              var schemaObj = _getSchemaObj(this, keyRef);
              switch (typeof schemaObj) {
                case 'object': return schemaObj.validate || this._compile(schemaObj);
                case 'string': return this.getSchema(schemaObj);
                case 'undefined': return _getSchemaFragment(this, keyRef);
              }
            }


            function _getSchemaFragment(self, ref) {
              var res = resolve.schema.call(self, { schema: {} }, ref);
              if (res) {
                var schema = res.schema
                  , root = res.root
                  , baseId = res.baseId;
                var v = compileSchema.call(self, schema, root, undefined, baseId);
                self._fragments[ref] = new SchemaObject({
                  ref: ref,
                  fragment: true,
                  schema: schema,
                  root: root,
                  baseId: baseId,
                  validate: v
                });
                return v;
              }
            }


            function _getSchemaObj(self, keyRef) {
              keyRef = resolve.normalizeId(keyRef);
              return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
            }


            /**
             * Remove cached schema(s).
             * If no parameter is passed all schemas but meta-schemas are removed.
             * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
             * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
             * @this   Ajv
             * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
             * @return {Ajv} this for method chaining
             */
            function removeSchema(schemaKeyRef) {
              if (schemaKeyRef instanceof RegExp) {
                _removeAllSchemas(this, this._schemas, schemaKeyRef);
                _removeAllSchemas(this, this._refs, schemaKeyRef);
                return this;
              }
              switch (typeof schemaKeyRef) {
                case 'undefined':
                  _removeAllSchemas(this, this._schemas);
                  _removeAllSchemas(this, this._refs);
                  this._cache.clear();
                  return this;
                case 'string':
                  var schemaObj = _getSchemaObj(this, schemaKeyRef);
                  if (schemaObj) this._cache.del(schemaObj.cacheKey);
                  delete this._schemas[schemaKeyRef];
                  delete this._refs[schemaKeyRef];
                  return this;
                case 'object':
                  var serialize = this._opts.serialize;
                  var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
                  this._cache.del(cacheKey);
                  var id = this._getId(schemaKeyRef);
                  if (id) {
                    id = resolve.normalizeId(id);
                    delete this._schemas[id];
                    delete this._refs[id];
                  }
              }
              return this;
            }


            function _removeAllSchemas(self, schemas, regex) {
              for (var keyRef in schemas) {
                var schemaObj = schemas[keyRef];
                if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
                  self._cache.del(schemaObj.cacheKey);
                  delete schemas[keyRef];
                }
              }
            }


            /* @this   Ajv */
            function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
              if (typeof schema != 'object' && typeof schema != 'boolean')
                throw new Error('schema should be object or boolean');
              var serialize = this._opts.serialize;
              var cacheKey = serialize ? serialize(schema) : schema;
              var cached = this._cache.get(cacheKey);
              if (cached) return cached;

              shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;

              var id = resolve.normalizeId(this._getId(schema));
              if (id && shouldAddSchema) checkUnique(this, id);

              var willValidate = this._opts.validateSchema !== false && !skipValidation;
              var recursiveMeta;
              if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
                this.validateSchema(schema, true);

              var localRefs = resolve.ids.call(this, schema);

              var schemaObj = new SchemaObject({
                id: id,
                schema: schema,
                localRefs: localRefs,
                cacheKey: cacheKey,
                meta: meta
              });

              if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;
              this._cache.put(cacheKey, schemaObj);

              if (willValidate && recursiveMeta) this.validateSchema(schema, true);

              return schemaObj;
            }


            /* @this   Ajv */
            function _compile(schemaObj, root) {
              if (schemaObj.compiling) {
                schemaObj.validate = callValidate;
                callValidate.schema = schemaObj.schema;
                callValidate.errors = null;
                callValidate.root = root ? root : callValidate;
                if (schemaObj.schema.$async === true)
                  callValidate.$async = true;
                return callValidate;
              }
              schemaObj.compiling = true;

              var currentOpts;
              if (schemaObj.meta) {
                currentOpts = this._opts;
                this._opts = this._metaOpts;
              }

              var v;
              try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }
              catch(e) {
                delete schemaObj.validate;
                throw e;
              }
              finally {
                schemaObj.compiling = false;
                if (schemaObj.meta) this._opts = currentOpts;
              }

              schemaObj.validate = v;
              schemaObj.refs = v.refs;
              schemaObj.refVal = v.refVal;
              schemaObj.root = v.root;
              return v;


              /* @this   {*} - custom context, see passContext option */
              function callValidate() {
                /* jshint validthis: true */
                var _validate = schemaObj.validate;
                var result = _validate.apply(this, arguments);
                callValidate.errors = _validate.errors;
                return result;
              }
            }


            function chooseGetId(opts) {
              switch (opts.schemaId) {
                case 'auto': return _get$IdOrId;
                case 'id': return _getId;
                default: return _get$Id;
              }
            }

            /* @this   Ajv */
            function _getId(schema) {
              if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
              return schema.id;
            }

            /* @this   Ajv */
            function _get$Id(schema) {
              if (schema.id) this.logger.warn('schema id ignored', schema.id);
              return schema.$id;
            }


            function _get$IdOrId(schema) {
              if (schema.$id && schema.id && schema.$id != schema.id)
                throw new Error('schema $id is different from id');
              return schema.$id || schema.id;
            }


            /**
             * Convert array of error message objects to string
             * @this   Ajv
             * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
             * @param  {Object} options optional options with properties `separator` and `dataVar`.
             * @return {String} human readable string with all errors descriptions
             */
            function errorsText(errors, options) {
              errors = errors || this.errors;
              if (!errors) return 'No errors';
              options = options || {};
              var separator = options.separator === undefined ? ', ' : options.separator;
              var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;

              var text = '';
              for (var i=0; i<errors.length; i++) {
                var e = errors[i];
                if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
              }
              return text.slice(0, -separator.length);
            }


            /**
             * Add custom format
             * @this   Ajv
             * @param {String} name format name
             * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
             * @return {Ajv} this for method chaining
             */
            function addFormat(name, format) {
              if (typeof format == 'string') format = new RegExp(format);
              this._formats[name] = format;
              return this;
            }


            function addDefaultMetaSchema(self) {
              var $dataSchema;
              if (self._opts.$data) {
                $dataSchema = require$$12;
                self.addMetaSchema($dataSchema, $dataSchema.$id, true);
              }
              if (self._opts.meta === false) return;
              var metaSchema = require$$13;
              if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
              self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
              self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
            }


            function addInitialSchemas(self) {
              var optsSchemas = self._opts.schemas;
              if (!optsSchemas) return;
              if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);
              else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
            }


            function addInitialFormats(self) {
              for (var name in self._opts.formats) {
                var format = self._opts.formats[name];
                self.addFormat(name, format);
              }
            }


            function addInitialKeywords(self) {
              for (var name in self._opts.keywords) {
                var keyword = self._opts.keywords[name];
                self.addKeyword(name, keyword);
              }
            }


            function checkUnique(self, id) {
              if (self._schemas[id] || self._refs[id])
                throw new Error('schema with key or id "' + id + '" already exists');
            }


            function getMetaSchemaOptions(self) {
              var metaOpts = util.copy(self._opts);
              for (var i=0; i<META_IGNORE_OPTIONS.length; i++)
                delete metaOpts[META_IGNORE_OPTIONS[i]];
              return metaOpts;
            }


            function setLogger(self) {
              var logger = self._opts.logger;
              if (logger === false) {
                self.logger = {log: noop, warn: noop, error: noop};
              } else {
                if (logger === undefined) logger = console;
                if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))
                  throw new Error('logger must implement log, warn and error methods');
                self.logger = logger;
              }
            }


            function noop() {}

            var ajv$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.assign(/*#__PURE__*/Object.create(null), ajv, {
                        'default': ajv
            }));

            var $schema = "http://json-schema.org/draft-07/schema#";
            var $id = "https://uniswap.org/tokenlist.schema.json";
            var title = "Uniswap Token List";
            var description = "Schema for lists of tokens compatible with the Uniswap Interface";
            var definitions = {
            	Version: {
            		type: "object",
            		description: "The version of the list, used in change detection",
            		examples: [
            			{
            				major: 1,
            				minor: 0,
            				patch: 0
            			}
            		],
            		additionalProperties: false,
            		properties: {
            			major: {
            				type: "integer",
            				description: "The major version of the list. Must be incremented when tokens are removed from the list or token addresses are changed.",
            				minimum: 0,
            				examples: [
            					1,
            					2
            				]
            			},
            			minor: {
            				type: "integer",
            				description: "The minor version of the list. Must be incremented when tokens are added to the list.",
            				minimum: 0,
            				examples: [
            					0,
            					1
            				]
            			},
            			patch: {
            				type: "integer",
            				description: "The patch version of the list. Must be incremented for any changes to the list.",
            				minimum: 0,
            				examples: [
            					0,
            					1
            				]
            			}
            		},
            		required: [
            			"major",
            			"minor",
            			"patch"
            		]
            	},
            	TagIdentifier: {
            		type: "string",
            		description: "The unique identifier of a tag",
            		minLength: 1,
            		maxLength: 10,
            		pattern: "^[\\w]+$",
            		examples: [
            			"compound",
            			"stablecoin"
            		]
            	},
            	ExtensionIdentifier: {
            		type: "string",
            		description: "The name of a token extension property",
            		minLength: 1,
            		maxLength: 40,
            		pattern: "^[\\w]+$",
            		examples: [
            			"color",
            			"is_fee_on_transfer",
            			"aliases"
            		]
            	},
            	ExtensionMap: {
            		type: "object",
            		description: "An object containing any arbitrary or vendor-specific token metadata",
            		maxProperties: 10,
            		propertyNames: {
            			$ref: "#/definitions/ExtensionIdentifier"
            		},
            		additionalProperties: {
            			$ref: "#/definitions/ExtensionValue"
            		},
            		examples: [
            			{
            				color: "#000000",
            				is_verified_by_me: true
            			},
            			{
            				"x-bridged-addresses-by-chain": {
            					"1": {
            						bridgeAddress: "0x4200000000000000000000000000000000000010",
            						tokenAddress: "0x4200000000000000000000000000000000000010"
            					}
            				}
            			}
            		]
            	},
            	ExtensionPrimitiveValue: {
            		anyOf: [
            			{
            				type: "string",
            				minLength: 1,
            				maxLength: 42,
            				examples: [
            					"#00000"
            				]
            			},
            			{
            				type: "boolean",
            				examples: [
            					true
            				]
            			},
            			{
            				type: "number",
            				examples: [
            					15
            				]
            			},
            			{
            				type: "null"
            			}
            		]
            	},
            	ExtensionValue: {
            		anyOf: [
            			{
            				$ref: "#/definitions/ExtensionPrimitiveValue"
            			},
            			{
            				type: "object",
            				maxProperties: 10,
            				propertyNames: {
            					$ref: "#/definitions/ExtensionIdentifier"
            				},
            				additionalProperties: {
            					$ref: "#/definitions/ExtensionValueInner0"
            				}
            			}
            		]
            	},
            	ExtensionValueInner0: {
            		anyOf: [
            			{
            				$ref: "#/definitions/ExtensionPrimitiveValue"
            			},
            			{
            				type: "object",
            				maxProperties: 10,
            				propertyNames: {
            					$ref: "#/definitions/ExtensionIdentifier"
            				},
            				additionalProperties: {
            					$ref: "#/definitions/ExtensionValueInner1"
            				}
            			}
            		]
            	},
            	ExtensionValueInner1: {
            		anyOf: [
            			{
            				$ref: "#/definitions/ExtensionPrimitiveValue"
            			}
            		]
            	},
            	TagDefinition: {
            		type: "object",
            		description: "Definition of a tag that can be associated with a token via its identifier",
            		additionalProperties: false,
            		properties: {
            			name: {
            				type: "string",
            				description: "The name of the tag",
            				pattern: "^[ \\w]+$",
            				minLength: 1,
            				maxLength: 20
            			},
            			description: {
            				type: "string",
            				description: "A user-friendly description of the tag",
            				pattern: "^[ \\w\\.,:]+$",
            				minLength: 1,
            				maxLength: 200
            			}
            		},
            		required: [
            			"name",
            			"description"
            		],
            		examples: [
            			{
            				name: "Stablecoin",
            				description: "A token with value pegged to another asset"
            			}
            		]
            	},
            	TokenInfo: {
            		type: "object",
            		description: "Metadata for a single token in a token list",
            		additionalProperties: false,
            		properties: {
            			chainId: {
            				type: "integer",
            				description: "The chain ID of the Ethereum network where this token is deployed",
            				minimum: 1,
            				examples: [
            					1,
            					42
            				]
            			},
            			address: {
            				type: "string",
            				description: "The checksummed address of the token on the specified chain ID",
            				pattern: "^0x[a-fA-F0-9]{40}$",
            				examples: [
            					"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
            				]
            			},
            			decimals: {
            				type: "integer",
            				description: "The number of decimals for the token balance",
            				minimum: 0,
            				maximum: 255,
            				examples: [
            					18
            				]
            			},
            			name: {
            				type: "string",
            				description: "The name of the token",
            				minLength: 1,
            				maxLength: 40,
            				pattern: "^[ \\w.'+\\-%/À-ÖØ-öø-ÿ:&\\[\\]\\(\\)]+$",
            				examples: [
            					"USD Coin"
            				]
            			},
            			symbol: {
            				type: "string",
            				description: "The symbol for the token; must be alphanumeric",
            				pattern: "^[a-zA-Z0-9+\\-%/$.]+$",
            				minLength: 1,
            				maxLength: 20,
            				examples: [
            					"USDC"
            				]
            			},
            			logoURI: {
            				type: "string",
            				description: "A URI to the token logo asset; if not set, interface will attempt to find a logo based on the token address; suggest SVG or PNG of size 64x64",
            				format: "uri",
            				examples: [
            					"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM"
            				]
            			},
            			tags: {
            				type: "array",
            				description: "An array of tag identifiers associated with the token; tags are defined at the list level",
            				items: {
            					$ref: "#/definitions/TagIdentifier"
            				},
            				maxItems: 10,
            				examples: [
            					"stablecoin",
            					"compound"
            				]
            			},
            			extensions: {
            				$ref: "#/definitions/ExtensionMap"
            			}
            		},
            		required: [
            			"chainId",
            			"address",
            			"decimals",
            			"name",
            			"symbol"
            		]
            	}
            };
            var type = "object";
            var additionalProperties = false;
            var properties = {
            	name: {
            		type: "string",
            		description: "The name of the token list",
            		minLength: 1,
            		maxLength: 20,
            		pattern: "^[\\w ]+$",
            		examples: [
            			"My Token List"
            		]
            	},
            	timestamp: {
            		type: "string",
            		format: "date-time",
            		description: "The timestamp of this list version; i.e. when this immutable version of the list was created"
            	},
            	version: {
            		$ref: "#/definitions/Version"
            	},
            	tokens: {
            		type: "array",
            		description: "The list of tokens included in the list",
            		items: {
            			$ref: "#/definitions/TokenInfo"
            		},
            		minItems: 1,
            		maxItems: 10000
            	},
            	keywords: {
            		type: "array",
            		description: "Keywords associated with the contents of the list; may be used in list discoverability",
            		items: {
            			type: "string",
            			description: "A keyword to describe the contents of the list",
            			minLength: 1,
            			maxLength: 20,
            			pattern: "^[\\w ]+$",
            			examples: [
            				"compound",
            				"lending",
            				"personal tokens"
            			]
            		},
            		maxItems: 20,
            		uniqueItems: true
            	},
            	tags: {
            		type: "object",
            		description: "A mapping of tag identifiers to their name and description",
            		propertyNames: {
            			$ref: "#/definitions/TagIdentifier"
            		},
            		additionalProperties: {
            			$ref: "#/definitions/TagDefinition"
            		},
            		maxProperties: 20,
            		examples: [
            			{
            				stablecoin: {
            					name: "Stablecoin",
            					description: "A token with value pegged to another asset"
            				}
            			}
            		]
            	},
            	logoURI: {
            		type: "string",
            		description: "A URI for the logo of the token list; prefer SVG or PNG of size 256x256",
            		format: "uri",
            		examples: [
            			"ipfs://QmXfzKRvjZz3u5JRgC4v5mGVbm9ahrUiB4DgzHBsnWbTMM"
            		]
            	}
            };
            var required = [
            	"name",
            	"timestamp",
            	"version",
            	"tokens"
            ];
            var tokenlist_schema = {
            	$schema: $schema,
            	$id: $id,
            	title: title,
            	description: description,
            	definitions: definitions,
            	type: type,
            	additionalProperties: additionalProperties,
            	properties: properties,
            	required: required
            };

            var tokenlist_schema$1 = /*#__PURE__*/Object.freeze({
                        __proto__: null,
                        $schema: $schema,
                        $id: $id,
                        title: title,
                        description: description,
                        definitions: definitions,
                        type: type,
                        additionalProperties: additionalProperties,
                        properties: properties,
                        required: required,
                        'default': tokenlist_schema
            });

}(React));
//# sourceMappingURL=swap.js.map
